// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_get_deployments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeploymentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.device_name {
        object.key("DeviceName").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_device_registration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceRegistrationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.device_name {
        object.key("DeviceName").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_heartbeat_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendHeartbeatInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.agent_metrics {
        let mut array_6 = object.key("AgentMetrics").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_edge_metric(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.agent_version {
        object.key("AgentVersion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.deployment_result {
        let mut object_11 = object.key("DeploymentResult").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_result(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.device_name {
        object.key("DeviceName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.models {
        let mut array_15 = object.key("Models").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.dimension {
        object.key("Dimension").string(var_18.as_str());
    }
    if let Some(var_19) = &input.metric_name {
        object.key("MetricName").string(var_19.as_str());
    }
    if input.value != 0.0 {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.value).into()),
        );
    }
    if let Some(var_20) = &input.timestamp {
        object
            .key("Timestamp")
            .date_time(var_20, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.deployment_name {
        object.key("DeploymentName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.deployment_status {
        object.key("DeploymentStatus").string(var_22.as_str());
    }
    if let Some(var_23) = &input.deployment_status_message {
        object
            .key("DeploymentStatusMessage")
            .string(var_23.as_str());
    }
    if let Some(var_24) = &input.deployment_start_time {
        object
            .key("DeploymentStartTime")
            .date_time(var_24, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_25) = &input.deployment_end_time {
        object
            .key("DeploymentEndTime")
            .date_time(var_25, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_26) = &input.deployment_models {
        let mut array_27 = object.key("DeploymentModels").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_model(
                    &mut object_29,
                    item_28,
                )?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Model,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.model_name {
        object.key("ModelName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.model_version {
        object.key("ModelVersion").string(var_31.as_str());
    }
    if let Some(var_32) = &input.latest_sample_time {
        object
            .key("LatestSampleTime")
            .date_time(var_32, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_33) = &input.latest_inference {
        object
            .key("LatestInference")
            .date_time(var_33, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_34) = &input.model_metrics {
        let mut array_35 = object.key("ModelMetrics").start_array();
        for item_36 in var_34 {
            {
                let mut object_37 = array_35.value().start_object();
                crate::json_ser::serialize_structure_crate_model_edge_metric(
                    &mut object_37,
                    item_36,
                )?;
                object_37.finish();
            }
        }
        array_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_model(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentModel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.model_handle {
        object.key("ModelHandle").string(var_38.as_str());
    }
    if let Some(var_39) = &input.model_name {
        object.key("ModelName").string(var_39.as_str());
    }
    if let Some(var_40) = &input.model_version {
        object.key("ModelVersion").string(var_40.as_str());
    }
    if let Some(var_41) = &input.desired_state {
        object.key("DesiredState").string(var_41.as_str());
    }
    if let Some(var_42) = &input.state {
        object.key("State").string(var_42.as_str());
    }
    if let Some(var_43) = &input.status {
        object.key("Status").string(var_43.as_str());
    }
    if let Some(var_44) = &input.status_reason {
        object.key("StatusReason").string(var_44.as_str());
    }
    if let Some(var_45) = &input.rollback_failure_reason {
        object.key("RollbackFailureReason").string(var_45.as_str());
    }
    Ok(())
}
