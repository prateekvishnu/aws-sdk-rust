// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_describe_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDescribeModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.model_package_arn_list {
        let mut array_12 = object.key("ModelPackageArnList").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.action_name {
        object.key("ActionName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.source {
        let mut object_16 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_action_source(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.action_type {
        object.key("ActionType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.description {
        object.key("Description").string(var_18.as_str());
    }
    if let Some(var_19) = &input.status {
        object.key("Status").string(var_19.as_str());
    }
    if let Some(var_20) = &input.properties {
        let mut object_21 = object.key("Properties").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.metadata_properties {
        let mut object_25 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_25,
            var_24,
        )?;
        object_25.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_31.as_str());
    }
    if let Some(var_32) = &input.training_specification {
        let mut object_33 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_training_specification(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    if let Some(var_34) = &input.inference_specification {
        let mut object_35 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    if let Some(var_36) = &input.validation_specification {
        let mut object_37 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_validation_specification(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.domain_id {
        object.key("DomainId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.user_profile_name {
        object.key("UserProfileName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.app_type {
        object.key("AppType").string(var_44.as_str());
    }
    if let Some(var_45) = &input.app_name {
        object.key("AppName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.tags {
        let mut array_47 = object.key("Tags").start_array();
        for item_48 in var_46 {
            {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_49, item_48)?;
                object_49.finish();
            }
        }
        array_47.finish();
    }
    if let Some(var_50) = &input.resource_spec {
        let mut object_51 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_51, var_50)?;
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.tags {
        let mut array_54 = object.key("Tags").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.kernel_gateway_image_config {
        let mut object_58 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.artifact_name {
        object.key("ArtifactName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.source {
        let mut object_61 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_61, var_60)?;
        object_61.finish();
    }
    if let Some(var_62) = &input.artifact_type {
        object.key("ArtifactType").string(var_62.as_str());
    }
    if let Some(var_63) = &input.properties {
        let mut object_64 = object.key("Properties").start_object();
        for (key_65, value_66) in var_63 {
            {
                object_64.key(key_65).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.metadata_properties {
        let mut object_68 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_68,
            var_67,
        )?;
        object_68.finish();
    }
    if let Some(var_69) = &input.tags {
        let mut array_70 = object.key("Tags").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_73.as_str());
    }
    if let Some(var_74) = &input.input_data_config {
        let mut array_75 = object.key("InputDataConfig").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auto_ml_channel(
                    &mut object_77,
                    item_76,
                )?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.output_data_config {
        let mut object_79 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_output_data_config(
            &mut object_79,
            var_78,
        )?;
        object_79.finish();
    }
    if let Some(var_80) = &input.problem_type {
        object.key("ProblemType").string(var_80.as_str());
    }
    if let Some(var_81) = &input.auto_ml_job_objective {
        let mut object_82 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_objective(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.auto_ml_job_config {
        let mut object_84 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_config(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.role_arn {
        object.key("RoleArn").string(var_85.as_str());
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_89, item_88)?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    if let Some(var_90) = &input.model_deploy_config {
        let mut object_91 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_deploy_config(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_92.as_str());
    }
    if let Some(var_93) = &input.git_config {
        let mut object_94 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.role_arn {
        object.key("RoleArn").string(var_100.as_str());
    }
    if let Some(var_101) = &input.model_package_version_arn {
        object
            .key("ModelPackageVersionArn")
            .string(var_101.as_str());
    }
    if let Some(var_102) = &input.input_config {
        let mut object_103 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_config(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.output_config {
        let mut object_105 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.vpc_config {
        let mut object_107 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_neo_vpc_config(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.stopping_condition {
        let mut object_109 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.tags {
        let mut array_111 = object.key("Tags").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_113, item_112)?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.context_name {
        object.key("ContextName").string(var_114.as_str());
    }
    if let Some(var_115) = &input.source {
        let mut object_116 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_context_source(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.context_type {
        object.key("ContextType").string(var_117.as_str());
    }
    if let Some(var_118) = &input.description {
        object.key("Description").string(var_118.as_str());
    }
    if let Some(var_119) = &input.properties {
        let mut object_120 = object.key("Properties").start_object();
        for (key_121, value_122) in var_119 {
            {
                object_120.key(key_121).string(value_122.as_str());
            }
        }
        object_120.finish();
    }
    if let Some(var_123) = &input.tags {
        let mut array_124 = object.key("Tags").start_array();
        for item_125 in var_123 {
            {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_126, item_125)?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_127.as_str());
    }
    if let Some(var_128) = &input.data_quality_baseline_config {
        let mut object_129 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_baseline_config(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    if let Some(var_130) = &input.data_quality_app_specification {
        let mut object_131 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_app_specification(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    if let Some(var_132) = &input.data_quality_job_input {
        let mut object_133 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_job_input(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    if let Some(var_134) = &input.data_quality_job_output_config {
        let mut object_135 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_135,
            var_134,
        )?;
        object_135.finish();
    }
    if let Some(var_136) = &input.job_resources {
        let mut object_137 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_137,
            var_136,
        )?;
        object_137.finish();
    }
    if let Some(var_138) = &input.network_config {
        let mut object_139 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    if let Some(var_140) = &input.role_arn {
        object.key("RoleArn").string(var_140.as_str());
    }
    if let Some(var_141) = &input.stopping_condition {
        let mut object_142 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.tags {
        let mut array_144 = object.key("Tags").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_146, item_145)?;
                object_146.finish();
            }
        }
        array_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_147.as_str());
    }
    if let Some(var_148) = &input.role_arn {
        object.key("RoleArn").string(var_148.as_str());
    }
    if let Some(var_149) = &input.description {
        object.key("Description").string(var_149.as_str());
    }
    if let Some(var_150) = &input.output_config {
        let mut object_151 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_151,
            var_150,
        )?;
        object_151.finish();
    }
    if let Some(var_152) = &input.tags {
        let mut array_153 = object.key("Tags").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_155, item_154)?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.domain_name {
        object.key("DomainName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.auth_mode {
        object.key("AuthMode").string(var_158.as_str());
    }
    if let Some(var_159) = &input.default_user_settings {
        let mut object_160 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.subnet_ids {
        let mut array_162 = object.key("SubnetIds").start_array();
        for item_163 in var_161 {
            {
                array_162.value().string(item_163.as_str());
            }
        }
        array_162.finish();
    }
    if let Some(var_164) = &input.vpc_id {
        object.key("VpcId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.tags {
        let mut array_166 = object.key("Tags").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_169.as_str());
    }
    if let Some(var_170) = &input.home_efs_file_system_kms_key_id {
        object
            .key("HomeEfsFileSystemKmsKeyId")
            .string(var_170.as_str());
    }
    if let Some(var_171) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.app_security_group_management {
        object
            .key("AppSecurityGroupManagement")
            .string(var_172.as_str());
    }
    if let Some(var_173) = &input.domain_settings {
        let mut object_174 = object.key("DomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings(&mut object_174, var_173)?;
        object_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_deployment_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgeDeploymentPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_175.as_str());
    }
    if let Some(var_176) = &input.model_configs {
        let mut array_177 = object.key("ModelConfigs").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_edge_deployment_model_config(
                    &mut object_179,
                    item_178,
                )?;
                object_179.finish();
            }
        }
        array_177.finish();
    }
    if let Some(var_180) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_180.as_str());
    }
    if let Some(var_181) = &input.stages {
        let mut array_182 = object.key("Stages").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_stage(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.tags {
        let mut array_186 = object.key("Tags").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_188, item_187)?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_189.as_str());
    }
    if let Some(var_190) = &input.stages {
        let mut array_191 = object.key("Stages").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_stage(
                    &mut object_193,
                    item_192,
                )?;
                object_193.finish();
            }
        }
        array_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_194.as_str());
    }
    if let Some(var_195) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_195.as_str());
    }
    if let Some(var_196) = &input.model_name {
        object.key("ModelName").string(var_196.as_str());
    }
    if let Some(var_197) = &input.model_version {
        object.key("ModelVersion").string(var_197.as_str());
    }
    if let Some(var_198) = &input.role_arn {
        object.key("RoleArn").string(var_198.as_str());
    }
    if let Some(var_199) = &input.output_config {
        let mut object_200 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_200,
            var_199,
        )?;
        object_200.finish();
    }
    if let Some(var_201) = &input.resource_key {
        object.key("ResourceKey").string(var_201.as_str());
    }
    if let Some(var_202) = &input.tags {
        let mut array_203 = object.key("Tags").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_205, item_204)?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.endpoint_name {
        object.key("EndpointName").string(var_206.as_str());
    }
    if let Some(var_207) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_207.as_str());
    }
    if let Some(var_208) = &input.deployment_config {
        let mut object_209 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(
            &mut object_209,
            var_208,
        )?;
        object_209.finish();
    }
    if let Some(var_210) = &input.tags {
        let mut array_211 = object.key("Tags").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_213, item_212)?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_214.as_str());
    }
    if let Some(var_215) = &input.production_variants {
        let mut array_216 = object.key("ProductionVariants").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_production_variant(
                    &mut object_218,
                    item_217,
                )?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.data_capture_config {
        let mut object_220 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_capture_config(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_225.as_str());
    }
    if let Some(var_226) = &input.async_inference_config {
        let mut object_227 = object.key("AsyncInferenceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_config(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.experiment_name {
        object.key("ExperimentName").string(var_228.as_str());
    }
    if let Some(var_229) = &input.display_name {
        object.key("DisplayName").string(var_229.as_str());
    }
    if let Some(var_230) = &input.description {
        object.key("Description").string(var_230.as_str());
    }
    if let Some(var_231) = &input.tags {
        let mut array_232 = object.key("Tags").start_array();
        for item_233 in var_231 {
            {
                let mut object_234 = array_232.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_234, item_233)?;
                object_234.finish();
            }
        }
        array_232.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_235.as_str());
    }
    if let Some(var_236) = &input.record_identifier_feature_name {
        object
            .key("RecordIdentifierFeatureName")
            .string(var_236.as_str());
    }
    if let Some(var_237) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_237.as_str());
    }
    if let Some(var_238) = &input.feature_definitions {
        let mut array_239 = object.key("FeatureDefinitions").start_array();
        for item_240 in var_238 {
            {
                let mut object_241 = array_239.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(
                    &mut object_241,
                    item_240,
                )?;
                object_241.finish();
            }
        }
        array_239.finish();
    }
    if let Some(var_242) = &input.online_store_config {
        let mut object_243 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_config(
            &mut object_243,
            var_242,
        )?;
        object_243.finish();
    }
    if let Some(var_244) = &input.offline_store_config {
        let mut object_245 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_offline_store_config(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    if let Some(var_246) = &input.role_arn {
        object.key("RoleArn").string(var_246.as_str());
    }
    if let Some(var_247) = &input.description {
        object.key("Description").string(var_247.as_str());
    }
    if let Some(var_248) = &input.tags {
        let mut array_249 = object.key("Tags").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_251, item_250)?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_252.as_str());
    }
    if let Some(var_253) = &input.human_loop_request_source {
        let mut object_254 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_request_source(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.human_loop_activation_config {
        let mut object_256 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_config(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    if let Some(var_257) = &input.human_loop_config {
        let mut object_258 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_config(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    if let Some(var_259) = &input.output_config {
        let mut object_260 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition_output_config(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    if let Some(var_261) = &input.role_arn {
        object.key("RoleArn").string(var_261.as_str());
    }
    if let Some(var_262) = &input.tags {
        let mut array_263 = object.key("Tags").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_265, item_264)?;
                object_265.finish();
            }
        }
        array_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_266.as_str());
    }
    if let Some(var_267) = &input.ui_template {
        let mut object_268 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_268, var_267)?;
        object_268.finish();
    }
    if let Some(var_269) = &input.tags {
        let mut array_270 = object.key("Tags").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_272, item_271)?;
                object_272.finish();
            }
        }
        array_270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_273.as_str());
    }
    if let Some(var_274) = &input.hyper_parameter_tuning_job_config {
        let mut object_275 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_config(
            &mut object_275,
            var_274,
        )?;
        object_275.finish();
    }
    if let Some(var_276) = &input.training_job_definition {
        let mut object_277 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(
            &mut object_277,
            var_276,
        )?;
        object_277.finish();
    }
    if let Some(var_278) = &input.training_job_definitions {
        let mut array_279 = object.key("TrainingJobDefinitions").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(&mut object_281, item_280)?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.warm_start_config {
        let mut object_283 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(&mut object_283, var_282)?;
        object_283.finish();
    }
    if let Some(var_284) = &input.tags {
        let mut array_285 = object.key("Tags").start_array();
        for item_286 in var_284 {
            {
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_287, item_286)?;
                object_287.finish();
            }
        }
        array_285.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.description {
        object.key("Description").string(var_288.as_str());
    }
    if let Some(var_289) = &input.display_name {
        object.key("DisplayName").string(var_289.as_str());
    }
    if let Some(var_290) = &input.image_name {
        object.key("ImageName").string(var_290.as_str());
    }
    if let Some(var_291) = &input.role_arn {
        object.key("RoleArn").string(var_291.as_str());
    }
    if let Some(var_292) = &input.tags {
        let mut array_293 = object.key("Tags").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_295, item_294)?;
                object_295.finish();
            }
        }
        array_293.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.base_image {
        object.key("BaseImage").string(var_296.as_str());
    }
    if let Some(var_297) = &input.client_token {
        object.key("ClientToken").string(var_297.as_str());
    }
    if let Some(var_298) = &input.image_name {
        object.key("ImageName").string(var_298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.job_name {
        object.key("JobName").string(var_299.as_str());
    }
    if let Some(var_300) = &input.job_type {
        object.key("JobType").string(var_300.as_str());
    }
    if let Some(var_301) = &input.role_arn {
        object.key("RoleArn").string(var_301.as_str());
    }
    if let Some(var_302) = &input.input_config {
        let mut object_303 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_input_config(
            &mut object_303,
            var_302,
        )?;
        object_303.finish();
    }
    if let Some(var_304) = &input.job_description {
        object.key("JobDescription").string(var_304.as_str());
    }
    if let Some(var_305) = &input.stopping_conditions {
        let mut object_306 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_stopping_conditions(
            &mut object_306,
            var_305,
        )?;
        object_306.finish();
    }
    if let Some(var_307) = &input.output_config {
        let mut object_308 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_output_config(
            &mut object_308,
            var_307,
        )?;
        object_308.finish();
    }
    if let Some(var_309) = &input.tags {
        let mut array_310 = object.key("Tags").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_312, item_311)?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_313.as_str());
    }
    if let Some(var_314) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_314.as_str());
    }
    if let Some(var_315) = &input.input_config {
        let mut object_316 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_input_config(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.output_config {
        let mut object_318 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_output_config(
            &mut object_318,
            var_317,
        )?;
        object_318.finish();
    }
    if let Some(var_319) = &input.role_arn {
        object.key("RoleArn").string(var_319.as_str());
    }
    if let Some(var_320) = &input.label_category_config_s3_uri {
        object
            .key("LabelCategoryConfigS3Uri")
            .string(var_320.as_str());
    }
    if let Some(var_321) = &input.stopping_conditions {
        let mut object_322 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_stopping_conditions(
            &mut object_322,
            var_321,
        )?;
        object_322.finish();
    }
    if let Some(var_323) = &input.labeling_job_algorithms_config {
        let mut object_324 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_algorithms_config(
            &mut object_324,
            var_323,
        )?;
        object_324.finish();
    }
    if let Some(var_325) = &input.human_task_config {
        let mut object_326 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_task_config(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    if let Some(var_327) = &input.tags {
        let mut array_328 = object.key("Tags").start_array();
        for item_329 in var_327 {
            {
                let mut object_330 = array_328.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_330, item_329)?;
                object_330.finish();
            }
        }
        array_328.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.model_name {
        object.key("ModelName").string(var_331.as_str());
    }
    if let Some(var_332) = &input.primary_container {
        let mut object_333 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_crate_model_container_definition(
            &mut object_333,
            var_332,
        )?;
        object_333.finish();
    }
    if let Some(var_334) = &input.containers {
        let mut array_335 = object.key("Containers").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_definition(
                    &mut object_337,
                    item_336,
                )?;
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if let Some(var_338) = &input.inference_execution_config {
        let mut object_339 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_execution_config(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    if let Some(var_340) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_340.as_str());
    }
    if let Some(var_341) = &input.tags {
        let mut array_342 = object.key("Tags").start_array();
        for item_343 in var_341 {
            {
                let mut object_344 = array_342.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_344, item_343)?;
                object_344.finish();
            }
        }
        array_342.finish();
    }
    if let Some(var_345) = &input.vpc_config {
        let mut object_346 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_346, var_345)?;
        object_346.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_347.as_str());
    }
    if let Some(var_348) = &input.model_bias_baseline_config {
        let mut object_349 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_baseline_config(
            &mut object_349,
            var_348,
        )?;
        object_349.finish();
    }
    if let Some(var_350) = &input.model_bias_app_specification {
        let mut object_351 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_app_specification(
            &mut object_351,
            var_350,
        )?;
        object_351.finish();
    }
    if let Some(var_352) = &input.model_bias_job_input {
        let mut object_353 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_job_input(
            &mut object_353,
            var_352,
        )?;
        object_353.finish();
    }
    if let Some(var_354) = &input.model_bias_job_output_config {
        let mut object_355 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_355,
            var_354,
        )?;
        object_355.finish();
    }
    if let Some(var_356) = &input.job_resources {
        let mut object_357 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_357,
            var_356,
        )?;
        object_357.finish();
    }
    if let Some(var_358) = &input.network_config {
        let mut object_359 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_359,
            var_358,
        )?;
        object_359.finish();
    }
    if let Some(var_360) = &input.role_arn {
        object.key("RoleArn").string(var_360.as_str());
    }
    if let Some(var_361) = &input.stopping_condition {
        let mut object_362 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if let Some(var_363) = &input.tags {
        let mut array_364 = object.key("Tags").start_array();
        for item_365 in var_363 {
            {
                let mut object_366 = array_364.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_366, item_365)?;
                object_366.finish();
            }
        }
        array_364.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_367.as_str());
    }
    if let Some(var_368) = &input.model_explainability_baseline_config {
        let mut object_369 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_baseline_config(
            &mut object_369,
            var_368,
        )?;
        object_369.finish();
    }
    if let Some(var_370) = &input.model_explainability_app_specification {
        let mut object_371 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_app_specification(
            &mut object_371,
            var_370,
        )?;
        object_371.finish();
    }
    if let Some(var_372) = &input.model_explainability_job_input {
        let mut object_373 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_job_input(
            &mut object_373,
            var_372,
        )?;
        object_373.finish();
    }
    if let Some(var_374) = &input.model_explainability_job_output_config {
        let mut object_375 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_375,
            var_374,
        )?;
        object_375.finish();
    }
    if let Some(var_376) = &input.job_resources {
        let mut object_377 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_377,
            var_376,
        )?;
        object_377.finish();
    }
    if let Some(var_378) = &input.network_config {
        let mut object_379 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_379,
            var_378,
        )?;
        object_379.finish();
    }
    if let Some(var_380) = &input.role_arn {
        object.key("RoleArn").string(var_380.as_str());
    }
    if let Some(var_381) = &input.stopping_condition {
        let mut object_382 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_382,
            var_381,
        )?;
        object_382.finish();
    }
    if let Some(var_383) = &input.tags {
        let mut array_384 = object.key("Tags").start_array();
        for item_385 in var_383 {
            {
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_386, item_385)?;
                object_386.finish();
            }
        }
        array_384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.model_package_name {
        object.key("ModelPackageName").string(var_387.as_str());
    }
    if let Some(var_388) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_388.as_str());
    }
    if let Some(var_389) = &input.model_package_description {
        object
            .key("ModelPackageDescription")
            .string(var_389.as_str());
    }
    if let Some(var_390) = &input.inference_specification {
        let mut object_391 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(
            &mut object_391,
            var_390,
        )?;
        object_391.finish();
    }
    if let Some(var_392) = &input.validation_specification {
        let mut object_393 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_package_validation_specification(
            &mut object_393,
            var_392,
        )?;
        object_393.finish();
    }
    if let Some(var_394) = &input.source_algorithm_specification {
        let mut object_395 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_source_algorithm_specification(
            &mut object_395,
            var_394,
        )?;
        object_395.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_396) = &input.tags {
        let mut array_397 = object.key("Tags").start_array();
        for item_398 in var_396 {
            {
                let mut object_399 = array_397.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_399, item_398)?;
                object_399.finish();
            }
        }
        array_397.finish();
    }
    if let Some(var_400) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_400.as_str());
    }
    if let Some(var_401) = &input.metadata_properties {
        let mut object_402 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_402,
            var_401,
        )?;
        object_402.finish();
    }
    if let Some(var_403) = &input.model_metrics {
        let mut object_404 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metrics(&mut object_404, var_403)?;
        object_404.finish();
    }
    if let Some(var_405) = &input.client_token {
        object.key("ClientToken").string(var_405.as_str());
    }
    if let Some(var_406) = &input.customer_metadata_properties {
        let mut object_407 = object.key("CustomerMetadataProperties").start_object();
        for (key_408, value_409) in var_406 {
            {
                object_407.key(key_408).string(value_409.as_str());
            }
        }
        object_407.finish();
    }
    if let Some(var_410) = &input.drift_check_baselines {
        let mut object_411 = object.key("DriftCheckBaselines").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_baselines(
            &mut object_411,
            var_410,
        )?;
        object_411.finish();
    }
    if let Some(var_412) = &input.domain {
        object.key("Domain").string(var_412.as_str());
    }
    if let Some(var_413) = &input.task {
        object.key("Task").string(var_413.as_str());
    }
    if let Some(var_414) = &input.sample_payload_url {
        object.key("SamplePayloadUrl").string(var_414.as_str());
    }
    if let Some(var_415) = &input.additional_inference_specifications {
        let mut array_416 = object
            .key("AdditionalInferenceSpecifications")
            .start_array();
        for item_417 in var_415 {
            {
                let mut object_418 = array_416.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_418, item_417)?;
                object_418.finish();
            }
        }
        array_416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_419.as_str());
    }
    if let Some(var_420) = &input.model_package_group_description {
        object
            .key("ModelPackageGroupDescription")
            .string(var_420.as_str());
    }
    if let Some(var_421) = &input.tags {
        let mut array_422 = object.key("Tags").start_array();
        for item_423 in var_421 {
            {
                let mut object_424 = array_422.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_424, item_423)?;
                object_424.finish();
            }
        }
        array_422.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_425.as_str());
    }
    if let Some(var_426) = &input.model_quality_baseline_config {
        let mut object_427 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_baseline_config(
            &mut object_427,
            var_426,
        )?;
        object_427.finish();
    }
    if let Some(var_428) = &input.model_quality_app_specification {
        let mut object_429 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_app_specification(
            &mut object_429,
            var_428,
        )?;
        object_429.finish();
    }
    if let Some(var_430) = &input.model_quality_job_input {
        let mut object_431 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_job_input(
            &mut object_431,
            var_430,
        )?;
        object_431.finish();
    }
    if let Some(var_432) = &input.model_quality_job_output_config {
        let mut object_433 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_433,
            var_432,
        )?;
        object_433.finish();
    }
    if let Some(var_434) = &input.job_resources {
        let mut object_435 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_435,
            var_434,
        )?;
        object_435.finish();
    }
    if let Some(var_436) = &input.network_config {
        let mut object_437 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(
            &mut object_437,
            var_436,
        )?;
        object_437.finish();
    }
    if let Some(var_438) = &input.role_arn {
        object.key("RoleArn").string(var_438.as_str());
    }
    if let Some(var_439) = &input.stopping_condition {
        let mut object_440 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_440,
            var_439,
        )?;
        object_440.finish();
    }
    if let Some(var_441) = &input.tags {
        let mut array_442 = object.key("Tags").start_array();
        for item_443 in var_441 {
            {
                let mut object_444 = array_442.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_444, item_443)?;
                object_444.finish();
            }
        }
        array_442.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_445.as_str());
    }
    if let Some(var_446) = &input.monitoring_schedule_config {
        let mut object_447 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_447,
            var_446,
        )?;
        object_447.finish();
    }
    if let Some(var_448) = &input.tags {
        let mut array_449 = object.key("Tags").start_array();
        for item_450 in var_448 {
            {
                let mut object_451 = array_449.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_451, item_450)?;
                object_451.finish();
            }
        }
        array_449.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_452.as_str());
    }
    if let Some(var_453) = &input.instance_type {
        object.key("InstanceType").string(var_453.as_str());
    }
    if let Some(var_454) = &input.subnet_id {
        object.key("SubnetId").string(var_454.as_str());
    }
    if let Some(var_455) = &input.security_group_ids {
        let mut array_456 = object.key("SecurityGroupIds").start_array();
        for item_457 in var_455 {
            {
                array_456.value().string(item_457.as_str());
            }
        }
        array_456.finish();
    }
    if let Some(var_458) = &input.role_arn {
        object.key("RoleArn").string(var_458.as_str());
    }
    if let Some(var_459) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_459.as_str());
    }
    if let Some(var_460) = &input.tags {
        let mut array_461 = object.key("Tags").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_463, item_462)?;
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_464.as_str());
    }
    if let Some(var_465) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_465.as_str());
    }
    if let Some(var_466) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_466).into()),
        );
    }
    if let Some(var_467) = &input.accelerator_types {
        let mut array_468 = object.key("AcceleratorTypes").start_array();
        for item_469 in var_467 {
            {
                array_468.value().string(item_469.as_str());
            }
        }
        array_468.finish();
    }
    if let Some(var_470) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_470.as_str());
    }
    if let Some(var_471) = &input.additional_code_repositories {
        let mut array_472 = object.key("AdditionalCodeRepositories").start_array();
        for item_473 in var_471 {
            {
                array_472.value().string(item_473.as_str());
            }
        }
        array_472.finish();
    }
    if let Some(var_474) = &input.root_access {
        object.key("RootAccess").string(var_474.as_str());
    }
    if let Some(var_475) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_475.as_str());
    }
    if let Some(var_476) = &input.instance_metadata_service_configuration {
        let mut object_477 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(
            &mut object_477,
            var_476,
        )?;
        object_477.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_478.as_str());
    }
    if let Some(var_479) = &input.on_create {
        let mut array_480 = object.key("OnCreate").start_array();
        for item_481 in var_479 {
            {
                let mut object_482 = array_480.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_482,
                    item_481,
                )?;
                object_482.finish();
            }
        }
        array_480.finish();
    }
    if let Some(var_483) = &input.on_start {
        let mut array_484 = object.key("OnStart").start_array();
        for item_485 in var_483 {
            {
                let mut object_486 = array_484.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_486,
                    item_485,
                )?;
                object_486.finish();
            }
        }
        array_484.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.pipeline_name {
        object.key("PipelineName").string(var_487.as_str());
    }
    if let Some(var_488) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_488.as_str());
    }
    if let Some(var_489) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_489.as_str());
    }
    if let Some(var_490) = &input.pipeline_definition_s3_location {
        let mut object_491 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(
            &mut object_491,
            var_490,
        )?;
        object_491.finish();
    }
    if let Some(var_492) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_492.as_str());
    }
    if let Some(var_493) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_493.as_str());
    }
    if let Some(var_494) = &input.role_arn {
        object.key("RoleArn").string(var_494.as_str());
    }
    if let Some(var_495) = &input.tags {
        let mut array_496 = object.key("Tags").start_array();
        for item_497 in var_495 {
            {
                let mut object_498 = array_496.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_498, item_497)?;
                object_498.finish();
            }
        }
        array_496.finish();
    }
    if let Some(var_499) = &input.parallelism_configuration {
        let mut object_500 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_500,
            var_499,
        )?;
        object_500.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_domain_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.domain_id {
        object.key("DomainId").string(var_501.as_str());
    }
    if let Some(var_502) = &input.user_profile_name {
        object.key("UserProfileName").string(var_502.as_str());
    }
    if let Some(var_503) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_503).into()),
        );
    }
    if let Some(var_504) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_504).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_notebook_instance_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_505.as_str());
    }
    if let Some(var_506) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_506).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.processing_inputs {
        let mut array_508 = object.key("ProcessingInputs").start_array();
        for item_509 in var_507 {
            {
                let mut object_510 = array_508.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_input(
                    &mut object_510,
                    item_509,
                )?;
                object_510.finish();
            }
        }
        array_508.finish();
    }
    if let Some(var_511) = &input.processing_output_config {
        let mut object_512 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_output_config(
            &mut object_512,
            var_511,
        )?;
        object_512.finish();
    }
    if let Some(var_513) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_513.as_str());
    }
    if let Some(var_514) = &input.processing_resources {
        let mut object_515 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_resources(
            &mut object_515,
            var_514,
        )?;
        object_515.finish();
    }
    if let Some(var_516) = &input.stopping_condition {
        let mut object_517 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_stopping_condition(
            &mut object_517,
            var_516,
        )?;
        object_517.finish();
    }
    if let Some(var_518) = &input.app_specification {
        let mut object_519 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_app_specification(
            &mut object_519,
            var_518,
        )?;
        object_519.finish();
    }
    if let Some(var_520) = &input.environment {
        let mut object_521 = object.key("Environment").start_object();
        for (key_522, value_523) in var_520 {
            {
                object_521.key(key_522).string(value_523.as_str());
            }
        }
        object_521.finish();
    }
    if let Some(var_524) = &input.network_config {
        let mut object_525 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(&mut object_525, var_524)?;
        object_525.finish();
    }
    if let Some(var_526) = &input.role_arn {
        object.key("RoleArn").string(var_526.as_str());
    }
    if let Some(var_527) = &input.tags {
        let mut array_528 = object.key("Tags").start_array();
        for item_529 in var_527 {
            {
                let mut object_530 = array_528.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_530, item_529)?;
                object_530.finish();
            }
        }
        array_528.finish();
    }
    if let Some(var_531) = &input.experiment_config {
        let mut object_532 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_532,
            var_531,
        )?;
        object_532.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_533) = &input.project_name {
        object.key("ProjectName").string(var_533.as_str());
    }
    if let Some(var_534) = &input.project_description {
        object.key("ProjectDescription").string(var_534.as_str());
    }
    if let Some(var_535) = &input.service_catalog_provisioning_details {
        let mut object_536 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_details(
            &mut object_536,
            var_535,
        )?;
        object_536.finish();
    }
    if let Some(var_537) = &input.tags {
        let mut array_538 = object.key("Tags").start_array();
        for item_539 in var_537 {
            {
                let mut object_540 = array_538.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_540, item_539)?;
                object_540.finish();
            }
        }
        array_538.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_541) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_541.as_str());
    }
    if let Some(var_542) = &input.studio_lifecycle_config_content {
        object
            .key("StudioLifecycleConfigContent")
            .string(var_542.as_str());
    }
    if let Some(var_543) = &input.studio_lifecycle_config_app_type {
        object
            .key("StudioLifecycleConfigAppType")
            .string(var_543.as_str());
    }
    if let Some(var_544) = &input.tags {
        let mut array_545 = object.key("Tags").start_array();
        for item_546 in var_544 {
            {
                let mut object_547 = array_545.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_547, item_546)?;
                object_547.finish();
            }
        }
        array_545.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.training_job_name {
        object.key("TrainingJobName").string(var_548.as_str());
    }
    if let Some(var_549) = &input.hyper_parameters {
        let mut object_550 = object.key("HyperParameters").start_object();
        for (key_551, value_552) in var_549 {
            {
                object_550.key(key_551).string(value_552.as_str());
            }
        }
        object_550.finish();
    }
    if let Some(var_553) = &input.algorithm_specification {
        let mut object_554 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_specification(
            &mut object_554,
            var_553,
        )?;
        object_554.finish();
    }
    if let Some(var_555) = &input.role_arn {
        object.key("RoleArn").string(var_555.as_str());
    }
    if let Some(var_556) = &input.input_data_config {
        let mut array_557 = object.key("InputDataConfig").start_array();
        for item_558 in var_556 {
            {
                let mut object_559 = array_557.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_559,
                    item_558,
                )?;
                object_559.finish();
            }
        }
        array_557.finish();
    }
    if let Some(var_560) = &input.output_data_config {
        let mut object_561 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_561,
            var_560,
        )?;
        object_561.finish();
    }
    if let Some(var_562) = &input.resource_config {
        let mut object_563 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(&mut object_563, var_562)?;
        object_563.finish();
    }
    if let Some(var_564) = &input.vpc_config {
        let mut object_565 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_565, var_564)?;
        object_565.finish();
    }
    if let Some(var_566) = &input.stopping_condition {
        let mut object_567 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_567,
            var_566,
        )?;
        object_567.finish();
    }
    if let Some(var_568) = &input.tags {
        let mut array_569 = object.key("Tags").start_array();
        for item_570 in var_568 {
            {
                let mut object_571 = array_569.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_571, item_570)?;
                object_571.finish();
            }
        }
        array_569.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_572) = &input.checkpoint_config {
        let mut object_573 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_573,
            var_572,
        )?;
        object_573.finish();
    }
    if let Some(var_574) = &input.debug_hook_config {
        let mut object_575 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_debug_hook_config(
            &mut object_575,
            var_574,
        )?;
        object_575.finish();
    }
    if let Some(var_576) = &input.debug_rule_configurations {
        let mut array_577 = object.key("DebugRuleConfigurations").start_array();
        for item_578 in var_576 {
            {
                let mut object_579 = array_577.value().start_object();
                crate::json_ser::serialize_structure_crate_model_debug_rule_configuration(
                    &mut object_579,
                    item_578,
                )?;
                object_579.finish();
            }
        }
        array_577.finish();
    }
    if let Some(var_580) = &input.tensor_board_output_config {
        let mut object_581 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_output_config(
            &mut object_581,
            var_580,
        )?;
        object_581.finish();
    }
    if let Some(var_582) = &input.experiment_config {
        let mut object_583 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_583,
            var_582,
        )?;
        object_583.finish();
    }
    if let Some(var_584) = &input.profiler_config {
        let mut object_585 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config(&mut object_585, var_584)?;
        object_585.finish();
    }
    if let Some(var_586) = &input.profiler_rule_configurations {
        let mut array_587 = object.key("ProfilerRuleConfigurations").start_array();
        for item_588 in var_586 {
            {
                let mut object_589 = array_587.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_589,
                    item_588,
                )?;
                object_589.finish();
            }
        }
        array_587.finish();
    }
    if let Some(var_590) = &input.environment {
        let mut object_591 = object.key("Environment").start_object();
        for (key_592, value_593) in var_590 {
            {
                object_591.key(key_592).string(value_593.as_str());
            }
        }
        object_591.finish();
    }
    if let Some(var_594) = &input.retry_strategy {
        let mut object_595 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_595, var_594)?;
        object_595.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_596) = &input.transform_job_name {
        object.key("TransformJobName").string(var_596.as_str());
    }
    if let Some(var_597) = &input.model_name {
        object.key("ModelName").string(var_597.as_str());
    }
    if let Some(var_598) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_598).into()),
        );
    }
    if let Some(var_599) = &input.model_client_config {
        let mut object_600 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_client_config(
            &mut object_600,
            var_599,
        )?;
        object_600.finish();
    }
    if let Some(var_601) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_601).into()),
        );
    }
    if let Some(var_602) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_602.as_str());
    }
    if let Some(var_603) = &input.environment {
        let mut object_604 = object.key("Environment").start_object();
        for (key_605, value_606) in var_603 {
            {
                object_604.key(key_605).string(value_606.as_str());
            }
        }
        object_604.finish();
    }
    if let Some(var_607) = &input.transform_input {
        let mut object_608 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(&mut object_608, var_607)?;
        object_608.finish();
    }
    if let Some(var_609) = &input.transform_output {
        let mut object_610 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(
            &mut object_610,
            var_609,
        )?;
        object_610.finish();
    }
    if let Some(var_611) = &input.transform_resources {
        let mut object_612 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_612,
            var_611,
        )?;
        object_612.finish();
    }
    if let Some(var_613) = &input.data_processing {
        let mut object_614 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_crate_model_data_processing(&mut object_614, var_613)?;
        object_614.finish();
    }
    if let Some(var_615) = &input.tags {
        let mut array_616 = object.key("Tags").start_array();
        for item_617 in var_615 {
            {
                let mut object_618 = array_616.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_618, item_617)?;
                object_618.finish();
            }
        }
        array_616.finish();
    }
    if let Some(var_619) = &input.experiment_config {
        let mut object_620 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(
            &mut object_620,
            var_619,
        )?;
        object_620.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_621) = &input.trial_name {
        object.key("TrialName").string(var_621.as_str());
    }
    if let Some(var_622) = &input.display_name {
        object.key("DisplayName").string(var_622.as_str());
    }
    if let Some(var_623) = &input.experiment_name {
        object.key("ExperimentName").string(var_623.as_str());
    }
    if let Some(var_624) = &input.metadata_properties {
        let mut object_625 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_625,
            var_624,
        )?;
        object_625.finish();
    }
    if let Some(var_626) = &input.tags {
        let mut array_627 = object.key("Tags").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_629, item_628)?;
                object_629.finish();
            }
        }
        array_627.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_630) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_630.as_str());
    }
    if let Some(var_631) = &input.display_name {
        object.key("DisplayName").string(var_631.as_str());
    }
    if let Some(var_632) = &input.status {
        let mut object_633 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_633,
            var_632,
        )?;
        object_633.finish();
    }
    if let Some(var_634) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_634, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_635) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_635, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_636) = &input.parameters {
        let mut object_637 = object.key("Parameters").start_object();
        for (key_638, value_639) in var_636 {
            {
                let mut object_640 = object_637.key(key_638).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_640,
                    value_639,
                )?;
                object_640.finish();
            }
        }
        object_637.finish();
    }
    if let Some(var_641) = &input.input_artifacts {
        let mut object_642 = object.key("InputArtifacts").start_object();
        for (key_643, value_644) in var_641 {
            {
                let mut object_645 = object_642.key(key_643).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_645,
                    value_644,
                )?;
                object_645.finish();
            }
        }
        object_642.finish();
    }
    if let Some(var_646) = &input.output_artifacts {
        let mut object_647 = object.key("OutputArtifacts").start_object();
        for (key_648, value_649) in var_646 {
            {
                let mut object_650 = object_647.key(key_648).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_650,
                    value_649,
                )?;
                object_650.finish();
            }
        }
        object_647.finish();
    }
    if let Some(var_651) = &input.metadata_properties {
        let mut object_652 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(
            &mut object_652,
            var_651,
        )?;
        object_652.finish();
    }
    if let Some(var_653) = &input.tags {
        let mut array_654 = object.key("Tags").start_array();
        for item_655 in var_653 {
            {
                let mut object_656 = array_654.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_656, item_655)?;
                object_656.finish();
            }
        }
        array_654.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.domain_id {
        object.key("DomainId").string(var_657.as_str());
    }
    if let Some(var_658) = &input.user_profile_name {
        object.key("UserProfileName").string(var_658.as_str());
    }
    if let Some(var_659) = &input.single_sign_on_user_identifier {
        object
            .key("SingleSignOnUserIdentifier")
            .string(var_659.as_str());
    }
    if let Some(var_660) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_660.as_str());
    }
    if let Some(var_661) = &input.tags {
        let mut array_662 = object.key("Tags").start_array();
        for item_663 in var_661 {
            {
                let mut object_664 = array_662.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_664, item_663)?;
                object_664.finish();
            }
        }
        array_662.finish();
    }
    if let Some(var_665) = &input.user_settings {
        let mut object_666 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_666, var_665)?;
        object_666.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.cognito_config {
        let mut object_668 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_config(&mut object_668, var_667)?;
        object_668.finish();
    }
    if let Some(var_669) = &input.oidc_config {
        let mut object_670 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_670, var_669)?;
        object_670.finish();
    }
    if let Some(var_671) = &input.source_ip_config {
        let mut object_672 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(
            &mut object_672,
            var_671,
        )?;
        object_672.finish();
    }
    if let Some(var_673) = &input.workforce_name {
        object.key("WorkforceName").string(var_673.as_str());
    }
    if let Some(var_674) = &input.tags {
        let mut array_675 = object.key("Tags").start_array();
        for item_676 in var_674 {
            {
                let mut object_677 = array_675.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_677, item_676)?;
                object_677.finish();
            }
        }
        array_675.finish();
    }
    if let Some(var_678) = &input.workforce_vpc_config {
        let mut object_679 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(
            &mut object_679,
            var_678,
        )?;
        object_679.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_680) = &input.workteam_name {
        object.key("WorkteamName").string(var_680.as_str());
    }
    if let Some(var_681) = &input.workforce_name {
        object.key("WorkforceName").string(var_681.as_str());
    }
    if let Some(var_682) = &input.member_definitions {
        let mut array_683 = object.key("MemberDefinitions").start_array();
        for item_684 in var_682 {
            {
                let mut object_685 = array_683.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_685,
                    item_684,
                )?;
                object_685.finish();
            }
        }
        array_683.finish();
    }
    if let Some(var_686) = &input.description {
        object.key("Description").string(var_686.as_str());
    }
    if let Some(var_687) = &input.notification_configuration {
        let mut object_688 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_688,
            var_687,
        )?;
        object_688.finish();
    }
    if let Some(var_689) = &input.tags {
        let mut array_690 = object.key("Tags").start_array();
        for item_691 in var_689 {
            {
                let mut object_692 = array_690.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_692, item_691)?;
                object_692.finish();
            }
        }
        array_690.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.action_name {
        object.key("ActionName").string(var_693.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_694) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_694.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_695) = &input.domain_id {
        object.key("DomainId").string(var_695.as_str());
    }
    if let Some(var_696) = &input.user_profile_name {
        object.key("UserProfileName").string(var_696.as_str());
    }
    if let Some(var_697) = &input.app_type {
        object.key("AppType").string(var_697.as_str());
    }
    if let Some(var_698) = &input.app_name {
        object.key("AppName").string(var_698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_699) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_699.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_700.as_str());
    }
    if let Some(var_701) = &input.source {
        let mut object_702 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_702, var_701)?;
        object_702.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.source_arn {
        object.key("SourceArn").string(var_703.as_str());
    }
    if let Some(var_704) = &input.destination_arn {
        object.key("DestinationArn").string(var_704.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_705) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_705.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_706) = &input.context_name {
        object.key("ContextName").string(var_706.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_707.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_708) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_708.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_709) = &input.domain_id {
        object.key("DomainId").string(var_709.as_str());
    }
    if let Some(var_710) = &input.retention_policy {
        let mut object_711 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_policy(
            &mut object_711,
            var_710,
        )?;
        object_711.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_edge_deployment_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEdgeDeploymentPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_712) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_712.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_713) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_713.as_str());
    }
    if let Some(var_714) = &input.stage_name {
        object.key("StageName").string(var_714.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.endpoint_name {
        object.key("EndpointName").string(var_715.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_716) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_717) = &input.experiment_name {
        object.key("ExperimentName").string(var_717.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_718.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_719) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_720) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_721) = &input.image_name {
        object.key("ImageName").string(var_721.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_722) = &input.image_name {
        object.key("ImageName").string(var_722.as_str());
    }
    if let Some(var_723) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_723).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_724) = &input.model_name {
        object.key("ModelName").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_725.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_726.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_727) = &input.model_package_name {
        object.key("ModelPackageName").string(var_727.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_728) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_729) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_729.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_730) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_730.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_731) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_731.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_732) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_732.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_733) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_733.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_734) = &input.pipeline_name {
        object.key("PipelineName").string(var_734.as_str());
    }
    if let Some(var_735) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_736) = &input.project_name {
        object.key("ProjectName").string(var_736.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_737) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_738) = &input.resource_arn {
        object.key("ResourceArn").string(var_738.as_str());
    }
    if let Some(var_739) = &input.tag_keys {
        let mut array_740 = object.key("TagKeys").start_array();
        for item_741 in var_739 {
            {
                array_740.value().string(item_741.as_str());
            }
        }
        array_740.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_742) = &input.trial_name {
        object.key("TrialName").string(var_742.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_743) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_743.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_744) = &input.domain_id {
        object.key("DomainId").string(var_744.as_str());
    }
    if let Some(var_745) = &input.user_profile_name {
        object.key("UserProfileName").string(var_745.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_746) = &input.workforce_name {
        object.key("WorkforceName").string(var_746.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_747) = &input.workteam_name {
        object.key("WorkteamName").string(var_747.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_748) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_748.as_str());
    }
    if let Some(var_749) = &input.device_names {
        let mut array_750 = object.key("DeviceNames").start_array();
        for item_751 in var_749 {
            {
                array_750.value().string(item_751.as_str());
            }
        }
        array_750.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_752) = &input.action_name {
        object.key("ActionName").string(var_752.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_algorithm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_753) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_754) = &input.domain_id {
        object.key("DomainId").string(var_754.as_str());
    }
    if let Some(var_755) = &input.user_profile_name {
        object.key("UserProfileName").string(var_755.as_str());
    }
    if let Some(var_756) = &input.app_type {
        object.key("AppType").string(var_756.as_str());
    }
    if let Some(var_757) = &input.app_name {
        object.key("AppName").string(var_757.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_758) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_758.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_759) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_759.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_760) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_760.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_761) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_761.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_763) = &input.context_name {
        object.key("ContextName").string(var_763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_764) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_764.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_765) = &input.next_token {
        object.key("NextToken").string(var_765.as_str());
    }
    if let Some(var_766) = &input.device_name {
        object.key("DeviceName").string(var_766.as_str());
    }
    if let Some(var_767) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_767.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_768) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_768.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.domain_id {
        object.key("DomainId").string(var_769.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_edge_deployment_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgeDeploymentPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_770) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_770.as_str());
    }
    if let Some(var_771) = &input.next_token {
        object.key("NextToken").string(var_771.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_772) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_773) = &input.endpoint_name {
        object.key("EndpointName").string(var_773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_774) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_775) = &input.experiment_name {
        object.key("ExperimentName").string(var_775.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_776) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_776.as_str());
    }
    if let Some(var_777) = &input.next_token {
        object.key("NextToken").string(var_777.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_778) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_778.as_str());
    }
    if let Some(var_779) = &input.feature_name {
        object.key("FeatureName").string(var_779.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_flow_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_780) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_780.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_human_task_ui_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_781) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_781.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_782) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_782.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_783) = &input.image_name {
        object.key("ImageName").string(var_783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_784) = &input.image_name {
        object.key("ImageName").string(var_784.as_str());
    }
    if let Some(var_785) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_785).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_786) = &input.job_name {
        object.key("JobName").string(var_786.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_787) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_787.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_lineage_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLineageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_788) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_788.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_789) = &input.model_name {
        object.key("ModelName").string(var_789.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_bias_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_790) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_790.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_explainability_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_791) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_791.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_792) = &input.model_package_name {
        object.key("ModelPackageName").string(var_792.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_793) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_793.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_quality_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_794) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_794.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_795) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_795.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_796) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_796.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_797) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_797.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_798) = &input.pipeline_name {
        object.key("PipelineName").string(var_798.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_definition_for_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_799) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_799.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_800) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_800.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_801) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_801.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_802) = &input.project_name {
        object.key("ProjectName").string(var_802.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_studio_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_803) = &input.studio_lifecycle_config_name {
        object
            .key("StudioLifecycleConfigName")
            .string(var_803.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_subscribed_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_804) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_804.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_805) = &input.training_job_name {
        object.key("TrainingJobName").string(var_805.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_806) = &input.transform_job_name {
        object.key("TransformJobName").string(var_806.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_807) = &input.trial_name {
        object.key("TrialName").string(var_807.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_808) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_808.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_809) = &input.domain_id {
        object.key("DomainId").string(var_809.as_str());
    }
    if let Some(var_810) = &input.user_profile_name {
        object.key("UserProfileName").string(var_810.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_811) = &input.workforce_name {
        object.key("WorkforceName").string(var_811.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_812) = &input.workteam_name {
        object.key("WorkteamName").string(var_812.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_813) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_813.as_str());
    }
    if let Some(var_814) = &input.trial_name {
        object.key("TrialName").string(var_814.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_device_fleet_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_815) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_815.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_lineage_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLineageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_816) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_816.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_817) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_817.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_search_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_818) = &input.resource {
        object.key("Resource").string(var_818.as_str());
    }
    if let Some(var_819) = &input.suggestion_query {
        let mut object_820 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_suggestion_query(
            &mut object_820,
            var_819,
        )?;
        object_820.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_821) = &input.source_uri {
        object.key("SourceUri").string(var_821.as_str());
    }
    if let Some(var_822) = &input.action_type {
        object.key("ActionType").string(var_822.as_str());
    }
    if let Some(var_823) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_823, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_824) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_824, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_825) = &input.sort_by {
        object.key("SortBy").string(var_825.as_str());
    }
    if let Some(var_826) = &input.sort_order {
        object.key("SortOrder").string(var_826.as_str());
    }
    if let Some(var_827) = &input.next_token {
        object.key("NextToken").string(var_827.as_str());
    }
    if let Some(var_828) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_828).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_algorithms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_829) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_829, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_830) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_830, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_831) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    if let Some(var_832) = &input.name_contains {
        object.key("NameContains").string(var_832.as_str());
    }
    if let Some(var_833) = &input.next_token {
        object.key("NextToken").string(var_833.as_str());
    }
    if let Some(var_834) = &input.sort_by {
        object.key("SortBy").string(var_834.as_str());
    }
    if let Some(var_835) = &input.sort_order {
        object.key("SortOrder").string(var_835.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_app_image_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_836) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_836).into()),
        );
    }
    if let Some(var_837) = &input.next_token {
        object.key("NextToken").string(var_837.as_str());
    }
    if let Some(var_838) = &input.name_contains {
        object.key("NameContains").string(var_838.as_str());
    }
    if let Some(var_839) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_839, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_840) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_840, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_841) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .date_time(var_841, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_842) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .date_time(var_842, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_843) = &input.sort_by {
        object.key("SortBy").string(var_843.as_str());
    }
    if let Some(var_844) = &input.sort_order {
        object.key("SortOrder").string(var_844.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_apps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_845) = &input.next_token {
        object.key("NextToken").string(var_845.as_str());
    }
    if let Some(var_846) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_846).into()),
        );
    }
    if let Some(var_847) = &input.sort_order {
        object.key("SortOrder").string(var_847.as_str());
    }
    if let Some(var_848) = &input.sort_by {
        object.key("SortBy").string(var_848.as_str());
    }
    if let Some(var_849) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_849.as_str());
    }
    if let Some(var_850) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_850.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_artifacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_851) = &input.source_uri {
        object.key("SourceUri").string(var_851.as_str());
    }
    if let Some(var_852) = &input.artifact_type {
        object.key("ArtifactType").string(var_852.as_str());
    }
    if let Some(var_853) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_853, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_854) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_854, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_855) = &input.sort_by {
        object.key("SortBy").string(var_855.as_str());
    }
    if let Some(var_856) = &input.sort_order {
        object.key("SortOrder").string(var_856.as_str());
    }
    if let Some(var_857) = &input.next_token {
        object.key("NextToken").string(var_857.as_str());
    }
    if let Some(var_858) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_858).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_859) = &input.source_arn {
        object.key("SourceArn").string(var_859.as_str());
    }
    if let Some(var_860) = &input.destination_arn {
        object.key("DestinationArn").string(var_860.as_str());
    }
    if let Some(var_861) = &input.source_type {
        object.key("SourceType").string(var_861.as_str());
    }
    if let Some(var_862) = &input.destination_type {
        object.key("DestinationType").string(var_862.as_str());
    }
    if let Some(var_863) = &input.association_type {
        object.key("AssociationType").string(var_863.as_str());
    }
    if let Some(var_864) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_864, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_865) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_865, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_866) = &input.sort_by {
        object.key("SortBy").string(var_866.as_str());
    }
    if let Some(var_867) = &input.sort_order {
        object.key("SortOrder").string(var_867.as_str());
    }
    if let Some(var_868) = &input.next_token {
        object.key("NextToken").string(var_868.as_str());
    }
    if let Some(var_869) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_869).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_auto_ml_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMlJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_870) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_870, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_871) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_871, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_872) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_872, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_873) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_873, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_874) = &input.name_contains {
        object.key("NameContains").string(var_874.as_str());
    }
    if let Some(var_875) = &input.status_equals {
        object.key("StatusEquals").string(var_875.as_str());
    }
    if let Some(var_876) = &input.sort_order {
        object.key("SortOrder").string(var_876.as_str());
    }
    if let Some(var_877) = &input.sort_by {
        object.key("SortBy").string(var_877.as_str());
    }
    if let Some(var_878) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_878).into()),
        );
    }
    if let Some(var_879) = &input.next_token {
        object.key("NextToken").string(var_879.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_candidates_for_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_880) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_880.as_str());
    }
    if let Some(var_881) = &input.status_equals {
        object.key("StatusEquals").string(var_881.as_str());
    }
    if let Some(var_882) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_882.as_str());
    }
    if let Some(var_883) = &input.sort_order {
        object.key("SortOrder").string(var_883.as_str());
    }
    if let Some(var_884) = &input.sort_by {
        object.key("SortBy").string(var_884.as_str());
    }
    if let Some(var_885) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_885).into()),
        );
    }
    if let Some(var_886) = &input.next_token {
        object.key("NextToken").string(var_886.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_code_repositories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_887) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_887, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_888) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_888, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_889) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_889, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_890) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_890, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_891) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_891).into()),
        );
    }
    if let Some(var_892) = &input.name_contains {
        object.key("NameContains").string(var_892.as_str());
    }
    if let Some(var_893) = &input.next_token {
        object.key("NextToken").string(var_893.as_str());
    }
    if let Some(var_894) = &input.sort_by {
        object.key("SortBy").string(var_894.as_str());
    }
    if let Some(var_895) = &input.sort_order {
        object.key("SortOrder").string(var_895.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compilation_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_896) = &input.next_token {
        object.key("NextToken").string(var_896.as_str());
    }
    if let Some(var_897) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_897).into()),
        );
    }
    if let Some(var_898) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_898, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_899) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_899, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_900) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_900, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_901) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_901, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_902) = &input.name_contains {
        object.key("NameContains").string(var_902.as_str());
    }
    if let Some(var_903) = &input.status_equals {
        object.key("StatusEquals").string(var_903.as_str());
    }
    if let Some(var_904) = &input.sort_by {
        object.key("SortBy").string(var_904.as_str());
    }
    if let Some(var_905) = &input.sort_order {
        object.key("SortOrder").string(var_905.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contexts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_906) = &input.source_uri {
        object.key("SourceUri").string(var_906.as_str());
    }
    if let Some(var_907) = &input.context_type {
        object.key("ContextType").string(var_907.as_str());
    }
    if let Some(var_908) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_908, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_909) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_909, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_910) = &input.sort_by {
        object.key("SortBy").string(var_910.as_str());
    }
    if let Some(var_911) = &input.sort_order {
        object.key("SortOrder").string(var_911.as_str());
    }
    if let Some(var_912) = &input.next_token {
        object.key("NextToken").string(var_912.as_str());
    }
    if let Some(var_913) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_913).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_914) = &input.endpoint_name {
        object.key("EndpointName").string(var_914.as_str());
    }
    if let Some(var_915) = &input.sort_by {
        object.key("SortBy").string(var_915.as_str());
    }
    if let Some(var_916) = &input.sort_order {
        object.key("SortOrder").string(var_916.as_str());
    }
    if let Some(var_917) = &input.next_token {
        object.key("NextToken").string(var_917.as_str());
    }
    if let Some(var_918) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_918).into()),
        );
    }
    if let Some(var_919) = &input.name_contains {
        object.key("NameContains").string(var_919.as_str());
    }
    if let Some(var_920) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_920, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_921) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_921, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_device_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_922) = &input.next_token {
        object.key("NextToken").string(var_922.as_str());
    }
    if let Some(var_923) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_923).into()),
        );
    }
    if let Some(var_924) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_924, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_925) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_925, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_926) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_926, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_927) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_927, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_928) = &input.name_contains {
        object.key("NameContains").string(var_928.as_str());
    }
    if let Some(var_929) = &input.sort_by {
        object.key("SortBy").string(var_929.as_str());
    }
    if let Some(var_930) = &input.sort_order {
        object.key("SortOrder").string(var_930.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_931) = &input.next_token {
        object.key("NextToken").string(var_931.as_str());
    }
    if let Some(var_932) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    if let Some(var_933) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .date_time(var_933, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_934) = &input.model_name {
        object.key("ModelName").string(var_934.as_str());
    }
    if let Some(var_935) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_936) = &input.next_token {
        object.key("NextToken").string(var_936.as_str());
    }
    if let Some(var_937) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_937).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_edge_deployment_plans_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgeDeploymentPlansInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_938) = &input.next_token {
        object.key("NextToken").string(var_938.as_str());
    }
    if let Some(var_939) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_939).into()),
        );
    }
    if let Some(var_940) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_940, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_941) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_941, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_942) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_942, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_943) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_943, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_944) = &input.name_contains {
        object.key("NameContains").string(var_944.as_str());
    }
    if let Some(var_945) = &input.device_fleet_name_contains {
        object
            .key("DeviceFleetNameContains")
            .string(var_945.as_str());
    }
    if let Some(var_946) = &input.sort_by {
        object.key("SortBy").string(var_946.as_str());
    }
    if let Some(var_947) = &input.sort_order {
        object.key("SortOrder").string(var_947.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_edge_packaging_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_948) = &input.next_token {
        object.key("NextToken").string(var_948.as_str());
    }
    if let Some(var_949) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_949).into()),
        );
    }
    if let Some(var_950) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_950, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_951) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_951, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_952) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_952, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_953) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_953, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_954) = &input.name_contains {
        object.key("NameContains").string(var_954.as_str());
    }
    if let Some(var_955) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_955.as_str());
    }
    if let Some(var_956) = &input.status_equals {
        object.key("StatusEquals").string(var_956.as_str());
    }
    if let Some(var_957) = &input.sort_by {
        object.key("SortBy").string(var_957.as_str());
    }
    if let Some(var_958) = &input.sort_order {
        object.key("SortOrder").string(var_958.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoint_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_959) = &input.sort_by {
        object.key("SortBy").string(var_959.as_str());
    }
    if let Some(var_960) = &input.sort_order {
        object.key("SortOrder").string(var_960.as_str());
    }
    if let Some(var_961) = &input.next_token {
        object.key("NextToken").string(var_961.as_str());
    }
    if let Some(var_962) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_962).into()),
        );
    }
    if let Some(var_963) = &input.name_contains {
        object.key("NameContains").string(var_963.as_str());
    }
    if let Some(var_964) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_964, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_965) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_965, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_966) = &input.sort_by {
        object.key("SortBy").string(var_966.as_str());
    }
    if let Some(var_967) = &input.sort_order {
        object.key("SortOrder").string(var_967.as_str());
    }
    if let Some(var_968) = &input.next_token {
        object.key("NextToken").string(var_968.as_str());
    }
    if let Some(var_969) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_969).into()),
        );
    }
    if let Some(var_970) = &input.name_contains {
        object.key("NameContains").string(var_970.as_str());
    }
    if let Some(var_971) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_971, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_972) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_972, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_973) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_973, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_974) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_974, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_975) = &input.status_equals {
        object.key("StatusEquals").string(var_975.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_976) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_976, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_977) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_977, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_978) = &input.sort_by {
        object.key("SortBy").string(var_978.as_str());
    }
    if let Some(var_979) = &input.sort_order {
        object.key("SortOrder").string(var_979.as_str());
    }
    if let Some(var_980) = &input.next_token {
        object.key("NextToken").string(var_980.as_str());
    }
    if let Some(var_981) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_981).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_feature_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_982) = &input.name_contains {
        object.key("NameContains").string(var_982.as_str());
    }
    if let Some(var_983) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_983.as_str());
    }
    if let Some(var_984) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_984.as_str());
    }
    if let Some(var_985) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_985, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_986) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_986, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_987) = &input.sort_order {
        object.key("SortOrder").string(var_987.as_str());
    }
    if let Some(var_988) = &input.sort_by {
        object.key("SortBy").string(var_988.as_str());
    }
    if let Some(var_989) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_989).into()),
        );
    }
    if let Some(var_990) = &input.next_token {
        object.key("NextToken").string(var_990.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_flow_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_991) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_991, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_992) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_992, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_993) = &input.sort_order {
        object.key("SortOrder").string(var_993.as_str());
    }
    if let Some(var_994) = &input.next_token {
        object.key("NextToken").string(var_994.as_str());
    }
    if let Some(var_995) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_995).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_human_task_uis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_996) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_996, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_997) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_997, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_998) = &input.sort_order {
        object.key("SortOrder").string(var_998.as_str());
    }
    if let Some(var_999) = &input.next_token {
        object.key("NextToken").string(var_999.as_str());
    }
    if let Some(var_1000) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1000).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_hyper_parameter_tuning_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1001) = &input.next_token {
        object.key("NextToken").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1002).into()),
        );
    }
    if let Some(var_1003) = &input.sort_by {
        object.key("SortBy").string(var_1003.as_str());
    }
    if let Some(var_1004) = &input.sort_order {
        object.key("SortOrder").string(var_1004.as_str());
    }
    if let Some(var_1005) = &input.name_contains {
        object.key("NameContains").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1006, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1007) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1007, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1008) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1008, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1009) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1009, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1010) = &input.status_equals {
        object.key("StatusEquals").string(var_1010.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_images_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1011) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1011, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1012) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1012, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1013) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1013, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1014) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1014, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1015) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1015).into()),
        );
    }
    if let Some(var_1016) = &input.name_contains {
        object.key("NameContains").string(var_1016.as_str());
    }
    if let Some(var_1017) = &input.next_token {
        object.key("NextToken").string(var_1017.as_str());
    }
    if let Some(var_1018) = &input.sort_by {
        object.key("SortBy").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.sort_order {
        object.key("SortOrder").string(var_1019.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_image_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1020) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1020, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1021) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1021, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1022) = &input.image_name {
        object.key("ImageName").string(var_1022.as_str());
    }
    if let Some(var_1023) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1023, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1024) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1024, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1025) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1025).into()),
        );
    }
    if let Some(var_1026) = &input.next_token {
        object.key("NextToken").string(var_1026.as_str());
    }
    if let Some(var_1027) = &input.sort_by {
        object.key("SortBy").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.sort_order {
        object.key("SortOrder").string(var_1028.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inference_recommendations_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInferenceRecommendationsJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1029) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1029, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1030) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1030, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1031) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1031, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1032) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1032, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1033) = &input.name_contains {
        object.key("NameContains").string(var_1033.as_str());
    }
    if let Some(var_1034) = &input.status_equals {
        object.key("StatusEquals").string(var_1034.as_str());
    }
    if let Some(var_1035) = &input.sort_by {
        object.key("SortBy").string(var_1035.as_str());
    }
    if let Some(var_1036) = &input.sort_order {
        object.key("SortOrder").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.next_token {
        object.key("NextToken").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1038).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1039) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1039, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1040) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1040, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1041) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1041, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1042) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1042, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1043) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1043).into()),
        );
    }
    if let Some(var_1044) = &input.next_token {
        object.key("NextToken").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.name_contains {
        object.key("NameContains").string(var_1045.as_str());
    }
    if let Some(var_1046) = &input.sort_by {
        object.key("SortBy").string(var_1046.as_str());
    }
    if let Some(var_1047) = &input.sort_order {
        object.key("SortOrder").string(var_1047.as_str());
    }
    if let Some(var_1048) = &input.status_equals {
        object.key("StatusEquals").string(var_1048.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_for_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1049) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1050).into()),
        );
    }
    if let Some(var_1051) = &input.next_token {
        object.key("NextToken").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1052, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1053) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1053, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1054) = &input.job_reference_code_contains {
        object
            .key("JobReferenceCodeContains")
            .string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.sort_by {
        object.key("SortBy").string(var_1055.as_str());
    }
    if let Some(var_1056) = &input.sort_order {
        object.key("SortOrder").string(var_1056.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_lineage_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLineageGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1057) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1057, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1058) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1058, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1059) = &input.sort_by {
        object.key("SortBy").string(var_1059.as_str());
    }
    if let Some(var_1060) = &input.sort_order {
        object.key("SortOrder").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.next_token {
        object.key("NextToken").string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1062).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_bias_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1063) = &input.endpoint_name {
        object.key("EndpointName").string(var_1063.as_str());
    }
    if let Some(var_1064) = &input.sort_by {
        object.key("SortBy").string(var_1064.as_str());
    }
    if let Some(var_1065) = &input.sort_order {
        object.key("SortOrder").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.next_token {
        object.key("NextToken").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1067).into()),
        );
    }
    if let Some(var_1068) = &input.name_contains {
        object.key("NameContains").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1069, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1070) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1070, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_explainability_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1071) = &input.endpoint_name {
        object.key("EndpointName").string(var_1071.as_str());
    }
    if let Some(var_1072) = &input.sort_by {
        object.key("SortBy").string(var_1072.as_str());
    }
    if let Some(var_1073) = &input.sort_order {
        object.key("SortOrder").string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.next_token {
        object.key("NextToken").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1075).into()),
        );
    }
    if let Some(var_1076) = &input.name_contains {
        object.key("NameContains").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1077, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1078) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1078, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1079) = &input.search_expression {
        let mut object_1080 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metadata_search_expression(
            &mut object_1080,
            var_1079,
        )?;
        object_1080.finish();
    }
    if let Some(var_1081) = &input.next_token {
        object.key("NextToken").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1082).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_package_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1083) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1083, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1084) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1084, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1085) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1085).into()),
        );
    }
    if let Some(var_1086) = &input.name_contains {
        object.key("NameContains").string(var_1086.as_str());
    }
    if let Some(var_1087) = &input.next_token {
        object.key("NextToken").string(var_1087.as_str());
    }
    if let Some(var_1088) = &input.sort_by {
        object.key("SortBy").string(var_1088.as_str());
    }
    if let Some(var_1089) = &input.sort_order {
        object.key("SortOrder").string(var_1089.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_packages_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1090) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1090, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1091) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1091, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1092) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1092).into()),
        );
    }
    if let Some(var_1093) = &input.name_contains {
        object.key("NameContains").string(var_1093.as_str());
    }
    if let Some(var_1094) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1094.as_str());
    }
    if let Some(var_1095) = &input.model_package_group_name {
        object
            .key("ModelPackageGroupName")
            .string(var_1095.as_str());
    }
    if let Some(var_1096) = &input.model_package_type {
        object.key("ModelPackageType").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.next_token {
        object.key("NextToken").string(var_1097.as_str());
    }
    if let Some(var_1098) = &input.sort_by {
        object.key("SortBy").string(var_1098.as_str());
    }
    if let Some(var_1099) = &input.sort_order {
        object.key("SortOrder").string(var_1099.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_quality_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1100) = &input.endpoint_name {
        object.key("EndpointName").string(var_1100.as_str());
    }
    if let Some(var_1101) = &input.sort_by {
        object.key("SortBy").string(var_1101.as_str());
    }
    if let Some(var_1102) = &input.sort_order {
        object.key("SortOrder").string(var_1102.as_str());
    }
    if let Some(var_1103) = &input.next_token {
        object.key("NextToken").string(var_1103.as_str());
    }
    if let Some(var_1104) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1104).into()),
        );
    }
    if let Some(var_1105) = &input.name_contains {
        object.key("NameContains").string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1106, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1107) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1107, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_models_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1108) = &input.sort_by {
        object.key("SortBy").string(var_1108.as_str());
    }
    if let Some(var_1109) = &input.sort_order {
        object.key("SortOrder").string(var_1109.as_str());
    }
    if let Some(var_1110) = &input.next_token {
        object.key("NextToken").string(var_1110.as_str());
    }
    if let Some(var_1111) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1111).into()),
        );
    }
    if let Some(var_1112) = &input.name_contains {
        object.key("NameContains").string(var_1112.as_str());
    }
    if let Some(var_1113) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1113, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1114) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1114, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1115) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.endpoint_name {
        object.key("EndpointName").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.sort_by {
        object.key("SortBy").string(var_1117.as_str());
    }
    if let Some(var_1118) = &input.sort_order {
        object.key("SortOrder").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.next_token {
        object.key("NextToken").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1120).into()),
        );
    }
    if let Some(var_1121) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .date_time(var_1121, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1122) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .date_time(var_1122, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1123) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1123, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1124) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1124, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1125) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1125, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1126) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1126, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1127) = &input.status_equals {
        object.key("StatusEquals").string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1128.as_str());
    }
    if let Some(var_1129) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_schedules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1130) = &input.endpoint_name {
        object.key("EndpointName").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.sort_by {
        object.key("SortBy").string(var_1131.as_str());
    }
    if let Some(var_1132) = &input.sort_order {
        object.key("SortOrder").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.next_token {
        object.key("NextToken").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1134).into()),
        );
    }
    if let Some(var_1135) = &input.name_contains {
        object.key("NameContains").string(var_1135.as_str());
    }
    if let Some(var_1136) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1136, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1137) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1137, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1138) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1138, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1139) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1139, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1140) = &input.status_equals {
        object.key("StatusEquals").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1142.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instance_lifecycle_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1143) = &input.next_token {
        object.key("NextToken").string(var_1143.as_str());
    }
    if let Some(var_1144) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1144).into()),
        );
    }
    if let Some(var_1145) = &input.sort_by {
        object.key("SortBy").string(var_1145.as_str());
    }
    if let Some(var_1146) = &input.sort_order {
        object.key("SortOrder").string(var_1146.as_str());
    }
    if let Some(var_1147) = &input.name_contains {
        object.key("NameContains").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1148, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1149) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1149, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1150) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1150, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1151) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1151, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1152) = &input.next_token {
        object.key("NextToken").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1153).into()),
        );
    }
    if let Some(var_1154) = &input.sort_by {
        object.key("SortBy").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.sort_order {
        object.key("SortOrder").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.name_contains {
        object.key("NameContains").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1157, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1158) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1158, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1159) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1159, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1160) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1160, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1161) = &input.status_equals {
        object.key("StatusEquals").string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1162.as_str());
    }
    if let Some(var_1163) = &input.default_code_repository_contains {
        object
            .key("DefaultCodeRepositoryContains")
            .string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1165) = &input.pipeline_name {
        object.key("PipelineName").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1166, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1167) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1167, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1168) = &input.sort_by {
        object.key("SortBy").string(var_1168.as_str());
    }
    if let Some(var_1169) = &input.sort_order {
        object.key("SortOrder").string(var_1169.as_str());
    }
    if let Some(var_1170) = &input.next_token {
        object.key("NextToken").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1171).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_execution_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1172) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.next_token {
        object.key("NextToken").string(var_1173.as_str());
    }
    if let Some(var_1174) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1174).into()),
        );
    }
    if let Some(var_1175) = &input.sort_order {
        object.key("SortOrder").string(var_1175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_parameters_for_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1176) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1176.as_str());
    }
    if let Some(var_1177) = &input.next_token {
        object.key("NextToken").string(var_1177.as_str());
    }
    if let Some(var_1178) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1178).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipelines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1179) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1179.as_str());
    }
    if let Some(var_1180) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1180, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1181) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1181, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1182) = &input.sort_by {
        object.key("SortBy").string(var_1182.as_str());
    }
    if let Some(var_1183) = &input.sort_order {
        object.key("SortOrder").string(var_1183.as_str());
    }
    if let Some(var_1184) = &input.next_token {
        object.key("NextToken").string(var_1184.as_str());
    }
    if let Some(var_1185) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1185).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_processing_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1186) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1186, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1187) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1187, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1188) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1188, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1189) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1189, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1190) = &input.name_contains {
        object.key("NameContains").string(var_1190.as_str());
    }
    if let Some(var_1191) = &input.status_equals {
        object.key("StatusEquals").string(var_1191.as_str());
    }
    if let Some(var_1192) = &input.sort_by {
        object.key("SortBy").string(var_1192.as_str());
    }
    if let Some(var_1193) = &input.sort_order {
        object.key("SortOrder").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.next_token {
        object.key("NextToken").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1195).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_projects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1196) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1196, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1197) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1197, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1198) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1198).into()),
        );
    }
    if let Some(var_1199) = &input.name_contains {
        object.key("NameContains").string(var_1199.as_str());
    }
    if let Some(var_1200) = &input.next_token {
        object.key("NextToken").string(var_1200.as_str());
    }
    if let Some(var_1201) = &input.sort_by {
        object.key("SortBy").string(var_1201.as_str());
    }
    if let Some(var_1202) = &input.sort_order {
        object.key("SortOrder").string(var_1202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_stage_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStageDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1203) = &input.next_token {
        object.key("NextToken").string(var_1203.as_str());
    }
    if let Some(var_1204) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1204).into()),
        );
    }
    if let Some(var_1205) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_1205.as_str());
    }
    if input.exclude_devices_deployed_in_other_stage {
        object
            .key("ExcludeDevicesDeployedInOtherStage")
            .boolean(input.exclude_devices_deployed_in_other_stage);
    }
    if let Some(var_1206) = &input.stage_name {
        object.key("StageName").string(var_1206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studio_lifecycle_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioLifecycleConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1207) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1207).into()),
        );
    }
    if let Some(var_1208) = &input.next_token {
        object.key("NextToken").string(var_1208.as_str());
    }
    if let Some(var_1209) = &input.name_contains {
        object.key("NameContains").string(var_1209.as_str());
    }
    if let Some(var_1210) = &input.app_type_equals {
        object.key("AppTypeEquals").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1211, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1212) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1212, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1213) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .date_time(var_1213, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1214) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .date_time(var_1214, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1215) = &input.sort_by {
        object.key("SortBy").string(var_1215.as_str());
    }
    if let Some(var_1216) = &input.sort_order {
        object.key("SortOrder").string(var_1216.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_subscribed_workteams_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1217) = &input.name_contains {
        object.key("NameContains").string(var_1217.as_str());
    }
    if let Some(var_1218) = &input.next_token {
        object.key("NextToken").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1219).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1220) = &input.resource_arn {
        object.key("ResourceArn").string(var_1220.as_str());
    }
    if let Some(var_1221) = &input.next_token {
        object.key("NextToken").string(var_1221.as_str());
    }
    if let Some(var_1222) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1222).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1223) = &input.next_token {
        object.key("NextToken").string(var_1223.as_str());
    }
    if let Some(var_1224) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1224).into()),
        );
    }
    if let Some(var_1225) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1225, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1226) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1226, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1227) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1227, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1228) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1228, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1229) = &input.name_contains {
        object.key("NameContains").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.status_equals {
        object.key("StatusEquals").string(var_1230.as_str());
    }
    if let Some(var_1231) = &input.sort_by {
        object.key("SortBy").string(var_1231.as_str());
    }
    if let Some(var_1232) = &input.sort_order {
        object.key("SortOrder").string(var_1232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1233) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.next_token {
        object.key("NextToken").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1235).into()),
        );
    }
    if let Some(var_1236) = &input.status_equals {
        object.key("StatusEquals").string(var_1236.as_str());
    }
    if let Some(var_1237) = &input.sort_by {
        object.key("SortBy").string(var_1237.as_str());
    }
    if let Some(var_1238) = &input.sort_order {
        object.key("SortOrder").string(var_1238.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_transform_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1239) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .date_time(var_1239, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1240) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .date_time(var_1240, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1241) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .date_time(var_1241, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1242) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .date_time(var_1242, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1243) = &input.name_contains {
        object.key("NameContains").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.status_equals {
        object.key("StatusEquals").string(var_1244.as_str());
    }
    if let Some(var_1245) = &input.sort_by {
        object.key("SortBy").string(var_1245.as_str());
    }
    if let Some(var_1246) = &input.sort_order {
        object.key("SortOrder").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.next_token {
        object.key("NextToken").string(var_1247.as_str());
    }
    if let Some(var_1248) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1248).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trial_components_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1249) = &input.experiment_name {
        object.key("ExperimentName").string(var_1249.as_str());
    }
    if let Some(var_1250) = &input.trial_name {
        object.key("TrialName").string(var_1250.as_str());
    }
    if let Some(var_1251) = &input.source_arn {
        object.key("SourceArn").string(var_1251.as_str());
    }
    if let Some(var_1252) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1252, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1253) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1253, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1254) = &input.sort_by {
        object.key("SortBy").string(var_1254.as_str());
    }
    if let Some(var_1255) = &input.sort_order {
        object.key("SortOrder").string(var_1255.as_str());
    }
    if let Some(var_1256) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1256).into()),
        );
    }
    if let Some(var_1257) = &input.next_token {
        object.key("NextToken").string(var_1257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trials_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1258) = &input.experiment_name {
        object.key("ExperimentName").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1259.as_str());
    }
    if let Some(var_1260) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1260, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1261) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1261, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1262) = &input.sort_by {
        object.key("SortBy").string(var_1262.as_str());
    }
    if let Some(var_1263) = &input.sort_order {
        object.key("SortOrder").string(var_1263.as_str());
    }
    if let Some(var_1264) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1264).into()),
        );
    }
    if let Some(var_1265) = &input.next_token {
        object.key("NextToken").string(var_1265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1266) = &input.next_token {
        object.key("NextToken").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1267).into()),
        );
    }
    if let Some(var_1268) = &input.sort_order {
        object.key("SortOrder").string(var_1268.as_str());
    }
    if let Some(var_1269) = &input.sort_by {
        object.key("SortBy").string(var_1269.as_str());
    }
    if let Some(var_1270) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1270.as_str());
    }
    if let Some(var_1271) = &input.user_profile_name_contains {
        object
            .key("UserProfileNameContains")
            .string(var_1271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workforces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1272) = &input.sort_by {
        object.key("SortBy").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.sort_order {
        object.key("SortOrder").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.name_contains {
        object.key("NameContains").string(var_1274.as_str());
    }
    if let Some(var_1275) = &input.next_token {
        object.key("NextToken").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1276).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workteams_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1277) = &input.sort_by {
        object.key("SortBy").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.sort_order {
        object.key("SortOrder").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.name_contains {
        object.key("NameContains").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.next_token {
        object.key("NextToken").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1281).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_model_package_group_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1282) = &input.model_package_group_name {
        object
            .key("ModelPackageGroupName")
            .string(var_1282.as_str());
    }
    if let Some(var_1283) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1283.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_lineage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryLineageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1284) = &input.start_arns {
        let mut array_1285 = object.key("StartArns").start_array();
        for item_1286 in var_1284 {
            {
                array_1285.value().string(item_1286.as_str());
            }
        }
        array_1285.finish();
    }
    if let Some(var_1287) = &input.direction {
        object.key("Direction").string(var_1287.as_str());
    }
    if input.include_edges {
        object.key("IncludeEdges").boolean(input.include_edges);
    }
    if let Some(var_1288) = &input.filters {
        let mut object_1289 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_query_filters(&mut object_1289, var_1288)?;
        object_1289.finish();
    }
    if let Some(var_1290) = &input.max_depth {
        object.key("MaxDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1290).into()),
        );
    }
    if let Some(var_1291) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1291).into()),
        );
    }
    if let Some(var_1292) = &input.next_token {
        object.key("NextToken").string(var_1292.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1293) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1293.as_str());
    }
    if let Some(var_1294) = &input.devices {
        let mut array_1295 = object.key("Devices").start_array();
        for item_1296 in var_1294 {
            {
                let mut object_1297 = array_1295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1297,
                    item_1296,
                )?;
                object_1297.finish();
            }
        }
        array_1295.finish();
    }
    if let Some(var_1298) = &input.tags {
        let mut array_1299 = object.key("Tags").start_array();
        for item_1300 in var_1298 {
            {
                let mut object_1301 = array_1299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1301, item_1300)?;
                object_1301.finish();
            }
        }
        array_1299.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_render_ui_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1302) = &input.ui_template {
        let mut object_1303 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_1303, var_1302)?;
        object_1303.finish();
    }
    if let Some(var_1304) = &input.task {
        let mut object_1305 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_crate_model_renderable_task(
            &mut object_1305,
            var_1304,
        )?;
        object_1305.finish();
    }
    if let Some(var_1306) = &input.role_arn {
        object.key("RoleArn").string(var_1306.as_str());
    }
    if let Some(var_1307) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1307.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retry_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetryPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1308) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1308.as_str());
    }
    if let Some(var_1309) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1309.as_str());
    }
    if let Some(var_1310) = &input.parallelism_configuration {
        let mut object_1311 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1311,
            var_1310,
        )?;
        object_1311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1312) = &input.resource {
        object.key("Resource").string(var_1312.as_str());
    }
    if let Some(var_1313) = &input.search_expression {
        let mut object_1314 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_search_expression(
            &mut object_1314,
            var_1313,
        )?;
        object_1314.finish();
    }
    if let Some(var_1315) = &input.sort_by {
        object.key("SortBy").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.sort_order {
        object.key("SortOrder").string(var_1316.as_str());
    }
    if let Some(var_1317) = &input.next_token {
        object.key("NextToken").string(var_1317.as_str());
    }
    if let Some(var_1318) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1318).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_failure_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepFailureInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1319) = &input.callback_token {
        object.key("CallbackToken").string(var_1319.as_str());
    }
    if let Some(var_1320) = &input.failure_reason {
        object.key("FailureReason").string(var_1320.as_str());
    }
    if let Some(var_1321) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_success_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendPipelineExecutionStepSuccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1322) = &input.callback_token {
        object.key("CallbackToken").string(var_1322.as_str());
    }
    if let Some(var_1323) = &input.output_parameters {
        let mut array_1324 = object.key("OutputParameters").start_array();
        for item_1325 in var_1323 {
            {
                let mut object_1326 = array_1324.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_parameter(
                    &mut object_1326,
                    item_1325,
                )?;
                object_1326.finish();
            }
        }
        array_1324.finish();
    }
    if let Some(var_1327) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1327.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1328) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_1328.as_str());
    }
    if let Some(var_1329) = &input.stage_name {
        object.key("StageName").string(var_1329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1330) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1331) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1332) = &input.pipeline_name {
        object.key("PipelineName").string(var_1332.as_str());
    }
    if let Some(var_1333) = &input.pipeline_execution_display_name {
        object
            .key("PipelineExecutionDisplayName")
            .string(var_1333.as_str());
    }
    if let Some(var_1334) = &input.pipeline_parameters {
        let mut array_1335 = object.key("PipelineParameters").start_array();
        for item_1336 in var_1334 {
            {
                let mut object_1337 = array_1335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter(
                    &mut object_1337,
                    item_1336,
                )?;
                object_1337.finish();
            }
        }
        array_1335.finish();
    }
    if let Some(var_1338) = &input.pipeline_execution_description {
        object
            .key("PipelineExecutionDescription")
            .string(var_1338.as_str());
    }
    if let Some(var_1339) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1339.as_str());
    }
    if let Some(var_1340) = &input.parallelism_configuration {
        let mut object_1341 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1341,
            var_1340,
        )?;
        object_1341.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_auto_ml_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMlJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1342) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_compilation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1343) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_edge_deployment_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgeDeploymentStageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1344) = &input.edge_deployment_plan_name {
        object
            .key("EdgeDeploymentPlanName")
            .string(var_1344.as_str());
    }
    if let Some(var_1345) = &input.stage_name {
        object.key("StageName").string(var_1345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_edge_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1346) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_hyper_parameter_tuning_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1347) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_1347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_inference_recommendations_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopInferenceRecommendationsJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1348) = &input.job_name {
        object.key("JobName").string(var_1348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_labeling_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1349) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1350) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1351) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1352) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1352.as_str());
    }
    if let Some(var_1353) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_processing_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1354) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1355) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_transform_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1356) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1357) = &input.action_name {
        object.key("ActionName").string(var_1357.as_str());
    }
    if let Some(var_1358) = &input.description {
        object.key("Description").string(var_1358.as_str());
    }
    if let Some(var_1359) = &input.status {
        object.key("Status").string(var_1359.as_str());
    }
    if let Some(var_1360) = &input.properties {
        let mut object_1361 = object.key("Properties").start_object();
        for (key_1362, value_1363) in var_1360 {
            {
                object_1361.key(key_1362).string(value_1363.as_str());
            }
        }
        object_1361.finish();
    }
    if let Some(var_1364) = &input.properties_to_remove {
        let mut array_1365 = object.key("PropertiesToRemove").start_array();
        for item_1366 in var_1364 {
            {
                array_1365.value().string(item_1366.as_str());
            }
        }
        array_1365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_app_image_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1367) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1367.as_str());
    }
    if let Some(var_1368) = &input.kernel_gateway_image_config {
        let mut object_1369 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(
            &mut object_1369,
            var_1368,
        )?;
        object_1369.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1370) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1370.as_str());
    }
    if let Some(var_1371) = &input.artifact_name {
        object.key("ArtifactName").string(var_1371.as_str());
    }
    if let Some(var_1372) = &input.properties {
        let mut object_1373 = object.key("Properties").start_object();
        for (key_1374, value_1375) in var_1372 {
            {
                object_1373.key(key_1374).string(value_1375.as_str());
            }
        }
        object_1373.finish();
    }
    if let Some(var_1376) = &input.properties_to_remove {
        let mut array_1377 = object.key("PropertiesToRemove").start_array();
        for item_1378 in var_1376 {
            {
                array_1377.value().string(item_1378.as_str());
            }
        }
        array_1377.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_code_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1379) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1379.as_str());
    }
    if let Some(var_1380) = &input.git_config {
        let mut object_1381 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config_for_update(
            &mut object_1381,
            var_1380,
        )?;
        object_1381.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_context_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1382) = &input.context_name {
        object.key("ContextName").string(var_1382.as_str());
    }
    if let Some(var_1383) = &input.description {
        object.key("Description").string(var_1383.as_str());
    }
    if let Some(var_1384) = &input.properties {
        let mut object_1385 = object.key("Properties").start_object();
        for (key_1386, value_1387) in var_1384 {
            {
                object_1385.key(key_1386).string(value_1387.as_str());
            }
        }
        object_1385.finish();
    }
    if let Some(var_1388) = &input.properties_to_remove {
        let mut array_1389 = object.key("PropertiesToRemove").start_array();
        for item_1390 in var_1388 {
            {
                array_1389.value().string(item_1390.as_str());
            }
        }
        array_1389.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_device_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1391) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1391.as_str());
    }
    if let Some(var_1392) = &input.role_arn {
        object.key("RoleArn").string(var_1392.as_str());
    }
    if let Some(var_1393) = &input.description {
        object.key("Description").string(var_1393.as_str());
    }
    if let Some(var_1394) = &input.output_config {
        let mut object_1395 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(
            &mut object_1395,
            var_1394,
        )?;
        object_1395.finish();
    }
    if let Some(var_1396) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1396);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1397) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1397.as_str());
    }
    if let Some(var_1398) = &input.devices {
        let mut array_1399 = object.key("Devices").start_array();
        for item_1400 in var_1398 {
            {
                let mut object_1401 = array_1399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(
                    &mut object_1401,
                    item_1400,
                )?;
                object_1401.finish();
            }
        }
        array_1399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1402) = &input.domain_id {
        object.key("DomainId").string(var_1402.as_str());
    }
    if let Some(var_1403) = &input.default_user_settings {
        let mut object_1404 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1404, var_1403)?;
        object_1404.finish();
    }
    if let Some(var_1405) = &input.domain_settings_for_update {
        let mut object_1406 = object.key("DomainSettingsForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings_for_update(
            &mut object_1406,
            var_1405,
        )?;
        object_1406.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1407) = &input.endpoint_name {
        object.key("EndpointName").string(var_1407.as_str());
    }
    if let Some(var_1408) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1408.as_str());
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1409) = &input.exclude_retained_variant_properties {
        let mut array_1410 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1411 in var_1409 {
            {
                let mut object_1412 = array_1410.value().start_object();
                crate::json_ser::serialize_structure_crate_model_variant_property(
                    &mut object_1412,
                    item_1411,
                )?;
                object_1412.finish();
            }
        }
        array_1410.finish();
    }
    if let Some(var_1413) = &input.deployment_config {
        let mut object_1414 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(
            &mut object_1414,
            var_1413,
        )?;
        object_1414.finish();
    }
    if input.retain_deployment_config {
        object
            .key("RetainDeploymentConfig")
            .boolean(input.retain_deployment_config);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_weights_and_capacities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1415) = &input.endpoint_name {
        object.key("EndpointName").string(var_1415.as_str());
    }
    if let Some(var_1416) = &input.desired_weights_and_capacities {
        let mut array_1417 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1418 in var_1416 {
            {
                let mut object_1419 = array_1417.value().start_object();
                crate::json_ser::serialize_structure_crate_model_desired_weight_and_capacity(
                    &mut object_1419,
                    item_1418,
                )?;
                object_1419.finish();
            }
        }
        array_1417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1420) = &input.experiment_name {
        object.key("ExperimentName").string(var_1420.as_str());
    }
    if let Some(var_1421) = &input.display_name {
        object.key("DisplayName").string(var_1421.as_str());
    }
    if let Some(var_1422) = &input.description {
        object.key("Description").string(var_1422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_feature_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFeatureGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1423) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_1423.as_str());
    }
    if let Some(var_1424) = &input.feature_additions {
        let mut array_1425 = object.key("FeatureAdditions").start_array();
        for item_1426 in var_1424 {
            {
                let mut object_1427 = array_1425.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(
                    &mut object_1427,
                    item_1426,
                )?;
                object_1427.finish();
            }
        }
        array_1425.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_feature_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFeatureMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1428) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_1428.as_str());
    }
    if let Some(var_1429) = &input.feature_name {
        object.key("FeatureName").string(var_1429.as_str());
    }
    if let Some(var_1430) = &input.description {
        object.key("Description").string(var_1430.as_str());
    }
    if let Some(var_1431) = &input.parameter_additions {
        let mut array_1432 = object.key("ParameterAdditions").start_array();
        for item_1433 in var_1431 {
            {
                let mut object_1434 = array_1432.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_parameter(
                    &mut object_1434,
                    item_1433,
                )?;
                object_1434.finish();
            }
        }
        array_1432.finish();
    }
    if let Some(var_1435) = &input.parameter_removals {
        let mut array_1436 = object.key("ParameterRemovals").start_array();
        for item_1437 in var_1435 {
            {
                array_1436.value().string(item_1437.as_str());
            }
        }
        array_1436.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1438) = &input.delete_properties {
        let mut array_1439 = object.key("DeleteProperties").start_array();
        for item_1440 in var_1438 {
            {
                array_1439.value().string(item_1440.as_str());
            }
        }
        array_1439.finish();
    }
    if let Some(var_1441) = &input.description {
        object.key("Description").string(var_1441.as_str());
    }
    if let Some(var_1442) = &input.display_name {
        object.key("DisplayName").string(var_1442.as_str());
    }
    if let Some(var_1443) = &input.image_name {
        object.key("ImageName").string(var_1443.as_str());
    }
    if let Some(var_1444) = &input.role_arn {
        object.key("RoleArn").string(var_1444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_model_package_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1445) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1445.as_str());
    }
    if let Some(var_1446) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1446.as_str());
    }
    if let Some(var_1447) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1447.as_str());
    }
    if let Some(var_1448) = &input.customer_metadata_properties {
        let mut object_1449 = object.key("CustomerMetadataProperties").start_object();
        for (key_1450, value_1451) in var_1448 {
            {
                object_1449.key(key_1450).string(value_1451.as_str());
            }
        }
        object_1449.finish();
    }
    if let Some(var_1452) = &input.customer_metadata_properties_to_remove {
        let mut array_1453 = object
            .key("CustomerMetadataPropertiesToRemove")
            .start_array();
        for item_1454 in var_1452 {
            {
                array_1453.value().string(item_1454.as_str());
            }
        }
        array_1453.finish();
    }
    if let Some(var_1455) = &input.additional_inference_specifications_to_add {
        let mut array_1456 = object
            .key("AdditionalInferenceSpecificationsToAdd")
            .start_array();
        for item_1457 in var_1455 {
            {
                let mut object_1458 = array_1456.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_1458, item_1457)?;
                object_1458.finish();
            }
        }
        array_1456.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_monitoring_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1459) = &input.monitoring_schedule_name {
        object
            .key("MonitoringScheduleName")
            .string(var_1459.as_str());
    }
    if let Some(var_1460) = &input.monitoring_schedule_config {
        let mut object_1461 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(
            &mut object_1461,
            var_1460,
        )?;
        object_1461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1462) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.instance_type {
        object.key("InstanceType").string(var_1463.as_str());
    }
    if let Some(var_1464) = &input.role_arn {
        object.key("RoleArn").string(var_1464.as_str());
    }
    if let Some(var_1465) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1465.as_str());
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1466) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1466).into()),
        );
    }
    if let Some(var_1467) = &input.default_code_repository {
        object
            .key("DefaultCodeRepository")
            .string(var_1467.as_str());
    }
    if let Some(var_1468) = &input.additional_code_repositories {
        let mut array_1469 = object.key("AdditionalCodeRepositories").start_array();
        for item_1470 in var_1468 {
            {
                array_1469.value().string(item_1470.as_str());
            }
        }
        array_1469.finish();
    }
    if let Some(var_1471) = &input.accelerator_types {
        let mut array_1472 = object.key("AcceleratorTypes").start_array();
        for item_1473 in var_1471 {
            {
                array_1472.value().string(item_1473.as_str());
            }
        }
        array_1472.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1474) = &input.root_access {
        object.key("RootAccess").string(var_1474.as_str());
    }
    if let Some(var_1475) = &input.instance_metadata_service_configuration {
        let mut object_1476 = object
            .key("InstanceMetadataServiceConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(
            &mut object_1476,
            var_1475,
        )?;
        object_1476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_lifecycle_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1477) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1477.as_str());
    }
    if let Some(var_1478) = &input.on_create {
        let mut array_1479 = object.key("OnCreate").start_array();
        for item_1480 in var_1478 {
            {
                let mut object_1481 = array_1479.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1481,
                    item_1480,
                )?;
                object_1481.finish();
            }
        }
        array_1479.finish();
    }
    if let Some(var_1482) = &input.on_start {
        let mut array_1483 = object.key("OnStart").start_array();
        for item_1484 in var_1482 {
            {
                let mut object_1485 = array_1483.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(
                    &mut object_1485,
                    item_1484,
                )?;
                object_1485.finish();
            }
        }
        array_1483.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1486) = &input.pipeline_name {
        object.key("PipelineName").string(var_1486.as_str());
    }
    if let Some(var_1487) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1487.as_str());
    }
    if let Some(var_1488) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1488.as_str());
    }
    if let Some(var_1489) = &input.pipeline_definition_s3_location {
        let mut object_1490 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(
            &mut object_1490,
            var_1489,
        )?;
        object_1490.finish();
    }
    if let Some(var_1491) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1491.as_str());
    }
    if let Some(var_1492) = &input.role_arn {
        object.key("RoleArn").string(var_1492.as_str());
    }
    if let Some(var_1493) = &input.parallelism_configuration {
        let mut object_1494 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1494,
            var_1493,
        )?;
        object_1494.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1495) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1495.as_str());
    }
    if let Some(var_1496) = &input.pipeline_execution_description {
        object
            .key("PipelineExecutionDescription")
            .string(var_1496.as_str());
    }
    if let Some(var_1497) = &input.pipeline_execution_display_name {
        object
            .key("PipelineExecutionDisplayName")
            .string(var_1497.as_str());
    }
    if let Some(var_1498) = &input.parallelism_configuration {
        let mut object_1499 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(
            &mut object_1499,
            var_1498,
        )?;
        object_1499.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1500) = &input.project_name {
        object.key("ProjectName").string(var_1500.as_str());
    }
    if let Some(var_1501) = &input.project_description {
        object.key("ProjectDescription").string(var_1501.as_str());
    }
    if let Some(var_1502) = &input.service_catalog_provisioning_update_details {
        let mut object_1503 = object
            .key("ServiceCatalogProvisioningUpdateDetails")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_update_details(&mut object_1503, var_1502)?;
        object_1503.finish();
    }
    if let Some(var_1504) = &input.tags {
        let mut array_1505 = object.key("Tags").start_array();
        for item_1506 in var_1504 {
            {
                let mut object_1507 = array_1505.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1507, item_1506)?;
                object_1507.finish();
            }
        }
        array_1505.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_training_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1508) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1508.as_str());
    }
    if let Some(var_1509) = &input.profiler_config {
        let mut object_1510 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config_for_update(
            &mut object_1510,
            var_1509,
        )?;
        object_1510.finish();
    }
    if let Some(var_1511) = &input.profiler_rule_configurations {
        let mut array_1512 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1513 in var_1511 {
            {
                let mut object_1514 = array_1512.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(
                    &mut object_1514,
                    item_1513,
                )?;
                object_1514.finish();
            }
        }
        array_1512.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1515) = &input.trial_name {
        object.key("TrialName").string(var_1515.as_str());
    }
    if let Some(var_1516) = &input.display_name {
        object.key("DisplayName").string(var_1516.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_component_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1517) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1517.as_str());
    }
    if let Some(var_1518) = &input.display_name {
        object.key("DisplayName").string(var_1518.as_str());
    }
    if let Some(var_1519) = &input.status {
        let mut object_1520 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(
            &mut object_1520,
            var_1519,
        )?;
        object_1520.finish();
    }
    if let Some(var_1521) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_1521, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1522) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_1522, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1523) = &input.parameters {
        let mut object_1524 = object.key("Parameters").start_object();
        for (key_1525, value_1526) in var_1523 {
            {
                let mut object_1527 = object_1524.key(key_1525).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(
                    &mut object_1527,
                    value_1526,
                )?;
                object_1527.finish();
            }
        }
        object_1524.finish();
    }
    if let Some(var_1528) = &input.parameters_to_remove {
        let mut array_1529 = object.key("ParametersToRemove").start_array();
        for item_1530 in var_1528 {
            {
                array_1529.value().string(item_1530.as_str());
            }
        }
        array_1529.finish();
    }
    if let Some(var_1531) = &input.input_artifacts {
        let mut object_1532 = object.key("InputArtifacts").start_object();
        for (key_1533, value_1534) in var_1531 {
            {
                let mut object_1535 = object_1532.key(key_1533).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1535,
                    value_1534,
                )?;
                object_1535.finish();
            }
        }
        object_1532.finish();
    }
    if let Some(var_1536) = &input.input_artifacts_to_remove {
        let mut array_1537 = object.key("InputArtifactsToRemove").start_array();
        for item_1538 in var_1536 {
            {
                array_1537.value().string(item_1538.as_str());
            }
        }
        array_1537.finish();
    }
    if let Some(var_1539) = &input.output_artifacts {
        let mut object_1540 = object.key("OutputArtifacts").start_object();
        for (key_1541, value_1542) in var_1539 {
            {
                let mut object_1543 = object_1540.key(key_1541).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(
                    &mut object_1543,
                    value_1542,
                )?;
                object_1543.finish();
            }
        }
        object_1540.finish();
    }
    if let Some(var_1544) = &input.output_artifacts_to_remove {
        let mut array_1545 = object.key("OutputArtifactsToRemove").start_array();
        for item_1546 in var_1544 {
            {
                array_1545.value().string(item_1546.as_str());
            }
        }
        array_1545.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1547) = &input.domain_id {
        object.key("DomainId").string(var_1547.as_str());
    }
    if let Some(var_1548) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1548.as_str());
    }
    if let Some(var_1549) = &input.user_settings {
        let mut object_1550 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1550, var_1549)?;
        object_1550.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workforce_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1551) = &input.workforce_name {
        object.key("WorkforceName").string(var_1551.as_str());
    }
    if let Some(var_1552) = &input.source_ip_config {
        let mut object_1553 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(
            &mut object_1553,
            var_1552,
        )?;
        object_1553.finish();
    }
    if let Some(var_1554) = &input.oidc_config {
        let mut object_1555 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_1555, var_1554)?;
        object_1555.finish();
    }
    if let Some(var_1556) = &input.workforce_vpc_config {
        let mut object_1557 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(
            &mut object_1557,
            var_1556,
        )?;
        object_1557.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workteam_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1558) = &input.workteam_name {
        object.key("WorkteamName").string(var_1558.as_str());
    }
    if let Some(var_1559) = &input.member_definitions {
        let mut array_1560 = object.key("MemberDefinitions").start_array();
        for item_1561 in var_1559 {
            {
                let mut object_1562 = array_1560.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(
                    &mut object_1562,
                    item_1561,
                )?;
                object_1562.finish();
            }
        }
        array_1560.finish();
    }
    if let Some(var_1563) = &input.description {
        object.key("Description").string(var_1563.as_str());
    }
    if let Some(var_1564) = &input.notification_configuration {
        let mut object_1565 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(
            &mut object_1565,
            var_1564,
        )?;
        object_1565.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1566) = &input.key {
        object.key("Key").string(var_1566.as_str());
    }
    if let Some(var_1567) = &input.value {
        object.key("Value").string(var_1567.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1568) = &input.source_uri {
        object.key("SourceUri").string(var_1568.as_str());
    }
    if let Some(var_1569) = &input.source_type {
        object.key("SourceType").string(var_1569.as_str());
    }
    if let Some(var_1570) = &input.source_id {
        object.key("SourceId").string(var_1570.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1571) = &input.commit_id {
        object.key("CommitId").string(var_1571.as_str());
    }
    if let Some(var_1572) = &input.repository {
        object.key("Repository").string(var_1572.as_str());
    }
    if let Some(var_1573) = &input.generated_by {
        object.key("GeneratedBy").string(var_1573.as_str());
    }
    if let Some(var_1574) = &input.project_id {
        object.key("ProjectId").string(var_1574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1575) = &input.training_image {
        object.key("TrainingImage").string(var_1575.as_str());
    }
    if let Some(var_1576) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1576.as_str());
    }
    if let Some(var_1577) = &input.supported_hyper_parameters {
        let mut array_1578 = object.key("SupportedHyperParameters").start_array();
        for item_1579 in var_1577 {
            {
                let mut object_1580 = array_1578.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_specification(
                    &mut object_1580,
                    item_1579,
                )?;
                object_1580.finish();
            }
        }
        array_1578.finish();
    }
    if let Some(var_1581) = &input.supported_training_instance_types {
        let mut array_1582 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1583 in var_1581 {
            {
                array_1582.value().string(item_1583.as_str());
            }
        }
        array_1582.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1584) = &input.metric_definitions {
        let mut array_1585 = object.key("MetricDefinitions").start_array();
        for item_1586 in var_1584 {
            {
                let mut object_1587 = array_1585.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_1587,
                    item_1586,
                )?;
                object_1587.finish();
            }
        }
        array_1585.finish();
    }
    if let Some(var_1588) = &input.training_channels {
        let mut array_1589 = object.key("TrainingChannels").start_array();
        for item_1590 in var_1588 {
            {
                let mut object_1591 = array_1589.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel_specification(
                    &mut object_1591,
                    item_1590,
                )?;
                object_1591.finish();
            }
        }
        array_1589.finish();
    }
    if let Some(var_1592) = &input.supported_tuning_job_objective_metrics {
        let mut array_1593 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1594 in var_1592 {
            {
                let mut object_1595 = array_1593.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(&mut object_1595, item_1594)?;
                object_1595.finish();
            }
        }
        array_1593.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1596) = &input.containers {
        let mut array_1597 = object.key("Containers").start_array();
        for item_1598 in var_1596 {
            {
                let mut object_1599 = array_1597.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1599, item_1598)?;
                object_1599.finish();
            }
        }
        array_1597.finish();
    }
    if let Some(var_1600) = &input.supported_transform_instance_types {
        let mut array_1601 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1602 in var_1600 {
            {
                array_1601.value().string(item_1602.as_str());
            }
        }
        array_1601.finish();
    }
    if let Some(var_1603) = &input.supported_realtime_inference_instance_types {
        let mut array_1604 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1605 in var_1603 {
            {
                array_1604.value().string(item_1605.as_str());
            }
        }
        array_1604.finish();
    }
    if let Some(var_1606) = &input.supported_content_types {
        let mut array_1607 = object.key("SupportedContentTypes").start_array();
        for item_1608 in var_1606 {
            {
                array_1607.value().string(item_1608.as_str());
            }
        }
        array_1607.finish();
    }
    if let Some(var_1609) = &input.supported_response_mime_types {
        let mut array_1610 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1611 in var_1609 {
            {
                array_1610.value().string(item_1611.as_str());
            }
        }
        array_1610.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1612) = &input.validation_role {
        object.key("ValidationRole").string(var_1612.as_str());
    }
    if let Some(var_1613) = &input.validation_profiles {
        let mut array_1614 = object.key("ValidationProfiles").start_array();
        for item_1615 in var_1613 {
            {
                let mut object_1616 = array_1614.value().start_object();
                crate::json_ser::serialize_structure_crate_model_algorithm_validation_profile(
                    &mut object_1616,
                    item_1615,
                )?;
                object_1616.finish();
            }
        }
        array_1614.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1617) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1617.as_str());
    }
    if let Some(var_1618) = &input.sage_maker_image_version_arn {
        object
            .key("SageMakerImageVersionArn")
            .string(var_1618.as_str());
    }
    if let Some(var_1619) = &input.instance_type {
        object.key("InstanceType").string(var_1619.as_str());
    }
    if let Some(var_1620) = &input.lifecycle_config_arn {
        object.key("LifecycleConfigArn").string(var_1620.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_image_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1621) = &input.kernel_specs {
        let mut array_1622 = object.key("KernelSpecs").start_array();
        for item_1623 in var_1621 {
            {
                let mut object_1624 = array_1622.value().start_object();
                crate::json_ser::serialize_structure_crate_model_kernel_spec(
                    &mut object_1624,
                    item_1623,
                )?;
                object_1624.finish();
            }
        }
        array_1622.finish();
    }
    if let Some(var_1625) = &input.file_system_config {
        let mut object_1626 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_config(
            &mut object_1626,
            var_1625,
        )?;
        object_1626.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1627) = &input.source_uri {
        object.key("SourceUri").string(var_1627.as_str());
    }
    if let Some(var_1628) = &input.source_types {
        let mut array_1629 = object.key("SourceTypes").start_array();
        for item_1630 in var_1628 {
            {
                let mut object_1631 = array_1629.value().start_object();
                crate::json_ser::serialize_structure_crate_model_artifact_source_type(
                    &mut object_1631,
                    item_1630,
                )?;
                object_1631.finish();
            }
        }
        array_1629.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlChannel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1632) = &input.data_source {
        let mut object_1633 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_source(
            &mut object_1633,
            var_1632,
        )?;
        object_1633.finish();
    }
    if let Some(var_1634) = &input.compression_type {
        object.key("CompressionType").string(var_1634.as_str());
    }
    if let Some(var_1635) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1635.as_str());
    }
    if let Some(var_1636) = &input.content_type {
        object.key("ContentType").string(var_1636.as_str());
    }
    if let Some(var_1637) = &input.channel_type {
        object.key("ChannelType").string(var_1637.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_output_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlOutputDataConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1638) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1638.as_str());
    }
    if let Some(var_1639) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1639.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobObjective,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1640) = &input.metric_name {
        object.key("MetricName").string(var_1640.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1641) = &input.completion_criteria {
        let mut object_1642 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_completion_criteria(
            &mut object_1642,
            var_1641,
        )?;
        object_1642.finish();
    }
    if let Some(var_1643) = &input.security_config {
        let mut object_1644 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_security_config(
            &mut object_1644,
            var_1643,
        )?;
        object_1644.finish();
    }
    if let Some(var_1645) = &input.data_split_config {
        let mut object_1646 = object.key("DataSplitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_split_config(
            &mut object_1646,
            var_1645,
        )?;
        object_1646.finish();
    }
    if let Some(var_1647) = &input.candidate_generation_config {
        let mut object_1648 = object.key("CandidateGenerationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_candidate_generation_config(
            &mut object_1648,
            var_1647,
        )?;
        object_1648.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_deploy_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1649) = &input.endpoint_name {
        object.key("EndpointName").string(var_1649.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1650) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1650.as_str());
    }
    if let Some(var_1651) = &input.branch {
        object.key("Branch").string(var_1651.as_str());
    }
    if let Some(var_1652) = &input.secret_arn {
        object.key("SecretArn").string(var_1652.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1653) = &input.s3_uri {
        object.key("S3Uri").string(var_1653.as_str());
    }
    if let Some(var_1654) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1654.as_str());
    }
    if let Some(var_1655) = &input.framework {
        object.key("Framework").string(var_1655.as_str());
    }
    if let Some(var_1656) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1656.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1657) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1657.as_str());
    }
    if let Some(var_1658) = &input.target_device {
        object.key("TargetDevice").string(var_1658.as_str());
    }
    if let Some(var_1659) = &input.target_platform {
        let mut object_1660 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_target_platform(
            &mut object_1660,
            var_1659,
        )?;
        object_1660.finish();
    }
    if let Some(var_1661) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1661.as_str());
    }
    if let Some(var_1662) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_neo_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeoVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1663) = &input.security_group_ids {
        let mut array_1664 = object.key("SecurityGroupIds").start_array();
        for item_1665 in var_1663 {
            {
                array_1664.value().string(item_1665.as_str());
            }
        }
        array_1664.finish();
    }
    if let Some(var_1666) = &input.subnets {
        let mut array_1667 = object.key("Subnets").start_array();
        for item_1668 in var_1666 {
            {
                array_1667.value().string(item_1668.as_str());
            }
        }
        array_1667.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1669) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1669).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_context_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1670) = &input.source_uri {
        object.key("SourceUri").string(var_1670.as_str());
    }
    if let Some(var_1671) = &input.source_type {
        object.key("SourceType").string(var_1671.as_str());
    }
    if let Some(var_1672) = &input.source_id {
        object.key("SourceId").string(var_1672.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1673) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1673.as_str());
    }
    if let Some(var_1674) = &input.constraints_resource {
        let mut object_1675 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1675,
            var_1674,
        )?;
        object_1675.finish();
    }
    if let Some(var_1676) = &input.statistics_resource {
        let mut object_1677 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_1677,
            var_1676,
        )?;
        object_1677.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1678) = &input.image_uri {
        object.key("ImageUri").string(var_1678.as_str());
    }
    if let Some(var_1679) = &input.container_entrypoint {
        let mut array_1680 = object.key("ContainerEntrypoint").start_array();
        for item_1681 in var_1679 {
            {
                array_1680.value().string(item_1681.as_str());
            }
        }
        array_1680.finish();
    }
    if let Some(var_1682) = &input.container_arguments {
        let mut array_1683 = object.key("ContainerArguments").start_array();
        for item_1684 in var_1682 {
            {
                array_1683.value().string(item_1684.as_str());
            }
        }
        array_1683.finish();
    }
    if let Some(var_1685) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_1685.as_str());
    }
    if let Some(var_1686) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1686.as_str());
    }
    if let Some(var_1687) = &input.environment {
        let mut object_1688 = object.key("Environment").start_object();
        for (key_1689, value_1690) in var_1687 {
            {
                object_1688.key(key_1689).string(value_1690.as_str());
            }
        }
        object_1688.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1691) = &input.endpoint_input {
        let mut object_1692 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1692,
            var_1691,
        )?;
        object_1692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1693) = &input.monitoring_outputs {
        let mut array_1694 = object.key("MonitoringOutputs").start_array();
        for item_1695 in var_1693 {
            {
                let mut object_1696 = array_1694.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_output(
                    &mut object_1696,
                    item_1695,
                )?;
                object_1696.finish();
            }
        }
        array_1694.finish();
    }
    if let Some(var_1697) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1698) = &input.cluster_config {
        let mut object_1699 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_cluster_config(
            &mut object_1699,
            var_1698,
        )?;
        object_1699.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_network_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1700) = &input.vpc_config {
        let mut object_1701 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1701, var_1700)?;
        object_1701.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1702) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1702.as_str());
    }
    if let Some(var_1703) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1703.as_str());
    }
    if let Some(var_1704) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1704.as_str());
    }
    if let Some(var_1705) = &input.preset_deployment_config {
        object
            .key("PresetDeploymentConfig")
            .string(var_1705.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1706) = &input.execution_role {
        object.key("ExecutionRole").string(var_1706.as_str());
    }
    if let Some(var_1707) = &input.security_groups {
        let mut array_1708 = object.key("SecurityGroups").start_array();
        for item_1709 in var_1707 {
            {
                array_1708.value().string(item_1709.as_str());
            }
        }
        array_1708.finish();
    }
    if let Some(var_1710) = &input.sharing_settings {
        let mut object_1711 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sharing_settings(
            &mut object_1711,
            var_1710,
        )?;
        object_1711.finish();
    }
    if let Some(var_1712) = &input.jupyter_server_app_settings {
        let mut object_1713 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_jupyter_server_app_settings(
            &mut object_1713,
            var_1712,
        )?;
        object_1713.finish();
    }
    if let Some(var_1714) = &input.kernel_gateway_app_settings {
        let mut object_1715 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_app_settings(
            &mut object_1715,
            var_1714,
        )?;
        object_1715.finish();
    }
    if let Some(var_1716) = &input.tensor_board_app_settings {
        let mut object_1717 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_app_settings(
            &mut object_1717,
            var_1716,
        )?;
        object_1717.finish();
    }
    if let Some(var_1718) = &input.r_studio_server_pro_app_settings {
        let mut object_1719 = object.key("RStudioServerProAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_app_settings(
            &mut object_1719,
            var_1718,
        )?;
        object_1719.finish();
    }
    if let Some(var_1720) = &input.r_session_app_settings {
        let mut object_1721 = object.key("RSessionAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_session_app_settings(
            &mut object_1721,
            var_1720,
        )?;
        object_1721.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1722) = &input.security_group_ids {
        let mut array_1723 = object.key("SecurityGroupIds").start_array();
        for item_1724 in var_1722 {
            {
                array_1723.value().string(item_1724.as_str());
            }
        }
        array_1723.finish();
    }
    if let Some(var_1725) = &input.r_studio_server_pro_domain_settings {
        let mut object_1726 = object.key("RStudioServerProDomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings(
            &mut object_1726,
            var_1725,
        )?;
        object_1726.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_deployment_model_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeDeploymentModelConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1727) = &input.model_handle {
        object.key("ModelHandle").string(var_1727.as_str());
    }
    if let Some(var_1728) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_stage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentStage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1729) = &input.stage_name {
        object.key("StageName").string(var_1729.as_str());
    }
    if let Some(var_1730) = &input.device_selection_config {
        let mut object_1731 = object.key("DeviceSelectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_device_selection_config(
            &mut object_1731,
            var_1730,
        )?;
        object_1731.finish();
    }
    if let Some(var_1732) = &input.deployment_config {
        let mut object_1733 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_deployment_config(
            &mut object_1733,
            var_1732,
        )?;
        object_1733.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1734) = &input.blue_green_update_policy {
        let mut object_1735 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_blue_green_update_policy(
            &mut object_1735,
            var_1734,
        )?;
        object_1735.finish();
    }
    if let Some(var_1736) = &input.auto_rollback_configuration {
        let mut object_1737 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_rollback_config(
            &mut object_1737,
            var_1736,
        )?;
        object_1737.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1738) = &input.variant_name {
        object.key("VariantName").string(var_1738.as_str());
    }
    if let Some(var_1739) = &input.model_name {
        object.key("ModelName").string(var_1739.as_str());
    }
    if let Some(var_1740) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1740).into()),
        );
    }
    if let Some(var_1741) = &input.instance_type {
        object.key("InstanceType").string(var_1741.as_str());
    }
    if let Some(var_1742) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1742).into()),
        );
    }
    if let Some(var_1743) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1743.as_str());
    }
    if let Some(var_1744) = &input.core_dump_config {
        let mut object_1745 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_core_dump_config(
            &mut object_1745,
            var_1744,
        )?;
        object_1745.finish();
    }
    if let Some(var_1746) = &input.serverless_config {
        let mut object_1747 = object.key("ServerlessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_serverless_config(
            &mut object_1747,
            var_1746,
        )?;
        object_1747.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_capture_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1748) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1748).into()),
        );
    }
    if let Some(var_1749) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1749.as_str());
    }
    if let Some(var_1750) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1750.as_str());
    }
    if let Some(var_1751) = &input.capture_options {
        let mut array_1752 = object.key("CaptureOptions").start_array();
        for item_1753 in var_1751 {
            {
                let mut object_1754 = array_1752.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capture_option(
                    &mut object_1754,
                    item_1753,
                )?;
                object_1754.finish();
            }
        }
        array_1752.finish();
    }
    if let Some(var_1755) = &input.capture_content_type_header {
        let mut object_1756 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_capture_content_type_header(
            &mut object_1756,
            var_1755,
        )?;
        object_1756.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1757) = &input.client_config {
        let mut object_1758 = object.key("ClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_client_config(
            &mut object_1758,
            var_1757,
        )?;
        object_1758.finish();
    }
    if let Some(var_1759) = &input.output_config {
        let mut object_1760 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_output_config(
            &mut object_1760,
            var_1759,
        )?;
        object_1760.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_feature_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1761) = &input.feature_name {
        object.key("FeatureName").string(var_1761.as_str());
    }
    if let Some(var_1762) = &input.feature_type {
        object.key("FeatureType").string(var_1762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1763) = &input.security_config {
        let mut object_1764 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_security_config(
            &mut object_1764,
            var_1763,
        )?;
        object_1764.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_offline_store_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1765) = &input.s3_storage_config {
        let mut object_1766 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_storage_config(
            &mut object_1766,
            var_1765,
        )?;
        object_1766.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1767) = &input.data_catalog_config {
        let mut object_1768 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_config(
            &mut object_1768,
            var_1767,
        )?;
        object_1768.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_request_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1769) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1769.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1770) = &input.human_loop_activation_conditions_config {
        let mut object_1771 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_conditions_config(
            &mut object_1771,
            var_1770,
        )?;
        object_1771.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1772) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1772.as_str());
    }
    if let Some(var_1773) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1773.as_str());
    }
    if let Some(var_1774) = &input.task_title {
        object.key("TaskTitle").string(var_1774.as_str());
    }
    if let Some(var_1775) = &input.task_description {
        object.key("TaskDescription").string(var_1775.as_str());
    }
    if let Some(var_1776) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1776).into()),
        );
    }
    if let Some(var_1777) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1777).into()),
        );
    }
    if let Some(var_1778) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1778).into()),
        );
    }
    if let Some(var_1779) = &input.task_keywords {
        let mut array_1780 = object.key("TaskKeywords").start_array();
        for item_1781 in var_1779 {
            {
                array_1780.value().string(item_1781.as_str());
            }
        }
        array_1780.finish();
    }
    if let Some(var_1782) = &input.public_workforce_task_price {
        let mut object_1783 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1783,
            var_1782,
        )?;
        object_1783.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_flow_definition_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1784) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1784.as_str());
    }
    if let Some(var_1785) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1786) = &input.content {
        object.key("Content").string(var_1786.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1787) = &input.strategy {
        object.key("Strategy").string(var_1787.as_str());
    }
    if let Some(var_1788) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1789 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1789,
            var_1788,
        )?;
        object_1789.finish();
    }
    if let Some(var_1790) = &input.resource_limits {
        let mut object_1791 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_limits(
            &mut object_1791,
            var_1790,
        )?;
        object_1791.finish();
    }
    if let Some(var_1792) = &input.parameter_ranges {
        let mut object_1793 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1793,
            var_1792,
        )?;
        object_1793.finish();
    }
    if let Some(var_1794) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1794.as_str());
    }
    if let Some(var_1795) = &input.tuning_job_completion_criteria {
        let mut object_1796 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_tuning_job_completion_criteria(
            &mut object_1796,
            var_1795,
        )?;
        object_1796.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_training_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1797) = &input.definition_name {
        object.key("DefinitionName").string(var_1797.as_str());
    }
    if let Some(var_1798) = &input.tuning_objective {
        let mut object_1799 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
            &mut object_1799,
            var_1798,
        )?;
        object_1799.finish();
    }
    if let Some(var_1800) = &input.hyper_parameter_ranges {
        let mut object_1801 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_1801,
            var_1800,
        )?;
        object_1801.finish();
    }
    if let Some(var_1802) = &input.static_hyper_parameters {
        let mut object_1803 = object.key("StaticHyperParameters").start_object();
        for (key_1804, value_1805) in var_1802 {
            {
                object_1803.key(key_1804).string(value_1805.as_str());
            }
        }
        object_1803.finish();
    }
    if let Some(var_1806) = &input.algorithm_specification {
        let mut object_1807 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_algorithm_specification(
            &mut object_1807,
            var_1806,
        )?;
        object_1807.finish();
    }
    if let Some(var_1808) = &input.role_arn {
        object.key("RoleArn").string(var_1808.as_str());
    }
    if let Some(var_1809) = &input.input_data_config {
        let mut array_1810 = object.key("InputDataConfig").start_array();
        for item_1811 in var_1809 {
            {
                let mut object_1812 = array_1810.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_1812,
                    item_1811,
                )?;
                object_1812.finish();
            }
        }
        array_1810.finish();
    }
    if let Some(var_1813) = &input.vpc_config {
        let mut object_1814 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1814, var_1813)?;
        object_1814.finish();
    }
    if let Some(var_1815) = &input.output_data_config {
        let mut object_1816 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_1816,
            var_1815,
        )?;
        object_1816.finish();
    }
    if let Some(var_1817) = &input.resource_config {
        let mut object_1818 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_1818,
            var_1817,
        )?;
        object_1818.finish();
    }
    if let Some(var_1819) = &input.stopping_condition {
        let mut object_1820 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_1820,
            var_1819,
        )?;
        object_1820.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1821) = &input.checkpoint_config {
        let mut object_1822 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(
            &mut object_1822,
            var_1821,
        )?;
        object_1822.finish();
    }
    if let Some(var_1823) = &input.retry_strategy {
        let mut object_1824 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(
            &mut object_1824,
            var_1823,
        )?;
        object_1824.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1825) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1826 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1827 in var_1825 {
            {
                let mut object_1828 = array_1826.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
                    &mut object_1828,
                    item_1827,
                )?;
                object_1828.finish();
            }
        }
        array_1826.finish();
    }
    if let Some(var_1829) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1829.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobInputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1830) = &input.model_package_version_arn {
        object
            .key("ModelPackageVersionArn")
            .string(var_1830.as_str());
    }
    if let Some(var_1831) = &input.job_duration_in_seconds {
        object.key("JobDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1831).into()),
        );
    }
    if let Some(var_1832) = &input.traffic_pattern {
        let mut object_1833 = object.key("TrafficPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_pattern(
            &mut object_1833,
            var_1832,
        )?;
        object_1833.finish();
    }
    if let Some(var_1834) = &input.resource_limit {
        let mut object_1835 = object.key("ResourceLimit").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_resource_limit(
            &mut object_1835,
            var_1834,
        )?;
        object_1835.finish();
    }
    if let Some(var_1836) = &input.endpoint_configurations {
        let mut array_1837 = object.key("EndpointConfigurations").start_array();
        for item_1838 in var_1836 {
            {
                let mut object_1839 = array_1837.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_input_configuration(
                    &mut object_1839,
                    item_1838,
                )?;
                object_1839.finish();
            }
        }
        array_1837.finish();
    }
    if let Some(var_1840) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1840.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_stopping_conditions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobStoppingConditions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_invocations != 0 {
        object.key("MaxInvocations").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_invocations).into()),
        );
    }
    if let Some(var_1841) = &input.model_latency_thresholds {
        let mut array_1842 = object.key("ModelLatencyThresholds").start_array();
        for item_1843 in var_1841 {
            {
                let mut object_1844 = array_1842.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_latency_threshold(
                    &mut object_1844,
                    item_1843,
                )?;
                object_1844.finish();
            }
        }
        array_1842.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1845) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1845.as_str());
    }
    if let Some(var_1846) = &input.compiled_output_config {
        let mut object_1847 = object.key("CompiledOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_compiled_output_config(
            &mut object_1847,
            var_1846,
        )?;
        object_1847.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1848) = &input.data_source {
        let mut object_1849 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_source(
            &mut object_1849,
            var_1848,
        )?;
        object_1849.finish();
    }
    if let Some(var_1850) = &input.data_attributes {
        let mut object_1851 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_attributes(
            &mut object_1851,
            var_1850,
        )?;
        object_1851.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1852) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1852.as_str());
    }
    if let Some(var_1853) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1853.as_str());
    }
    if let Some(var_1854) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1854.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_stopping_conditions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1855) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1855).into()),
        );
    }
    if let Some(var_1856) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1856).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_algorithms_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1857) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1857.as_str());
    }
    if let Some(var_1858) = &input.initial_active_learning_model_arn {
        object
            .key("InitialActiveLearningModelArn")
            .string(var_1858.as_str());
    }
    if let Some(var_1859) = &input.labeling_job_resource_config {
        let mut object_1860 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_resource_config(
            &mut object_1860,
            var_1859,
        )?;
        object_1860.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_task_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1861) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1861.as_str());
    }
    if let Some(var_1862) = &input.ui_config {
        let mut object_1863 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_config(&mut object_1863, var_1862)?;
        object_1863.finish();
    }
    if let Some(var_1864) = &input.pre_human_task_lambda_arn {
        object
            .key("PreHumanTaskLambdaArn")
            .string(var_1864.as_str());
    }
    if let Some(var_1865) = &input.task_keywords {
        let mut array_1866 = object.key("TaskKeywords").start_array();
        for item_1867 in var_1865 {
            {
                array_1866.value().string(item_1867.as_str());
            }
        }
        array_1866.finish();
    }
    if let Some(var_1868) = &input.task_title {
        object.key("TaskTitle").string(var_1868.as_str());
    }
    if let Some(var_1869) = &input.task_description {
        object.key("TaskDescription").string(var_1869.as_str());
    }
    if let Some(var_1870) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1870).into()),
        );
    }
    if let Some(var_1871) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1871).into()),
        );
    }
    if let Some(var_1872) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1872).into()),
        );
    }
    if let Some(var_1873) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1873).into()),
        );
    }
    if let Some(var_1874) = &input.annotation_consolidation_config {
        let mut object_1875 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_annotation_consolidation_config(
            &mut object_1875,
            var_1874,
        )?;
        object_1875.finish();
    }
    if let Some(var_1876) = &input.public_workforce_task_price {
        let mut object_1877 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(
            &mut object_1877,
            var_1876,
        )?;
        object_1877.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1878) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1878.as_str());
    }
    if let Some(var_1879) = &input.image {
        object.key("Image").string(var_1879.as_str());
    }
    if let Some(var_1880) = &input.image_config {
        let mut object_1881 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_image_config(&mut object_1881, var_1880)?;
        object_1881.finish();
    }
    if let Some(var_1882) = &input.mode {
        object.key("Mode").string(var_1882.as_str());
    }
    if let Some(var_1883) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1883.as_str());
    }
    if let Some(var_1884) = &input.environment {
        let mut object_1885 = object.key("Environment").start_object();
        for (key_1886, value_1887) in var_1884 {
            {
                object_1885.key(key_1886).string(value_1887.as_str());
            }
        }
        object_1885.finish();
    }
    if let Some(var_1888) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1888.as_str());
    }
    if let Some(var_1889) = &input.inference_specification_name {
        object
            .key("InferenceSpecificationName")
            .string(var_1889.as_str());
    }
    if let Some(var_1890) = &input.multi_model_config {
        let mut object_1891 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_multi_model_config(
            &mut object_1891,
            var_1890,
        )?;
        object_1891.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_execution_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1892) = &input.mode {
        object.key("Mode").string(var_1892.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1893) = &input.security_group_ids {
        let mut array_1894 = object.key("SecurityGroupIds").start_array();
        for item_1895 in var_1893 {
            {
                array_1894.value().string(item_1895.as_str());
            }
        }
        array_1894.finish();
    }
    if let Some(var_1896) = &input.subnets {
        let mut array_1897 = object.key("Subnets").start_array();
        for item_1898 in var_1896 {
            {
                array_1897.value().string(item_1898.as_str());
            }
        }
        array_1897.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1899) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1899.as_str());
    }
    if let Some(var_1900) = &input.constraints_resource {
        let mut object_1901 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1901,
            var_1900,
        )?;
        object_1901.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1902) = &input.image_uri {
        object.key("ImageUri").string(var_1902.as_str());
    }
    if let Some(var_1903) = &input.config_uri {
        object.key("ConfigUri").string(var_1903.as_str());
    }
    if let Some(var_1904) = &input.environment {
        let mut object_1905 = object.key("Environment").start_object();
        for (key_1906, value_1907) in var_1904 {
            {
                object_1905.key(key_1906).string(value_1907.as_str());
            }
        }
        object_1905.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1908) = &input.endpoint_input {
        let mut object_1909 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1909,
            var_1908,
        )?;
        object_1909.finish();
    }
    if let Some(var_1910) = &input.ground_truth_s3_input {
        let mut object_1911 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_1911,
            var_1910,
        )?;
        object_1911.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1912) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1912.as_str());
    }
    if let Some(var_1913) = &input.constraints_resource {
        let mut object_1914 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1914,
            var_1913,
        )?;
        object_1914.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1915) = &input.image_uri {
        object.key("ImageUri").string(var_1915.as_str());
    }
    if let Some(var_1916) = &input.config_uri {
        object.key("ConfigUri").string(var_1916.as_str());
    }
    if let Some(var_1917) = &input.environment {
        let mut object_1918 = object.key("Environment").start_object();
        for (key_1919, value_1920) in var_1917 {
            {
                object_1918.key(key_1919).string(value_1920.as_str());
            }
        }
        object_1918.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1921) = &input.endpoint_input {
        let mut object_1922 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1922,
            var_1921,
        )?;
        object_1922.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1923) = &input.validation_role {
        object.key("ValidationRole").string(var_1923.as_str());
    }
    if let Some(var_1924) = &input.validation_profiles {
        let mut array_1925 = object.key("ValidationProfiles").start_array();
        for item_1926 in var_1924 {
            {
                let mut object_1927 = array_1925.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_validation_profile(
                    &mut object_1927,
                    item_1926,
                )?;
                object_1927.finish();
            }
        }
        array_1925.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1928) = &input.source_algorithms {
        let mut array_1929 = object.key("SourceAlgorithms").start_array();
        for item_1930 in var_1928 {
            {
                let mut object_1931 = array_1929.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_algorithm(
                    &mut object_1931,
                    item_1930,
                )?;
                object_1931.finish();
            }
        }
        array_1929.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metrics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1932) = &input.model_quality {
        let mut object_1933 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality(&mut object_1933, var_1932)?;
        object_1933.finish();
    }
    if let Some(var_1934) = &input.model_data_quality {
        let mut object_1935 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_data_quality(
            &mut object_1935,
            var_1934,
        )?;
        object_1935.finish();
    }
    if let Some(var_1936) = &input.bias {
        let mut object_1937 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_bias(&mut object_1937, var_1936)?;
        object_1937.finish();
    }
    if let Some(var_1938) = &input.explainability {
        let mut object_1939 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_explainability(
            &mut object_1939,
            var_1938,
        )?;
        object_1939.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_baselines(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckBaselines,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1940) = &input.bias {
        let mut object_1941 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_bias(
            &mut object_1941,
            var_1940,
        )?;
        object_1941.finish();
    }
    if let Some(var_1942) = &input.explainability {
        let mut object_1943 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_explainability(
            &mut object_1943,
            var_1942,
        )?;
        object_1943.finish();
    }
    if let Some(var_1944) = &input.model_quality {
        let mut object_1945 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_quality(
            &mut object_1945,
            var_1944,
        )?;
        object_1945.finish();
    }
    if let Some(var_1946) = &input.model_data_quality {
        let mut object_1947 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_data_quality(
            &mut object_1947,
            var_1946,
        )?;
        object_1947.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_additional_inference_specification_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdditionalInferenceSpecificationDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1948) = &input.name {
        object.key("Name").string(var_1948.as_str());
    }
    if let Some(var_1949) = &input.description {
        object.key("Description").string(var_1949.as_str());
    }
    if let Some(var_1950) = &input.containers {
        let mut array_1951 = object.key("Containers").start_array();
        for item_1952 in var_1950 {
            {
                let mut object_1953 = array_1951.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1953, item_1952)?;
                object_1953.finish();
            }
        }
        array_1951.finish();
    }
    if let Some(var_1954) = &input.supported_transform_instance_types {
        let mut array_1955 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1956 in var_1954 {
            {
                array_1955.value().string(item_1956.as_str());
            }
        }
        array_1955.finish();
    }
    if let Some(var_1957) = &input.supported_realtime_inference_instance_types {
        let mut array_1958 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1959 in var_1957 {
            {
                array_1958.value().string(item_1959.as_str());
            }
        }
        array_1958.finish();
    }
    if let Some(var_1960) = &input.supported_content_types {
        let mut array_1961 = object.key("SupportedContentTypes").start_array();
        for item_1962 in var_1960 {
            {
                array_1961.value().string(item_1962.as_str());
            }
        }
        array_1961.finish();
    }
    if let Some(var_1963) = &input.supported_response_mime_types {
        let mut array_1964 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1965 in var_1963 {
            {
                array_1964.value().string(item_1965.as_str());
            }
        }
        array_1964.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1966) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1966.as_str());
    }
    if let Some(var_1967) = &input.constraints_resource {
        let mut object_1968 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_1968,
            var_1967,
        )?;
        object_1968.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1969) = &input.image_uri {
        object.key("ImageUri").string(var_1969.as_str());
    }
    if let Some(var_1970) = &input.container_entrypoint {
        let mut array_1971 = object.key("ContainerEntrypoint").start_array();
        for item_1972 in var_1970 {
            {
                array_1971.value().string(item_1972.as_str());
            }
        }
        array_1971.finish();
    }
    if let Some(var_1973) = &input.container_arguments {
        let mut array_1974 = object.key("ContainerArguments").start_array();
        for item_1975 in var_1973 {
            {
                array_1974.value().string(item_1975.as_str());
            }
        }
        array_1974.finish();
    }
    if let Some(var_1976) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_1976.as_str());
    }
    if let Some(var_1977) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1977.as_str());
    }
    if let Some(var_1978) = &input.problem_type {
        object.key("ProblemType").string(var_1978.as_str());
    }
    if let Some(var_1979) = &input.environment {
        let mut object_1980 = object.key("Environment").start_object();
        for (key_1981, value_1982) in var_1979 {
            {
                object_1980.key(key_1981).string(value_1982.as_str());
            }
        }
        object_1980.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1983) = &input.endpoint_input {
        let mut object_1984 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_1984,
            var_1983,
        )?;
        object_1984.finish();
    }
    if let Some(var_1985) = &input.ground_truth_s3_input {
        let mut object_1986 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(
            &mut object_1986,
            var_1985,
        )?;
        object_1986.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_schedule_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1987) = &input.schedule_config {
        let mut object_1988 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule_config(
            &mut object_1988,
            var_1987,
        )?;
        object_1988.finish();
    }
    if let Some(var_1989) = &input.monitoring_job_definition {
        let mut object_1990 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_job_definition(
            &mut object_1990,
            var_1989,
        )?;
        object_1990.finish();
    }
    if let Some(var_1991) = &input.monitoring_job_definition_name {
        object
            .key("MonitoringJobDefinitionName")
            .string(var_1991.as_str());
    }
    if let Some(var_1992) = &input.monitoring_type {
        object.key("MonitoringType").string(var_1992.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_metadata_service_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceMetadataServiceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1993) = &input.minimum_instance_metadata_service_version {
        object
            .key("MinimumInstanceMetadataServiceVersion")
            .string(var_1993.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notebook_instance_lifecycle_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1994) = &input.content {
        object.key("Content").string(var_1994.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pipeline_definition_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PipelineDefinitionS3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1995) = &input.bucket {
        object.key("Bucket").string(var_1995.as_str());
    }
    if let Some(var_1996) = &input.object_key {
        object.key("ObjectKey").string(var_1996.as_str());
    }
    if let Some(var_1997) = &input.version_id {
        object.key("VersionId").string(var_1997.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parallelism_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParallelismConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxParallelExecutionSteps").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_parallel_execution_steps).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1998) = &input.input_name {
        object.key("InputName").string(var_1998.as_str());
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_1999) = &input.s3_input {
        let mut object_2000 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_input(
            &mut object_2000,
            var_1999,
        )?;
        object_2000.finish();
    }
    if let Some(var_2001) = &input.dataset_definition {
        let mut object_2002 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_definition(
            &mut object_2002,
            var_2001,
        )?;
        object_2002.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2003) = &input.outputs {
        let mut array_2004 = object.key("Outputs").start_array();
        for item_2005 in var_2003 {
            {
                let mut object_2006 = array_2004.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_output(
                    &mut object_2006,
                    item_2005,
                )?;
                object_2006.finish();
            }
        }
        array_2004.finish();
    }
    if let Some(var_2007) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2007.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2008) = &input.cluster_config {
        let mut object_2009 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_cluster_config(
            &mut object_2009,
            var_2008,
        )?;
        object_2009.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_stopping_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2010) = &input.image_uri {
        object.key("ImageUri").string(var_2010.as_str());
    }
    if let Some(var_2011) = &input.container_entrypoint {
        let mut array_2012 = object.key("ContainerEntrypoint").start_array();
        for item_2013 in var_2011 {
            {
                array_2012.value().string(item_2013.as_str());
            }
        }
        array_2012.finish();
    }
    if let Some(var_2014) = &input.container_arguments {
        let mut array_2015 = object.key("ContainerArguments").start_array();
        for item_2016 in var_2014 {
            {
                array_2015.value().string(item_2016.as_str());
            }
        }
        array_2015.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_2017) = &input.vpc_config {
        let mut object_2018 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2018, var_2017)?;
        object_2018.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experiment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2019) = &input.experiment_name {
        object.key("ExperimentName").string(var_2019.as_str());
    }
    if let Some(var_2020) = &input.trial_name {
        object.key("TrialName").string(var_2020.as_str());
    }
    if let Some(var_2021) = &input.trial_component_display_name {
        object
            .key("TrialComponentDisplayName")
            .string(var_2021.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2022) = &input.product_id {
        object.key("ProductId").string(var_2022.as_str());
    }
    if let Some(var_2023) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_2023.as_str());
    }
    if let Some(var_2024) = &input.path_id {
        object.key("PathId").string(var_2024.as_str());
    }
    if let Some(var_2025) = &input.provisioning_parameters {
        let mut array_2026 = object.key("ProvisioningParameters").start_array();
        for item_2027 in var_2025 {
            {
                let mut object_2028 = array_2026.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_2028,
                    item_2027,
                )?;
                object_2028.finish();
            }
        }
        array_2026.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2029) = &input.training_image {
        object.key("TrainingImage").string(var_2029.as_str());
    }
    if let Some(var_2030) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2030.as_str());
    }
    if let Some(var_2031) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2031.as_str());
    }
    if let Some(var_2032) = &input.metric_definitions {
        let mut array_2033 = object.key("MetricDefinitions").start_array();
        for item_2034 in var_2032 {
            {
                let mut object_2035 = array_2033.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_2035,
                    item_2034,
                )?;
                object_2035.finish();
            }
        }
        array_2033.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2036) = &input.channel_name {
        object.key("ChannelName").string(var_2036.as_str());
    }
    if let Some(var_2037) = &input.data_source {
        let mut object_2038 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_2038, var_2037)?;
        object_2038.finish();
    }
    if let Some(var_2039) = &input.content_type {
        object.key("ContentType").string(var_2039.as_str());
    }
    if let Some(var_2040) = &input.compression_type {
        object.key("CompressionType").string(var_2040.as_str());
    }
    if let Some(var_2041) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_2041.as_str());
    }
    if let Some(var_2042) = &input.input_mode {
        object.key("InputMode").string(var_2042.as_str());
    }
    if let Some(var_2043) = &input.shuffle_config {
        let mut object_2044 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_shuffle_config(
            &mut object_2044,
            var_2043,
        )?;
        object_2044.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2045) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2045.as_str());
    }
    if let Some(var_2046) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2046.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2047) = &input.instance_type {
        object.key("InstanceType").string(var_2047.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2048) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2048.as_str());
    }
    if let Some(var_2049) = &input.instance_groups {
        let mut array_2050 = object.key("InstanceGroups").start_array();
        for item_2051 in var_2049 {
            {
                let mut object_2052 = array_2050.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group(
                    &mut object_2052,
                    item_2051,
                )?;
                object_2052.finish();
            }
        }
        array_2050.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_checkpoint_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2053) = &input.s3_uri {
        object.key("S3Uri").string(var_2053.as_str());
    }
    if let Some(var_2054) = &input.local_path {
        object.key("LocalPath").string(var_2054.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_hook_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2055) = &input.local_path {
        object.key("LocalPath").string(var_2055.as_str());
    }
    if let Some(var_2056) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2056.as_str());
    }
    if let Some(var_2057) = &input.hook_parameters {
        let mut object_2058 = object.key("HookParameters").start_object();
        for (key_2059, value_2060) in var_2057 {
            {
                object_2058.key(key_2059).string(value_2060.as_str());
            }
        }
        object_2058.finish();
    }
    if let Some(var_2061) = &input.collection_configurations {
        let mut array_2062 = object.key("CollectionConfigurations").start_array();
        for item_2063 in var_2061 {
            {
                let mut object_2064 = array_2062.value().start_object();
                crate::json_ser::serialize_structure_crate_model_collection_configuration(
                    &mut object_2064,
                    item_2063,
                )?;
                object_2064.finish();
            }
        }
        array_2062.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_rule_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2065) = &input.rule_configuration_name {
        object
            .key("RuleConfigurationName")
            .string(var_2065.as_str());
    }
    if let Some(var_2066) = &input.local_path {
        object.key("LocalPath").string(var_2066.as_str());
    }
    if let Some(var_2067) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2067.as_str());
    }
    if let Some(var_2068) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_2068.as_str());
    }
    if let Some(var_2069) = &input.instance_type {
        object.key("InstanceType").string(var_2069.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2070) = &input.rule_parameters {
        let mut object_2071 = object.key("RuleParameters").start_object();
        for (key_2072, value_2073) in var_2070 {
            {
                object_2071.key(key_2072).string(value_2073.as_str());
            }
        }
        object_2071.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2074) = &input.local_path {
        object.key("LocalPath").string(var_2074.as_str());
    }
    if let Some(var_2075) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2075.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2076) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2076.as_str());
    }
    if let Some(var_2077) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2077).into()),
        );
    }
    if let Some(var_2078) = &input.profiling_parameters {
        let mut object_2079 = object.key("ProfilingParameters").start_object();
        for (key_2080, value_2081) in var_2078 {
            {
                object_2079.key(key_2080).string(value_2081.as_str());
            }
        }
        object_2079.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_rule_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2082) = &input.rule_configuration_name {
        object
            .key("RuleConfigurationName")
            .string(var_2082.as_str());
    }
    if let Some(var_2083) = &input.local_path {
        object.key("LocalPath").string(var_2083.as_str());
    }
    if let Some(var_2084) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2084.as_str());
    }
    if let Some(var_2085) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_2085.as_str());
    }
    if let Some(var_2086) = &input.instance_type {
        object.key("InstanceType").string(var_2086.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_2087) = &input.rule_parameters {
        let mut object_2088 = object.key("RuleParameters").start_object();
        for (key_2089, value_2090) in var_2087 {
            {
                object_2088.key(key_2089).string(value_2090.as_str());
            }
        }
        object_2088.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retry_strategy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_client_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2091) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2091).into()),
        );
    }
    if let Some(var_2092) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2092).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2093) = &input.data_source {
        let mut object_2094 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_data_source(
            &mut object_2094,
            var_2093,
        )?;
        object_2094.finish();
    }
    if let Some(var_2095) = &input.content_type {
        object.key("ContentType").string(var_2095.as_str());
    }
    if let Some(var_2096) = &input.compression_type {
        object.key("CompressionType").string(var_2096.as_str());
    }
    if let Some(var_2097) = &input.split_type {
        object.key("SplitType").string(var_2097.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2098) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2098.as_str());
    }
    if let Some(var_2099) = &input.accept {
        object.key("Accept").string(var_2099.as_str());
    }
    if let Some(var_2100) = &input.assemble_with {
        object.key("AssembleWith").string(var_2100.as_str());
    }
    if let Some(var_2101) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_resources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2102) = &input.instance_type {
        object.key("InstanceType").string(var_2102.as_str());
    }
    if let Some(var_2103) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2103).into()),
        );
    }
    if let Some(var_2104) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_processing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2105) = &input.input_filter {
        object.key("InputFilter").string(var_2105.as_str());
    }
    if let Some(var_2106) = &input.output_filter {
        object.key("OutputFilter").string(var_2106.as_str());
    }
    if let Some(var_2107) = &input.join_source {
        object.key("JoinSource").string(var_2107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2108) = &input.primary_status {
        object.key("PrimaryStatus").string(var_2108.as_str());
    }
    if let Some(var_2109) = &input.message {
        object.key("Message").string(var_2109.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_trial_component_parameter_value(
    object_640: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_640.key("StringValue").string(inner.as_str());
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_640.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::Float((*inner).into()),
            );
        }
        crate::model::TrialComponentParameterValue::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "TrialComponentParameterValue",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_artifact(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2110) = &input.media_type {
        object.key("MediaType").string(var_2110.as_str());
    }
    if let Some(var_2111) = &input.value {
        object.key("Value").string(var_2111.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2112) = &input.user_pool {
        object.key("UserPool").string(var_2112.as_str());
    }
    if let Some(var_2113) = &input.client_id {
        object.key("ClientId").string(var_2113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2114) = &input.client_id {
        object.key("ClientId").string(var_2114.as_str());
    }
    if let Some(var_2115) = &input.client_secret {
        object.key("ClientSecret").string(var_2115.as_str());
    }
    if let Some(var_2116) = &input.issuer {
        object.key("Issuer").string(var_2116.as_str());
    }
    if let Some(var_2117) = &input.authorization_endpoint {
        object
            .key("AuthorizationEndpoint")
            .string(var_2117.as_str());
    }
    if let Some(var_2118) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_2118.as_str());
    }
    if let Some(var_2119) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_2119.as_str());
    }
    if let Some(var_2120) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_2120.as_str());
    }
    if let Some(var_2121) = &input.jwks_uri {
        object.key("JwksUri").string(var_2121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_ip_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2122) = &input.cidrs {
        let mut array_2123 = object.key("Cidrs").start_array();
        for item_2124 in var_2122 {
            {
                array_2123.value().string(item_2124.as_str());
            }
        }
        array_2123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workforce_vpc_config_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkforceVpcConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2125) = &input.vpc_id {
        object.key("VpcId").string(var_2125.as_str());
    }
    if let Some(var_2126) = &input.security_group_ids {
        let mut array_2127 = object.key("SecurityGroupIds").start_array();
        for item_2128 in var_2126 {
            {
                array_2127.value().string(item_2128.as_str());
            }
        }
        array_2127.finish();
    }
    if let Some(var_2129) = &input.subnets {
        let mut array_2130 = object.key("Subnets").start_array();
        for item_2131 in var_2129 {
            {
                array_2130.value().string(item_2131.as_str());
            }
        }
        array_2130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2132) = &input.cognito_member_definition {
        let mut object_2133 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_member_definition(
            &mut object_2133,
            var_2132,
        )?;
        object_2133.finish();
    }
    if let Some(var_2134) = &input.oidc_member_definition {
        let mut object_2135 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_member_definition(
            &mut object_2135,
            var_2134,
        )?;
        object_2135.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2136) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_2136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retention_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2137) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_2137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_suggestion_query(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2138) = &input.property_name_query {
        let mut object_2139 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_property_name_query(
            &mut object_2139,
            var_2138,
        )?;
        object_2139.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_search_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetadataSearchExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2140) = &input.filters {
        let mut array_2141 = object.key("Filters").start_array();
        for item_2142 in var_2140 {
            {
                let mut object_2143 = array_2141.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_metadata_filter(
                    &mut object_2143,
                    item_2142,
                )?;
                object_2143.finish();
            }
        }
        array_2141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2144) = &input.types {
        let mut array_2145 = object.key("Types").start_array();
        for item_2146 in var_2144 {
            {
                array_2145.value().string(item_2146.as_str());
            }
        }
        array_2145.finish();
    }
    if let Some(var_2147) = &input.lineage_types {
        let mut array_2148 = object.key("LineageTypes").start_array();
        for item_2149 in var_2147 {
            {
                array_2148.value().string(item_2149.as_str());
            }
        }
        array_2148.finish();
    }
    if let Some(var_2150) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_2150, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2151) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_2151, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2152) = &input.modified_before {
        object
            .key("ModifiedBefore")
            .date_time(var_2152, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2153) = &input.modified_after {
        object
            .key("ModifiedAfter")
            .date_time(var_2153, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2154) = &input.properties {
        let mut object_2155 = object.key("Properties").start_object();
        for (key_2156, value_2157) in var_2154 {
            {
                object_2155.key(key_2156).string(value_2157.as_str());
            }
        }
        object_2155.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2158) = &input.device_name {
        object.key("DeviceName").string(var_2158.as_str());
    }
    if let Some(var_2159) = &input.description {
        object.key("Description").string(var_2159.as_str());
    }
    if let Some(var_2160) = &input.iot_thing_name {
        object.key("IotThingName").string(var_2160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_renderable_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2161) = &input.input {
        object.key("Input").string(var_2161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2162) = &input.filters {
        let mut array_2163 = object.key("Filters").start_array();
        for item_2164 in var_2162 {
            {
                let mut object_2165 = array_2163.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_2165,
                    item_2164,
                )?;
                object_2165.finish();
            }
        }
        array_2163.finish();
    }
    if let Some(var_2166) = &input.nested_filters {
        let mut array_2167 = object.key("NestedFilters").start_array();
        for item_2168 in var_2166 {
            {
                let mut object_2169 = array_2167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_nested_filters(
                    &mut object_2169,
                    item_2168,
                )?;
                object_2169.finish();
            }
        }
        array_2167.finish();
    }
    if let Some(var_2170) = &input.sub_expressions {
        let mut array_2171 = object.key("SubExpressions").start_array();
        for item_2172 in var_2170 {
            {
                let mut object_2173 = array_2171.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_expression(
                    &mut object_2173,
                    item_2172,
                )?;
                object_2173.finish();
            }
        }
        array_2171.finish();
    }
    if let Some(var_2174) = &input.operator {
        object.key("Operator").string(var_2174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2175) = &input.name {
        object.key("Name").string(var_2175.as_str());
    }
    if let Some(var_2176) = &input.value {
        object.key("Value").string(var_2176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2177) = &input.name {
        object.key("Name").string(var_2177.as_str());
    }
    if let Some(var_2178) = &input.value {
        object.key("Value").string(var_2178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2179) = &input.secret_arn {
        object.key("SecretArn").string(var_2179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2180) = &input.r_studio_server_pro_domain_settings_for_update {
        let mut object_2181 = object
            .key("RStudioServerProDomainSettingsForUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(&mut object_2181, var_2180)?;
        object_2181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_variant_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2182) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_2182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_desired_weight_and_capacity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2183) = &input.variant_name {
        object.key("VariantName").string(var_2183.as_str());
    }
    if let Some(var_2184) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2184).into()),
        );
    }
    if let Some(var_2185) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2185).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_feature_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2186) = &input.key {
        object.key("Key").string(var_2186.as_str());
    }
    if let Some(var_2187) = &input.value {
        object.key("Value").string(var_2187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_update_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningUpdateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2188) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_2188.as_str());
    }
    if let Some(var_2189) = &input.provisioning_parameters {
        let mut array_2190 = object.key("ProvisioningParameters").start_array();
        for item_2191 in var_2189 {
            {
                let mut object_2192 = array_2190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_2192,
                    item_2191,
                )?;
                object_2192.finish();
            }
        }
        array_2190.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2193) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2193.as_str());
    }
    if let Some(var_2194) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2194).into()),
        );
    }
    if let Some(var_2195) = &input.profiling_parameters {
        let mut object_2196 = object.key("ProfilingParameters").start_object();
        for (key_2197, value_2198) in var_2195 {
            {
                object_2196.key(key_2197).string(value_2198.as_str());
            }
        }
        object_2196.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2199) = &input.name {
        object.key("Name").string(var_2199.as_str());
    }
    if let Some(var_2200) = &input.description {
        object.key("Description").string(var_2200.as_str());
    }
    if let Some(var_2201) = &input.r#type {
        object.key("Type").string(var_2201.as_str());
    }
    if let Some(var_2202) = &input.range {
        let mut object_2203 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_range(
            &mut object_2203,
            var_2202,
        )?;
        object_2203.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2204) = &input.default_value {
        object.key("DefaultValue").string(var_2204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2205) = &input.name {
        object.key("Name").string(var_2205.as_str());
    }
    if let Some(var_2206) = &input.regex {
        object.key("Regex").string(var_2206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2207) = &input.name {
        object.key("Name").string(var_2207.as_str());
    }
    if let Some(var_2208) = &input.description {
        object.key("Description").string(var_2208.as_str());
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2209) = &input.supported_content_types {
        let mut array_2210 = object.key("SupportedContentTypes").start_array();
        for item_2211 in var_2209 {
            {
                array_2210.value().string(item_2211.as_str());
            }
        }
        array_2210.finish();
    }
    if let Some(var_2212) = &input.supported_compression_types {
        let mut array_2213 = object.key("SupportedCompressionTypes").start_array();
        for item_2214 in var_2212 {
            {
                array_2213.value().string(item_2214.as_str());
            }
        }
        array_2213.finish();
    }
    if let Some(var_2215) = &input.supported_input_modes {
        let mut array_2216 = object.key("SupportedInputModes").start_array();
        for item_2217 in var_2215 {
            {
                array_2216.value().string(item_2217.as_str());
            }
        }
        array_2216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_objective(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2218) = &input.r#type {
        object.key("Type").string(var_2218.as_str());
    }
    if let Some(var_2219) = &input.metric_name {
        object.key("MetricName").string(var_2219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_container_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2220) = &input.container_hostname {
        object.key("ContainerHostname").string(var_2220.as_str());
    }
    if let Some(var_2221) = &input.image {
        object.key("Image").string(var_2221.as_str());
    }
    if let Some(var_2222) = &input.image_digest {
        object.key("ImageDigest").string(var_2222.as_str());
    }
    if let Some(var_2223) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2223.as_str());
    }
    if let Some(var_2224) = &input.product_id {
        object.key("ProductId").string(var_2224.as_str());
    }
    if let Some(var_2225) = &input.environment {
        let mut object_2226 = object.key("Environment").start_object();
        for (key_2227, value_2228) in var_2225 {
            {
                object_2226.key(key_2227).string(value_2228.as_str());
            }
        }
        object_2226.finish();
    }
    if let Some(var_2229) = &input.model_input {
        let mut object_2230 = object.key("ModelInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_input(&mut object_2230, var_2229)?;
        object_2230.finish();
    }
    if let Some(var_2231) = &input.framework {
        object.key("Framework").string(var_2231.as_str());
    }
    if let Some(var_2232) = &input.framework_version {
        object.key("FrameworkVersion").string(var_2232.as_str());
    }
    if let Some(var_2233) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_2233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2234) = &input.profile_name {
        object.key("ProfileName").string(var_2234.as_str());
    }
    if let Some(var_2235) = &input.training_job_definition {
        let mut object_2236 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_training_job_definition(
            &mut object_2236,
            var_2235,
        )?;
        object_2236.finish();
    }
    if let Some(var_2237) = &input.transform_job_definition {
        let mut object_2238 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_2238,
            var_2237,
        )?;
        object_2238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2239) = &input.name {
        object.key("Name").string(var_2239.as_str());
    }
    if let Some(var_2240) = &input.display_name {
        object.key("DisplayName").string(var_2240.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2241) = &input.mount_path {
        object.key("MountPath").string(var_2241.as_str());
    }
    if let Some(var_2242) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2242).into()),
        );
    }
    if let Some(var_2243) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2243).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2244) = &input.source_id_type {
        object.key("SourceIdType").string(var_2244.as_str());
    }
    if let Some(var_2245) = &input.value {
        object.key("Value").string(var_2245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2246) = &input.s3_data_source {
        let mut object_2247 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_mls3_data_source(
            &mut object_2247,
            var_2246,
        )?;
        object_2247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_completion_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlJobCompletionCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2248) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2248).into()),
        );
    }
    if let Some(var_2249) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2249).into()),
        );
    }
    if let Some(var_2250) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2250).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_security_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlSecurityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2251) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2251.as_str());
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_2252) = &input.vpc_config {
        let mut object_2253 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2253, var_2252)?;
        object_2253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_split_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlDataSplitConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2254) = &input.validation_fraction {
        object.key("ValidationFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2254).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_candidate_generation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMlCandidateGenerationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2255) = &input.feature_specification_s3_uri {
        object
            .key("FeatureSpecificationS3Uri")
            .string(var_2255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_platform(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2256) = &input.os {
        object.key("Os").string(var_2256.as_str());
    }
    if let Some(var_2257) = &input.arch {
        object.key("Arch").string(var_2257.as_str());
    }
    if let Some(var_2258) = &input.accelerator {
        object.key("Accelerator").string(var_2258.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_constraints_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2259) = &input.s3_uri {
        object.key("S3Uri").string(var_2259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_statistics_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2260) = &input.s3_uri {
        object.key("S3Uri").string(var_2260.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2261) = &input.endpoint_name {
        object.key("EndpointName").string(var_2261.as_str());
    }
    if let Some(var_2262) = &input.local_path {
        object.key("LocalPath").string(var_2262.as_str());
    }
    if let Some(var_2263) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2263.as_str());
    }
    if let Some(var_2264) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2264.as_str());
    }
    if let Some(var_2265) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_2265.as_str());
    }
    if let Some(var_2266) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_2266.as_str());
    }
    if let Some(var_2267) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_2267.as_str());
    }
    if let Some(var_2268) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2268).into()),
        );
    }
    if let Some(var_2269) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_2269.as_str());
    }
    if let Some(var_2270) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_2270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2271) = &input.s3_output {
        let mut object_2272 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_s3_output(
            &mut object_2272,
            var_2271,
        )?;
        object_2272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_cluster_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2273) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2273).into()),
        );
    }
    if let Some(var_2274) = &input.instance_type {
        object.key("InstanceType").string(var_2274.as_str());
    }
    if let Some(var_2275) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2275).into()),
        );
    }
    if let Some(var_2276) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sharing_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2277) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_2277.as_str());
    }
    if let Some(var_2278) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2278.as_str());
    }
    if let Some(var_2279) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_2279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jupyter_server_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2280) = &input.default_resource_spec {
        let mut object_2281 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2281, var_2280)?;
        object_2281.finish();
    }
    if let Some(var_2282) = &input.lifecycle_config_arns {
        let mut array_2283 = object.key("LifecycleConfigArns").start_array();
        for item_2284 in var_2282 {
            {
                array_2283.value().string(item_2284.as_str());
            }
        }
        array_2283.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2285) = &input.default_resource_spec {
        let mut object_2286 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2286, var_2285)?;
        object_2286.finish();
    }
    if let Some(var_2287) = &input.custom_images {
        let mut array_2288 = object.key("CustomImages").start_array();
        for item_2289 in var_2287 {
            {
                let mut object_2290 = array_2288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(
                    &mut object_2290,
                    item_2289,
                )?;
                object_2290.finish();
            }
        }
        array_2288.finish();
    }
    if let Some(var_2291) = &input.lifecycle_config_arns {
        let mut array_2292 = object.key("LifecycleConfigArns").start_array();
        for item_2293 in var_2291 {
            {
                array_2292.value().string(item_2293.as_str());
            }
        }
        array_2292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2294) = &input.default_resource_spec {
        let mut object_2295 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2295, var_2294)?;
        object_2295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2296) = &input.access_status {
        object.key("AccessStatus").string(var_2296.as_str());
    }
    if let Some(var_2297) = &input.user_group {
        object.key("UserGroup").string(var_2297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_session_app_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RSessionAppSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2298) = &input.default_resource_spec {
        let mut object_2299 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2299, var_2298)?;
        object_2299.finish();
    }
    if let Some(var_2300) = &input.custom_images {
        let mut array_2301 = object.key("CustomImages").start_array();
        for item_2302 in var_2300 {
            {
                let mut object_2303 = array_2301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(
                    &mut object_2303,
                    item_2302,
                )?;
                object_2303.finish();
            }
        }
        array_2301.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProDomainSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2304) = &input.domain_execution_role_arn {
        object
            .key("DomainExecutionRoleArn")
            .string(var_2304.as_str());
    }
    if let Some(var_2305) = &input.r_studio_connect_url {
        object.key("RStudioConnectUrl").string(var_2305.as_str());
    }
    if let Some(var_2306) = &input.r_studio_package_manager_url {
        object
            .key("RStudioPackageManagerUrl")
            .string(var_2306.as_str());
    }
    if let Some(var_2307) = &input.default_resource_spec {
        let mut object_2308 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2308, var_2307)?;
        object_2308.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_selection_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceSelectionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2309) = &input.device_subset_type {
        object.key("DeviceSubsetType").string(var_2309.as_str());
    }
    if input.percentage != 0 {
        object.key("Percentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percentage).into()),
        );
    }
    if let Some(var_2310) = &input.device_names {
        let mut array_2311 = object.key("DeviceNames").start_array();
        for item_2312 in var_2310 {
            {
                array_2311.value().string(item_2312.as_str());
            }
        }
        array_2311.finish();
    }
    if let Some(var_2313) = &input.device_name_contains {
        object.key("DeviceNameContains").string(var_2313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_deployment_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeDeploymentConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2314) = &input.failure_handling_policy {
        object
            .key("FailureHandlingPolicy")
            .string(var_2314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_blue_green_update_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2315) = &input.traffic_routing_configuration {
        let mut object_2316 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_routing_config(
            &mut object_2316,
            var_2315,
        )?;
        object_2316.finish();
    }
    if let Some(var_2317) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2317).into()),
        );
    }
    if let Some(var_2318) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2318).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_rollback_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2319) = &input.alarms {
        let mut array_2320 = object.key("Alarms").start_array();
        for item_2321 in var_2319 {
            {
                let mut object_2322 = array_2320.value().start_object();
                crate::json_ser::serialize_structure_crate_model_alarm(
                    &mut object_2322,
                    item_2321,
                )?;
                object_2322.finish();
            }
        }
        array_2320.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_core_dump_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2323) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_2323.as_str());
    }
    if let Some(var_2324) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_serverless_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantServerlessConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2325) = &input.memory_size_in_mb {
        object.key("MemorySizeInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2325).into()),
        );
    }
    if let Some(var_2326) = &input.max_concurrency {
        object.key("MaxConcurrency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2326).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2327) = &input.capture_mode {
        object.key("CaptureMode").string(var_2327.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_content_type_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2328) = &input.csv_content_types {
        let mut array_2329 = object.key("CsvContentTypes").start_array();
        for item_2330 in var_2328 {
            {
                array_2329.value().string(item_2330.as_str());
            }
        }
        array_2329.finish();
    }
    if let Some(var_2331) = &input.json_content_types {
        let mut array_2332 = object.key("JsonContentTypes").start_array();
        for item_2333 in var_2331 {
            {
                array_2332.value().string(item_2333.as_str());
            }
        }
        array_2332.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_client_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceClientConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2334) = &input.max_concurrent_invocations_per_instance {
        object.key("MaxConcurrentInvocationsPerInstance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2334).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2335) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2335.as_str());
    }
    if let Some(var_2336) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2336.as_str());
    }
    if let Some(var_2337) = &input.notification_config {
        let mut object_2338 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_notification_config(
            &mut object_2338,
            var_2337,
        )?;
        object_2338.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_security_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2339) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_storage_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2340) = &input.s3_uri {
        object.key("S3Uri").string(var_2340.as_str());
    }
    if let Some(var_2341) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2341.as_str());
    }
    if let Some(var_2342) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_2342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2343) = &input.table_name {
        object.key("TableName").string(var_2343.as_str());
    }
    if let Some(var_2344) = &input.catalog {
        object.key("Catalog").string(var_2344.as_str());
    }
    if let Some(var_2345) = &input.database {
        object.key("Database").string(var_2345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_conditions_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2346) = &input.human_loop_activation_conditions {
        object
            .key("HumanLoopActivationConditions")
            .string(var_2346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_public_workforce_task_price(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2347) = &input.amount_in_usd {
        let mut object_2348 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_crate_model_usd(&mut object_2348, var_2347)?;
        object_2348.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_limits(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2349) = &input.integer_parameter_ranges {
        let mut array_2350 = object.key("IntegerParameterRanges").start_array();
        for item_2351 in var_2349 {
            {
                let mut object_2352 = array_2350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter_range(
                    &mut object_2352,
                    item_2351,
                )?;
                object_2352.finish();
            }
        }
        array_2350.finish();
    }
    if let Some(var_2353) = &input.continuous_parameter_ranges {
        let mut array_2354 = object.key("ContinuousParameterRanges").start_array();
        for item_2355 in var_2353 {
            {
                let mut object_2356 = array_2354.value().start_object();
                crate::json_ser::serialize_structure_crate_model_continuous_parameter_range(
                    &mut object_2356,
                    item_2355,
                )?;
                object_2356.finish();
            }
        }
        array_2354.finish();
    }
    if let Some(var_2357) = &input.categorical_parameter_ranges {
        let mut array_2358 = object.key("CategoricalParameterRanges").start_array();
        for item_2359 in var_2357 {
            {
                let mut object_2360 = array_2358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter_range(
                    &mut object_2360,
                    item_2359,
                )?;
                object_2360.finish();
            }
        }
        array_2358.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tuning_job_completion_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2361) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_2361).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_algorithm_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2362) = &input.training_image {
        object.key("TrainingImage").string(var_2362.as_str());
    }
    if let Some(var_2363) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2363.as_str());
    }
    if let Some(var_2364) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2364.as_str());
    }
    if let Some(var_2365) = &input.metric_definitions {
        let mut array_2366 = object.key("MetricDefinitions").start_array();
        for item_2367 in var_2365 {
            {
                let mut object_2368 = array_2366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(
                    &mut object_2368,
                    item_2367,
                )?;
                object_2368.finish();
            }
        }
        array_2366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parent_hyper_parameter_tuning_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2369) = &input.hyper_parameter_tuning_job_name {
        object
            .key("HyperParameterTuningJobName")
            .string(var_2369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_pattern(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficPattern,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2370) = &input.traffic_type {
        object.key("TrafficType").string(var_2370.as_str());
    }
    if let Some(var_2371) = &input.phases {
        let mut array_2372 = object.key("Phases").start_array();
        for item_2373 in var_2371 {
            {
                let mut object_2374 = array_2372.value().start_object();
                crate::json_ser::serialize_structure_crate_model_phase(
                    &mut object_2374,
                    item_2373,
                )?;
                object_2374.finish();
            }
        }
        array_2372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_resource_limit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobResourceLimit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2375) = &input.max_number_of_tests {
        object.key("MaxNumberOfTests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2375).into()),
        );
    }
    if let Some(var_2376) = &input.max_parallel_of_tests {
        object.key("MaxParallelOfTests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2376).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInputConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2377) = &input.instance_type {
        object.key("InstanceType").string(var_2377.as_str());
    }
    if let Some(var_2378) = &input.inference_specification_name {
        object
            .key("InferenceSpecificationName")
            .string(var_2378.as_str());
    }
    if let Some(var_2379) = &input.environment_parameter_ranges {
        let mut object_2380 = object.key("EnvironmentParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_environment_parameter_ranges(
            &mut object_2380,
            var_2379,
        )?;
        object_2380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_latency_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelLatencyThreshold,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2381) = &input.percentile {
        object.key("Percentile").string(var_2381.as_str());
    }
    if input.value_in_milliseconds != 0 {
        object.key("ValueInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.value_in_milliseconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_compiled_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecommendationJobCompiledOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2382) = &input.s3_output_uri {
        object.key("S3OutputUri").string(var_2382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2383) = &input.s3_data_source {
        let mut object_2384 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_s3_data_source(
            &mut object_2384,
            var_2383,
        )?;
        object_2384.finish();
    }
    if let Some(var_2385) = &input.sns_data_source {
        let mut object_2386 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_sns_data_source(
            &mut object_2386,
            var_2385,
        )?;
        object_2386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2387) = &input.content_classifiers {
        let mut array_2388 = object.key("ContentClassifiers").start_array();
        for item_2389 in var_2387 {
            {
                array_2388.value().string(item_2389.as_str());
            }
        }
        array_2388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_resource_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2390) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2390.as_str());
    }
    if let Some(var_2391) = &input.vpc_config {
        let mut object_2392 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2392, var_2391)?;
        object_2392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2393) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2393.as_str());
    }
    if let Some(var_2394) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_annotation_consolidation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2395) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_2395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2396) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2396.as_str());
    }
    if let Some(var_2397) = &input.repository_auth_config {
        let mut object_2398 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_auth_config(
            &mut object_2398,
            var_2397,
        )?;
        object_2398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multi_model_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2399) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_ground_truth_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2400) = &input.s3_uri {
        object.key("S3Uri").string(var_2400.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2401) = &input.profile_name {
        object.key("ProfileName").string(var_2401.as_str());
    }
    if let Some(var_2402) = &input.transform_job_definition {
        let mut object_2403 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(
            &mut object_2403,
            var_2402,
        )?;
        object_2403.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2404) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2404.as_str());
    }
    if let Some(var_2405) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2406) = &input.statistics {
        let mut object_2407 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2407,
            var_2406,
        )?;
        object_2407.finish();
    }
    if let Some(var_2408) = &input.constraints {
        let mut object_2409 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2409,
            var_2408,
        )?;
        object_2409.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_data_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2410) = &input.statistics {
        let mut object_2411 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2411,
            var_2410,
        )?;
        object_2411.finish();
    }
    if let Some(var_2412) = &input.constraints {
        let mut object_2413 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2413,
            var_2412,
        )?;
        object_2413.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2414) = &input.report {
        let mut object_2415 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2415,
            var_2414,
        )?;
        object_2415.finish();
    }
    if let Some(var_2416) = &input.pre_training_report {
        let mut object_2417 = object.key("PreTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2417,
            var_2416,
        )?;
        object_2417.finish();
    }
    if let Some(var_2418) = &input.post_training_report {
        let mut object_2419 = object.key("PostTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2419,
            var_2418,
        )?;
        object_2419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_explainability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2420) = &input.report {
        let mut object_2421 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2421,
            var_2420,
        )?;
        object_2421.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_bias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckBias,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2422) = &input.config_file {
        let mut object_2423 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2423, var_2422)?;
        object_2423.finish();
    }
    if let Some(var_2424) = &input.pre_training_constraints {
        let mut object_2425 = object.key("PreTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2425,
            var_2424,
        )?;
        object_2425.finish();
    }
    if let Some(var_2426) = &input.post_training_constraints {
        let mut object_2427 = object.key("PostTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2427,
            var_2426,
        )?;
        object_2427.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_explainability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckExplainability,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2428) = &input.constraints {
        let mut object_2429 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2429,
            var_2428,
        )?;
        object_2429.finish();
    }
    if let Some(var_2430) = &input.config_file {
        let mut object_2431 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2431, var_2430)?;
        object_2431.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckModelQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2432) = &input.statistics {
        let mut object_2433 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2433,
            var_2432,
        )?;
        object_2433.finish();
    }
    if let Some(var_2434) = &input.constraints {
        let mut object_2435 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2435,
            var_2434,
        )?;
        object_2435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_data_quality(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DriftCheckModelDataQuality,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2436) = &input.statistics {
        let mut object_2437 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2437,
            var_2436,
        )?;
        object_2437.finish();
    }
    if let Some(var_2438) = &input.constraints {
        let mut object_2439 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(
            &mut object_2439,
            var_2438,
        )?;
        object_2439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schedule_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2440) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2441) = &input.baseline_config {
        let mut object_2442 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_baseline_config(
            &mut object_2442,
            var_2441,
        )?;
        object_2442.finish();
    }
    if let Some(var_2443) = &input.monitoring_inputs {
        let mut array_2444 = object.key("MonitoringInputs").start_array();
        for item_2445 in var_2443 {
            {
                let mut object_2446 = array_2444.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_input(
                    &mut object_2446,
                    item_2445,
                )?;
                object_2446.finish();
            }
        }
        array_2444.finish();
    }
    if let Some(var_2447) = &input.monitoring_output_config {
        let mut object_2448 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(
            &mut object_2448,
            var_2447,
        )?;
        object_2448.finish();
    }
    if let Some(var_2449) = &input.monitoring_resources {
        let mut object_2450 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(
            &mut object_2450,
            var_2449,
        )?;
        object_2450.finish();
    }
    if let Some(var_2451) = &input.monitoring_app_specification {
        let mut object_2452 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_app_specification(
            &mut object_2452,
            var_2451,
        )?;
        object_2452.finish();
    }
    if let Some(var_2453) = &input.stopping_condition {
        let mut object_2454 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(
            &mut object_2454,
            var_2453,
        )?;
        object_2454.finish();
    }
    if let Some(var_2455) = &input.environment {
        let mut object_2456 = object.key("Environment").start_object();
        for (key_2457, value_2458) in var_2455 {
            {
                object_2456.key(key_2457).string(value_2458.as_str());
            }
        }
        object_2456.finish();
    }
    if let Some(var_2459) = &input.network_config {
        let mut object_2460 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(
            &mut object_2460,
            var_2459,
        )?;
        object_2460.finish();
    }
    if let Some(var_2461) = &input.role_arn {
        object.key("RoleArn").string(var_2461.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2462) = &input.s3_uri {
        object.key("S3Uri").string(var_2462.as_str());
    }
    if let Some(var_2463) = &input.local_path {
        object.key("LocalPath").string(var_2463.as_str());
    }
    if let Some(var_2464) = &input.s3_data_type {
        object.key("S3DataType").string(var_2464.as_str());
    }
    if let Some(var_2465) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2465.as_str());
    }
    if let Some(var_2466) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2466.as_str());
    }
    if let Some(var_2467) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2467.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2468) = &input.athena_dataset_definition {
        let mut object_2469 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_dataset_definition(
            &mut object_2469,
            var_2468,
        )?;
        object_2469.finish();
    }
    if let Some(var_2470) = &input.redshift_dataset_definition {
        let mut object_2471 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_dataset_definition(
            &mut object_2471,
            var_2470,
        )?;
        object_2471.finish();
    }
    if let Some(var_2472) = &input.local_path {
        object.key("LocalPath").string(var_2472.as_str());
    }
    if let Some(var_2473) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2473.as_str());
    }
    if let Some(var_2474) = &input.input_mode {
        object.key("InputMode").string(var_2474.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2475) = &input.output_name {
        object.key("OutputName").string(var_2475.as_str());
    }
    if let Some(var_2476) = &input.s3_output {
        let mut object_2477 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_output(
            &mut object_2477,
            var_2476,
        )?;
        object_2477.finish();
    }
    if let Some(var_2478) = &input.feature_store_output {
        let mut object_2479 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_feature_store_output(
            &mut object_2479,
            var_2478,
        )?;
        object_2479.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_cluster_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2480) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2480).into()),
        );
    }
    if let Some(var_2481) = &input.instance_type {
        object.key("InstanceType").string(var_2481.as_str());
    }
    if let Some(var_2482) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2482).into()),
        );
    }
    if let Some(var_2483) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2484) = &input.key {
        object.key("Key").string(var_2484.as_str());
    }
    if let Some(var_2485) = &input.value {
        object.key("Value").string(var_2485.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2486) = &input.s3_data_source {
        let mut object_2487 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source(
            &mut object_2487,
            var_2486,
        )?;
        object_2487.finish();
    }
    if let Some(var_2488) = &input.file_system_data_source {
        let mut object_2489 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_data_source(
            &mut object_2489,
            var_2488,
        )?;
        object_2489.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_shuffle_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.seed).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2490) = &input.instance_type {
        object.key("InstanceType").string(var_2490.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if let Some(var_2491) = &input.instance_group_name {
        object.key("InstanceGroupName").string(var_2491.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_collection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2492) = &input.collection_name {
        object.key("CollectionName").string(var_2492.as_str());
    }
    if let Some(var_2493) = &input.collection_parameters {
        let mut object_2494 = object.key("CollectionParameters").start_object();
        for (key_2495, value_2496) in var_2493 {
            {
                object_2494.key(key_2495).string(value_2496.as_str());
            }
        }
        object_2494.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2497) = &input.s3_data_source {
        let mut object_2498 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_s3_data_source(
            &mut object_2498,
            var_2497,
        )?;
        object_2498.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2499) = &input.user_pool {
        object.key("UserPool").string(var_2499.as_str());
    }
    if let Some(var_2500) = &input.user_group {
        object.key("UserGroup").string(var_2500.as_str());
    }
    if let Some(var_2501) = &input.client_id {
        object.key("ClientId").string(var_2501.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_member_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2502) = &input.groups {
        let mut array_2503 = object.key("Groups").start_array();
        for item_2504 in var_2502 {
            {
                array_2503.value().string(item_2504.as_str());
            }
        }
        array_2503.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_name_query(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2505) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2505.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetadataFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2506) = &input.name {
        object.key("Name").string(var_2506.as_str());
    }
    if let Some(var_2507) = &input.value {
        object.key("Value").string(var_2507.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2508) = &input.name {
        object.key("Name").string(var_2508.as_str());
    }
    if let Some(var_2509) = &input.operator {
        object.key("Operator").string(var_2509.as_str());
    }
    if let Some(var_2510) = &input.value {
        object.key("Value").string(var_2510.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_nested_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2511) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2511.as_str());
    }
    if let Some(var_2512) = &input.filters {
        let mut array_2513 = object.key("Filters").start_array();
        for item_2514 in var_2512 {
            {
                let mut object_2515 = array_2513.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(
                    &mut object_2515,
                    item_2514,
                )?;
                object_2515.finish();
            }
        }
        array_2513.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RStudioServerProDomainSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2516) = &input.domain_execution_role_arn {
        object
            .key("DomainExecutionRoleArn")
            .string(var_2516.as_str());
    }
    if let Some(var_2517) = &input.default_resource_spec {
        let mut object_2518 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2518, var_2517)?;
        object_2518.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2519) = &input.integer_parameter_range_specification {
        let mut object_2520 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_integer_parameter_range_specification(
            &mut object_2520,
            var_2519,
        )?;
        object_2520.finish();
    }
    if let Some(var_2521) = &input.continuous_parameter_range_specification {
        let mut object_2522 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_continuous_parameter_range_specification(
            &mut object_2522,
            var_2521,
        )?;
        object_2522.finish();
    }
    if let Some(var_2523) = &input.categorical_parameter_range_specification {
        let mut object_2524 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_categorical_parameter_range_specification(
            &mut object_2524,
            var_2523,
        )?;
        object_2524.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2525) = &input.data_input_config {
        object.key("DataInputConfig").string(var_2525.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2526) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2526.as_str());
    }
    if let Some(var_2527) = &input.hyper_parameters {
        let mut object_2528 = object.key("HyperParameters").start_object();
        for (key_2529, value_2530) in var_2527 {
            {
                object_2528.key(key_2529).string(value_2530.as_str());
            }
        }
        object_2528.finish();
    }
    if let Some(var_2531) = &input.input_data_config {
        let mut array_2532 = object.key("InputDataConfig").start_array();
        for item_2533 in var_2531 {
            {
                let mut object_2534 = array_2532.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(
                    &mut object_2534,
                    item_2533,
                )?;
                object_2534.finish();
            }
        }
        array_2532.finish();
    }
    if let Some(var_2535) = &input.output_data_config {
        let mut object_2536 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(
            &mut object_2536,
            var_2535,
        )?;
        object_2536.finish();
    }
    if let Some(var_2537) = &input.resource_config {
        let mut object_2538 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(
            &mut object_2538,
            var_2537,
        )?;
        object_2538.finish();
    }
    if let Some(var_2539) = &input.stopping_condition {
        let mut object_2540 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(
            &mut object_2540,
            var_2539,
        )?;
        object_2540.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2541) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2541).into()),
        );
    }
    if let Some(var_2542) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2542).into()),
        );
    }
    if let Some(var_2543) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2543.as_str());
    }
    if let Some(var_2544) = &input.environment {
        let mut object_2545 = object.key("Environment").start_object();
        for (key_2546, value_2547) in var_2544 {
            {
                object_2545.key(key_2546).string(value_2547.as_str());
            }
        }
        object_2545.finish();
    }
    if let Some(var_2548) = &input.transform_input {
        let mut object_2549 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(
            &mut object_2549,
            var_2548,
        )?;
        object_2549.finish();
    }
    if let Some(var_2550) = &input.transform_output {
        let mut object_2551 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(
            &mut object_2551,
            var_2550,
        )?;
        object_2551.finish();
    }
    if let Some(var_2552) = &input.transform_resources {
        let mut object_2553 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(
            &mut object_2553,
            var_2552,
        )?;
        object_2553.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_mls3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMls3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2554) = &input.s3_data_type {
        object.key("S3DataType").string(var_2554.as_str());
    }
    if let Some(var_2555) = &input.s3_uri {
        object.key("S3Uri").string(var_2555.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_s3_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2556) = &input.s3_uri {
        object.key("S3Uri").string(var_2556.as_str());
    }
    if let Some(var_2557) = &input.local_path {
        object.key("LocalPath").string(var_2557.as_str());
    }
    if let Some(var_2558) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2558.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_image(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2559) = &input.image_name {
        object.key("ImageName").string(var_2559.as_str());
    }
    if let Some(var_2560) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2560).into()),
        );
    }
    if let Some(var_2561) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2561.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_routing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2562) = &input.r#type {
        object.key("Type").string(var_2562.as_str());
    }
    if let Some(var_2563) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2563).into()),
        );
    }
    if let Some(var_2564) = &input.canary_size {
        let mut object_2565 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2565, var_2564)?;
        object_2565.finish();
    }
    if let Some(var_2566) = &input.linear_step_size {
        let mut object_2567 = object.key("LinearStepSize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2567, var_2566)?;
        object_2567.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alarm(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2568) = &input.alarm_name {
        object.key("AlarmName").string(var_2568.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_notification_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AsyncInferenceNotificationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2569) = &input.success_topic {
        object.key("SuccessTopic").string(var_2569.as_str());
    }
    if let Some(var_2570) = &input.error_topic {
        object.key("ErrorTopic").string(var_2570.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usd(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Usd,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2571) = &input.name {
        object.key("Name").string(var_2571.as_str());
    }
    if let Some(var_2572) = &input.min_value {
        object.key("MinValue").string(var_2572.as_str());
    }
    if let Some(var_2573) = &input.max_value {
        object.key("MaxValue").string(var_2573.as_str());
    }
    if let Some(var_2574) = &input.scaling_type {
        object.key("ScalingType").string(var_2574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2575) = &input.name {
        object.key("Name").string(var_2575.as_str());
    }
    if let Some(var_2576) = &input.min_value {
        object.key("MinValue").string(var_2576.as_str());
    }
    if let Some(var_2577) = &input.max_value {
        object.key("MaxValue").string(var_2577.as_str());
    }
    if let Some(var_2578) = &input.scaling_type {
        object.key("ScalingType").string(var_2578.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2579) = &input.name {
        object.key("Name").string(var_2579.as_str());
    }
    if let Some(var_2580) = &input.values {
        let mut array_2581 = object.key("Values").start_array();
        for item_2582 in var_2580 {
            {
                array_2581.value().string(item_2582.as_str());
            }
        }
        array_2581.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phase(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Phase,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2583) = &input.initial_number_of_users {
        object.key("InitialNumberOfUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2583).into()),
        );
    }
    if let Some(var_2584) = &input.spawn_rate {
        object.key("SpawnRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2584).into()),
        );
    }
    if let Some(var_2585) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2585).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_environment_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentParameterRanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2586) = &input.categorical_parameter_ranges {
        let mut array_2587 = object.key("CategoricalParameterRanges").start_array();
        for item_2588 in var_2586 {
            {
                let mut object_2589 = array_2587.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter(
                    &mut object_2589,
                    item_2588,
                )?;
                object_2589.finish();
            }
        }
        array_2587.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2590) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2590.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_sns_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2591) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2591.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_auth_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2592) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2592.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2593) = &input.content_type {
        object.key("ContentType").string(var_2593.as_str());
    }
    if let Some(var_2594) = &input.content_digest {
        object.key("ContentDigest").string(var_2594.as_str());
    }
    if let Some(var_2595) = &input.s3_uri {
        object.key("S3Uri").string(var_2595.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2596) = &input.content_type {
        object.key("ContentType").string(var_2596.as_str());
    }
    if let Some(var_2597) = &input.content_digest {
        object.key("ContentDigest").string(var_2597.as_str());
    }
    if let Some(var_2598) = &input.s3_uri {
        object.key("S3Uri").string(var_2598.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_baseline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2599) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2599.as_str());
    }
    if let Some(var_2600) = &input.constraints_resource {
        let mut object_2601 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(
            &mut object_2601,
            var_2600,
        )?;
        object_2601.finish();
    }
    if let Some(var_2602) = &input.statistics_resource {
        let mut object_2603 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(
            &mut object_2603,
            var_2602,
        )?;
        object_2603.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2604) = &input.endpoint_input {
        let mut object_2605 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(
            &mut object_2605,
            var_2604,
        )?;
        object_2605.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_app_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2606) = &input.image_uri {
        object.key("ImageUri").string(var_2606.as_str());
    }
    if let Some(var_2607) = &input.container_entrypoint {
        let mut array_2608 = object.key("ContainerEntrypoint").start_array();
        for item_2609 in var_2607 {
            {
                array_2608.value().string(item_2609.as_str());
            }
        }
        array_2608.finish();
    }
    if let Some(var_2610) = &input.container_arguments {
        let mut array_2611 = object.key("ContainerArguments").start_array();
        for item_2612 in var_2610 {
            {
                array_2611.value().string(item_2612.as_str());
            }
        }
        array_2611.finish();
    }
    if let Some(var_2613) = &input.record_preprocessor_source_uri {
        object
            .key("RecordPreprocessorSourceUri")
            .string(var_2613.as_str());
    }
    if let Some(var_2614) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2614.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2615) = &input.catalog {
        object.key("Catalog").string(var_2615.as_str());
    }
    if let Some(var_2616) = &input.database {
        object.key("Database").string(var_2616.as_str());
    }
    if let Some(var_2617) = &input.query_string {
        object.key("QueryString").string(var_2617.as_str());
    }
    if let Some(var_2618) = &input.work_group {
        object.key("WorkGroup").string(var_2618.as_str());
    }
    if let Some(var_2619) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2619.as_str());
    }
    if let Some(var_2620) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2620.as_str());
    }
    if let Some(var_2621) = &input.output_format {
        object.key("OutputFormat").string(var_2621.as_str());
    }
    if let Some(var_2622) = &input.output_compression {
        object.key("OutputCompression").string(var_2622.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_dataset_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2623) = &input.cluster_id {
        object.key("ClusterId").string(var_2623.as_str());
    }
    if let Some(var_2624) = &input.database {
        object.key("Database").string(var_2624.as_str());
    }
    if let Some(var_2625) = &input.db_user {
        object.key("DbUser").string(var_2625.as_str());
    }
    if let Some(var_2626) = &input.query_string {
        object.key("QueryString").string(var_2626.as_str());
    }
    if let Some(var_2627) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2627.as_str());
    }
    if let Some(var_2628) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2628.as_str());
    }
    if let Some(var_2629) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2629.as_str());
    }
    if let Some(var_2630) = &input.output_format {
        object.key("OutputFormat").string(var_2630.as_str());
    }
    if let Some(var_2631) = &input.output_compression {
        object.key("OutputCompression").string(var_2631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2632) = &input.s3_uri {
        object.key("S3Uri").string(var_2632.as_str());
    }
    if let Some(var_2633) = &input.local_path {
        object.key("LocalPath").string(var_2633.as_str());
    }
    if let Some(var_2634) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2634.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_feature_store_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2635) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2635.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2636) = &input.s3_data_type {
        object.key("S3DataType").string(var_2636.as_str());
    }
    if let Some(var_2637) = &input.s3_uri {
        object.key("S3Uri").string(var_2637.as_str());
    }
    if let Some(var_2638) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2638.as_str());
    }
    if let Some(var_2639) = &input.attribute_names {
        let mut array_2640 = object.key("AttributeNames").start_array();
        for item_2641 in var_2639 {
            {
                array_2640.value().string(item_2641.as_str());
            }
        }
        array_2640.finish();
    }
    if let Some(var_2642) = &input.instance_group_names {
        let mut array_2643 = object.key("InstanceGroupNames").start_array();
        for item_2644 in var_2642 {
            {
                array_2643.value().string(item_2644.as_str());
            }
        }
        array_2643.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2645) = &input.file_system_id {
        object.key("FileSystemId").string(var_2645.as_str());
    }
    if let Some(var_2646) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2646.as_str());
    }
    if let Some(var_2647) = &input.file_system_type {
        object.key("FileSystemType").string(var_2647.as_str());
    }
    if let Some(var_2648) = &input.directory_path {
        object.key("DirectoryPath").string(var_2648.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_s3_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2649) = &input.s3_data_type {
        object.key("S3DataType").string(var_2649.as_str());
    }
    if let Some(var_2650) = &input.s3_uri {
        object.key("S3Uri").string(var_2650.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2651) = &input.min_value {
        object.key("MinValue").string(var_2651.as_str());
    }
    if let Some(var_2652) = &input.max_value {
        object.key("MaxValue").string(var_2652.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2653) = &input.min_value {
        object.key("MinValue").string(var_2653.as_str());
    }
    if let Some(var_2654) = &input.max_value {
        object.key("MaxValue").string(var_2654.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2655) = &input.values {
        let mut array_2656 = object.key("Values").start_array();
        for item_2657 in var_2655 {
            {
                array_2656.value().string(item_2657.as_str());
            }
        }
        array_2656.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_size(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2658) = &input.r#type {
        object.key("Type").string(var_2658.as_str());
    }
    if let Some(var_2659) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2659).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2660) = &input.name {
        object.key("Name").string(var_2660.as_str());
    }
    if let Some(var_2661) = &input.value {
        let mut array_2662 = object.key("Value").start_array();
        for item_2663 in var_2661 {
            {
                array_2662.value().string(item_2663.as_str());
            }
        }
        array_2662.finish();
    }
    Ok(())
}
