// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_allocate_static_ip_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AllocateStaticIpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.static_ip_name {
        object.key("staticIpName").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_attach_certificate_to_distribution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachCertificateToDistributionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.distribution_name {
        object.key("distributionName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.certificate_name {
        object.key("certificateName").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_attach_disk_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachDiskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.disk_name {
        object.key("diskName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.instance_name {
        object.key("instanceName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.disk_path {
        object.key("diskPath").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_attach_instances_to_load_balancer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachInstancesToLoadBalancerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.instance_names {
        let mut array_9 = object.key("instanceNames").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_attach_load_balancer_tls_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachLoadBalancerTlsCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.certificate_name {
        object.key("certificateName").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_attach_static_ip_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachStaticIpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.static_ip_name {
        object.key("staticIpName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.instance_name {
        object.key("instanceName").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_close_instance_public_ports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CloseInstancePublicPortsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.port_info {
        let mut object_16 = object.key("portInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_port_info(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.instance_name {
        object.key("instanceName").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopySnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.source_snapshot_name {
        object.key("sourceSnapshotName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.source_resource_name {
        object.key("sourceResourceName").string(var_19.as_str());
    }
    if let Some(var_20) = &input.restore_date {
        object.key("restoreDate").string(var_20.as_str());
    }
    if let Some(var_21) = &input.use_latest_restorable_auto_snapshot {
        object
            .key("useLatestRestorableAutoSnapshot")
            .boolean(*var_21);
    }
    if let Some(var_22) = &input.target_snapshot_name {
        object.key("targetSnapshotName").string(var_22.as_str());
    }
    if let Some(var_23) = &input.source_region {
        object.key("sourceRegion").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bucket_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBucketInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.bucket_name {
        object.key("bucketName").string(var_24.as_str());
    }
    if let Some(var_25) = &input.bundle_id {
        object.key("bundleId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("tags").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.enable_object_versioning {
        object.key("enableObjectVersioning").boolean(*var_30);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bucket_access_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBucketAccessKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.bucket_name {
        object.key("bucketName").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.certificate_name {
        object.key("certificateName").string(var_32.as_str());
    }
    if let Some(var_33) = &input.domain_name {
        object.key("domainName").string(var_33.as_str());
    }
    if let Some(var_34) = &input.subject_alternative_names {
        let mut array_35 = object.key("subjectAlternativeNames").start_array();
        for item_36 in var_34 {
            {
                array_35.value().string(item_36.as_str());
            }
        }
        array_35.finish();
    }
    if let Some(var_37) = &input.tags {
        let mut array_38 = object.key("tags").start_array();
        for item_39 in var_37 {
            {
                let mut object_40 = array_38.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_cloud_formation_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCloudFormationStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.instances {
        let mut array_42 = object.key("instances").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_entry(
                    &mut object_44,
                    item_43,
                )?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_method_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactMethodInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.protocol {
        object.key("protocol").string(var_45.as_str());
    }
    if let Some(var_46) = &input.contact_endpoint {
        object.key("contactEndpoint").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_container_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContainerServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.service_name {
        object.key("serviceName").string(var_47.as_str());
    }
    if let Some(var_48) = &input.power {
        object.key("power").string(var_48.as_str());
    }
    if let Some(var_49) = &input.scale {
        object.key("scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_53, item_52)?;
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.public_domain_names {
        let mut object_55 = object.key("publicDomainNames").start_object();
        for (key_56, value_57) in var_54 {
            {
                let mut array_58 = object_55.key(key_56).start_array();
                for item_59 in value_57 {
                    {
                        array_58.value().string(item_59.as_str());
                    }
                }
                array_58.finish();
            }
        }
        object_55.finish();
    }
    if let Some(var_60) = &input.deployment {
        let mut object_61 = object.key("deployment").start_object();
        crate::json_ser::serialize_structure_crate_model_container_service_deployment_request(
            &mut object_61,
            var_60,
        )?;
        object_61.finish();
    }
    if let Some(var_62) = &input.private_registry_access {
        let mut object_63 = object.key("privateRegistryAccess").start_object();
        crate::json_ser::serialize_structure_crate_model_private_registry_access_request(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_container_service_deployment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContainerServiceDeploymentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.service_name {
        object.key("serviceName").string(var_64.as_str());
    }
    if let Some(var_65) = &input.containers {
        let mut object_66 = object.key("containers").start_object();
        for (key_67, value_68) in var_65 {
            {
                let mut object_69 = object_66.key(key_67).start_object();
                crate::json_ser::serialize_structure_crate_model_container(
                    &mut object_69,
                    value_68,
                )?;
                object_69.finish();
            }
        }
        object_66.finish();
    }
    if let Some(var_70) = &input.public_endpoint {
        let mut object_71 = object.key("publicEndpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_request(&mut object_71, var_70)?;
        object_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_disk_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDiskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.disk_name {
        object.key("diskName").string(var_72.as_str());
    }
    if let Some(var_73) = &input.availability_zone {
        object.key("availabilityZone").string(var_73.as_str());
    }
    if let Some(var_74) = &input.size_in_gb {
        object.key("sizeInGb").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_74).into()),
        );
    }
    if let Some(var_75) = &input.tags {
        let mut array_76 = object.key("tags").start_array();
        for item_77 in var_75 {
            {
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_78, item_77)?;
                object_78.finish();
            }
        }
        array_76.finish();
    }
    if let Some(var_79) = &input.add_ons {
        let mut array_80 = object.key("addOns").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_crate_model_add_on_request(
                    &mut object_82,
                    item_81,
                )?;
                object_82.finish();
            }
        }
        array_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_disk_from_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDiskFromSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.disk_name {
        object.key("diskName").string(var_83.as_str());
    }
    if let Some(var_84) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_84.as_str());
    }
    if let Some(var_85) = &input.availability_zone {
        object.key("availabilityZone").string(var_85.as_str());
    }
    if let Some(var_86) = &input.size_in_gb {
        object.key("sizeInGb").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    if let Some(var_87) = &input.tags {
        let mut array_88 = object.key("tags").start_array();
        for item_89 in var_87 {
            {
                let mut object_90 = array_88.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_90, item_89)?;
                object_90.finish();
            }
        }
        array_88.finish();
    }
    if let Some(var_91) = &input.add_ons {
        let mut array_92 = object.key("addOns").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_crate_model_add_on_request(
                    &mut object_94,
                    item_93,
                )?;
                object_94.finish();
            }
        }
        array_92.finish();
    }
    if let Some(var_95) = &input.source_disk_name {
        object.key("sourceDiskName").string(var_95.as_str());
    }
    if let Some(var_96) = &input.restore_date {
        object.key("restoreDate").string(var_96.as_str());
    }
    if let Some(var_97) = &input.use_latest_restorable_auto_snapshot {
        object
            .key("useLatestRestorableAutoSnapshot")
            .boolean(*var_97);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_disk_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDiskSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.disk_name {
        object.key("diskName").string(var_98.as_str());
    }
    if let Some(var_99) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.instance_name {
        object.key("instanceName").string(var_100.as_str());
    }
    if let Some(var_101) = &input.tags {
        let mut array_102 = object.key("tags").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_104, item_103)?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_distribution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDistributionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.distribution_name {
        object.key("distributionName").string(var_105.as_str());
    }
    if let Some(var_106) = &input.origin {
        let mut object_107 = object.key("origin").start_object();
        crate::json_ser::serialize_structure_crate_model_input_origin(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.default_cache_behavior {
        let mut object_109 = object.key("defaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_behavior(&mut object_109, var_108)?;
        object_109.finish();
    }
    if let Some(var_110) = &input.cache_behavior_settings {
        let mut object_111 = object.key("cacheBehaviorSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_settings(&mut object_111, var_110)?;
        object_111.finish();
    }
    if let Some(var_112) = &input.cache_behaviors {
        let mut array_113 = object.key("cacheBehaviors").start_array();
        for item_114 in var_112 {
            {
                let mut object_115 = array_113.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cache_behavior_per_path(
                    &mut object_115,
                    item_114,
                )?;
                object_115.finish();
            }
        }
        array_113.finish();
    }
    if let Some(var_116) = &input.bundle_id {
        object.key("bundleId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.ip_address_type {
        object.key("ipAddressType").string(var_117.as_str());
    }
    if let Some(var_118) = &input.tags {
        let mut array_119 = object.key("tags").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_121, item_120)?;
                object_121.finish();
            }
        }
        array_119.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.domain_name {
        object.key("domainName").string(var_122.as_str());
    }
    if let Some(var_123) = &input.tags {
        let mut array_124 = object.key("tags").start_array();
        for item_125 in var_123 {
            {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_126, item_125)?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_entry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainEntryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.domain_name {
        object.key("domainName").string(var_127.as_str());
    }
    if let Some(var_128) = &input.domain_entry {
        let mut object_129 = object.key("domainEntry").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_entry(&mut object_129, var_128)?;
        object_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.instance_names {
        let mut array_131 = object.key("instanceNames").start_array();
        for item_132 in var_130 {
            {
                array_131.value().string(item_132.as_str());
            }
        }
        array_131.finish();
    }
    if let Some(var_133) = &input.availability_zone {
        object.key("availabilityZone").string(var_133.as_str());
    }
    if let Some(var_134) = &input.custom_image_name {
        object.key("customImageName").string(var_134.as_str());
    }
    if let Some(var_135) = &input.blueprint_id {
        object.key("blueprintId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.bundle_id {
        object.key("bundleId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.user_data {
        object.key("userData").string(var_137.as_str());
    }
    if let Some(var_138) = &input.key_pair_name {
        object.key("keyPairName").string(var_138.as_str());
    }
    if let Some(var_139) = &input.tags {
        let mut array_140 = object.key("tags").start_array();
        for item_141 in var_139 {
            {
                let mut object_142 = array_140.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_142, item_141)?;
                object_142.finish();
            }
        }
        array_140.finish();
    }
    if let Some(var_143) = &input.add_ons {
        let mut array_144 = object.key("addOns").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_add_on_request(
                    &mut object_146,
                    item_145,
                )?;
                object_146.finish();
            }
        }
        array_144.finish();
    }
    if let Some(var_147) = &input.ip_address_type {
        object.key("ipAddressType").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instances_from_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstancesFromSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.instance_names {
        let mut array_149 = object.key("instanceNames").start_array();
        for item_150 in var_148 {
            {
                array_149.value().string(item_150.as_str());
            }
        }
        array_149.finish();
    }
    if let Some(var_151) = &input.attached_disk_mapping {
        let mut object_152 = object.key("attachedDiskMapping").start_object();
        for (key_153, value_154) in var_151 {
            {
                let mut array_155 = object_152.key(key_153).start_array();
                for item_156 in value_154 {
                    {
                        let mut object_157 = array_155.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_disk_map(
                            &mut object_157,
                            item_156,
                        )?;
                        object_157.finish();
                    }
                }
                array_155.finish();
            }
        }
        object_152.finish();
    }
    if let Some(var_158) = &input.availability_zone {
        object.key("availabilityZone").string(var_158.as_str());
    }
    if let Some(var_159) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_159.as_str());
    }
    if let Some(var_160) = &input.bundle_id {
        object.key("bundleId").string(var_160.as_str());
    }
    if let Some(var_161) = &input.user_data {
        object.key("userData").string(var_161.as_str());
    }
    if let Some(var_162) = &input.key_pair_name {
        object.key("keyPairName").string(var_162.as_str());
    }
    if let Some(var_163) = &input.tags {
        let mut array_164 = object.key("tags").start_array();
        for item_165 in var_163 {
            {
                let mut object_166 = array_164.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_166, item_165)?;
                object_166.finish();
            }
        }
        array_164.finish();
    }
    if let Some(var_167) = &input.add_ons {
        let mut array_168 = object.key("addOns").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_crate_model_add_on_request(
                    &mut object_170,
                    item_169,
                )?;
                object_170.finish();
            }
        }
        array_168.finish();
    }
    if let Some(var_171) = &input.ip_address_type {
        object.key("ipAddressType").string(var_171.as_str());
    }
    if let Some(var_172) = &input.source_instance_name {
        object.key("sourceInstanceName").string(var_172.as_str());
    }
    if let Some(var_173) = &input.restore_date {
        object.key("restoreDate").string(var_173.as_str());
    }
    if let Some(var_174) = &input.use_latest_restorable_auto_snapshot {
        object
            .key("useLatestRestorableAutoSnapshot")
            .boolean(*var_174);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instance_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstanceSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_175.as_str());
    }
    if let Some(var_176) = &input.instance_name {
        object.key("instanceName").string(var_176.as_str());
    }
    if let Some(var_177) = &input.tags {
        let mut array_178 = object.key("tags").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_180, item_179)?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_key_pair_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateKeyPairInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.key_pair_name {
        object.key("keyPairName").string(var_181.as_str());
    }
    if let Some(var_182) = &input.tags {
        let mut array_183 = object.key("tags").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_185, item_184)?;
                object_185.finish();
            }
        }
        array_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_load_balancer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLoadBalancerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_186.as_str());
    }
    {
        object.key("instancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_187) = &input.health_check_path {
        object.key("healthCheckPath").string(var_187.as_str());
    }
    if let Some(var_188) = &input.certificate_name {
        object.key("certificateName").string(var_188.as_str());
    }
    if let Some(var_189) = &input.certificate_domain_name {
        object.key("certificateDomainName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.certificate_alternative_names {
        let mut array_191 = object.key("certificateAlternativeNames").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192.as_str());
            }
        }
        array_191.finish();
    }
    if let Some(var_193) = &input.tags {
        let mut array_194 = object.key("tags").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_196, item_195)?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.ip_address_type {
        object.key("ipAddressType").string(var_197.as_str());
    }
    if let Some(var_198) = &input.tls_policy_name {
        object.key("tlsPolicyName").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_load_balancer_tls_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLoadBalancerTlsCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_199.as_str());
    }
    if let Some(var_200) = &input.certificate_name {
        object.key("certificateName").string(var_200.as_str());
    }
    if let Some(var_201) = &input.certificate_domain_name {
        object.key("certificateDomainName").string(var_201.as_str());
    }
    if let Some(var_202) = &input.certificate_alternative_names {
        let mut array_203 = object.key("certificateAlternativeNames").start_array();
        for item_204 in var_202 {
            {
                array_203.value().string(item_204.as_str());
            }
        }
        array_203.finish();
    }
    if let Some(var_205) = &input.tags {
        let mut array_206 = object.key("tags").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_208, item_207)?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_209.as_str());
    }
    if let Some(var_210) = &input.availability_zone {
        object.key("availabilityZone").string(var_210.as_str());
    }
    if let Some(var_211) = &input.relational_database_blueprint_id {
        object
            .key("relationalDatabaseBlueprintId")
            .string(var_211.as_str());
    }
    if let Some(var_212) = &input.relational_database_bundle_id {
        object
            .key("relationalDatabaseBundleId")
            .string(var_212.as_str());
    }
    if let Some(var_213) = &input.master_database_name {
        object.key("masterDatabaseName").string(var_213.as_str());
    }
    if let Some(var_214) = &input.master_username {
        object.key("masterUsername").string(var_214.as_str());
    }
    if let Some(var_215) = &input.master_user_password {
        object.key("masterUserPassword").string(var_215.as_str());
    }
    if let Some(var_216) = &input.preferred_backup_window {
        object.key("preferredBackupWindow").string(var_216.as_str());
    }
    if let Some(var_217) = &input.preferred_maintenance_window {
        object
            .key("preferredMaintenanceWindow")
            .string(var_217.as_str());
    }
    if let Some(var_218) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_218);
    }
    if let Some(var_219) = &input.tags {
        let mut array_220 = object.key("tags").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_222, item_221)?;
                object_222.finish();
            }
        }
        array_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_relational_database_from_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRelationalDatabaseFromSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_223.as_str());
    }
    if let Some(var_224) = &input.availability_zone {
        object.key("availabilityZone").string(var_224.as_str());
    }
    if let Some(var_225) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_225);
    }
    if let Some(var_226) = &input.relational_database_snapshot_name {
        object
            .key("relationalDatabaseSnapshotName")
            .string(var_226.as_str());
    }
    if let Some(var_227) = &input.relational_database_bundle_id {
        object
            .key("relationalDatabaseBundleId")
            .string(var_227.as_str());
    }
    if let Some(var_228) = &input.source_relational_database_name {
        object
            .key("sourceRelationalDatabaseName")
            .string(var_228.as_str());
    }
    if let Some(var_229) = &input.restore_time {
        object
            .key("restoreTime")
            .date_time(var_229, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_230) = &input.use_latest_restorable_time {
        object.key("useLatestRestorableTime").boolean(*var_230);
    }
    if let Some(var_231) = &input.tags {
        let mut array_232 = object.key("tags").start_array();
        for item_233 in var_231 {
            {
                let mut object_234 = array_232.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_234, item_233)?;
                object_234.finish();
            }
        }
        array_232.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_relational_database_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRelationalDatabaseSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_235.as_str());
    }
    if let Some(var_236) = &input.relational_database_snapshot_name {
        object
            .key("relationalDatabaseSnapshotName")
            .string(var_236.as_str());
    }
    if let Some(var_237) = &input.tags {
        let mut array_238 = object.key("tags").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_240, item_239)?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alarm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlarmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.alarm_name {
        object.key("alarmName").string(var_241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_auto_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAutoSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.resource_name {
        object.key("resourceName").string(var_242.as_str());
    }
    if let Some(var_243) = &input.date {
        object.key("date").string(var_243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_bucket_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBucketInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.bucket_name {
        object.key("bucketName").string(var_244.as_str());
    }
    if let Some(var_245) = &input.force_delete {
        object.key("forceDelete").boolean(*var_245);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_bucket_access_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBucketAccessKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.bucket_name {
        object.key("bucketName").string(var_246.as_str());
    }
    if let Some(var_247) = &input.access_key_id {
        object.key("accessKeyId").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.certificate_name {
        object.key("certificateName").string(var_248.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_contact_method_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContactMethodInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.protocol {
        object.key("protocol").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_container_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContainerImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.service_name {
        object.key("serviceName").string(var_250.as_str());
    }
    if let Some(var_251) = &input.image {
        object.key("image").string(var_251.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_container_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContainerServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.service_name {
        object.key("serviceName").string(var_252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_disk_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDiskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.disk_name {
        object.key("diskName").string(var_253.as_str());
    }
    if let Some(var_254) = &input.force_delete_add_ons {
        object.key("forceDeleteAddOns").boolean(*var_254);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_disk_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDiskSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_distribution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDistributionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.distribution_name {
        object.key("distributionName").string(var_256.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.domain_name {
        object.key("domainName").string(var_257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_domain_entry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainEntryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.domain_name {
        object.key("domainName").string(var_258.as_str());
    }
    if let Some(var_259) = &input.domain_entry {
        let mut object_260 = object.key("domainEntry").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_entry(&mut object_260, var_259)?;
        object_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.instance_name {
        object.key("instanceName").string(var_261.as_str());
    }
    if let Some(var_262) = &input.force_delete_add_ons {
        object.key("forceDeleteAddOns").boolean(*var_262);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_instance_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInstanceSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_key_pair_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteKeyPairInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.key_pair_name {
        object.key("keyPairName").string(var_264.as_str());
    }
    if let Some(var_265) = &input.expected_fingerprint {
        object.key("expectedFingerprint").string(var_265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_known_host_keys_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteKnownHostKeysInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.instance_name {
        object.key("instanceName").string(var_266.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_load_balancer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoadBalancerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_load_balancer_tls_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoadBalancerTlsCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_268.as_str());
    }
    if let Some(var_269) = &input.certificate_name {
        object.key("certificateName").string(var_269.as_str());
    }
    if let Some(var_270) = &input.force {
        object.key("force").boolean(*var_270);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_271.as_str());
    }
    if let Some(var_272) = &input.skip_final_snapshot {
        object.key("skipFinalSnapshot").boolean(*var_272);
    }
    if let Some(var_273) = &input.final_relational_database_snapshot_name {
        object
            .key("finalRelationalDatabaseSnapshotName")
            .string(var_273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_relational_database_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRelationalDatabaseSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.relational_database_snapshot_name {
        object
            .key("relationalDatabaseSnapshotName")
            .string(var_274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detach_certificate_from_distribution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachCertificateFromDistributionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.distribution_name {
        object.key("distributionName").string(var_275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detach_disk_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachDiskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.disk_name {
        object.key("diskName").string(var_276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detach_instances_from_load_balancer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachInstancesFromLoadBalancerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_277.as_str());
    }
    if let Some(var_278) = &input.instance_names {
        let mut array_279 = object.key("instanceNames").start_array();
        for item_280 in var_278 {
            {
                array_279.value().string(item_280.as_str());
            }
        }
        array_279.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detach_static_ip_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachStaticIpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.static_ip_name {
        object.key("staticIpName").string(var_281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_add_on_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableAddOnInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.add_on_type {
        object.key("addOnType").string(var_282.as_str());
    }
    if let Some(var_283) = &input.resource_name {
        object.key("resourceName").string(var_283.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_add_on_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableAddOnInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.resource_name {
        object.key("resourceName").string(var_284.as_str());
    }
    if let Some(var_285) = &input.add_on_request {
        let mut object_286 = object.key("addOnRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_add_on_request(&mut object_286, var_285)?;
        object_286.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_export_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExportSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.source_snapshot_name {
        object.key("sourceSnapshotName").string(var_287.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_active_names_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetActiveNamesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.page_token {
        object.key("pageToken").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_alarms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAlarmsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.alarm_name {
        object.key("alarmName").string(var_289.as_str());
    }
    if let Some(var_290) = &input.page_token {
        object.key("pageToken").string(var_290.as_str());
    }
    if let Some(var_291) = &input.monitored_resource_name {
        object.key("monitoredResourceName").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_auto_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutoSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.resource_name {
        object.key("resourceName").string(var_292.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.include_inactive {
        object.key("includeInactive").boolean(*var_293);
    }
    if let Some(var_294) = &input.page_token {
        object.key("pageToken").string(var_294.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_bucket_access_keys_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBucketAccessKeysInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.bucket_name {
        object.key("bucketName").string(var_295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_bucket_bundles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBucketBundlesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.include_inactive {
        object.key("includeInactive").boolean(*var_296);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_bucket_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBucketMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.bucket_name {
        object.key("bucketName").string(var_297.as_str());
    }
    if let Some(var_298) = &input.metric_name {
        object.key("metricName").string(var_298.as_str());
    }
    if let Some(var_299) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_299, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_300) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_300, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_301) = &input.statistics {
        let mut array_302 = object.key("statistics").start_array();
        for item_303 in var_301 {
            {
                array_302.value().string(item_303.as_str());
            }
        }
        array_302.finish();
    }
    if let Some(var_304) = &input.unit {
        object.key("unit").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_buckets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBucketsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.bucket_name {
        object.key("bucketName").string(var_305.as_str());
    }
    if let Some(var_306) = &input.page_token {
        object.key("pageToken").string(var_306.as_str());
    }
    if let Some(var_307) = &input.include_connected_resources {
        object.key("includeConnectedResources").boolean(*var_307);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_bundles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBundlesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.include_inactive {
        object.key("includeInactive").boolean(*var_308);
    }
    if let Some(var_309) = &input.page_token {
        object.key("pageToken").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_certificates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCertificatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.certificate_statuses {
        let mut array_311 = object.key("certificateStatuses").start_array();
        for item_312 in var_310 {
            {
                array_311.value().string(item_312.as_str());
            }
        }
        array_311.finish();
    }
    if input.include_certificate_details {
        object
            .key("includeCertificateDetails")
            .boolean(input.include_certificate_details);
    }
    if let Some(var_313) = &input.certificate_name {
        object.key("certificateName").string(var_313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_cloud_formation_stack_records_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCloudFormationStackRecordsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.page_token {
        object.key("pageToken").string(var_314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_contact_methods_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactMethodsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.protocols {
        let mut array_316 = object.key("protocols").start_array();
        for item_317 in var_315 {
            {
                array_316.value().string(item_317.as_str());
            }
        }
        array_316.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_container_images_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerImagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.service_name {
        object.key("serviceName").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_container_log_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerLogInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.service_name {
        object.key("serviceName").string(var_319.as_str());
    }
    if let Some(var_320) = &input.container_name {
        object.key("containerName").string(var_320.as_str());
    }
    if let Some(var_321) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_321, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_322) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_322, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_323) = &input.filter_pattern {
        object.key("filterPattern").string(var_323.as_str());
    }
    if let Some(var_324) = &input.page_token {
        object.key("pageToken").string(var_324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_container_service_deployments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerServiceDeploymentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.service_name {
        object.key("serviceName").string(var_325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_container_service_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerServiceMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.service_name {
        object.key("serviceName").string(var_326.as_str());
    }
    if let Some(var_327) = &input.metric_name {
        object.key("metricName").string(var_327.as_str());
    }
    if let Some(var_328) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_328, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_329) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_329, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_330) = &input.statistics {
        let mut array_331 = object.key("statistics").start_array();
        for item_332 in var_330 {
            {
                array_331.value().string(item_332.as_str());
            }
        }
        array_331.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_container_services_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerServicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.service_name {
        object.key("serviceName").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_disk_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.disk_name {
        object.key("diskName").string(var_334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_disks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDisksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.page_token {
        object.key("pageToken").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_disk_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiskSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_disk_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiskSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.page_token {
        object.key("pageToken").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_distribution_latest_cache_reset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDistributionLatestCacheResetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.distribution_name {
        object.key("distributionName").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_distribution_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDistributionMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.distribution_name {
        object.key("distributionName").string(var_339.as_str());
    }
    if let Some(var_340) = &input.metric_name {
        object.key("metricName").string(var_340.as_str());
    }
    if let Some(var_341) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_341, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_342) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_342, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_343) = &input.unit {
        object.key("unit").string(var_343.as_str());
    }
    if let Some(var_344) = &input.statistics {
        let mut array_345 = object.key("statistics").start_array();
        for item_346 in var_344 {
            {
                array_345.value().string(item_346.as_str());
            }
        }
        array_345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_distributions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDistributionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.distribution_name {
        object.key("distributionName").string(var_347.as_str());
    }
    if let Some(var_348) = &input.page_token {
        object.key("pageToken").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.domain_name {
        object.key("domainName").string(var_349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDomainsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.page_token {
        object.key("pageToken").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_export_snapshot_records_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetExportSnapshotRecordsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.page_token {
        object.key("pageToken").string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.instance_name {
        object.key("instanceName").string(var_352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instance_access_details_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceAccessDetailsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.instance_name {
        object.key("instanceName").string(var_353.as_str());
    }
    if let Some(var_354) = &input.protocol {
        object.key("protocol").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instance_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.instance_name {
        object.key("instanceName").string(var_355.as_str());
    }
    if let Some(var_356) = &input.metric_name {
        object.key("metricName").string(var_356.as_str());
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_357) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_357, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_358) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_358, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_359) = &input.unit {
        object.key("unit").string(var_359.as_str());
    }
    if let Some(var_360) = &input.statistics {
        let mut array_361 = object.key("statistics").start_array();
        for item_362 in var_360 {
            {
                array_361.value().string(item_362.as_str());
            }
        }
        array_361.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instance_port_states_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstancePortStatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.instance_name {
        object.key("instanceName").string(var_363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.page_token {
        object.key("pageToken").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instance_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instance_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.page_token {
        object.key("pageToken").string(var_366.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_instance_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.instance_name {
        object.key("instanceName").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_key_pair_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyPairInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.key_pair_name {
        object.key("keyPairName").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_key_pairs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyPairsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.page_token {
        object.key("pageToken").string(var_369.as_str());
    }
    if let Some(var_370) = &input.include_default_key_pair {
        object.key("includeDefaultKeyPair").boolean(*var_370);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_load_balancer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_load_balancer_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancerMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_372.as_str());
    }
    if let Some(var_373) = &input.metric_name {
        object.key("metricName").string(var_373.as_str());
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_374) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_374, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_375) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_375, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_376) = &input.unit {
        object.key("unit").string(var_376.as_str());
    }
    if let Some(var_377) = &input.statistics {
        let mut array_378 = object.key("statistics").start_array();
        for item_379 in var_377 {
            {
                array_378.value().string(item_379.as_str());
            }
        }
        array_378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_load_balancers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.page_token {
        object.key("pageToken").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_load_balancer_tls_certificates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancerTlsCertificatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_load_balancer_tls_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancerTlsPoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.page_token {
        object.key("pageToken").string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.operation_id {
        object.key("operationId").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_operations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOperationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.page_token {
        object.key("pageToken").string(var_384.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_operations_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOperationsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.resource_name {
        object.key("resourceName").string(var_385.as_str());
    }
    if let Some(var_386) = &input.page_token {
        object.key("pageToken").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_regions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.include_availability_zones {
        object.key("includeAvailabilityZones").boolean(*var_387);
    }
    if let Some(var_388) = &input.include_relational_database_availability_zones {
        object
            .key("includeRelationalDatabaseAvailabilityZones")
            .boolean(*var_388);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_389.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.page_token {
        object.key("pageToken").string(var_390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_bundles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseBundlesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.page_token {
        object.key("pageToken").string(var_391.as_str());
    }
    if let Some(var_392) = &input.include_inactive {
        object.key("includeInactive").boolean(*var_392);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_393) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_393.as_str());
    }
    if let Some(var_394) = &input.duration_in_minutes {
        object.key("durationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    if let Some(var_395) = &input.page_token {
        object.key("pageToken").string(var_395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_log_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseLogEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_396.as_str());
    }
    if let Some(var_397) = &input.log_stream_name {
        object.key("logStreamName").string(var_397.as_str());
    }
    if let Some(var_398) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_398, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_399) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_399, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_400) = &input.start_from_head {
        object.key("startFromHead").boolean(*var_400);
    }
    if let Some(var_401) = &input.page_token {
        object.key("pageToken").string(var_401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_log_streams_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseLogStreamsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_402.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_master_user_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseMasterUserPasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_403) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_403.as_str());
    }
    if let Some(var_404) = &input.password_version {
        object.key("passwordVersion").string(var_404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_405) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_405.as_str());
    }
    if let Some(var_406) = &input.metric_name {
        object.key("metricName").string(var_406.as_str());
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_407) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_407, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_408) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_408, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_409) = &input.unit {
        object.key("unit").string(var_409.as_str());
    }
    if let Some(var_410) = &input.statistics {
        let mut array_411 = object.key("statistics").start_array();
        for item_412 in var_410 {
            {
                array_411.value().string(item_412.as_str());
            }
        }
        array_411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_413.as_str());
    }
    if let Some(var_414) = &input.page_token {
        object.key("pageToken").string(var_414.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_415) = &input.page_token {
        object.key("pageToken").string(var_415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_416) = &input.relational_database_snapshot_name {
        object
            .key("relationalDatabaseSnapshotName")
            .string(var_416.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_relational_database_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.page_token {
        object.key("pageToken").string(var_417.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_static_ip_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStaticIpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.static_ip_name {
        object.key("staticIpName").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_static_ips_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStaticIpsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.page_token {
        object.key("pageToken").string(var_419.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_key_pair_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportKeyPairInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.key_pair_name {
        object.key("keyPairName").string(var_420.as_str());
    }
    if let Some(var_421) = &input.public_key_base64 {
        object.key("publicKeyBase64").string(var_421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_open_instance_public_ports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::OpenInstancePublicPortsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.port_info {
        let mut object_423 = object.key("portInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_port_info(&mut object_423, var_422)?;
        object_423.finish();
    }
    if let Some(var_424) = &input.instance_name {
        object.key("instanceName").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_alarm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAlarmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.alarm_name {
        object.key("alarmName").string(var_425.as_str());
    }
    if let Some(var_426) = &input.metric_name {
        object.key("metricName").string(var_426.as_str());
    }
    if let Some(var_427) = &input.monitored_resource_name {
        object.key("monitoredResourceName").string(var_427.as_str());
    }
    if let Some(var_428) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_428.as_str());
    }
    if let Some(var_429) = &input.threshold {
        object.key("threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_429).into()),
        );
    }
    if let Some(var_430) = &input.evaluation_periods {
        object.key("evaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_430).into()),
        );
    }
    if let Some(var_431) = &input.datapoints_to_alarm {
        object.key("datapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_431).into()),
        );
    }
    if let Some(var_432) = &input.treat_missing_data {
        object.key("treatMissingData").string(var_432.as_str());
    }
    if let Some(var_433) = &input.contact_protocols {
        let mut array_434 = object.key("contactProtocols").start_array();
        for item_435 in var_433 {
            {
                array_434.value().string(item_435.as_str());
            }
        }
        array_434.finish();
    }
    if let Some(var_436) = &input.notification_triggers {
        let mut array_437 = object.key("notificationTriggers").start_array();
        for item_438 in var_436 {
            {
                array_437.value().string(item_438.as_str());
            }
        }
        array_437.finish();
    }
    if let Some(var_439) = &input.notification_enabled {
        object.key("notificationEnabled").boolean(*var_439);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_instance_public_ports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInstancePublicPortsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.port_infos {
        let mut array_441 = object.key("portInfos").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_info(
                    &mut object_443,
                    item_442,
                )?;
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if let Some(var_444) = &input.instance_name {
        object.key("instanceName").string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reboot_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.instance_name {
        object.key("instanceName").string(var_445.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reboot_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_446) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_container_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterContainerImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.service_name {
        object.key("serviceName").string(var_447.as_str());
    }
    if let Some(var_448) = &input.label {
        object.key("label").string(var_448.as_str());
    }
    if let Some(var_449) = &input.digest {
        object.key("digest").string(var_449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_release_static_ip_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReleaseStaticIpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.static_ip_name {
        object.key("staticIpName").string(var_450.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_distribution_cache_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetDistributionCacheInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.distribution_name {
        object.key("distributionName").string(var_451.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_contact_method_verification_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendContactMethodVerificationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.protocol {
        object.key("protocol").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_ip_address_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetIpAddressTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.resource_type {
        object.key("resourceType").string(var_453.as_str());
    }
    if let Some(var_454) = &input.resource_name {
        object.key("resourceName").string(var_454.as_str());
    }
    if let Some(var_455) = &input.ip_address_type {
        object.key("ipAddressType").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_resource_access_for_bucket_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetResourceAccessForBucketInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.resource_name {
        object.key("resourceName").string(var_456.as_str());
    }
    if let Some(var_457) = &input.bucket_name {
        object.key("bucketName").string(var_457.as_str());
    }
    if let Some(var_458) = &input.access {
        object.key("access").string(var_458.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.instance_name {
        object.key("instanceName").string(var_459.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_460.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.instance_name {
        object.key("instanceName").string(var_461.as_str());
    }
    if let Some(var_462) = &input.force {
        object.key("force").boolean(*var_462);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_463.as_str());
    }
    if let Some(var_464) = &input.relational_database_snapshot_name {
        object
            .key("relationalDatabaseSnapshotName")
            .string(var_464.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_465) = &input.resource_name {
        object.key("resourceName").string(var_465.as_str());
    }
    if let Some(var_466) = &input.resource_arn {
        object.key("resourceArn").string(var_466.as_str());
    }
    if let Some(var_467) = &input.tags {
        let mut array_468 = object.key("tags").start_array();
        for item_469 in var_467 {
            {
                let mut object_470 = array_468.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_470, item_469)?;
                object_470.finish();
            }
        }
        array_468.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_alarm_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestAlarmInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.alarm_name {
        object.key("alarmName").string(var_471.as_str());
    }
    if let Some(var_472) = &input.state {
        object.key("state").string(var_472.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.resource_name {
        object.key("resourceName").string(var_473.as_str());
    }
    if let Some(var_474) = &input.resource_arn {
        object.key("resourceArn").string(var_474.as_str());
    }
    if let Some(var_475) = &input.tag_keys {
        let mut array_476 = object.key("tagKeys").start_array();
        for item_477 in var_475 {
            {
                array_476.value().string(item_477.as_str());
            }
        }
        array_476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bucket_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBucketInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.bucket_name {
        object.key("bucketName").string(var_478.as_str());
    }
    if let Some(var_479) = &input.access_rules {
        let mut object_480 = object.key("accessRules").start_object();
        crate::json_ser::serialize_structure_crate_model_access_rules(&mut object_480, var_479)?;
        object_480.finish();
    }
    if let Some(var_481) = &input.versioning {
        object.key("versioning").string(var_481.as_str());
    }
    if let Some(var_482) = &input.readonly_access_accounts {
        let mut array_483 = object.key("readonlyAccessAccounts").start_array();
        for item_484 in var_482 {
            {
                array_483.value().string(item_484.as_str());
            }
        }
        array_483.finish();
    }
    if let Some(var_485) = &input.access_log_config {
        let mut object_486 = object.key("accessLogConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_bucket_access_log_config(
            &mut object_486,
            var_485,
        )?;
        object_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bucket_bundle_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBucketBundleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.bucket_name {
        object.key("bucketName").string(var_487.as_str());
    }
    if let Some(var_488) = &input.bundle_id {
        object.key("bundleId").string(var_488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_container_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContainerServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.service_name {
        object.key("serviceName").string(var_489.as_str());
    }
    if let Some(var_490) = &input.power {
        object.key("power").string(var_490.as_str());
    }
    if let Some(var_491) = &input.scale {
        object.key("scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_491).into()),
        );
    }
    if let Some(var_492) = &input.is_disabled {
        object.key("isDisabled").boolean(*var_492);
    }
    if let Some(var_493) = &input.public_domain_names {
        let mut object_494 = object.key("publicDomainNames").start_object();
        for (key_495, value_496) in var_493 {
            {
                let mut array_497 = object_494.key(key_495).start_array();
                for item_498 in value_496 {
                    {
                        array_497.value().string(item_498.as_str());
                    }
                }
                array_497.finish();
            }
        }
        object_494.finish();
    }
    if let Some(var_499) = &input.private_registry_access {
        let mut object_500 = object.key("privateRegistryAccess").start_object();
        crate::json_ser::serialize_structure_crate_model_private_registry_access_request(
            &mut object_500,
            var_499,
        )?;
        object_500.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_distribution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDistributionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.distribution_name {
        object.key("distributionName").string(var_501.as_str());
    }
    if let Some(var_502) = &input.origin {
        let mut object_503 = object.key("origin").start_object();
        crate::json_ser::serialize_structure_crate_model_input_origin(&mut object_503, var_502)?;
        object_503.finish();
    }
    if let Some(var_504) = &input.default_cache_behavior {
        let mut object_505 = object.key("defaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_behavior(&mut object_505, var_504)?;
        object_505.finish();
    }
    if let Some(var_506) = &input.cache_behavior_settings {
        let mut object_507 = object.key("cacheBehaviorSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_settings(&mut object_507, var_506)?;
        object_507.finish();
    }
    if let Some(var_508) = &input.cache_behaviors {
        let mut array_509 = object.key("cacheBehaviors").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cache_behavior_per_path(
                    &mut object_511,
                    item_510,
                )?;
                object_511.finish();
            }
        }
        array_509.finish();
    }
    if let Some(var_512) = &input.is_enabled {
        object.key("isEnabled").boolean(*var_512);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_distribution_bundle_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDistributionBundleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_513) = &input.distribution_name {
        object.key("distributionName").string(var_513.as_str());
    }
    if let Some(var_514) = &input.bundle_id {
        object.key("bundleId").string(var_514.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_entry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainEntryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_515) = &input.domain_name {
        object.key("domainName").string(var_515.as_str());
    }
    if let Some(var_516) = &input.domain_entry {
        let mut object_517 = object.key("domainEntry").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_entry(&mut object_517, var_516)?;
        object_517.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_load_balancer_attribute_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLoadBalancerAttributeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_518) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_518.as_str());
    }
    if let Some(var_519) = &input.attribute_name {
        object.key("attributeName").string(var_519.as_str());
    }
    if let Some(var_520) = &input.attribute_value {
        object.key("attributeValue").string(var_520.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_521) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_521.as_str());
    }
    if let Some(var_522) = &input.master_user_password {
        object.key("masterUserPassword").string(var_522.as_str());
    }
    if let Some(var_523) = &input.rotate_master_user_password {
        object.key("rotateMasterUserPassword").boolean(*var_523);
    }
    if let Some(var_524) = &input.preferred_backup_window {
        object.key("preferredBackupWindow").string(var_524.as_str());
    }
    if let Some(var_525) = &input.preferred_maintenance_window {
        object
            .key("preferredMaintenanceWindow")
            .string(var_525.as_str());
    }
    if let Some(var_526) = &input.enable_backup_retention {
        object.key("enableBackupRetention").boolean(*var_526);
    }
    if let Some(var_527) = &input.disable_backup_retention {
        object.key("disableBackupRetention").boolean(*var_527);
    }
    if let Some(var_528) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_528);
    }
    if let Some(var_529) = &input.apply_immediately {
        object.key("applyImmediately").boolean(*var_529);
    }
    if let Some(var_530) = &input.ca_certificate_identifier {
        object
            .key("caCertificateIdentifier")
            .string(var_530.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_relational_database_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRelationalDatabaseParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_531) = &input.relational_database_name {
        object
            .key("relationalDatabaseName")
            .string(var_531.as_str());
    }
    if let Some(var_532) = &input.parameters {
        let mut array_533 = object.key("parameters").start_array();
        for item_534 in var_532 {
            {
                let mut object_535 = array_533.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relational_database_parameter(
                    &mut object_535,
                    item_534,
                )?;
                object_535.finish();
            }
        }
        array_533.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from_port != 0 {
        object.key("fromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("toPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_536) = &input.protocol {
        object.key("protocol").string(var_536.as_str());
    }
    if let Some(var_537) = &input.cidrs {
        let mut array_538 = object.key("cidrs").start_array();
        for item_539 in var_537 {
            {
                array_538.value().string(item_539.as_str());
            }
        }
        array_538.finish();
    }
    if let Some(var_540) = &input.ipv6_cidrs {
        let mut array_541 = object.key("ipv6Cidrs").start_array();
        for item_542 in var_540 {
            {
                array_541.value().string(item_542.as_str());
            }
        }
        array_541.finish();
    }
    if let Some(var_543) = &input.cidr_list_aliases {
        let mut array_544 = object.key("cidrListAliases").start_array();
        for item_545 in var_543 {
            {
                array_544.value().string(item_545.as_str());
            }
        }
        array_544.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_546) = &input.key {
        object.key("key").string(var_546.as_str());
    }
    if let Some(var_547) = &input.value {
        object.key("value").string(var_547.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.source_name {
        object.key("sourceName").string(var_548.as_str());
    }
    if let Some(var_549) = &input.instance_type {
        object.key("instanceType").string(var_549.as_str());
    }
    if let Some(var_550) = &input.port_info_source {
        object.key("portInfoSource").string(var_550.as_str());
    }
    if let Some(var_551) = &input.user_data {
        object.key("userData").string(var_551.as_str());
    }
    if let Some(var_552) = &input.availability_zone {
        object.key("availabilityZone").string(var_552.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_service_deployment_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerServiceDeploymentRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_553) = &input.containers {
        let mut object_554 = object.key("containers").start_object();
        for (key_555, value_556) in var_553 {
            {
                let mut object_557 = object_554.key(key_555).start_object();
                crate::json_ser::serialize_structure_crate_model_container(
                    &mut object_557,
                    value_556,
                )?;
                object_557.finish();
            }
        }
        object_554.finish();
    }
    if let Some(var_558) = &input.public_endpoint {
        let mut object_559 = object.key("publicEndpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_request(
            &mut object_559,
            var_558,
        )?;
        object_559.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_private_registry_access_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrivateRegistryAccessRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_560) = &input.ecr_image_puller_role {
        let mut object_561 = object.key("ecrImagePullerRole").start_object();
        crate::json_ser::serialize_structure_crate_model_container_service_ecr_image_puller_role_request(&mut object_561, var_560)?;
        object_561.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Container,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_562) = &input.image {
        object.key("image").string(var_562.as_str());
    }
    if let Some(var_563) = &input.command {
        let mut array_564 = object.key("command").start_array();
        for item_565 in var_563 {
            {
                array_564.value().string(item_565.as_str());
            }
        }
        array_564.finish();
    }
    if let Some(var_566) = &input.environment {
        let mut object_567 = object.key("environment").start_object();
        for (key_568, value_569) in var_566 {
            {
                object_567.key(key_568).string(value_569.as_str());
            }
        }
        object_567.finish();
    }
    if let Some(var_570) = &input.ports {
        let mut object_571 = object.key("ports").start_object();
        for (key_572, value_573) in var_570 {
            {
                object_571.key(key_572).string(value_573.as_str());
            }
        }
        object_571.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_574) = &input.container_name {
        object.key("containerName").string(var_574.as_str());
    }
    if let Some(var_575) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_575).into()),
        );
    }
    if let Some(var_576) = &input.health_check {
        let mut object_577 = object.key("healthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_container_service_health_check_config(
            &mut object_577,
            var_576,
        )?;
        object_577.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_add_on_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddOnRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_578) = &input.add_on_type {
        object.key("addOnType").string(var_578.as_str());
    }
    if let Some(var_579) = &input.auto_snapshot_add_on_request {
        let mut object_580 = object.key("autoSnapshotAddOnRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_snapshot_add_on_request(
            &mut object_580,
            var_579,
        )?;
        object_580.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_origin(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputOrigin,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.name {
        object.key("name").string(var_581.as_str());
    }
    if let Some(var_582) = &input.region_name {
        object.key("regionName").string(var_582.as_str());
    }
    if let Some(var_583) = &input.protocol_policy {
        object.key("protocolPolicy").string(var_583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cache_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheBehavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_584) = &input.behavior {
        object.key("behavior").string(var_584.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cache_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_585) = &input.default_ttl {
        object.key("defaultTTL").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_585).into()),
        );
    }
    if let Some(var_586) = &input.minimum_ttl {
        object.key("minimumTTL").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_586).into()),
        );
    }
    if let Some(var_587) = &input.maximum_ttl {
        object.key("maximumTTL").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_587).into()),
        );
    }
    if let Some(var_588) = &input.allowed_http_methods {
        object.key("allowedHTTPMethods").string(var_588.as_str());
    }
    if let Some(var_589) = &input.cached_http_methods {
        object.key("cachedHTTPMethods").string(var_589.as_str());
    }
    if let Some(var_590) = &input.forwarded_cookies {
        let mut object_591 = object.key("forwardedCookies").start_object();
        crate::json_ser::serialize_structure_crate_model_cookie_object(&mut object_591, var_590)?;
        object_591.finish();
    }
    if let Some(var_592) = &input.forwarded_headers {
        let mut object_593 = object.key("forwardedHeaders").start_object();
        crate::json_ser::serialize_structure_crate_model_header_object(&mut object_593, var_592)?;
        object_593.finish();
    }
    if let Some(var_594) = &input.forwarded_query_strings {
        let mut object_595 = object.key("forwardedQueryStrings").start_object();
        crate::json_ser::serialize_structure_crate_model_query_string_object(
            &mut object_595,
            var_594,
        )?;
        object_595.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cache_behavior_per_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheBehaviorPerPath,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_596) = &input.path {
        object.key("path").string(var_596.as_str());
    }
    if let Some(var_597) = &input.behavior {
        object.key("behavior").string(var_597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.id {
        object.key("id").string(var_598.as_str());
    }
    if let Some(var_599) = &input.name {
        object.key("name").string(var_599.as_str());
    }
    if let Some(var_600) = &input.target {
        object.key("target").string(var_600.as_str());
    }
    if let Some(var_601) = &input.is_alias {
        object.key("isAlias").boolean(*var_601);
    }
    if let Some(var_602) = &input.r#type {
        object.key("type").string(var_602.as_str());
    }
    if let Some(var_603) = &input.options {
        let mut object_604 = object.key("options").start_object();
        for (key_605, value_606) in var_603 {
            {
                object_604.key(key_605).string(value_606.as_str());
            }
        }
        object_604.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_disk_map(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DiskMap,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_607) = &input.original_disk_path {
        object.key("originalDiskPath").string(var_607.as_str());
    }
    if let Some(var_608) = &input.new_disk_name {
        object.key("newDiskName").string(var_608.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_rules(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessRules,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_609) = &input.get_object {
        object.key("getObject").string(var_609.as_str());
    }
    if let Some(var_610) = &input.allow_public_overrides {
        object.key("allowPublicOverrides").boolean(*var_610);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_access_log_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BucketAccessLogConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_611) = &input.enabled {
        object.key("enabled").boolean(*var_611);
    }
    if let Some(var_612) = &input.destination {
        object.key("destination").string(var_612.as_str());
    }
    if let Some(var_613) = &input.prefix {
        object.key("prefix").string(var_613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_database_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalDatabaseParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.allowed_values {
        object.key("allowedValues").string(var_614.as_str());
    }
    if let Some(var_615) = &input.apply_method {
        object.key("applyMethod").string(var_615.as_str());
    }
    if let Some(var_616) = &input.apply_type {
        object.key("applyType").string(var_616.as_str());
    }
    if let Some(var_617) = &input.data_type {
        object.key("dataType").string(var_617.as_str());
    }
    if let Some(var_618) = &input.description {
        object.key("description").string(var_618.as_str());
    }
    if let Some(var_619) = &input.is_modifiable {
        object.key("isModifiable").boolean(*var_619);
    }
    if let Some(var_620) = &input.parameter_name {
        object.key("parameterName").string(var_620.as_str());
    }
    if let Some(var_621) = &input.parameter_value {
        object.key("parameterValue").string(var_621.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_service_ecr_image_puller_role_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerServiceEcrImagePullerRoleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_622) = &input.is_active {
        object.key("isActive").boolean(*var_622);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_service_health_check_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerServiceHealthCheckConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_623) = &input.healthy_threshold {
        object.key("healthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_623).into()),
        );
    }
    if let Some(var_624) = &input.unhealthy_threshold {
        object.key("unhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_624).into()),
        );
    }
    if let Some(var_625) = &input.timeout_seconds {
        object.key("timeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_625).into()),
        );
    }
    if let Some(var_626) = &input.interval_seconds {
        object.key("intervalSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_626).into()),
        );
    }
    if let Some(var_627) = &input.path {
        object.key("path").string(var_627.as_str());
    }
    if let Some(var_628) = &input.success_codes {
        object.key("successCodes").string(var_628.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_snapshot_add_on_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoSnapshotAddOnRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_629) = &input.snapshot_time_of_day {
        object.key("snapshotTimeOfDay").string(var_629.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cookie_object(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CookieObject,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_630) = &input.option {
        object.key("option").string(var_630.as_str());
    }
    if let Some(var_631) = &input.cookies_allow_list {
        let mut array_632 = object.key("cookiesAllowList").start_array();
        for item_633 in var_631 {
            {
                array_632.value().string(item_633.as_str());
            }
        }
        array_632.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_header_object(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HeaderObject,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_634) = &input.option {
        object.key("option").string(var_634.as_str());
    }
    if let Some(var_635) = &input.headers_allow_list {
        let mut array_636 = object.key("headersAllowList").start_array();
        for item_637 in var_635 {
            {
                array_636.value().string(item_637.as_str());
            }
        }
        array_636.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_string_object(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryStringObject,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_638) = &input.option {
        object.key("option").boolean(*var_638);
    }
    if let Some(var_639) = &input.query_strings_allow_list {
        let mut array_640 = object.key("queryStringsAllowList").start_array();
        for item_641 in var_639 {
            {
                array_640.value().string(item_641.as_str());
            }
        }
        array_640.finish();
    }
    Ok(())
}
