// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_assets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateAssetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.child_asset_id {
        object.key("childAssetId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.hierarchy_id {
        object.key("hierarchyId").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_time_series_to_asset_property_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTimeSeriesToAssetPropertyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_project_assets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateProjectAssetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.asset_ids {
        let mut array_6 = object.key("assetIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.client_token {
        object.key("clientToken").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_project_assets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateProjectAssetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.asset_ids {
        let mut array_10 = object.key("assetIds").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.client_token {
        object.key("clientToken").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_asset_property_aggregates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetAssetPropertyAggregatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.entries {
        let mut array_14 = object.key("entries").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_get_asset_property_aggregates_entry(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.next_token {
        object.key("nextToken").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_asset_property_value_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetAssetPropertyValueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.entries {
        let mut array_20 = object.key("entries").start_array();
        for item_21 in var_19 {
            {
                let mut object_22 = array_20.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_get_asset_property_value_entry(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.next_token {
        object.key("nextToken").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_asset_property_value_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetAssetPropertyValueHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.entries {
        let mut array_25 = object.key("entries").start_array();
        for item_26 in var_24 {
            {
                let mut object_27 = array_25.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_get_asset_property_value_history_entry(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    if let Some(var_29) = &input.next_token {
        object.key("nextToken").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_put_asset_property_value_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutAssetPropertyValueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.entries {
        let mut array_31 = object.key("entries").start_array();
        for item_32 in var_30 {
            {
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_crate_model_put_asset_property_value_entry(
                    &mut object_33,
                    item_32,
                )?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_access_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccessPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.access_policy_identity {
        let mut object_35 = object.key("accessPolicyIdentity").start_object();
        crate::json_ser::serialize_structure_crate_model_identity(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.access_policy_permission {
        object.key("accessPolicyPermission").string(var_36.as_str());
    }
    if let Some(var_37) = &input.access_policy_resource {
        let mut object_38 = object.key("accessPolicyResource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.client_token {
        object.key("clientToken").string(var_39.as_str());
    }
    if let Some(var_40) = &input.tags {
        let mut object_41 = object.key("tags").start_object();
        for (key_42, value_43) in var_40 {
            {
                object_41.key(key_42).string(value_43.as_str());
            }
        }
        object_41.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_asset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.asset_description {
        object.key("assetDescription").string(var_44.as_str());
    }
    if let Some(var_45) = &input.asset_model_id {
        object.key("assetModelId").string(var_45.as_str());
    }
    if let Some(var_46) = &input.asset_name {
        object.key("assetName").string(var_46.as_str());
    }
    if let Some(var_47) = &input.client_token {
        object.key("clientToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.tags {
        let mut object_49 = object.key("tags").start_object();
        for (key_50, value_51) in var_48 {
            {
                object_49.key(key_50).string(value_51.as_str());
            }
        }
        object_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_asset_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssetModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.asset_model_composite_models {
        let mut array_53 = object.key("assetModelCompositeModels").start_array();
        for item_54 in var_52 {
            {
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_composite_model_definition(&mut object_55, item_54)?;
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.asset_model_description {
        object.key("assetModelDescription").string(var_56.as_str());
    }
    if let Some(var_57) = &input.asset_model_hierarchies {
        let mut array_58 = object.key("assetModelHierarchies").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_hierarchy_definition(
                    &mut object_60,
                    item_59,
                )?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.asset_model_name {
        object.key("assetModelName").string(var_61.as_str());
    }
    if let Some(var_62) = &input.asset_model_properties {
        let mut array_63 = object.key("assetModelProperties").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_property_definition(
                    &mut object_65,
                    item_64,
                )?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.client_token {
        object.key("clientToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.tags {
        let mut object_68 = object.key("tags").start_object();
        for (key_69, value_70) in var_67 {
            {
                object_68.key(key_69).string(value_70.as_str());
            }
        }
        object_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDashboardInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.client_token {
        object.key("clientToken").string(var_71.as_str());
    }
    if let Some(var_72) = &input.dashboard_definition {
        object.key("dashboardDefinition").string(var_72.as_str());
    }
    if let Some(var_73) = &input.dashboard_description {
        object.key("dashboardDescription").string(var_73.as_str());
    }
    if let Some(var_74) = &input.dashboard_name {
        object.key("dashboardName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.project_id {
        object.key("projectId").string(var_75.as_str());
    }
    if let Some(var_76) = &input.tags {
        let mut object_77 = object.key("tags").start_object();
        for (key_78, value_79) in var_76 {
            {
                object_77.key(key_78).string(value_79.as_str());
            }
        }
        object_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.gateway_name {
        object.key("gatewayName").string(var_80.as_str());
    }
    if let Some(var_81) = &input.gateway_platform {
        let mut object_82 = object.key("gatewayPlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_platform(&mut object_82, var_81)?;
        object_82.finish();
    }
    if let Some(var_83) = &input.tags {
        let mut object_84 = object.key("tags").start_object();
        for (key_85, value_86) in var_83 {
            {
                object_84.key(key_85).string(value_86.as_str());
            }
        }
        object_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_portal_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePortalInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.alarms {
        let mut object_88 = object.key("alarms").start_object();
        crate::json_ser::serialize_structure_crate_model_alarms(&mut object_88, var_87)?;
        object_88.finish();
    }
    if let Some(var_89) = &input.client_token {
        object.key("clientToken").string(var_89.as_str());
    }
    if let Some(var_90) = &input.notification_sender_email {
        object
            .key("notificationSenderEmail")
            .string(var_90.as_str());
    }
    if let Some(var_91) = &input.portal_auth_mode {
        object.key("portalAuthMode").string(var_91.as_str());
    }
    if let Some(var_92) = &input.portal_contact_email {
        object.key("portalContactEmail").string(var_92.as_str());
    }
    if let Some(var_93) = &input.portal_description {
        object.key("portalDescription").string(var_93.as_str());
    }
    if let Some(var_94) = &input.portal_logo_image_file {
        let mut object_95 = object.key("portalLogoImageFile").start_object();
        crate::json_ser::serialize_structure_crate_model_image_file(&mut object_95, var_94)?;
        object_95.finish();
    }
    if let Some(var_96) = &input.portal_name {
        object.key("portalName").string(var_96.as_str());
    }
    if let Some(var_97) = &input.role_arn {
        object.key("roleArn").string(var_97.as_str());
    }
    if let Some(var_98) = &input.tags {
        let mut object_99 = object.key("tags").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).string(value_101.as_str());
            }
        }
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.client_token {
        object.key("clientToken").string(var_102.as_str());
    }
    if let Some(var_103) = &input.portal_id {
        object.key("portalId").string(var_103.as_str());
    }
    if let Some(var_104) = &input.project_description {
        object.key("projectDescription").string(var_104.as_str());
    }
    if let Some(var_105) = &input.project_name {
        object.key("projectName").string(var_105.as_str());
    }
    if let Some(var_106) = &input.tags {
        let mut object_107 = object.key("tags").start_object();
        for (key_108, value_109) in var_106 {
            {
                object_107.key(key_108).string(value_109.as_str());
            }
        }
        object_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_time_series_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTimeSeriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.client_token {
        object.key("clientToken").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_assets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateAssetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.child_asset_id {
        object.key("childAssetId").string(var_111.as_str());
    }
    if let Some(var_112) = &input.client_token {
        object.key("clientToken").string(var_112.as_str());
    }
    if let Some(var_113) = &input.hierarchy_id {
        object.key("hierarchyId").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_time_series_from_asset_property_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTimeSeriesFromAssetPropertyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.client_token {
        object.key("clientToken").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_default_encryption_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDefaultEncryptionConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.encryption_type {
        object.key("encryptionType").string(var_115.as_str());
    }
    if let Some(var_116) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_logging_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLoggingOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.logging_options {
        let mut object_118 = object.key("loggingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_options(&mut object_118, var_117)?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_storage_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutStorageConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.disassociated_data_storage {
        object
            .key("disassociatedDataStorage")
            .string(var_119.as_str());
    }
    if let Some(var_120) = &input.multi_layer_storage {
        let mut object_121 = object.key("multiLayerStorage").start_object();
        crate::json_ser::serialize_structure_crate_model_multi_layer_storage(
            &mut object_121,
            var_120,
        )?;
        object_121.finish();
    }
    if let Some(var_122) = &input.retention_period {
        let mut object_123 = object.key("retentionPeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_period(
            &mut object_123,
            var_122,
        )?;
        object_123.finish();
    }
    if let Some(var_124) = &input.storage_type {
        object.key("storageType").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.tags {
        let mut object_126 = object.key("tags").start_object();
        for (key_127, value_128) in var_125 {
            {
                object_126.key(key_127).string(value_128.as_str());
            }
        }
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_access_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccessPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.access_policy_identity {
        let mut object_130 = object.key("accessPolicyIdentity").start_object();
        crate::json_ser::serialize_structure_crate_model_identity(&mut object_130, var_129)?;
        object_130.finish();
    }
    if let Some(var_131) = &input.access_policy_permission {
        object
            .key("accessPolicyPermission")
            .string(var_131.as_str());
    }
    if let Some(var_132) = &input.access_policy_resource {
        let mut object_133 = object.key("accessPolicyResource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource(&mut object_133, var_132)?;
        object_133.finish();
    }
    if let Some(var_134) = &input.client_token {
        object.key("clientToken").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_asset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.asset_description {
        object.key("assetDescription").string(var_135.as_str());
    }
    if let Some(var_136) = &input.asset_name {
        object.key("assetName").string(var_136.as_str());
    }
    if let Some(var_137) = &input.client_token {
        object.key("clientToken").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_asset_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssetModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.asset_model_composite_models {
        let mut array_139 = object.key("assetModelCompositeModels").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_composite_model(
                    &mut object_141,
                    item_140,
                )?;
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.asset_model_description {
        object.key("assetModelDescription").string(var_142.as_str());
    }
    if let Some(var_143) = &input.asset_model_hierarchies {
        let mut array_144 = object.key("assetModelHierarchies").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_hierarchy(
                    &mut object_146,
                    item_145,
                )?;
                object_146.finish();
            }
        }
        array_144.finish();
    }
    if let Some(var_147) = &input.asset_model_name {
        object.key("assetModelName").string(var_147.as_str());
    }
    if let Some(var_148) = &input.asset_model_properties {
        let mut array_149 = object.key("assetModelProperties").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_property(
                    &mut object_151,
                    item_150,
                )?;
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.client_token {
        object.key("clientToken").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_asset_property_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssetPropertyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.client_token {
        object.key("clientToken").string(var_153.as_str());
    }
    if let Some(var_154) = &input.property_alias {
        object.key("propertyAlias").string(var_154.as_str());
    }
    if let Some(var_155) = &input.property_notification_state {
        object
            .key("propertyNotificationState")
            .string(var_155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.client_token {
        object.key("clientToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.dashboard_definition {
        object.key("dashboardDefinition").string(var_157.as_str());
    }
    if let Some(var_158) = &input.dashboard_description {
        object.key("dashboardDescription").string(var_158.as_str());
    }
    if let Some(var_159) = &input.dashboard_name {
        object.key("dashboardName").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.gateway_name {
        object.key("gatewayName").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_gateway_capability_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGatewayCapabilityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.capability_configuration {
        object
            .key("capabilityConfiguration")
            .string(var_161.as_str());
    }
    if let Some(var_162) = &input.capability_namespace {
        object.key("capabilityNamespace").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_portal_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePortalInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.alarms {
        let mut object_164 = object.key("alarms").start_object();
        crate::json_ser::serialize_structure_crate_model_alarms(&mut object_164, var_163)?;
        object_164.finish();
    }
    if let Some(var_165) = &input.client_token {
        object.key("clientToken").string(var_165.as_str());
    }
    if let Some(var_166) = &input.notification_sender_email {
        object
            .key("notificationSenderEmail")
            .string(var_166.as_str());
    }
    if let Some(var_167) = &input.portal_contact_email {
        object.key("portalContactEmail").string(var_167.as_str());
    }
    if let Some(var_168) = &input.portal_description {
        object.key("portalDescription").string(var_168.as_str());
    }
    if let Some(var_169) = &input.portal_logo_image {
        let mut object_170 = object.key("portalLogoImage").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_170, var_169)?;
        object_170.finish();
    }
    if let Some(var_171) = &input.portal_name {
        object.key("portalName").string(var_171.as_str());
    }
    if let Some(var_172) = &input.role_arn {
        object.key("roleArn").string(var_172.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.client_token {
        object.key("clientToken").string(var_173.as_str());
    }
    if let Some(var_174) = &input.project_description {
        object.key("projectDescription").string(var_174.as_str());
    }
    if let Some(var_175) = &input.project_name {
        object.key("projectName").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_get_asset_property_aggregates_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchGetAssetPropertyAggregatesEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.entry_id {
        object.key("entryId").string(var_176.as_str());
    }
    if let Some(var_177) = &input.asset_id {
        object.key("assetId").string(var_177.as_str());
    }
    if let Some(var_178) = &input.property_id {
        object.key("propertyId").string(var_178.as_str());
    }
    if let Some(var_179) = &input.property_alias {
        object.key("propertyAlias").string(var_179.as_str());
    }
    if let Some(var_180) = &input.aggregate_types {
        let mut array_181 = object.key("aggregateTypes").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182.as_str());
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.resolution {
        object.key("resolution").string(var_183.as_str());
    }
    if let Some(var_184) = &input.start_date {
        object
            .key("startDate")
            .date_time(var_184, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_185) = &input.end_date {
        object
            .key("endDate")
            .date_time(var_185, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_186) = &input.qualities {
        let mut array_187 = object.key("qualities").start_array();
        for item_188 in var_186 {
            {
                array_187.value().string(item_188.as_str());
            }
        }
        array_187.finish();
    }
    if let Some(var_189) = &input.time_ordering {
        object.key("timeOrdering").string(var_189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_get_asset_property_value_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchGetAssetPropertyValueEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.entry_id {
        object.key("entryId").string(var_190.as_str());
    }
    if let Some(var_191) = &input.asset_id {
        object.key("assetId").string(var_191.as_str());
    }
    if let Some(var_192) = &input.property_id {
        object.key("propertyId").string(var_192.as_str());
    }
    if let Some(var_193) = &input.property_alias {
        object.key("propertyAlias").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_get_asset_property_value_history_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchGetAssetPropertyValueHistoryEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.entry_id {
        object.key("entryId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.asset_id {
        object.key("assetId").string(var_195.as_str());
    }
    if let Some(var_196) = &input.property_id {
        object.key("propertyId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.property_alias {
        object.key("propertyAlias").string(var_197.as_str());
    }
    if let Some(var_198) = &input.start_date {
        object
            .key("startDate")
            .date_time(var_198, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_199) = &input.end_date {
        object
            .key("endDate")
            .date_time(var_199, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_200) = &input.qualities {
        let mut array_201 = object.key("qualities").start_array();
        for item_202 in var_200 {
            {
                array_201.value().string(item_202.as_str());
            }
        }
        array_201.finish();
    }
    if let Some(var_203) = &input.time_ordering {
        object.key("timeOrdering").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_asset_property_value_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutAssetPropertyValueEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.entry_id {
        object.key("entryId").string(var_204.as_str());
    }
    if let Some(var_205) = &input.asset_id {
        object.key("assetId").string(var_205.as_str());
    }
    if let Some(var_206) = &input.property_id {
        object.key("propertyId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.property_alias {
        object.key("propertyAlias").string(var_207.as_str());
    }
    if let Some(var_208) = &input.property_values {
        let mut array_209 = object.key("propertyValues").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_property_value(
                    &mut object_211,
                    item_210,
                )?;
                object_211.finish();
            }
        }
        array_209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_identity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Identity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.user {
        let mut object_213 = object.key("user").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity(&mut object_213, var_212)?;
        object_213.finish();
    }
    if let Some(var_214) = &input.group {
        let mut object_215 = object.key("group").start_object();
        crate::json_ser::serialize_structure_crate_model_group_identity(&mut object_215, var_214)?;
        object_215.finish();
    }
    if let Some(var_216) = &input.iam_user {
        let mut object_217 = object.key("iamUser").start_object();
        crate::json_ser::serialize_structure_crate_model_iam_user_identity(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    if let Some(var_218) = &input.iam_role {
        let mut object_219 = object.key("iamRole").start_object();
        crate::json_ser::serialize_structure_crate_model_iam_role_identity(
            &mut object_219,
            var_218,
        )?;
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.portal {
        let mut object_221 = object.key("portal").start_object();
        crate::json_ser::serialize_structure_crate_model_portal_resource(&mut object_221, var_220)?;
        object_221.finish();
    }
    if let Some(var_222) = &input.project {
        let mut object_223 = object.key("project").start_object();
        crate::json_ser::serialize_structure_crate_model_project_resource(
            &mut object_223,
            var_222,
        )?;
        object_223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_model_composite_model_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetModelCompositeModelDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.name {
        object.key("name").string(var_224.as_str());
    }
    if let Some(var_225) = &input.description {
        object.key("description").string(var_225.as_str());
    }
    if let Some(var_226) = &input.r#type {
        object.key("type").string(var_226.as_str());
    }
    if let Some(var_227) = &input.properties {
        let mut array_228 = object.key("properties").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_property_definition(
                    &mut object_230,
                    item_229,
                )?;
                object_230.finish();
            }
        }
        array_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_model_hierarchy_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetModelHierarchyDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.name {
        object.key("name").string(var_231.as_str());
    }
    if let Some(var_232) = &input.child_asset_model_id {
        object.key("childAssetModelId").string(var_232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_model_property_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetModelPropertyDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.name {
        object.key("name").string(var_233.as_str());
    }
    if let Some(var_234) = &input.data_type {
        object.key("dataType").string(var_234.as_str());
    }
    if let Some(var_235) = &input.data_type_spec {
        object.key("dataTypeSpec").string(var_235.as_str());
    }
    if let Some(var_236) = &input.unit {
        object.key("unit").string(var_236.as_str());
    }
    if let Some(var_237) = &input.r#type {
        let mut object_238 = object.key("type").start_object();
        crate::json_ser::serialize_structure_crate_model_property_type(&mut object_238, var_237)?;
        object_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gateway_platform(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GatewayPlatform,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_239) = &input.greengrass {
        let mut object_240 = object.key("greengrass").start_object();
        crate::json_ser::serialize_structure_crate_model_greengrass(&mut object_240, var_239)?;
        object_240.finish();
    }
    if let Some(var_241) = &input.greengrass_v2 {
        let mut object_242 = object.key("greengrassV2").start_object();
        crate::json_ser::serialize_structure_crate_model_greengrass_v2(&mut object_242, var_241)?;
        object_242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alarms(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarms,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.alarm_role_arn {
        object.key("alarmRoleArn").string(var_243.as_str());
    }
    if let Some(var_244) = &input.notification_lambda_arn {
        object.key("notificationLambdaArn").string(var_244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_file(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.data {
        object
            .key("data")
            .string_unchecked(&aws_smithy_types::base64::encode(var_245));
    }
    if let Some(var_246) = &input.r#type {
        object.key("type").string(var_246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.level {
        object.key("level").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multi_layer_storage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiLayerStorage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.customer_managed_s3_storage {
        let mut object_249 = object.key("customerManagedS3Storage").start_object();
        crate::json_ser::serialize_structure_crate_model_customer_managed_s3_storage(
            &mut object_249,
            var_248,
        )?;
        object_249.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retention_period(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPeriod,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.number_of_days {
        object.key("numberOfDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_250).into()),
        );
    }
    if let Some(var_251) = &input.unlimited {
        object.key("unlimited").boolean(*var_251);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_model_composite_model(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetModelCompositeModel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.name {
        object.key("name").string(var_252.as_str());
    }
    if let Some(var_253) = &input.description {
        object.key("description").string(var_253.as_str());
    }
    if let Some(var_254) = &input.r#type {
        object.key("type").string(var_254.as_str());
    }
    if let Some(var_255) = &input.properties {
        let mut array_256 = object.key("properties").start_array();
        for item_257 in var_255 {
            {
                let mut object_258 = array_256.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_model_property(
                    &mut object_258,
                    item_257,
                )?;
                object_258.finish();
            }
        }
        array_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_model_hierarchy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetModelHierarchy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.id {
        object.key("id").string(var_259.as_str());
    }
    if let Some(var_260) = &input.name {
        object.key("name").string(var_260.as_str());
    }
    if let Some(var_261) = &input.child_asset_model_id {
        object.key("childAssetModelId").string(var_261.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_model_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetModelProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.id {
        object.key("id").string(var_262.as_str());
    }
    if let Some(var_263) = &input.name {
        object.key("name").string(var_263.as_str());
    }
    if let Some(var_264) = &input.data_type {
        object.key("dataType").string(var_264.as_str());
    }
    if let Some(var_265) = &input.data_type_spec {
        object.key("dataTypeSpec").string(var_265.as_str());
    }
    if let Some(var_266) = &input.unit {
        object.key("unit").string(var_266.as_str());
    }
    if let Some(var_267) = &input.r#type {
        let mut object_268 = object.key("type").start_object();
        crate::json_ser::serialize_structure_crate_model_property_type(&mut object_268, var_267)?;
        object_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Image,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.id {
        object.key("id").string(var_269.as_str());
    }
    if let Some(var_270) = &input.file {
        let mut object_271 = object.key("file").start_object();
        crate::json_ser::serialize_structure_crate_model_image_file(&mut object_271, var_270)?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_property_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.value {
        let mut object_273 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_variant(&mut object_273, var_272)?;
        object_273.finish();
    }
    if let Some(var_274) = &input.timestamp {
        let mut object_275 = object.key("timestamp").start_object();
        crate::json_ser::serialize_structure_crate_model_time_in_nanos(&mut object_275, var_274)?;
        object_275.finish();
    }
    if let Some(var_276) = &input.quality {
        object.key("quality").string(var_276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.id {
        object.key("id").string(var_277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_identity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupIdentity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.id {
        object.key("id").string(var_278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iam_user_identity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IamUserIdentity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.arn {
        object.key("arn").string(var_279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iam_role_identity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IamRoleIdentity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.arn {
        object.key("arn").string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_portal_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortalResource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.id {
        object.key("id").string(var_281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_project_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProjectResource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.id {
        object.key("id").string(var_282.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.attribute {
        let mut object_284 = object.key("attribute").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute(&mut object_284, var_283)?;
        object_284.finish();
    }
    if let Some(var_285) = &input.measurement {
        let mut object_286 = object.key("measurement").start_object();
        crate::json_ser::serialize_structure_crate_model_measurement(&mut object_286, var_285)?;
        object_286.finish();
    }
    if let Some(var_287) = &input.transform {
        let mut object_288 = object.key("transform").start_object();
        crate::json_ser::serialize_structure_crate_model_transform(&mut object_288, var_287)?;
        object_288.finish();
    }
    if let Some(var_289) = &input.metric {
        let mut object_290 = object.key("metric").start_object();
        crate::json_ser::serialize_structure_crate_model_metric(&mut object_290, var_289)?;
        object_290.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_greengrass(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Greengrass,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.group_arn {
        object.key("groupArn").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_greengrass_v2(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GreengrassV2,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.core_device_thing_name {
        object.key("coreDeviceThingName").string(var_292.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_customer_managed_s3_storage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomerManagedS3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.s3_resource_arn {
        object.key("s3ResourceArn").string(var_293.as_str());
    }
    if let Some(var_294) = &input.role_arn {
        object.key("roleArn").string(var_294.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_variant(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Variant,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.string_value {
        object.key("stringValue").string(var_295.as_str());
    }
    if let Some(var_296) = &input.integer_value {
        object.key("integerValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.double_value {
        object.key("doubleValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_297).into()),
        );
    }
    if let Some(var_298) = &input.boolean_value {
        object.key("booleanValue").boolean(*var_298);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_in_nanos(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeInNanos,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.time_in_seconds {
        object.key("timeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    if let Some(var_300) = &input.offset_in_nanos {
        object.key("offsetInNanos").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Attribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.default_value {
        object.key("defaultValue").string(var_301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_measurement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Measurement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.processing_config {
        let mut object_303 = object.key("processingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_measurement_processing_config(
            &mut object_303,
            var_302,
        )?;
        object_303.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Transform,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.expression {
        object.key("expression").string(var_304.as_str());
    }
    if let Some(var_305) = &input.variables {
        let mut array_306 = object.key("variables").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_expression_variable(
                    &mut object_308,
                    item_307,
                )?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.processing_config {
        let mut object_310 = object.key("processingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_processing_config(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Metric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.expression {
        object.key("expression").string(var_311.as_str());
    }
    if let Some(var_312) = &input.variables {
        let mut array_313 = object.key("variables").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_expression_variable(
                    &mut object_315,
                    item_314,
                )?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    if let Some(var_316) = &input.window {
        let mut object_317 = object.key("window").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_window(&mut object_317, var_316)?;
        object_317.finish();
    }
    if let Some(var_318) = &input.processing_config {
        let mut object_319 = object.key("processingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_processing_config(
            &mut object_319,
            var_318,
        )?;
        object_319.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_measurement_processing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MeasurementProcessingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.forwarding_config {
        let mut object_321 = object.key("forwardingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarding_config(
            &mut object_321,
            var_320,
        )?;
        object_321.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_expression_variable(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExpressionVariable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.name {
        object.key("name").string(var_322.as_str());
    }
    if let Some(var_323) = &input.value {
        let mut object_324 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_variable_value(&mut object_324, var_323)?;
        object_324.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_processing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformProcessingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.compute_location {
        object.key("computeLocation").string(var_325.as_str());
    }
    if let Some(var_326) = &input.forwarding_config {
        let mut object_327 = object.key("forwardingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_forwarding_config(
            &mut object_327,
            var_326,
        )?;
        object_327.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_window(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricWindow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.tumbling {
        let mut object_329 = object.key("tumbling").start_object();
        crate::json_ser::serialize_structure_crate_model_tumbling_window(&mut object_329, var_328)?;
        object_329.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_processing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricProcessingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.compute_location {
        object.key("computeLocation").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_forwarding_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ForwardingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.state {
        object.key("state").string(var_331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_variable_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariableValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.property_id {
        object.key("propertyId").string(var_332.as_str());
    }
    if let Some(var_333) = &input.hierarchy_id {
        object.key("hierarchyId").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tumbling_window(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TumblingWindow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.interval {
        object.key("interval").string(var_334.as_str());
    }
    if let Some(var_335) = &input.offset {
        object.key("offset").string(var_335.as_str());
    }
    Ok(())
}
