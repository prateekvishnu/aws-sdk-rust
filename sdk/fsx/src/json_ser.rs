// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.file_system_id {
        object.key("FileSystemId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.aliases {
        let mut array_4 = object.key("Aliases").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_data_repository_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelDataRepositoryTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.task_id {
        object.key("TaskId").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.source_backup_id {
        object.key("SourceBackupId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.source_region {
        object.key("SourceRegion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.copy_tags {
        object.key("CopyTags").boolean(*var_11);
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.file_system_id {
        object.key("FileSystemId").string(var_16.as_str());
    }
    if let Some(var_17) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_17.as_str());
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.volume_id {
        object.key("VolumeId").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_repository_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataRepositoryAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.file_system_id {
        object.key("FileSystemId").string(var_23.as_str());
    }
    if let Some(var_24) = &input.file_system_path {
        object.key("FileSystemPath").string(var_24.as_str());
    }
    if let Some(var_25) = &input.data_repository_path {
        object.key("DataRepositoryPath").string(var_25.as_str());
    }
    if let Some(var_26) = &input.batch_import_meta_data_on_create {
        object.key("BatchImportMetaDataOnCreate").boolean(*var_26);
    }
    if let Some(var_27) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    if let Some(var_28) = &input.s3 {
        let mut object_29 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_repository_configuration(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    if let Some(var_30) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_30.as_str());
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("Tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_repository_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataRepositoryTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.r#type {
        object.key("Type").string(var_35.as_str());
    }
    if let Some(var_36) = &input.paths {
        let mut array_37 = object.key("Paths").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.file_system_id {
        object.key("FileSystemId").string(var_39.as_str());
    }
    if let Some(var_40) = &input.report {
        let mut object_41 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_completion_report(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_42.as_str());
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.file_system_type {
        object.key("FileSystemType").string(var_48.as_str());
    }
    if let Some(var_49) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    if let Some(var_50) = &input.storage_type {
        object.key("StorageType").string(var_50.as_str());
    }
    if let Some(var_51) = &input.subnet_ids {
        let mut array_52 = object.key("SubnetIds").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.security_group_ids {
        let mut array_55 = object.key("SecurityGroupIds").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56.as_str());
            }
        }
        array_55.finish();
    }
    if let Some(var_57) = &input.tags {
        let mut array_58 = object.key("Tags").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_60, item_59)?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_61.as_str());
    }
    if let Some(var_62) = &input.windows_configuration {
        let mut object_63 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.lustre_configuration {
        let mut object_65 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_65,
            var_64,
        )?;
        object_65.finish();
    }
    if let Some(var_66) = &input.ontap_configuration {
        let mut object_67 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_ontap_configuration(
            &mut object_67,
            var_66,
        )?;
        object_67.finish();
    }
    if let Some(var_68) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_68.as_str());
    }
    if let Some(var_69) = &input.open_zfs_configuration {
        let mut object_70 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_open_zfs_configuration(
            &mut object_70,
            var_69,
        )?;
        object_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_file_system_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFileSystemFromBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.backup_id {
        object.key("BackupId").string(var_71.as_str());
    }
    if let Some(var_72) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_72.as_str());
    }
    if let Some(var_73) = &input.subnet_ids {
        let mut array_74 = object.key("SubnetIds").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    if let Some(var_76) = &input.security_group_ids {
        let mut array_77 = object.key("SecurityGroupIds").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    if let Some(var_79) = &input.tags {
        let mut array_80 = object.key("Tags").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_82, item_81)?;
                object_82.finish();
            }
        }
        array_80.finish();
    }
    if let Some(var_83) = &input.windows_configuration {
        let mut object_84 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_windows_configuration(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.lustre_configuration {
        let mut object_86 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_lustre_configuration(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.storage_type {
        object.key("StorageType").string(var_87.as_str());
    }
    if let Some(var_88) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_88.as_str());
    }
    if let Some(var_89) = &input.file_system_type_version {
        object.key("FileSystemTypeVersion").string(var_89.as_str());
    }
    if let Some(var_90) = &input.open_zfs_configuration {
        let mut object_91 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_file_system_open_zfs_configuration(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_92.as_str());
    }
    if let Some(var_93) = &input.name {
        object.key("Name").string(var_93.as_str());
    }
    if let Some(var_94) = &input.volume_id {
        object.key("VolumeId").string(var_94.as_str());
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.active_directory_configuration {
        let mut object_100 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_svm_active_directory_configuration(
            &mut object_100,
            var_99,
        )?;
        object_100.finish();
    }
    if let Some(var_101) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_101.as_str());
    }
    if let Some(var_102) = &input.file_system_id {
        object.key("FileSystemId").string(var_102.as_str());
    }
    if let Some(var_103) = &input.name {
        object.key("Name").string(var_103.as_str());
    }
    if let Some(var_104) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_104.as_str());
    }
    if let Some(var_105) = &input.tags {
        let mut array_106 = object.key("Tags").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_108, item_107)?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.root_volume_security_style {
        object
            .key("RootVolumeSecurityStyle")
            .string(var_109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_110.as_str());
    }
    if let Some(var_111) = &input.volume_type {
        object.key("VolumeType").string(var_111.as_str());
    }
    if let Some(var_112) = &input.name {
        object.key("Name").string(var_112.as_str());
    }
    if let Some(var_113) = &input.ontap_configuration {
        let mut object_114 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.tags {
        let mut array_116 = object.key("Tags").start_array();
        for item_117 in var_115 {
            {
                let mut object_118 = array_116.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_118, item_117)?;
                object_118.finish();
            }
        }
        array_116.finish();
    }
    if let Some(var_119) = &input.open_zfs_configuration {
        let mut object_120 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_open_zfs_volume_configuration(
            &mut object_120,
            var_119,
        )?;
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_volume_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVolumeFromBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.backup_id {
        object.key("BackupId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_122.as_str());
    }
    if let Some(var_123) = &input.name {
        object.key("Name").string(var_123.as_str());
    }
    if let Some(var_124) = &input.ontap_configuration {
        let mut object_125 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_create_ontap_volume_configuration(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    if let Some(var_126) = &input.tags {
        let mut array_127 = object.key("Tags").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_129, item_128)?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.backup_id {
        object.key("BackupId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_repository_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataRepositoryAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.association_id {
        object.key("AssociationId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_133.as_str());
    }
    if let Some(var_134) = &input.delete_data_in_file_system {
        object.key("DeleteDataInFileSystem").boolean(*var_134);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.file_system_id {
        object.key("FileSystemId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_136.as_str());
    }
    if let Some(var_137) = &input.windows_configuration {
        let mut object_138 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_windows_configuration(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    if let Some(var_139) = &input.lustre_configuration {
        let mut object_140 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_lustre_configuration(
            &mut object_140,
            var_139,
        )?;
        object_140.finish();
    }
    if let Some(var_141) = &input.open_zfs_configuration {
        let mut object_142 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_file_system_open_zfs_configuration(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_143.as_str());
    }
    if let Some(var_144) = &input.snapshot_id {
        object.key("SnapshotId").string(var_144.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_145.as_str());
    }
    if let Some(var_146) = &input.storage_virtual_machine_id {
        object
            .key("StorageVirtualMachineId")
            .string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_147.as_str());
    }
    if let Some(var_148) = &input.volume_id {
        object.key("VolumeId").string(var_148.as_str());
    }
    if let Some(var_149) = &input.ontap_configuration {
        let mut object_150 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_volume_ontap_configuration(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    if let Some(var_151) = &input.open_zfs_configuration {
        let mut object_152 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_volume_open_zfs_configuration(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_backups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBackupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.backup_ids {
        let mut array_154 = object.key("BackupIds").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155.as_str());
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.filters {
        let mut array_157 = object.key("Filters").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_159, item_158)?;
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_repository_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataRepositoryAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.association_ids {
        let mut array_163 = object.key("AssociationIds").start_array();
        for item_164 in var_162 {
            {
                array_163.value().string(item_164.as_str());
            }
        }
        array_163.finish();
    }
    if let Some(var_165) = &input.filters {
        let mut array_166 = object.key("Filters").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_169).into()),
        );
    }
    if let Some(var_170) = &input.next_token {
        object.key("NextToken").string(var_170.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_repository_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataRepositoryTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.task_ids {
        let mut array_172 = object.key("TaskIds").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173.as_str());
            }
        }
        array_172.finish();
    }
    if let Some(var_174) = &input.filters {
        let mut array_175 = object.key("Filters").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_repository_task_filter(
                    &mut object_177,
                    item_176,
                )?;
                object_177.finish();
            }
        }
        array_175.finish();
    }
    if let Some(var_178) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    if let Some(var_179) = &input.next_token {
        object.key("NextToken").string(var_179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_180.as_str());
    }
    if let Some(var_181) = &input.file_system_id {
        object.key("FileSystemId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.next_token {
        object.key("NextToken").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_file_systems_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.file_system_ids {
        let mut array_185 = object.key("FileSystemIds").start_array();
        for item_186 in var_184 {
            {
                array_185.value().string(item_186.as_str());
            }
        }
        array_185.finish();
    }
    if let Some(var_187) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    if let Some(var_188) = &input.next_token {
        object.key("NextToken").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.snapshot_ids {
        let mut array_190 = object.key("SnapshotIds").start_array();
        for item_191 in var_189 {
            {
                array_190.value().string(item_191.as_str());
            }
        }
        array_190.finish();
    }
    if let Some(var_192) = &input.filters {
        let mut array_193 = object.key("Filters").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_crate_model_snapshot_filter(
                    &mut object_195,
                    item_194,
                )?;
                object_195.finish();
            }
        }
        array_193.finish();
    }
    if let Some(var_196) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_196).into()),
        );
    }
    if let Some(var_197) = &input.next_token {
        object.key("NextToken").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_storage_virtual_machines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStorageVirtualMachinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.storage_virtual_machine_ids {
        let mut array_199 = object.key("StorageVirtualMachineIds").start_array();
        for item_200 in var_198 {
            {
                array_199.value().string(item_200.as_str());
            }
        }
        array_199.finish();
    }
    if let Some(var_201) = &input.filters {
        let mut array_202 = object.key("Filters").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_virtual_machine_filter(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.next_token {
        object.key("NextToken").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_volumes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeVolumesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.volume_ids {
        let mut array_208 = object.key("VolumeIds").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209.as_str());
            }
        }
        array_208.finish();
    }
    if let Some(var_210) = &input.filters {
        let mut array_211 = object.key("Filters").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume_filter(
                    &mut object_213,
                    item_212,
                )?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_214).into()),
        );
    }
    if let Some(var_215) = &input.next_token {
        object.key("NextToken").string(var_215.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_file_system_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFileSystemAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_216.as_str());
    }
    if let Some(var_217) = &input.file_system_id {
        object.key("FileSystemId").string(var_217.as_str());
    }
    if let Some(var_218) = &input.aliases {
        let mut array_219 = object.key("Aliases").start_array();
        for item_220 in var_218 {
            {
                array_219.value().string(item_220.as_str());
            }
        }
        array_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.resource_arn {
        object.key("ResourceARN").string(var_221.as_str());
    }
    if let Some(var_222) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_222).into()),
        );
    }
    if let Some(var_223) = &input.next_token {
        object.key("NextToken").string(var_223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_release_file_system_nfs_v3_locks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReleaseFileSystemNfsV3LocksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.file_system_id {
        object.key("FileSystemId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_restore_volume_from_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestoreVolumeFromSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_226.as_str());
    }
    if let Some(var_227) = &input.volume_id {
        object.key("VolumeId").string(var_227.as_str());
    }
    if let Some(var_228) = &input.snapshot_id {
        object.key("SnapshotId").string(var_228.as_str());
    }
    if let Some(var_229) = &input.options {
        let mut array_230 = object.key("Options").start_array();
        for item_231 in var_229 {
            {
                array_230.value().string(item_231.as_str());
            }
        }
        array_230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.resource_arn {
        object.key("ResourceARN").string(var_232.as_str());
    }
    if let Some(var_233) = &input.tags {
        let mut array_234 = object.key("Tags").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_236, item_235)?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.resource_arn {
        object.key("ResourceARN").string(var_237.as_str());
    }
    if let Some(var_238) = &input.tag_keys {
        let mut array_239 = object.key("TagKeys").start_array();
        for item_240 in var_238 {
            {
                array_239.value().string(item_240.as_str());
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_repository_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataRepositoryAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.association_id {
        object.key("AssociationId").string(var_241.as_str());
    }
    if let Some(var_242) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_242.as_str());
    }
    if let Some(var_243) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    if let Some(var_244) = &input.s3 {
        let mut object_245 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_repository_configuration(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_file_system_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFileSystemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.file_system_id {
        object.key("FileSystemId").string(var_246.as_str());
    }
    if let Some(var_247) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_247.as_str());
    }
    if let Some(var_248) = &input.storage_capacity {
        object.key("StorageCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    if let Some(var_249) = &input.windows_configuration {
        let mut object_250 = object.key("WindowsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_windows_configuration(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    if let Some(var_251) = &input.lustre_configuration {
        let mut object_252 = object.key("LustreConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_lustre_configuration(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    if let Some(var_253) = &input.ontap_configuration {
        let mut object_254 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_ontap_configuration(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.open_zfs_configuration {
        let mut object_256 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_file_system_open_zfs_configuration(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_257.as_str());
    }
    if let Some(var_258) = &input.name {
        object.key("Name").string(var_258.as_str());
    }
    if let Some(var_259) = &input.snapshot_id {
        object.key("SnapshotId").string(var_259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_storage_virtual_machine_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStorageVirtualMachineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.active_directory_configuration {
        let mut object_261 = object.key("ActiveDirectoryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_svm_active_directory_configuration(
            &mut object_261,
            var_260,
        )?;
        object_261.finish();
    }
    if let Some(var_262) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_262.as_str());
    }
    if let Some(var_263) = &input.storage_virtual_machine_id {
        object
            .key("StorageVirtualMachineId")
            .string(var_263.as_str());
    }
    if let Some(var_264) = &input.svm_admin_password {
        object.key("SvmAdminPassword").string(var_264.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_volume_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVolumeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_265.as_str());
    }
    if let Some(var_266) = &input.volume_id {
        object.key("VolumeId").string(var_266.as_str());
    }
    if let Some(var_267) = &input.ontap_configuration {
        let mut object_268 = object.key("OntapConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_ontap_volume_configuration(
            &mut object_268,
            var_267,
        )?;
        object_268.finish();
    }
    if let Some(var_269) = &input.name {
        object.key("Name").string(var_269.as_str());
    }
    if let Some(var_270) = &input.open_zfs_configuration {
        let mut object_271 = object.key("OpenZFSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_update_open_zfs_volume_configuration(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.key {
        object.key("Key").string(var_272.as_str());
    }
    if let Some(var_273) = &input.value {
        object.key("Value").string(var_273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_repository_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataRepositoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.auto_import_policy {
        let mut object_275 = object.key("AutoImportPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_import_policy(
            &mut object_275,
            var_274,
        )?;
        object_275.finish();
    }
    if let Some(var_276) = &input.auto_export_policy {
        let mut object_277 = object.key("AutoExportPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_export_policy(
            &mut object_277,
            var_276,
        )?;
        object_277.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_completion_report(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompletionReport,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.enabled {
        object.key("Enabled").boolean(*var_278);
    }
    if let Some(var_279) = &input.path {
        object.key("Path").string(var_279.as_str());
    }
    if let Some(var_280) = &input.format {
        object.key("Format").string(var_280.as_str());
    }
    if let Some(var_281) = &input.scope {
        object.key("Scope").string(var_281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.active_directory_id {
        object.key("ActiveDirectoryId").string(var_282.as_str());
    }
    if let Some(var_283) = &input.self_managed_active_directory_configuration {
        let mut object_284 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_284, var_283)?;
        object_284.finish();
    }
    if let Some(var_285) = &input.deployment_type {
        object.key("DeploymentType").string(var_285.as_str());
    }
    if let Some(var_286) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_286.as_str());
    }
    if let Some(var_287) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_287).into()),
        );
    }
    if let Some(var_288) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_288.as_str());
    }
    if let Some(var_289) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_289.as_str());
    }
    if let Some(var_290) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_290).into()),
        );
    }
    if let Some(var_291) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_291);
    }
    if let Some(var_292) = &input.aliases {
        let mut array_293 = object.key("Aliases").start_array();
        for item_294 in var_292 {
            {
                array_293.value().string(item_294.as_str());
            }
        }
        array_293.finish();
    }
    if let Some(var_295) = &input.audit_log_configuration {
        let mut object_296 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_297.as_str());
    }
    if let Some(var_298) = &input.import_path {
        object.key("ImportPath").string(var_298.as_str());
    }
    if let Some(var_299) = &input.export_path {
        object.key("ExportPath").string(var_299.as_str());
    }
    if let Some(var_300) = &input.imported_file_chunk_size {
        object.key("ImportedFileChunkSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    if let Some(var_301) = &input.deployment_type {
        object.key("DeploymentType").string(var_301.as_str());
    }
    if let Some(var_302) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_302.as_str());
    }
    if let Some(var_303) = &input.per_unit_storage_throughput {
        object.key("PerUnitStorageThroughput").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    if let Some(var_304) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_304.as_str());
    }
    if let Some(var_305) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_305).into()),
        );
    }
    if let Some(var_306) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_306);
    }
    if let Some(var_307) = &input.drive_cache_type {
        object.key("DriveCacheType").string(var_307.as_str());
    }
    if let Some(var_308) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_308.as_str());
    }
    if let Some(var_309) = &input.log_configuration {
        let mut object_310 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lustre_log_create_configuration(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    if let Some(var_311) = &input.root_squash_configuration {
        let mut object_312 = object.key("RootSquashConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lustre_root_squash_configuration(
            &mut object_312,
            var_311,
        )?;
        object_312.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_313).into()),
        );
    }
    if let Some(var_314) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_314.as_str());
    }
    if let Some(var_315) = &input.deployment_type {
        object.key("DeploymentType").string(var_315.as_str());
    }
    if let Some(var_316) = &input.endpoint_ip_address_range {
        object
            .key("EndpointIpAddressRange")
            .string(var_316.as_str());
    }
    if let Some(var_317) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_317.as_str());
    }
    if let Some(var_318) = &input.disk_iops_configuration {
        let mut object_319 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_319,
            var_318,
        )?;
        object_319.finish();
    }
    if let Some(var_320) = &input.preferred_subnet_id {
        object.key("PreferredSubnetId").string(var_320.as_str());
    }
    if let Some(var_321) = &input.route_table_ids {
        let mut array_322 = object.key("RouteTableIds").start_array();
        for item_323 in var_321 {
            {
                array_322.value().string(item_323.as_str());
            }
        }
        array_322.finish();
    }
    if let Some(var_324) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    if let Some(var_325) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_file_system_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateFileSystemOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    if let Some(var_327) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_327);
    }
    if let Some(var_328) = &input.copy_tags_to_volumes {
        object.key("CopyTagsToVolumes").boolean(*var_328);
    }
    if let Some(var_329) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_329.as_str());
    }
    if let Some(var_330) = &input.deployment_type {
        object.key("DeploymentType").string(var_330.as_str());
    }
    if let Some(var_331) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    if let Some(var_332) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_332.as_str());
    }
    if let Some(var_333) = &input.disk_iops_configuration {
        let mut object_334 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    if let Some(var_335) = &input.root_volume_configuration {
        let mut object_336 = object.key("RootVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_open_zfs_create_root_volume_configuration(
            &mut object_336,
            var_335,
        )?;
        object_336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_svm_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateSvmActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.net_bios_name {
        object.key("NetBiosName").string(var_337.as_str());
    }
    if let Some(var_338) = &input.self_managed_active_directory_configuration {
        let mut object_339 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration(&mut object_339, var_338)?;
        object_339.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_ontap_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOntapVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.junction_path {
        object.key("JunctionPath").string(var_340.as_str());
    }
    if let Some(var_341) = &input.security_style {
        object.key("SecurityStyle").string(var_341.as_str());
    }
    if let Some(var_342) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_342).into()),
        );
    }
    if let Some(var_343) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_343);
    }
    if let Some(var_344) = &input.storage_virtual_machine_id {
        object
            .key("StorageVirtualMachineId")
            .string(var_344.as_str());
    }
    if let Some(var_345) = &input.tiering_policy {
        let mut object_346 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_346, var_345)?;
        object_346.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_open_zfs_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOpenZfsVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.parent_volume_id {
        object.key("ParentVolumeId").string(var_347.as_str());
    }
    if let Some(var_348) = &input.storage_capacity_reservation_gi_b {
        object.key("StorageCapacityReservationGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_348).into()),
        );
    }
    if let Some(var_349) = &input.storage_capacity_quota_gi_b {
        object.key("StorageCapacityQuotaGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_349).into()),
        );
    }
    if let Some(var_350) = &input.record_size_ki_b {
        object.key("RecordSizeKiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_350).into()),
        );
    }
    if let Some(var_351) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_351.as_str());
    }
    if let Some(var_352) = &input.copy_tags_to_snapshots {
        object.key("CopyTagsToSnapshots").boolean(*var_352);
    }
    if let Some(var_353) = &input.origin_snapshot {
        let mut object_354 = object.key("OriginSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_create_open_zfs_origin_snapshot_configuration(&mut object_354, var_353)?;
        object_354.finish();
    }
    if let Some(var_355) = &input.read_only {
        object.key("ReadOnly").boolean(*var_355);
    }
    if let Some(var_356) = &input.nfs_exports {
        let mut array_357 = object.key("NfsExports").start_array();
        for item_358 in var_356 {
            {
                let mut object_359 = array_357.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_nfs_export(
                    &mut object_359,
                    item_358,
                )?;
                object_359.finish();
            }
        }
        array_357.finish();
    }
    if let Some(var_360) = &input.user_and_group_quotas {
        let mut array_361 = object.key("UserAndGroupQuotas").start_array();
        for item_362 in var_360 {
            {
                let mut object_363 = array_361.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_user_or_group_quota(
                    &mut object_363,
                    item_362,
                )?;
                object_363.finish();
            }
        }
        array_361.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_364);
    }
    if let Some(var_365) = &input.final_backup_tags {
        let mut array_366 = object.key("FinalBackupTags").start_array();
        for item_367 in var_365 {
            {
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_368, item_367)?;
                object_368.finish();
            }
        }
        array_366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_369);
    }
    if let Some(var_370) = &input.final_backup_tags {
        let mut array_371 = object.key("FinalBackupTags").start_array();
        for item_372 in var_370 {
            {
                let mut object_373 = array_371.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_373, item_372)?;
                object_373.finish();
            }
        }
        array_371.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_file_system_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteFileSystemOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_374);
    }
    if let Some(var_375) = &input.final_backup_tags {
        let mut array_376 = object.key("FinalBackupTags").start_array();
        for item_377 in var_375 {
            {
                let mut object_378 = array_376.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_378, item_377)?;
                object_378.finish();
            }
        }
        array_376.finish();
    }
    if let Some(var_379) = &input.options {
        let mut array_380 = object.key("Options").start_array();
        for item_381 in var_379 {
            {
                array_380.value().string(item_381.as_str());
            }
        }
        array_380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_volume_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteVolumeOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.skip_final_backup {
        object.key("SkipFinalBackup").boolean(*var_382);
    }
    if let Some(var_383) = &input.final_backup_tags {
        let mut array_384 = object.key("FinalBackupTags").start_array();
        for item_385 in var_383 {
            {
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_386, item_385)?;
                object_386.finish();
            }
        }
        array_384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_volume_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteVolumeOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.options {
        let mut array_388 = object.key("Options").start_array();
        for item_389 in var_387 {
            {
                array_388.value().string(item_389.as_str());
            }
        }
        array_388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.name {
        object.key("Name").string(var_390.as_str());
    }
    if let Some(var_391) = &input.values {
        let mut array_392 = object.key("Values").start_array();
        for item_393 in var_391 {
            {
                array_392.value().string(item_393.as_str());
            }
        }
        array_392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_repository_task_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataRepositoryTaskFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.name {
        object.key("Name").string(var_394.as_str());
    }
    if let Some(var_395) = &input.values {
        let mut array_396 = object.key("Values").start_array();
        for item_397 in var_395 {
            {
                array_396.value().string(item_397.as_str());
            }
        }
        array_396.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snapshot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnapshotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_398) = &input.name {
        object.key("Name").string(var_398.as_str());
    }
    if let Some(var_399) = &input.values {
        let mut array_400 = object.key("Values").start_array();
        for item_401 in var_399 {
            {
                array_400.value().string(item_401.as_str());
            }
        }
        array_400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_virtual_machine_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageVirtualMachineFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.name {
        object.key("Name").string(var_402.as_str());
    }
    if let Some(var_403) = &input.values {
        let mut array_404 = object.key("Values").start_array();
        for item_405 in var_403 {
            {
                array_404.value().string(item_405.as_str());
            }
        }
        array_404.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.name {
        object.key("Name").string(var_406.as_str());
    }
    if let Some(var_407) = &input.values {
        let mut array_408 = object.key("Values").start_array();
        for item_409 in var_407 {
            {
                array_408.value().string(item_409.as_str());
            }
        }
        array_408.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_windows_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemWindowsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_410) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_410.as_str());
    }
    if let Some(var_411) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_411.as_str());
    }
    if let Some(var_412) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    if let Some(var_413) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    if let Some(var_414) = &input.self_managed_active_directory_configuration {
        let mut object_415 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_415, var_414)?;
        object_415.finish();
    }
    if let Some(var_416) = &input.audit_log_configuration {
        let mut object_417 = object.key("AuditLogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_windows_audit_log_create_configuration(
            &mut object_417,
            var_416,
        )?;
        object_417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_lustre_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemLustreConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_418.as_str());
    }
    if let Some(var_419) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_419.as_str());
    }
    if let Some(var_420) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_420).into()),
        );
    }
    if let Some(var_421) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_421.as_str());
    }
    if let Some(var_422) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_422.as_str());
    }
    if let Some(var_423) = &input.log_configuration {
        let mut object_424 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lustre_log_create_configuration(
            &mut object_424,
            var_423,
        )?;
        object_424.finish();
    }
    if let Some(var_425) = &input.root_squash_configuration {
        let mut object_426 = object.key("RootSquashConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lustre_root_squash_configuration(
            &mut object_426,
            var_425,
        )?;
        object_426.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_ontap_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemOntapConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    if let Some(var_428) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_428.as_str());
    }
    if let Some(var_429) = &input.fsx_admin_password {
        object.key("FsxAdminPassword").string(var_429.as_str());
    }
    if let Some(var_430) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_430.as_str());
    }
    if let Some(var_431) = &input.disk_iops_configuration {
        let mut object_432 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_432,
            var_431,
        )?;
        object_432.finish();
    }
    if let Some(var_433) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_433).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_file_system_open_zfs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFileSystemOpenZfsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    if let Some(var_435) = &input.copy_tags_to_backups {
        object.key("CopyTagsToBackups").boolean(*var_435);
    }
    if let Some(var_436) = &input.copy_tags_to_volumes {
        object.key("CopyTagsToVolumes").boolean(*var_436);
    }
    if let Some(var_437) = &input.daily_automatic_backup_start_time {
        object
            .key("DailyAutomaticBackupStartTime")
            .string(var_437.as_str());
    }
    if let Some(var_438) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    if let Some(var_439) = &input.weekly_maintenance_start_time {
        object
            .key("WeeklyMaintenanceStartTime")
            .string(var_439.as_str());
    }
    if let Some(var_440) = &input.disk_iops_configuration {
        let mut object_441 = object.key("DiskIopsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_disk_iops_configuration(
            &mut object_441,
            var_440,
        )?;
        object_441.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_svm_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateSvmActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.self_managed_active_directory_configuration {
        let mut object_443 = object
            .key("SelfManagedActiveDirectoryConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_self_managed_active_directory_configuration_updates(&mut object_443, var_442)?;
        object_443.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_ontap_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateOntapVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.junction_path {
        object.key("JunctionPath").string(var_444.as_str());
    }
    if let Some(var_445) = &input.security_style {
        object.key("SecurityStyle").string(var_445.as_str());
    }
    if let Some(var_446) = &input.size_in_megabytes {
        object.key("SizeInMegabytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_446).into()),
        );
    }
    if let Some(var_447) = &input.storage_efficiency_enabled {
        object.key("StorageEfficiencyEnabled").boolean(*var_447);
    }
    if let Some(var_448) = &input.tiering_policy {
        let mut object_449 = object.key("TieringPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_tiering_policy(&mut object_449, var_448)?;
        object_449.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_open_zfs_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateOpenZfsVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.storage_capacity_reservation_gi_b {
        object.key("StorageCapacityReservationGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_450).into()),
        );
    }
    if let Some(var_451) = &input.storage_capacity_quota_gi_b {
        object.key("StorageCapacityQuotaGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_451).into()),
        );
    }
    if let Some(var_452) = &input.record_size_ki_b {
        object.key("RecordSizeKiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_452).into()),
        );
    }
    if let Some(var_453) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_453.as_str());
    }
    if let Some(var_454) = &input.nfs_exports {
        let mut array_455 = object.key("NfsExports").start_array();
        for item_456 in var_454 {
            {
                let mut object_457 = array_455.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_nfs_export(
                    &mut object_457,
                    item_456,
                )?;
                object_457.finish();
            }
        }
        array_455.finish();
    }
    if let Some(var_458) = &input.user_and_group_quotas {
        let mut array_459 = object.key("UserAndGroupQuotas").start_array();
        for item_460 in var_458 {
            {
                let mut object_461 = array_459.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_user_or_group_quota(
                    &mut object_461,
                    item_460,
                )?;
                object_461.finish();
            }
        }
        array_459.finish();
    }
    if let Some(var_462) = &input.read_only {
        object.key("ReadOnly").boolean(*var_462);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_import_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoImportPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.events {
        let mut array_464 = object.key("Events").start_array();
        for item_465 in var_463 {
            {
                array_464.value().string(item_465.as_str());
            }
        }
        array_464.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_export_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoExportPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.events {
        let mut array_467 = object.key("Events").start_array();
        for item_468 in var_466 {
            {
                array_467.value().string(item_468.as_str());
            }
        }
        array_467.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_469) = &input.domain_name {
        object.key("DomainName").string(var_469.as_str());
    }
    if let Some(var_470) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_470.as_str());
    }
    if let Some(var_471) = &input.file_system_administrators_group {
        object
            .key("FileSystemAdministratorsGroup")
            .string(var_471.as_str());
    }
    if let Some(var_472) = &input.user_name {
        object.key("UserName").string(var_472.as_str());
    }
    if let Some(var_473) = &input.password {
        object.key("Password").string(var_473.as_str());
    }
    if let Some(var_474) = &input.dns_ips {
        let mut array_475 = object.key("DnsIps").start_array();
        for item_476 in var_474 {
            {
                array_475.value().string(item_476.as_str());
            }
        }
        array_475.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_windows_audit_log_create_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WindowsAuditLogCreateConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.file_access_audit_log_level {
        object
            .key("FileAccessAuditLogLevel")
            .string(var_477.as_str());
    }
    if let Some(var_478) = &input.file_share_access_audit_log_level {
        object
            .key("FileShareAccessAuditLogLevel")
            .string(var_478.as_str());
    }
    if let Some(var_479) = &input.audit_log_destination {
        object.key("AuditLogDestination").string(var_479.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lustre_log_create_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LustreLogCreateConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_480) = &input.level {
        object.key("Level").string(var_480.as_str());
    }
    if let Some(var_481) = &input.destination {
        object.key("Destination").string(var_481.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lustre_root_squash_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LustreRootSquashConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_482) = &input.root_squash {
        object.key("RootSquash").string(var_482.as_str());
    }
    if let Some(var_483) = &input.no_squash_nids {
        let mut array_484 = object.key("NoSquashNids").start_array();
        for item_485 in var_483 {
            {
                array_484.value().string(item_485.as_str());
            }
        }
        array_484.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_disk_iops_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DiskIopsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.mode {
        object.key("Mode").string(var_486.as_str());
    }
    if let Some(var_487) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_487).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_create_root_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsCreateRootVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.record_size_ki_b {
        object.key("RecordSizeKiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_488).into()),
        );
    }
    if let Some(var_489) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_489.as_str());
    }
    if let Some(var_490) = &input.nfs_exports {
        let mut array_491 = object.key("NfsExports").start_array();
        for item_492 in var_490 {
            {
                let mut object_493 = array_491.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_nfs_export(
                    &mut object_493,
                    item_492,
                )?;
                object_493.finish();
            }
        }
        array_491.finish();
    }
    if let Some(var_494) = &input.user_and_group_quotas {
        let mut array_495 = object.key("UserAndGroupQuotas").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_user_or_group_quota(
                    &mut object_497,
                    item_496,
                )?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.copy_tags_to_snapshots {
        object.key("CopyTagsToSnapshots").boolean(*var_498);
    }
    if let Some(var_499) = &input.read_only {
        object.key("ReadOnly").boolean(*var_499);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tiering_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TieringPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.cooling_period {
        object.key("CoolingPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_500).into()),
        );
    }
    if let Some(var_501) = &input.name {
        object.key("Name").string(var_501.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_open_zfs_origin_snapshot_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateOpenZfsOriginSnapshotConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_502) = &input.snapshot_arn {
        object.key("SnapshotARN").string(var_502.as_str());
    }
    if let Some(var_503) = &input.copy_strategy {
        object.key("CopyStrategy").string(var_503.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_nfs_export(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsNfsExport,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.client_configurations {
        let mut array_505 = object.key("ClientConfigurations").start_array();
        for item_506 in var_504 {
            {
                let mut object_507 = array_505.value().start_object();
                crate::json_ser::serialize_structure_crate_model_open_zfs_client_configuration(
                    &mut object_507,
                    item_506,
                )?;
                object_507.finish();
            }
        }
        array_505.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_user_or_group_quota(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsUserOrGroupQuota,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.r#type {
        object.key("Type").string(var_508.as_str());
    }
    if let Some(var_509) = &input.id {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_509).into()),
        );
    }
    if let Some(var_510) = &input.storage_capacity_quota_gi_b {
        object.key("StorageCapacityQuotaGiB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_510).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_self_managed_active_directory_configuration_updates(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedActiveDirectoryConfigurationUpdates,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_511) = &input.user_name {
        object.key("UserName").string(var_511.as_str());
    }
    if let Some(var_512) = &input.password {
        object.key("Password").string(var_512.as_str());
    }
    if let Some(var_513) = &input.dns_ips {
        let mut array_514 = object.key("DnsIps").start_array();
        for item_515 in var_513 {
            {
                array_514.value().string(item_515.as_str());
            }
        }
        array_514.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_zfs_client_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenZfsClientConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_516) = &input.clients {
        object.key("Clients").string(var_516.as_str());
    }
    if let Some(var_517) = &input.options {
        let mut array_518 = object.key("Options").start_array();
        for item_519 in var_517 {
            {
                array_518.value().string(item_519.as_str());
            }
        }
        array_518.finish();
    }
    Ok(())
}
