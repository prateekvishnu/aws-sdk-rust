// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_role_to_db_cluster(
    input: &crate::input::AddRoleToDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RoleArn");
    if let Some(var_4) = &input.role_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("FeatureName");
    if let Some(var_6) = &input.feature_name {
        scope_5.string(var_6);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(
    input: &crate::input::AddSourceIdentifierToSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AddSourceIdentifierToSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("SubscriptionName");
    if let Some(var_8) = &input.subscription_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("SourceIdentifier");
    if let Some(var_10) = &input.source_identifier {
        scope_9.string(var_10);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("ResourceName");
    if let Some(var_12) = &input.resource_name {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Tags");
    if let Some(var_14) = &input.tags {
        let mut list_16 = scope_13.start_list(false, Some("Tag"));
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_17, item_15)?;
        }
        list_16.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("ResourceIdentifier");
    if let Some(var_19) = &input.resource_identifier {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ApplyAction");
    if let Some(var_21) = &input.apply_action {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("OptInType");
    if let Some(var_23) = &input.opt_in_type {
        scope_22.string(var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(
    input: &crate::input::CopyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_25) = &input.source_db_cluster_parameter_group_identifier {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_27) = &input.target_db_cluster_parameter_group_identifier {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_29) = &input.target_db_cluster_parameter_group_description {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("Tags");
    if let Some(var_31) = &input.tags {
        let mut list_33 = scope_30.start_list(false, Some("Tag"));
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_34, item_32)?;
        }
        list_33.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(
    input: &crate::input::CopyDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_36) = &input.source_db_cluster_snapshot_identifier {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_38) = &input.target_db_cluster_snapshot_identifier {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("KmsKeyId");
    if let Some(var_40) = &input.kms_key_id {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("PreSignedUrl");
    if let Some(var_42) = &input.pre_signed_url {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("CopyTags");
    if let Some(var_44) = &input.copy_tags {
        scope_43.boolean(*var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Tags");
    if let Some(var_46) = &input.tags {
        let mut list_48 = scope_45.start_list(false, Some("Tag"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_49, item_47)?;
        }
        list_48.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_parameter_group(
    input: &crate::input::CopyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("SourceDBParameterGroupIdentifier");
    if let Some(var_51) = &input.source_db_parameter_group_identifier {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("TargetDBParameterGroupIdentifier");
    if let Some(var_53) = &input.target_db_parameter_group_identifier {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("TargetDBParameterGroupDescription");
    if let Some(var_55) = &input.target_db_parameter_group_description {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, Some("Tag"));
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_60, item_58)?;
        }
        list_59.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(
    input: &crate::input::CreateDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("AvailabilityZones");
    if let Some(var_62) = &input.availability_zones {
        let mut list_64 = scope_61.start_list(false, Some("AvailabilityZone"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            entry_65.string(item_63);
        }
        list_64.finish();
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_67) = &input.backup_retention_period {
        scope_66.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("CharacterSetName");
    if let Some(var_69) = &input.character_set_name {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_71) = &input.copy_tags_to_snapshot {
        scope_70.boolean(*var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("DatabaseName");
    if let Some(var_73) = &input.database_name {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("DBClusterIdentifier");
    if let Some(var_75) = &input.db_cluster_identifier {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_77) = &input.db_cluster_parameter_group_name {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_79) = &input.vpc_security_group_ids {
        let mut list_81 = scope_78.start_list(false, Some("VpcSecurityGroupId"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            entry_82.string(item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("DBSubnetGroupName");
    if let Some(var_84) = &input.db_subnet_group_name {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("Engine");
    if let Some(var_86) = &input.engine {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("EngineVersion");
    if let Some(var_88) = &input.engine_version {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Port");
    if let Some(var_90) = &input.port {
        scope_89.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("MasterUsername");
    if let Some(var_92) = &input.master_username {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("MasterUserPassword");
    if let Some(var_94) = &input.master_user_password {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("OptionGroupName");
    if let Some(var_96) = &input.option_group_name {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("PreferredBackupWindow");
    if let Some(var_98) = &input.preferred_backup_window {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_100) = &input.preferred_maintenance_window {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("ReplicationSourceIdentifier");
    if let Some(var_102) = &input.replication_source_identifier {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Tags");
    if let Some(var_104) = &input.tags {
        let mut list_106 = scope_103.start_list(false, Some("Tag"));
        for item_105 in var_104 {
            #[allow(unused_mut)]
            let mut entry_107 = list_106.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_107, item_105)?;
        }
        list_106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("StorageEncrypted");
    if let Some(var_109) = &input.storage_encrypted {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("KmsKeyId");
    if let Some(var_111) = &input.kms_key_id {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("PreSignedUrl");
    if let Some(var_113) = &input.pre_signed_url {
        scope_112.string(var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_115) = &input.enable_iam_database_authentication {
        scope_114.boolean(*var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_117) = &input.enable_cloudwatch_logs_exports {
        let mut list_119 = scope_116.start_list(false, None);
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("DeletionProtection");
    if let Some(var_122) = &input.deletion_protection {
        scope_121.boolean(*var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_124) = &input.global_cluster_identifier {
        scope_123.string(var_124);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_endpoint(
    input: &crate::input::CreateDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("DBClusterIdentifier");
    if let Some(var_126) = &input.db_cluster_identifier {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_128) = &input.db_cluster_endpoint_identifier {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("EndpointType");
    if let Some(var_130) = &input.endpoint_type {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("StaticMembers");
    if let Some(var_132) = &input.static_members {
        let mut list_134 = scope_131.start_list(false, None);
        for item_133 in var_132 {
            #[allow(unused_mut)]
            let mut entry_135 = list_134.entry();
            entry_135.string(item_133);
        }
        list_134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("ExcludedMembers");
    if let Some(var_137) = &input.excluded_members {
        let mut list_139 = scope_136.start_list(false, None);
        for item_138 in var_137 {
            #[allow(unused_mut)]
            let mut entry_140 = list_139.entry();
            entry_140.string(item_138);
        }
        list_139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("Tags");
    if let Some(var_142) = &input.tags {
        let mut list_144 = scope_141.start_list(false, Some("Tag"));
        for item_143 in var_142 {
            #[allow(unused_mut)]
            let mut entry_145 = list_144.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_145, item_143)?;
        }
        list_144.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(
    input: &crate::input::CreateDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_147) = &input.db_cluster_parameter_group_name {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_149) = &input.db_parameter_group_family {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("Description");
    if let Some(var_151) = &input.description {
        scope_150.string(var_151);
    }
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("Tags");
    if let Some(var_153) = &input.tags {
        let mut list_155 = scope_152.start_list(false, Some("Tag"));
        for item_154 in var_153 {
            #[allow(unused_mut)]
            let mut entry_156 = list_155.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_156, item_154)?;
        }
        list_155.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(
    input: &crate::input::CreateDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_158) = &input.db_cluster_snapshot_identifier {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("DBClusterIdentifier");
    if let Some(var_160) = &input.db_cluster_identifier {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Tags");
    if let Some(var_162) = &input.tags {
        let mut list_164 = scope_161.start_list(false, Some("Tag"));
        for item_163 in var_162 {
            #[allow(unused_mut)]
            let mut entry_165 = list_164.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_165, item_163)?;
        }
        list_164.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(
    input: &crate::input::CreateDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("DBName");
    if let Some(var_167) = &input.db_name {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_169) = &input.db_instance_identifier {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("AllocatedStorage");
    if let Some(var_171) = &input.allocated_storage {
        scope_170.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("DBInstanceClass");
    if let Some(var_173) = &input.db_instance_class {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("Engine");
    if let Some(var_175) = &input.engine {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("MasterUsername");
    if let Some(var_177) = &input.master_username {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("MasterUserPassword");
    if let Some(var_179) = &input.master_user_password {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("DBSecurityGroups");
    if let Some(var_181) = &input.db_security_groups {
        let mut list_183 = scope_180.start_list(false, Some("DBSecurityGroupName"));
        for item_182 in var_181 {
            #[allow(unused_mut)]
            let mut entry_184 = list_183.entry();
            entry_184.string(item_182);
        }
        list_183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_186) = &input.vpc_security_group_ids {
        let mut list_188 = scope_185.start_list(false, Some("VpcSecurityGroupId"));
        for item_187 in var_186 {
            #[allow(unused_mut)]
            let mut entry_189 = list_188.entry();
            entry_189.string(item_187);
        }
        list_188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("AvailabilityZone");
    if let Some(var_191) = &input.availability_zone {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("DBSubnetGroupName");
    if let Some(var_193) = &input.db_subnet_group_name {
        scope_192.string(var_193);
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_195) = &input.preferred_maintenance_window {
        scope_194.string(var_195);
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("DBParameterGroupName");
    if let Some(var_197) = &input.db_parameter_group_name {
        scope_196.string(var_197);
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_199) = &input.backup_retention_period {
        scope_198.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_199).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("PreferredBackupWindow");
    if let Some(var_201) = &input.preferred_backup_window {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("Port");
    if let Some(var_203) = &input.port {
        scope_202.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("MultiAZ");
    if let Some(var_205) = &input.multi_az {
        scope_204.boolean(*var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("EngineVersion");
    if let Some(var_207) = &input.engine_version {
        scope_206.string(var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_209) = &input.auto_minor_version_upgrade {
        scope_208.boolean(*var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("LicenseModel");
    if let Some(var_211) = &input.license_model {
        scope_210.string(var_211);
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("Iops");
    if let Some(var_213) = &input.iops {
        scope_212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("OptionGroupName");
    if let Some(var_215) = &input.option_group_name {
        scope_214.string(var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("CharacterSetName");
    if let Some(var_217) = &input.character_set_name {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("PubliclyAccessible");
    if let Some(var_219) = &input.publicly_accessible {
        scope_218.boolean(*var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("Tags");
    if let Some(var_221) = &input.tags {
        let mut list_223 = scope_220.start_list(false, Some("Tag"));
        for item_222 in var_221 {
            #[allow(unused_mut)]
            let mut entry_224 = list_223.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_224, item_222)?;
        }
        list_223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("DBClusterIdentifier");
    if let Some(var_226) = &input.db_cluster_identifier {
        scope_225.string(var_226);
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("StorageType");
    if let Some(var_228) = &input.storage_type {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("TdeCredentialArn");
    if let Some(var_230) = &input.tde_credential_arn {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("TdeCredentialPassword");
    if let Some(var_232) = &input.tde_credential_password {
        scope_231.string(var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("StorageEncrypted");
    if let Some(var_234) = &input.storage_encrypted {
        scope_233.boolean(*var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("KmsKeyId");
    if let Some(var_236) = &input.kms_key_id {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("Domain");
    if let Some(var_238) = &input.domain {
        scope_237.string(var_238);
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_240) = &input.copy_tags_to_snapshot {
        scope_239.boolean(*var_240);
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("MonitoringInterval");
    if let Some(var_242) = &input.monitoring_interval {
        scope_241.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_242).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("MonitoringRoleArn");
    if let Some(var_244) = &input.monitoring_role_arn {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("DomainIAMRoleName");
    if let Some(var_246) = &input.domain_iam_role_name {
        scope_245.string(var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("PromotionTier");
    if let Some(var_248) = &input.promotion_tier {
        scope_247.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("Timezone");
    if let Some(var_250) = &input.timezone {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_252) = &input.enable_iam_database_authentication {
        scope_251.boolean(*var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_254) = &input.enable_performance_insights {
        scope_253.boolean(*var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_256) = &input.performance_insights_kms_key_id {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_258) = &input.enable_cloudwatch_logs_exports {
        let mut list_260 = scope_257.start_list(false, None);
        for item_259 in var_258 {
            #[allow(unused_mut)]
            let mut entry_261 = list_260.entry();
            entry_261.string(item_259);
        }
        list_260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("DeletionProtection");
    if let Some(var_263) = &input.deletion_protection {
        scope_262.boolean(*var_263);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_parameter_group(
    input: &crate::input::CreateDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("DBParameterGroupName");
    if let Some(var_265) = &input.db_parameter_group_name {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_267) = &input.db_parameter_group_family {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("Description");
    if let Some(var_269) = &input.description {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("Tags");
    if let Some(var_271) = &input.tags {
        let mut list_273 = scope_270.start_list(false, Some("Tag"));
        for item_272 in var_271 {
            #[allow(unused_mut)]
            let mut entry_274 = list_273.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_274, item_272)?;
        }
        list_273.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(
    input: &crate::input::CreateDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DBSubnetGroupName");
    if let Some(var_276) = &input.db_subnet_group_name {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_278) = &input.db_subnet_group_description {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("SubnetIds");
    if let Some(var_280) = &input.subnet_ids {
        let mut list_282 = scope_279.start_list(false, Some("SubnetIdentifier"));
        for item_281 in var_280 {
            #[allow(unused_mut)]
            let mut entry_283 = list_282.entry();
            entry_283.string(item_281);
        }
        list_282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("Tags");
    if let Some(var_285) = &input.tags {
        let mut list_287 = scope_284.start_list(false, Some("Tag"));
        for item_286 in var_285 {
            #[allow(unused_mut)]
            let mut entry_288 = list_287.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_288, item_286)?;
        }
        list_287.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("SubscriptionName");
    if let Some(var_290) = &input.subscription_name {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("SnsTopicArn");
    if let Some(var_292) = &input.sns_topic_arn {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("SourceType");
    if let Some(var_294) = &input.source_type {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("EventCategories");
    if let Some(var_296) = &input.event_categories {
        let mut list_298 = scope_295.start_list(false, Some("EventCategory"));
        for item_297 in var_296 {
            #[allow(unused_mut)]
            let mut entry_299 = list_298.entry();
            entry_299.string(item_297);
        }
        list_298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("SourceIds");
    if let Some(var_301) = &input.source_ids {
        let mut list_303 = scope_300.start_list(false, Some("SourceId"));
        for item_302 in var_301 {
            #[allow(unused_mut)]
            let mut entry_304 = list_303.entry();
            entry_304.string(item_302);
        }
        list_303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Enabled");
    if let Some(var_306) = &input.enabled {
        scope_305.boolean(*var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("Tags");
    if let Some(var_308) = &input.tags {
        let mut list_310 = scope_307.start_list(false, Some("Tag"));
        for item_309 in var_308 {
            #[allow(unused_mut)]
            let mut entry_311 = list_310.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_311, item_309)?;
        }
        list_310.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_cluster(
    input: &crate::input::CreateGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_313) = &input.global_cluster_identifier {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_315) = &input.source_db_cluster_identifier {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Engine");
    if let Some(var_317) = &input.engine {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("EngineVersion");
    if let Some(var_319) = &input.engine_version {
        scope_318.string(var_319);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("DeletionProtection");
    if let Some(var_321) = &input.deletion_protection {
        scope_320.boolean(*var_321);
    }
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("StorageEncrypted");
    if let Some(var_323) = &input.storage_encrypted {
        scope_322.boolean(*var_323);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(
    input: &crate::input::DeleteDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("DBClusterIdentifier");
    if let Some(var_325) = &input.db_cluster_identifier {
        scope_324.string(var_325);
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_326.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_328) = &input.final_db_snapshot_identifier {
        scope_327.string(var_328);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_endpoint(
    input: &crate::input::DeleteDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_330) = &input.db_cluster_endpoint_identifier {
        scope_329.string(var_330);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(
    input: &crate::input::DeleteDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_332) = &input.db_cluster_parameter_group_name {
        scope_331.string(var_332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(
    input: &crate::input::DeleteDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_334) = &input.db_cluster_snapshot_identifier {
        scope_333.string(var_334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(
    input: &crate::input::DeleteDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_336) = &input.db_instance_identifier {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_337.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_339) = &input.final_db_snapshot_identifier {
        scope_338.string(var_339);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_parameter_group(
    input: &crate::input::DeleteDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DBParameterGroupName");
    if let Some(var_341) = &input.db_parameter_group_name {
        scope_340.string(var_341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(
    input: &crate::input::DeleteDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("DBSubnetGroupName");
    if let Some(var_343) = &input.db_subnet_group_name {
        scope_342.string(var_343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("SubscriptionName");
    if let Some(var_345) = &input.subscription_name {
        scope_344.string(var_345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_cluster(
    input: &crate::input::DeleteGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_347) = &input.global_cluster_identifier {
        scope_346.string(var_347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_endpoints(
    input: &crate::input::DescribeDbClusterEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("DBClusterIdentifier");
    if let Some(var_349) = &input.db_cluster_identifier {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_351) = &input.db_cluster_endpoint_identifier {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("Filters");
    if let Some(var_353) = &input.filters {
        let mut list_355 = scope_352.start_list(false, Some("Filter"));
        for item_354 in var_353 {
            #[allow(unused_mut)]
            let mut entry_356 = list_355.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_356, item_354)?;
        }
        list_355.finish();
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("MaxRecords");
    if let Some(var_358) = &input.max_records {
        scope_357.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_358).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("Marker");
    if let Some(var_360) = &input.marker {
        scope_359.string(var_360);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(
    input: &crate::input::DescribeDbClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterParameterGroups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_362) = &input.db_cluster_parameter_group_name {
        scope_361.string(var_362);
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("Filters");
    if let Some(var_364) = &input.filters {
        let mut list_366 = scope_363.start_list(false, Some("Filter"));
        for item_365 in var_364 {
            #[allow(unused_mut)]
            let mut entry_367 = list_366.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_367, item_365)?;
        }
        list_366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("MaxRecords");
    if let Some(var_369) = &input.max_records {
        scope_368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("Marker");
    if let Some(var_371) = &input.marker {
        scope_370.string(var_371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(
    input: &crate::input::DescribeDbClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_373) = &input.db_cluster_parameter_group_name {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("Source");
    if let Some(var_375) = &input.source {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("Filters");
    if let Some(var_377) = &input.filters {
        let mut list_379 = scope_376.start_list(false, Some("Filter"));
        for item_378 in var_377 {
            #[allow(unused_mut)]
            let mut entry_380 = list_379.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_380, item_378)?;
        }
        list_379.finish();
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("MaxRecords");
    if let Some(var_382) = &input.max_records {
        scope_381.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_382).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("Marker");
    if let Some(var_384) = &input.marker {
        scope_383.string(var_384);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(
    input: &crate::input::DescribeDbClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("DBClusterIdentifier");
    if let Some(var_386) = &input.db_cluster_identifier {
        scope_385.string(var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("Filters");
    if let Some(var_388) = &input.filters {
        let mut list_390 = scope_387.start_list(false, Some("Filter"));
        for item_389 in var_388 {
            #[allow(unused_mut)]
            let mut entry_391 = list_390.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_391, item_389)?;
        }
        list_390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("MaxRecords");
    if let Some(var_393) = &input.max_records {
        scope_392.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("Marker");
    if let Some(var_395) = &input.marker {
        scope_394.string(var_395);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    input: &crate::input::DescribeDbClusterSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterSnapshotAttributes",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_397) = &input.db_cluster_snapshot_identifier {
        scope_396.string(var_397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(
    input: &crate::input::DescribeDbClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("DBClusterIdentifier");
    if let Some(var_399) = &input.db_cluster_identifier {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_401) = &input.db_cluster_snapshot_identifier {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("SnapshotType");
    if let Some(var_403) = &input.snapshot_type {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("Filters");
    if let Some(var_405) = &input.filters {
        let mut list_407 = scope_404.start_list(false, Some("Filter"));
        for item_406 in var_405 {
            #[allow(unused_mut)]
            let mut entry_408 = list_407.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_408, item_406)?;
        }
        list_407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("MaxRecords");
    if let Some(var_410) = &input.max_records {
        scope_409.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_410).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("Marker");
    if let Some(var_412) = &input.marker {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_413.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_414.boolean(input.include_public);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(
    input: &crate::input::DescribeDbEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("Engine");
    if let Some(var_416) = &input.engine {
        scope_415.string(var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("EngineVersion");
    if let Some(var_418) = &input.engine_version {
        scope_417.string(var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_420) = &input.db_parameter_group_family {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("Filters");
    if let Some(var_422) = &input.filters {
        let mut list_424 = scope_421.start_list(false, Some("Filter"));
        for item_423 in var_422 {
            #[allow(unused_mut)]
            let mut entry_425 = list_424.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_425, item_423)?;
        }
        list_424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("MaxRecords");
    if let Some(var_427) = &input.max_records {
        scope_426.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Marker");
    if let Some(var_429) = &input.marker {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_430.boolean(input.default_only);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_432) = &input.list_supported_character_sets {
        scope_431.boolean(*var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("ListSupportedTimezones");
    if let Some(var_434) = &input.list_supported_timezones {
        scope_433.boolean(*var_434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(
    input: &crate::input::DescribeDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_436) = &input.db_instance_identifier {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("Filters");
    if let Some(var_438) = &input.filters {
        let mut list_440 = scope_437.start_list(false, Some("Filter"));
        for item_439 in var_438 {
            #[allow(unused_mut)]
            let mut entry_441 = list_440.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_441, item_439)?;
        }
        list_440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("MaxRecords");
    if let Some(var_443) = &input.max_records {
        scope_442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Marker");
    if let Some(var_445) = &input.marker {
        scope_444.string(var_445);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameter_groups(
    input: &crate::input::DescribeDbParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameterGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("DBParameterGroupName");
    if let Some(var_447) = &input.db_parameter_group_name {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("Filters");
    if let Some(var_449) = &input.filters {
        let mut list_451 = scope_448.start_list(false, Some("Filter"));
        for item_450 in var_449 {
            #[allow(unused_mut)]
            let mut entry_452 = list_451.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_452, item_450)?;
        }
        list_451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("MaxRecords");
    if let Some(var_454) = &input.max_records {
        scope_453.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("Marker");
    if let Some(var_456) = &input.marker {
        scope_455.string(var_456);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameters(
    input: &crate::input::DescribeDbParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("DBParameterGroupName");
    if let Some(var_458) = &input.db_parameter_group_name {
        scope_457.string(var_458);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("Source");
    if let Some(var_460) = &input.source {
        scope_459.string(var_460);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("Filters");
    if let Some(var_462) = &input.filters {
        let mut list_464 = scope_461.start_list(false, Some("Filter"));
        for item_463 in var_462 {
            #[allow(unused_mut)]
            let mut entry_465 = list_464.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_465, item_463)?;
        }
        list_464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("MaxRecords");
    if let Some(var_467) = &input.max_records {
        scope_466.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("Marker");
    if let Some(var_469) = &input.marker {
        scope_468.string(var_469);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(
    input: &crate::input::DescribeDbSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("DBSubnetGroupName");
    if let Some(var_471) = &input.db_subnet_group_name {
        scope_470.string(var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("Filters");
    if let Some(var_473) = &input.filters {
        let mut list_475 = scope_472.start_list(false, Some("Filter"));
        for item_474 in var_473 {
            #[allow(unused_mut)]
            let mut entry_476 = list_475.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_476, item_474)?;
        }
        list_475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("MaxRecords");
    if let Some(var_478) = &input.max_records {
        scope_477.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_478).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("Marker");
    if let Some(var_480) = &input.marker {
        scope_479.string(var_480);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(
    input: &crate::input::DescribeEngineDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultClusterParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_482) = &input.db_parameter_group_family {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("Filters");
    if let Some(var_484) = &input.filters {
        let mut list_486 = scope_483.start_list(false, Some("Filter"));
        for item_485 in var_484 {
            #[allow(unused_mut)]
            let mut entry_487 = list_486.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_487, item_485)?;
        }
        list_486.finish();
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("MaxRecords");
    if let Some(var_489) = &input.max_records {
        scope_488.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_489).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Marker");
    if let Some(var_491) = &input.marker {
        scope_490.string(var_491);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_493) = &input.db_parameter_group_family {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("Filters");
    if let Some(var_495) = &input.filters {
        let mut list_497 = scope_494.start_list(false, Some("Filter"));
        for item_496 in var_495 {
            #[allow(unused_mut)]
            let mut entry_498 = list_497.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_498, item_496)?;
        }
        list_497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("MaxRecords");
    if let Some(var_500) = &input.max_records {
        scope_499.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_500).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("Marker");
    if let Some(var_502) = &input.marker {
        scope_501.string(var_502);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("SourceType");
    if let Some(var_504) = &input.source_type {
        scope_503.string(var_504);
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("Filters");
    if let Some(var_506) = &input.filters {
        let mut list_508 = scope_505.start_list(false, Some("Filter"));
        for item_507 in var_506 {
            #[allow(unused_mut)]
            let mut entry_509 = list_508.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_509, item_507)?;
        }
        list_508.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("SourceIdentifier");
    if let Some(var_511) = &input.source_identifier {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("SourceType");
    if let Some(var_513) = &input.source_type {
        scope_512.string(var_513.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("StartTime");
    if let Some(var_515) = &input.start_time {
        scope_514.date_time(var_515, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("EndTime");
    if let Some(var_517) = &input.end_time {
        scope_516.date_time(var_517, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("Duration");
    if let Some(var_519) = &input.duration {
        scope_518.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_519).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("EventCategories");
    if let Some(var_521) = &input.event_categories {
        let mut list_523 = scope_520.start_list(false, Some("EventCategory"));
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            entry_524.string(item_522);
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("Filters");
    if let Some(var_526) = &input.filters {
        let mut list_528 = scope_525.start_list(false, Some("Filter"));
        for item_527 in var_526 {
            #[allow(unused_mut)]
            let mut entry_529 = list_528.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_529, item_527)?;
        }
        list_528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("MaxRecords");
    if let Some(var_531) = &input.max_records {
        scope_530.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("Marker");
    if let Some(var_533) = &input.marker {
        scope_532.string(var_533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("SubscriptionName");
    if let Some(var_535) = &input.subscription_name {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Filters");
    if let Some(var_537) = &input.filters {
        let mut list_539 = scope_536.start_list(false, Some("Filter"));
        for item_538 in var_537 {
            #[allow(unused_mut)]
            let mut entry_540 = list_539.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_540, item_538)?;
        }
        list_539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("MaxRecords");
    if let Some(var_542) = &input.max_records {
        scope_541.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_542).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("Marker");
    if let Some(var_544) = &input.marker {
        scope_543.string(var_544);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_clusters(
    input: &crate::input::DescribeGlobalClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeGlobalClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_546) = &input.global_cluster_identifier {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("MaxRecords");
    if let Some(var_548) = &input.max_records {
        scope_547.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_548).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("Marker");
    if let Some(var_550) = &input.marker {
        scope_549.string(var_550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(
    input: &crate::input::DescribeOrderableDbInstanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("Engine");
    if let Some(var_552) = &input.engine {
        scope_551.string(var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("EngineVersion");
    if let Some(var_554) = &input.engine_version {
        scope_553.string(var_554);
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("DBInstanceClass");
    if let Some(var_556) = &input.db_instance_class {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("LicenseModel");
    if let Some(var_558) = &input.license_model {
        scope_557.string(var_558);
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("Vpc");
    if let Some(var_560) = &input.vpc {
        scope_559.boolean(*var_560);
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("Filters");
    if let Some(var_562) = &input.filters {
        let mut list_564 = scope_561.start_list(false, Some("Filter"));
        for item_563 in var_562 {
            #[allow(unused_mut)]
            let mut entry_565 = list_564.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_565, item_563)?;
        }
        list_564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("MaxRecords");
    if let Some(var_567) = &input.max_records {
        scope_566.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_567).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("Marker");
    if let Some(var_569) = &input.marker {
        scope_568.string(var_569);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribePendingMaintenanceActions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("ResourceIdentifier");
    if let Some(var_571) = &input.resource_identifier {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("Filters");
    if let Some(var_573) = &input.filters {
        let mut list_575 = scope_572.start_list(false, Some("Filter"));
        for item_574 in var_573 {
            #[allow(unused_mut)]
            let mut entry_576 = list_575.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_576, item_574)?;
        }
        list_575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("Marker");
    if let Some(var_578) = &input.marker {
        scope_577.string(var_578);
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("MaxRecords");
    if let Some(var_580) = &input.max_records {
        scope_579.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_580).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_valid_db_instance_modifications(
    input: &crate::input::DescribeValidDbInstanceModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeValidDBInstanceModifications",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_582) = &input.db_instance_identifier {
        scope_581.string(var_582);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(
    input: &crate::input::FailoverDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("DBClusterIdentifier");
    if let Some(var_584) = &input.db_cluster_identifier {
        scope_583.string(var_584);
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_586) = &input.target_db_instance_identifier {
        scope_585.string(var_586);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_cluster(
    input: &crate::input::FailoverGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_588) = &input.global_cluster_identifier {
        scope_587.string(var_588);
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("TargetDbClusterIdentifier");
    if let Some(var_590) = &input.target_db_cluster_identifier {
        scope_589.string(var_590);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("ResourceName");
    if let Some(var_592) = &input.resource_name {
        scope_591.string(var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("Filters");
    if let Some(var_594) = &input.filters {
        let mut list_596 = scope_593.start_list(false, Some("Filter"));
        for item_595 in var_594 {
            #[allow(unused_mut)]
            let mut entry_597 = list_596.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_597, item_595)?;
        }
        list_596.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(
    input: &crate::input::ModifyDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("DBClusterIdentifier");
    if let Some(var_599) = &input.db_cluster_identifier {
        scope_598.string(var_599);
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_601) = &input.new_db_cluster_identifier {
        scope_600.string(var_601);
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_602.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_604) = &input.backup_retention_period {
        scope_603.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_604).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_606) = &input.db_cluster_parameter_group_name {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_608) = &input.vpc_security_group_ids {
        let mut list_610 = scope_607.start_list(false, Some("VpcSecurityGroupId"));
        for item_609 in var_608 {
            #[allow(unused_mut)]
            let mut entry_611 = list_610.entry();
            entry_611.string(item_609);
        }
        list_610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("Port");
    if let Some(var_613) = &input.port {
        scope_612.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_613).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("MasterUserPassword");
    if let Some(var_615) = &input.master_user_password {
        scope_614.string(var_615);
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("OptionGroupName");
    if let Some(var_617) = &input.option_group_name {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("PreferredBackupWindow");
    if let Some(var_619) = &input.preferred_backup_window {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_621) = &input.preferred_maintenance_window {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_623) = &input.enable_iam_database_authentication {
        scope_622.boolean(*var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_625) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_624, var_625,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("EngineVersion");
    if let Some(var_627) = &input.engine_version {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_628.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("DBInstanceParameterGroupName");
    if let Some(var_630) = &input.db_instance_parameter_group_name {
        scope_629.string(var_630);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("DeletionProtection");
    if let Some(var_632) = &input.deletion_protection {
        scope_631.boolean(*var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_634) = &input.copy_tags_to_snapshot {
        scope_633.boolean(*var_634);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_endpoint(
    input: &crate::input::ModifyDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_636) = &input.db_cluster_endpoint_identifier {
        scope_635.string(var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("EndpointType");
    if let Some(var_638) = &input.endpoint_type {
        scope_637.string(var_638);
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("StaticMembers");
    if let Some(var_640) = &input.static_members {
        let mut list_642 = scope_639.start_list(false, None);
        for item_641 in var_640 {
            #[allow(unused_mut)]
            let mut entry_643 = list_642.entry();
            entry_643.string(item_641);
        }
        list_642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("ExcludedMembers");
    if let Some(var_645) = &input.excluded_members {
        let mut list_647 = scope_644.start_list(false, None);
        for item_646 in var_645 {
            #[allow(unused_mut)]
            let mut entry_648 = list_647.entry();
            entry_648.string(item_646);
        }
        list_647.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(
    input: &crate::input::ModifyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_650) = &input.db_cluster_parameter_group_name {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("Parameters");
    if let Some(var_652) = &input.parameters {
        let mut list_654 = scope_651.start_list(false, Some("Parameter"));
        for item_653 in var_652 {
            #[allow(unused_mut)]
            let mut entry_655 = list_654.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_655, item_653)?;
        }
        list_654.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    input: &crate::input::ModifyDbClusterSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDBClusterSnapshotAttribute",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_657) = &input.db_cluster_snapshot_identifier {
        scope_656.string(var_657);
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("AttributeName");
    if let Some(var_659) = &input.attribute_name {
        scope_658.string(var_659);
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("ValuesToAdd");
    if let Some(var_661) = &input.values_to_add {
        let mut list_663 = scope_660.start_list(false, Some("AttributeValue"));
        for item_662 in var_661 {
            #[allow(unused_mut)]
            let mut entry_664 = list_663.entry();
            entry_664.string(item_662);
        }
        list_663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ValuesToRemove");
    if let Some(var_666) = &input.values_to_remove {
        let mut list_668 = scope_665.start_list(false, Some("AttributeValue"));
        for item_667 in var_666 {
            #[allow(unused_mut)]
            let mut entry_669 = list_668.entry();
            entry_669.string(item_667);
        }
        list_668.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(
    input: &crate::input::ModifyDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_671) = &input.db_instance_identifier {
        scope_670.string(var_671);
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("AllocatedStorage");
    if let Some(var_673) = &input.allocated_storage {
        scope_672.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_673).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("DBInstanceClass");
    if let Some(var_675) = &input.db_instance_class {
        scope_674.string(var_675);
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("DBSubnetGroupName");
    if let Some(var_677) = &input.db_subnet_group_name {
        scope_676.string(var_677);
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("DBSecurityGroups");
    if let Some(var_679) = &input.db_security_groups {
        let mut list_681 = scope_678.start_list(false, Some("DBSecurityGroupName"));
        for item_680 in var_679 {
            #[allow(unused_mut)]
            let mut entry_682 = list_681.entry();
            entry_682.string(item_680);
        }
        list_681.finish();
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_684) = &input.vpc_security_group_ids {
        let mut list_686 = scope_683.start_list(false, Some("VpcSecurityGroupId"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            entry_687.string(item_685);
        }
        list_686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_688.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("MasterUserPassword");
    if let Some(var_690) = &input.master_user_password {
        scope_689.string(var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("DBParameterGroupName");
    if let Some(var_692) = &input.db_parameter_group_name {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_694) = &input.backup_retention_period {
        scope_693.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_694).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("PreferredBackupWindow");
    if let Some(var_696) = &input.preferred_backup_window {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_698) = &input.preferred_maintenance_window {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("MultiAZ");
    if let Some(var_700) = &input.multi_az {
        scope_699.boolean(*var_700);
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("EngineVersion");
    if let Some(var_702) = &input.engine_version {
        scope_701.string(var_702);
    }
    #[allow(unused_mut)]
    let mut scope_703 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_703.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_705) = &input.auto_minor_version_upgrade {
        scope_704.boolean(*var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("LicenseModel");
    if let Some(var_707) = &input.license_model {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("Iops");
    if let Some(var_709) = &input.iops {
        scope_708.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_709).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("OptionGroupName");
    if let Some(var_711) = &input.option_group_name {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_713) = &input.new_db_instance_identifier {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("StorageType");
    if let Some(var_715) = &input.storage_type {
        scope_714.string(var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("TdeCredentialArn");
    if let Some(var_717) = &input.tde_credential_arn {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("TdeCredentialPassword");
    if let Some(var_719) = &input.tde_credential_password {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("CACertificateIdentifier");
    if let Some(var_721) = &input.ca_certificate_identifier {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("Domain");
    if let Some(var_723) = &input.domain {
        scope_722.string(var_723);
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_725) = &input.copy_tags_to_snapshot {
        scope_724.boolean(*var_725);
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("MonitoringInterval");
    if let Some(var_727) = &input.monitoring_interval {
        scope_726.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_727).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("DBPortNumber");
    if let Some(var_729) = &input.db_port_number {
        scope_728.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("PubliclyAccessible");
    if let Some(var_731) = &input.publicly_accessible {
        scope_730.boolean(*var_731);
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("MonitoringRoleArn");
    if let Some(var_733) = &input.monitoring_role_arn {
        scope_732.string(var_733);
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("DomainIAMRoleName");
    if let Some(var_735) = &input.domain_iam_role_name {
        scope_734.string(var_735);
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("PromotionTier");
    if let Some(var_737) = &input.promotion_tier {
        scope_736.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_737).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_739) = &input.enable_iam_database_authentication {
        scope_738.boolean(*var_739);
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_741) = &input.enable_performance_insights {
        scope_740.boolean(*var_741);
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_743) = &input.performance_insights_kms_key_id {
        scope_742.string(var_743);
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_745) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_744, var_745,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("DeletionProtection");
    if let Some(var_747) = &input.deletion_protection {
        scope_746.boolean(*var_747);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_parameter_group(
    input: &crate::input::ModifyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("DBParameterGroupName");
    if let Some(var_749) = &input.db_parameter_group_name {
        scope_748.string(var_749);
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("Parameters");
    if let Some(var_751) = &input.parameters {
        let mut list_753 = scope_750.start_list(false, Some("Parameter"));
        for item_752 in var_751 {
            #[allow(unused_mut)]
            let mut entry_754 = list_753.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_754, item_752)?;
        }
        list_753.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(
    input: &crate::input::ModifyDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("DBSubnetGroupName");
    if let Some(var_756) = &input.db_subnet_group_name {
        scope_755.string(var_756);
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_758) = &input.db_subnet_group_description {
        scope_757.string(var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("SubnetIds");
    if let Some(var_760) = &input.subnet_ids {
        let mut list_762 = scope_759.start_list(false, Some("SubnetIdentifier"));
        for item_761 in var_760 {
            #[allow(unused_mut)]
            let mut entry_763 = list_762.entry();
            entry_763.string(item_761);
        }
        list_762.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("SubscriptionName");
    if let Some(var_765) = &input.subscription_name {
        scope_764.string(var_765);
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("SnsTopicArn");
    if let Some(var_767) = &input.sns_topic_arn {
        scope_766.string(var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("SourceType");
    if let Some(var_769) = &input.source_type {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("EventCategories");
    if let Some(var_771) = &input.event_categories {
        let mut list_773 = scope_770.start_list(false, Some("EventCategory"));
        for item_772 in var_771 {
            #[allow(unused_mut)]
            let mut entry_774 = list_773.entry();
            entry_774.string(item_772);
        }
        list_773.finish();
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("Enabled");
    if let Some(var_776) = &input.enabled {
        scope_775.boolean(*var_776);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_cluster(
    input: &crate::input::ModifyGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_778) = &input.global_cluster_identifier {
        scope_777.string(var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("NewGlobalClusterIdentifier");
    if let Some(var_780) = &input.new_global_cluster_identifier {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("DeletionProtection");
    if let Some(var_782) = &input.deletion_protection {
        scope_781.boolean(*var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("EngineVersion");
    if let Some(var_784) = &input.engine_version {
        scope_783.string(var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("AllowMajorVersionUpgrade");
    if let Some(var_786) = &input.allow_major_version_upgrade {
        scope_785.boolean(*var_786);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica_db_cluster(
    input: &crate::input::PromoteReadReplicaDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplicaDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("DBClusterIdentifier");
    if let Some(var_788) = &input.db_cluster_identifier {
        scope_787.string(var_788);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(
    input: &crate::input::RebootDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_790) = &input.db_instance_identifier {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("ForceFailover");
    if let Some(var_792) = &input.force_failover {
        scope_791.boolean(*var_792);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_from_global_cluster(
    input: &crate::input::RemoveFromGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveFromGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_794) = &input.global_cluster_identifier {
        scope_793.string(var_794);
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("DbClusterIdentifier");
    if let Some(var_796) = &input.db_cluster_identifier {
        scope_795.string(var_796);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_cluster(
    input: &crate::input::RemoveRoleFromDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("DBClusterIdentifier");
    if let Some(var_798) = &input.db_cluster_identifier {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("RoleArn");
    if let Some(var_800) = &input.role_arn {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("FeatureName");
    if let Some(var_802) = &input.feature_name {
        scope_801.string(var_802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(
    input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RemoveSourceIdentifierFromSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("SubscriptionName");
    if let Some(var_804) = &input.subscription_name {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("SourceIdentifier");
    if let Some(var_806) = &input.source_identifier {
        scope_805.string(var_806);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("ResourceName");
    if let Some(var_808) = &input.resource_name {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("TagKeys");
    if let Some(var_810) = &input.tag_keys {
        let mut list_812 = scope_809.start_list(false, None);
        for item_811 in var_810 {
            #[allow(unused_mut)]
            let mut entry_813 = list_812.entry();
            entry_813.string(item_811);
        }
        list_812.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(
    input: &crate::input::ResetDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_815) = &input.db_cluster_parameter_group_name {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_816.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("Parameters");
    if let Some(var_818) = &input.parameters {
        let mut list_820 = scope_817.start_list(false, Some("Parameter"));
        for item_819 in var_818 {
            #[allow(unused_mut)]
            let mut entry_821 = list_820.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_821, item_819)?;
        }
        list_820.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_parameter_group(
    input: &crate::input::ResetDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("DBParameterGroupName");
    if let Some(var_823) = &input.db_parameter_group_name {
        scope_822.string(var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_824.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("Parameters");
    if let Some(var_826) = &input.parameters {
        let mut list_828 = scope_825.start_list(false, Some("Parameter"));
        for item_827 in var_826 {
            #[allow(unused_mut)]
            let mut entry_829 = list_828.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_829, item_827)?;
        }
        list_828.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(
    input: &crate::input::RestoreDbClusterFromSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AvailabilityZones");
    if let Some(var_831) = &input.availability_zones {
        let mut list_833 = scope_830.start_list(false, Some("AvailabilityZone"));
        for item_832 in var_831 {
            #[allow(unused_mut)]
            let mut entry_834 = list_833.entry();
            entry_834.string(item_832);
        }
        list_833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("DBClusterIdentifier");
    if let Some(var_836) = &input.db_cluster_identifier {
        scope_835.string(var_836);
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("SnapshotIdentifier");
    if let Some(var_838) = &input.snapshot_identifier {
        scope_837.string(var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("Engine");
    if let Some(var_840) = &input.engine {
        scope_839.string(var_840);
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("EngineVersion");
    if let Some(var_842) = &input.engine_version {
        scope_841.string(var_842);
    }
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("Port");
    if let Some(var_844) = &input.port {
        scope_843.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_844).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("DBSubnetGroupName");
    if let Some(var_846) = &input.db_subnet_group_name {
        scope_845.string(var_846);
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("DatabaseName");
    if let Some(var_848) = &input.database_name {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("OptionGroupName");
    if let Some(var_850) = &input.option_group_name {
        scope_849.string(var_850);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_852) = &input.vpc_security_group_ids {
        let mut list_854 = scope_851.start_list(false, Some("VpcSecurityGroupId"));
        for item_853 in var_852 {
            #[allow(unused_mut)]
            let mut entry_855 = list_854.entry();
            entry_855.string(item_853);
        }
        list_854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("Tags");
    if let Some(var_857) = &input.tags {
        let mut list_859 = scope_856.start_list(false, Some("Tag"));
        for item_858 in var_857 {
            #[allow(unused_mut)]
            let mut entry_860 = list_859.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_860, item_858)?;
        }
        list_859.finish();
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("KmsKeyId");
    if let Some(var_862) = &input.kms_key_id {
        scope_861.string(var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_864) = &input.enable_iam_database_authentication {
        scope_863.boolean(*var_864);
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_866) = &input.enable_cloudwatch_logs_exports {
        let mut list_868 = scope_865.start_list(false, None);
        for item_867 in var_866 {
            #[allow(unused_mut)]
            let mut entry_869 = list_868.entry();
            entry_869.string(item_867);
        }
        list_868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_871) = &input.db_cluster_parameter_group_name {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("DeletionProtection");
    if let Some(var_873) = &input.deletion_protection {
        scope_872.boolean(*var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_875) = &input.copy_tags_to_snapshot {
        scope_874.boolean(*var_875);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(
    input: &crate::input::RestoreDbClusterToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("DBClusterIdentifier");
    if let Some(var_877) = &input.db_cluster_identifier {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("RestoreType");
    if let Some(var_879) = &input.restore_type {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_881) = &input.source_db_cluster_identifier {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("RestoreToTime");
    if let Some(var_883) = &input.restore_to_time {
        scope_882.date_time(var_883, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_884.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("Port");
    if let Some(var_886) = &input.port {
        scope_885.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_886).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("DBSubnetGroupName");
    if let Some(var_888) = &input.db_subnet_group_name {
        scope_887.string(var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("OptionGroupName");
    if let Some(var_890) = &input.option_group_name {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_892) = &input.vpc_security_group_ids {
        let mut list_894 = scope_891.start_list(false, Some("VpcSecurityGroupId"));
        for item_893 in var_892 {
            #[allow(unused_mut)]
            let mut entry_895 = list_894.entry();
            entry_895.string(item_893);
        }
        list_894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("Tags");
    if let Some(var_897) = &input.tags {
        let mut list_899 = scope_896.start_list(false, Some("Tag"));
        for item_898 in var_897 {
            #[allow(unused_mut)]
            let mut entry_900 = list_899.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_900, item_898)?;
        }
        list_899.finish();
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("KmsKeyId");
    if let Some(var_902) = &input.kms_key_id {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_904) = &input.enable_iam_database_authentication {
        scope_903.boolean(*var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_906) = &input.enable_cloudwatch_logs_exports {
        let mut list_908 = scope_905.start_list(false, None);
        for item_907 in var_906 {
            #[allow(unused_mut)]
            let mut entry_909 = list_908.entry();
            entry_909.string(item_907);
        }
        list_908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_911) = &input.db_cluster_parameter_group_name {
        scope_910.string(var_911);
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("DeletionProtection");
    if let Some(var_913) = &input.deletion_protection {
        scope_912.boolean(*var_913);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(
    input: &crate::input::StartDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("DBClusterIdentifier");
    if let Some(var_915) = &input.db_cluster_identifier {
        scope_914.string(var_915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(
    input: &crate::input::StopDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("DBClusterIdentifier");
    if let Some(var_917) = &input.db_cluster_identifier {
        scope_916.string(var_917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
