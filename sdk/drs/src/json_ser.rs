// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_extended_source_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExtendedSourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.source_server_arn {
        object.key("sourceServerArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.tags {
        let mut object_3 = object.key("tags").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_replication_configuration_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationConfigurationTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_6);
    }
    {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_7) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_7);
    }
    if let Some(var_8) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_8.as_str());
    }
    if let Some(var_9) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_10.as_str());
    }
    if let Some(var_11) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.pit_policy {
        let mut array_13 = object.key("pitPolicy").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pit_policy_rule(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.replication_server_instance_type {
        object
            .key("replicationServerInstanceType")
            .string(var_16.as_str());
    }
    if let Some(var_17) = &input.replication_servers_security_groups_i_ds {
        let mut array_18 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.staging_area_tags {
        let mut object_22 = object.key("stagingAreaTags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    if let Some(var_25) = &input.tags {
        let mut object_26 = object.key("tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    if let Some(var_29) = &input.use_dedicated_replication_server {
        object.key("useDedicatedReplicationServer").boolean(*var_29);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.job_id {
        object.key("jobID").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_recovery_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRecoveryInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_configuration_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationConfigurationTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.replication_configuration_template_id {
        object
            .key("replicationConfigurationTemplateID")
            .string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_source_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.source_server_id {
        object.key("sourceServerID").string(var_33.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_job_log_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobLogItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.job_id {
        object.key("jobID").string(var_34.as_str());
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_35) = &input.next_token {
        object.key("nextToken").string(var_35.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.filters {
        let mut object_37 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_jobs_request_filters(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_38) = &input.next_token {
        object.key("nextToken").string(var_38.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_recovery_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRecoveryInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.filters {
        let mut object_40 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_recovery_instances_request_filters(&mut object_40, var_39)?;
        object_40.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_41) = &input.next_token {
        object.key("nextToken").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_recovery_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRecoverySnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.filters {
        let mut object_43 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_recovery_snapshots_request_filters(&mut object_43, var_42)?;
        object_43.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_44) = &input.next_token {
        object.key("nextToken").string(var_44.as_str());
    }
    if let Some(var_45) = &input.order {
        object.key("order").string(var_45.as_str());
    }
    if let Some(var_46) = &input.source_server_id {
        object.key("sourceServerID").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_configuration_templates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationConfigurationTemplatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_47) = &input.next_token {
        object.key("nextToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.replication_configuration_template_i_ds {
        let mut array_49 = object
            .key("replicationConfigurationTemplateIDs")
            .start_array();
        for item_50 in var_48 {
            {
                array_49.value().string(item_50.as_str());
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_source_servers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSourceServersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.filters {
        let mut object_52 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_source_servers_request_filters(
            &mut object_52,
            var_51,
        )?;
        object_52.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_53) = &input.next_token {
        object.key("nextToken").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disconnect_recovery_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectRecoveryInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disconnect_source_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectSourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.source_server_id {
        object.key("sourceServerID").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_failback_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFailbackReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_launch_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLaunchConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.source_server_id {
        object.key("sourceServerID").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.source_server_id {
        object.key("sourceServerID").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_extensible_source_servers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExtensibleSourceServersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_59) = &input.next_token {
        object.key("nextToken").string(var_59.as_str());
    }
    if let Some(var_60) = &input.staging_account_id {
        object.key("stagingAccountID").string(var_60.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retry_data_replication_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetryDataReplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.source_server_id {
        object.key("sourceServerID").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_failback_launch_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFailbackLaunchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.recovery_instance_i_ds {
        let mut array_63 = object.key("recoveryInstanceIDs").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64.as_str());
            }
        }
        array_63.finish();
    }
    if let Some(var_65) = &input.tags {
        let mut object_66 = object.key("tags").start_object();
        for (key_67, value_68) in var_65 {
            {
                object_66.key(key_67).string(value_68.as_str());
            }
        }
        object_66.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_recovery_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRecoveryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.is_drill {
        object.key("isDrill").boolean(*var_69);
    }
    if let Some(var_70) = &input.source_servers {
        let mut array_71 = object.key("sourceServers").start_array();
        for item_72 in var_70 {
            {
                let mut object_73 = array_71.value().start_object();
                crate::json_ser::serialize_structure_crate_model_start_recovery_request_source_server(&mut object_73, item_72)?;
                object_73.finish();
            }
        }
        array_71.finish();
    }
    if let Some(var_74) = &input.tags {
        let mut object_75 = object.key("tags").start_object();
        for (key_76, value_77) in var_74 {
            {
                object_75.key(key_76).string(value_77.as_str());
            }
        }
        object_75.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_failback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopFailbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("tags").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82.as_str());
            }
        }
        object_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_recovery_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateRecoveryInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.recovery_instance_i_ds {
        let mut array_84 = object.key("recoveryInstanceIDs").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85.as_str());
            }
        }
        array_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_failback_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFailbackReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_86) = &input.name {
        object.key("name").string(var_86.as_str());
    }
    if let Some(var_87) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_87.as_str());
    }
    if let Some(var_88) = &input.use_private_ip {
        object.key("usePrivateIP").boolean(*var_88);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_launch_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLaunchConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.copy_private_ip {
        object.key("copyPrivateIp").boolean(*var_89);
    }
    if let Some(var_90) = &input.copy_tags {
        object.key("copyTags").boolean(*var_90);
    }
    if let Some(var_91) = &input.launch_disposition {
        object.key("launchDisposition").string(var_91.as_str());
    }
    if let Some(var_92) = &input.licensing {
        let mut object_93 = object.key("licensing").start_object();
        crate::json_ser::serialize_structure_crate_model_licensing(&mut object_93, var_92)?;
        object_93.finish();
    }
    if let Some(var_94) = &input.name {
        object.key("name").string(var_94.as_str());
    }
    if let Some(var_95) = &input.source_server_id {
        object.key("sourceServerID").string(var_95.as_str());
    }
    if let Some(var_96) = &input.target_instance_type_right_sizing_method {
        object
            .key("targetInstanceTypeRightSizingMethod")
            .string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_97);
    }
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_98) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_98);
    }
    if let Some(var_99) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_99.as_str());
    }
    if let Some(var_100) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_100.as_str());
    }
    if let Some(var_101) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_101.as_str());
    }
    if let Some(var_102) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_102.as_str());
    }
    if let Some(var_103) = &input.name {
        object.key("name").string(var_103.as_str());
    }
    if let Some(var_104) = &input.pit_policy {
        let mut array_105 = object.key("pitPolicy").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pit_policy_rule(
                    &mut object_107,
                    item_106,
                )?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.replicated_disks {
        let mut array_109 = object.key("replicatedDisks").start_array();
        for item_110 in var_108 {
            {
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replication_configuration_replicated_disk(&mut object_111, item_110)?;
                object_111.finish();
            }
        }
        array_109.finish();
    }
    if let Some(var_112) = &input.replication_server_instance_type {
        object
            .key("replicationServerInstanceType")
            .string(var_112.as_str());
    }
    if let Some(var_113) = &input.replication_servers_security_groups_i_ds {
        let mut array_114 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_115 in var_113 {
            {
                array_114.value().string(item_115.as_str());
            }
        }
        array_114.finish();
    }
    if let Some(var_116) = &input.source_server_id {
        object.key("sourceServerID").string(var_116.as_str());
    }
    if let Some(var_117) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_117.as_str());
    }
    if let Some(var_118) = &input.staging_area_tags {
        let mut object_119 = object.key("stagingAreaTags").start_object();
        for (key_120, value_121) in var_118 {
            {
                object_119.key(key_120).string(value_121.as_str());
            }
        }
        object_119.finish();
    }
    if let Some(var_122) = &input.use_dedicated_replication_server {
        object
            .key("useDedicatedReplicationServer")
            .boolean(*var_122);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_replication_configuration_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReplicationConfigurationTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.arn {
        object.key("arn").string(var_123.as_str());
    }
    if let Some(var_124) = &input.associate_default_security_group {
        object
            .key("associateDefaultSecurityGroup")
            .boolean(*var_124);
    }
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_125) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_125);
    }
    if let Some(var_126) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_126.as_str());
    }
    if let Some(var_127) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_127.as_str());
    }
    if let Some(var_128) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_128.as_str());
    }
    if let Some(var_129) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_129.as_str());
    }
    if let Some(var_130) = &input.pit_policy {
        let mut array_131 = object.key("pitPolicy").start_array();
        for item_132 in var_130 {
            {
                let mut object_133 = array_131.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pit_policy_rule(
                    &mut object_133,
                    item_132,
                )?;
                object_133.finish();
            }
        }
        array_131.finish();
    }
    if let Some(var_134) = &input.replication_configuration_template_id {
        object
            .key("replicationConfigurationTemplateID")
            .string(var_134.as_str());
    }
    if let Some(var_135) = &input.replication_server_instance_type {
        object
            .key("replicationServerInstanceType")
            .string(var_135.as_str());
    }
    if let Some(var_136) = &input.replication_servers_security_groups_i_ds {
        let mut array_137 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_138 in var_136 {
            {
                array_137.value().string(item_138.as_str());
            }
        }
        array_137.finish();
    }
    if let Some(var_139) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_139.as_str());
    }
    if let Some(var_140) = &input.staging_area_tags {
        let mut object_141 = object.key("stagingAreaTags").start_object();
        for (key_142, value_143) in var_140 {
            {
                object_141.key(key_142).string(value_143.as_str());
            }
        }
        object_141.finish();
    }
    if let Some(var_144) = &input.use_dedicated_replication_server {
        object
            .key("useDedicatedReplicationServer")
            .boolean(*var_144);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pit_policy_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PitPolicyRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.rule_id != 0 {
        object.key("ruleID").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rule_id).into()),
        );
    }
    if let Some(var_145) = &input.units {
        object.key("units").string(var_145.as_str());
    }
    {
        object.key("interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    {
        object.key("retentionDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_duration).into()),
        );
    }
    if let Some(var_146) = &input.enabled {
        object.key("enabled").boolean(*var_146);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_jobs_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeJobsRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.job_i_ds {
        let mut array_148 = object.key("jobIDs").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149.as_str());
            }
        }
        array_148.finish();
    }
    if let Some(var_150) = &input.from_date {
        object.key("fromDate").string(var_150.as_str());
    }
    if let Some(var_151) = &input.to_date {
        object.key("toDate").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_recovery_instances_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeRecoveryInstancesRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.recovery_instance_i_ds {
        let mut array_153 = object.key("recoveryInstanceIDs").start_array();
        for item_154 in var_152 {
            {
                array_153.value().string(item_154.as_str());
            }
        }
        array_153.finish();
    }
    if let Some(var_155) = &input.source_server_i_ds {
        let mut array_156 = object.key("sourceServerIDs").start_array();
        for item_157 in var_155 {
            {
                array_156.value().string(item_157.as_str());
            }
        }
        array_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_recovery_snapshots_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeRecoverySnapshotsRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.from_date_time {
        object.key("fromDateTime").string(var_158.as_str());
    }
    if let Some(var_159) = &input.to_date_time {
        object.key("toDateTime").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_source_servers_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeSourceServersRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.source_server_i_ds {
        let mut array_161 = object.key("sourceServerIDs").start_array();
        for item_162 in var_160 {
            {
                array_161.value().string(item_162.as_str());
            }
        }
        array_161.finish();
    }
    if let Some(var_163) = &input.hardware_id {
        object.key("hardwareId").string(var_163.as_str());
    }
    if let Some(var_164) = &input.staging_account_i_ds {
        let mut array_165 = object.key("stagingAccountIDs").start_array();
        for item_166 in var_164 {
            {
                array_165.value().string(item_166.as_str());
            }
        }
        array_165.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_recovery_request_source_server(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartRecoveryRequestSourceServer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.source_server_id {
        object.key("sourceServerID").string(var_167.as_str());
    }
    if let Some(var_168) = &input.recovery_snapshot_id {
        object.key("recoverySnapshotID").string(var_168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_licensing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Licensing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.os_byol {
        object.key("osByol").boolean(*var_169);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replication_configuration_replicated_disk(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationConfigurationReplicatedDisk,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.device_name {
        object.key("deviceName").string(var_170.as_str());
    }
    if let Some(var_171) = &input.is_boot_disk {
        object.key("isBootDisk").boolean(*var_171);
    }
    if let Some(var_172) = &input.staging_disk_type {
        object.key("stagingDiskType").string(var_172.as_str());
    }
    if input.iops != 0 {
        object.key("iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if input.throughput != 0 {
        object.key("throughput").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throughput).into()),
        );
    }
    if let Some(var_173) = &input.optimized_staging_disk_type {
        object
            .key("optimizedStagingDiskType")
            .string(var_173.as_str());
    }
    Ok(())
}
