// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_delegate_to_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateDelegateToResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.organization_id {
        object.key("OrganizationId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_id {
        object.key("EntityId").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_member_to_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateMemberToGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.organization_id {
        object.key("OrganizationId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.group_id {
        object.key("GroupId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.member_id {
        object.key("MemberId").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_mailbox_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMailboxExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.client_token {
        object.key("ClientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.job_id {
        object.key("JobId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.organization_id {
        object.key("OrganizationId").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.organization_id {
        object.key("OrganizationId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.entity_id {
        object.key("EntityId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.alias {
        object.key("Alias").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_availability_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAvailabilityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.client_token {
        object.key("ClientToken").string(var_13.as_str());
    }
    if let Some(var_14) = &input.organization_id {
        object.key("OrganizationId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.domain_name {
        object.key("DomainName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.ews_provider {
        let mut object_17 = object.key("EwsProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_ews_availability_provider(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.lambda_provider {
        let mut object_19 = object.key("LambdaProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_availability_provider(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.organization_id {
        object.key("OrganizationId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.name {
        object.key("Name").string(var_21.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_mobile_device_access_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMobileDeviceAccessRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.organization_id {
        object.key("OrganizationId").string(var_22.as_str());
    }
    if let Some(var_23) = &input.client_token {
        object.key("ClientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.name {
        object.key("Name").string(var_24.as_str());
    }
    if let Some(var_25) = &input.description {
        object.key("Description").string(var_25.as_str());
    }
    if let Some(var_26) = &input.effect {
        object.key("Effect").string(var_26.as_str());
    }
    if let Some(var_27) = &input.device_types {
        let mut array_28 = object.key("DeviceTypes").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.not_device_types {
        let mut array_31 = object.key("NotDeviceTypes").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32.as_str());
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.device_models {
        let mut array_34 = object.key("DeviceModels").start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35.as_str());
            }
        }
        array_34.finish();
    }
    if let Some(var_36) = &input.not_device_models {
        let mut array_37 = object.key("NotDeviceModels").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.device_operating_systems {
        let mut array_40 = object.key("DeviceOperatingSystems").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.not_device_operating_systems {
        let mut array_43 = object.key("NotDeviceOperatingSystems").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.device_user_agents {
        let mut array_46 = object.key("DeviceUserAgents").start_array();
        for item_47 in var_45 {
            {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    if let Some(var_48) = &input.not_device_user_agents {
        let mut array_49 = object.key("NotDeviceUserAgents").start_array();
        for item_50 in var_48 {
            {
                array_49.value().string(item_50.as_str());
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_organization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOrganizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.directory_id {
        object.key("DirectoryId").string(var_51.as_str());
    }
    if let Some(var_52) = &input.alias {
        object.key("Alias").string(var_52.as_str());
    }
    if let Some(var_53) = &input.client_token {
        object.key("ClientToken").string(var_53.as_str());
    }
    if let Some(var_54) = &input.domains {
        let mut array_55 = object.key("Domains").start_array();
        for item_56 in var_54 {
            {
                let mut object_57 = array_55.value().start_object();
                crate::json_ser::serialize_structure_crate_model_domain(&mut object_57, item_56)?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    if let Some(var_58) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_58.as_str());
    }
    if input.enable_interoperability {
        object
            .key("EnableInteroperability")
            .boolean(input.enable_interoperability);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.organization_id {
        object.key("OrganizationId").string(var_59.as_str());
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60.as_str());
    }
    if let Some(var_61) = &input.r#type {
        object.key("Type").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.organization_id {
        object.key("OrganizationId").string(var_62.as_str());
    }
    if let Some(var_63) = &input.name {
        object.key("Name").string(var_63.as_str());
    }
    if let Some(var_64) = &input.display_name {
        object.key("DisplayName").string(var_64.as_str());
    }
    if let Some(var_65) = &input.password {
        object.key("Password").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_access_control_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccessControlRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.organization_id {
        object.key("OrganizationId").string(var_66.as_str());
    }
    if let Some(var_67) = &input.name {
        object.key("Name").string(var_67.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.organization_id {
        object.key("OrganizationId").string(var_68.as_str());
    }
    if let Some(var_69) = &input.entity_id {
        object.key("EntityId").string(var_69.as_str());
    }
    if let Some(var_70) = &input.alias {
        object.key("Alias").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_availability_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAvailabilityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.organization_id {
        object.key("OrganizationId").string(var_71.as_str());
    }
    if let Some(var_72) = &input.domain_name {
        object.key("DomainName").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_email_monitoring_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEmailMonitoringConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.organization_id {
        object.key("OrganizationId").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.organization_id {
        object.key("OrganizationId").string(var_74.as_str());
    }
    if let Some(var_75) = &input.group_id {
        object.key("GroupId").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_mailbox_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMailboxPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.organization_id {
        object.key("OrganizationId").string(var_76.as_str());
    }
    if let Some(var_77) = &input.entity_id {
        object.key("EntityId").string(var_77.as_str());
    }
    if let Some(var_78) = &input.grantee_id {
        object.key("GranteeId").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_mobile_device_access_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMobileDeviceAccessOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.organization_id {
        object.key("OrganizationId").string(var_79.as_str());
    }
    if let Some(var_80) = &input.user_id {
        object.key("UserId").string(var_80.as_str());
    }
    if let Some(var_81) = &input.device_id {
        object.key("DeviceId").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_mobile_device_access_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMobileDeviceAccessRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.organization_id {
        object.key("OrganizationId").string(var_82.as_str());
    }
    if let Some(var_83) = &input.mobile_device_access_rule_id {
        object
            .key("MobileDeviceAccessRuleId")
            .string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_organization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOrganizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.client_token {
        object.key("ClientToken").string(var_84.as_str());
    }
    if let Some(var_85) = &input.organization_id {
        object.key("OrganizationId").string(var_85.as_str());
    }
    {
        object
            .key("DeleteDirectory")
            .boolean(input.delete_directory);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.organization_id {
        object.key("OrganizationId").string(var_86.as_str());
    }
    if let Some(var_87) = &input.resource_id {
        object.key("ResourceId").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_retention_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRetentionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.organization_id {
        object.key("OrganizationId").string(var_88.as_str());
    }
    if let Some(var_89) = &input.id {
        object.key("Id").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.organization_id {
        object.key("OrganizationId").string(var_90.as_str());
    }
    if let Some(var_91) = &input.user_id {
        object.key("UserId").string(var_91.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_from_work_mail_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterFromWorkMailInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.organization_id {
        object.key("OrganizationId").string(var_92.as_str());
    }
    if let Some(var_93) = &input.entity_id {
        object.key("EntityId").string(var_93.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.organization_id {
        object.key("OrganizationId").string(var_94.as_str());
    }
    if let Some(var_95) = &input.domain_name {
        object.key("DomainName").string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_email_monitoring_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEmailMonitoringConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.organization_id {
        object.key("OrganizationId").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.organization_id {
        object.key("OrganizationId").string(var_97.as_str());
    }
    if let Some(var_98) = &input.group_id {
        object.key("GroupId").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inbound_dmarc_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInboundDmarcSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.organization_id {
        object.key("OrganizationId").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_mailbox_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMailboxExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.job_id {
        object.key("JobId").string(var_100.as_str());
    }
    if let Some(var_101) = &input.organization_id {
        object.key("OrganizationId").string(var_101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_organization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.organization_id {
        object.key("OrganizationId").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.organization_id {
        object.key("OrganizationId").string(var_103.as_str());
    }
    if let Some(var_104) = &input.resource_id {
        object.key("ResourceId").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.organization_id {
        object.key("OrganizationId").string(var_105.as_str());
    }
    if let Some(var_106) = &input.user_id {
        object.key("UserId").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_delegate_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateDelegateFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.organization_id {
        object.key("OrganizationId").string(var_107.as_str());
    }
    if let Some(var_108) = &input.resource_id {
        object.key("ResourceId").string(var_108.as_str());
    }
    if let Some(var_109) = &input.entity_id {
        object.key("EntityId").string(var_109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_member_from_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMemberFromGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.organization_id {
        object.key("OrganizationId").string(var_110.as_str());
    }
    if let Some(var_111) = &input.group_id {
        object.key("GroupId").string(var_111.as_str());
    }
    if let Some(var_112) = &input.member_id {
        object.key("MemberId").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_access_control_effect_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAccessControlEffectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.organization_id {
        object.key("OrganizationId").string(var_113.as_str());
    }
    if let Some(var_114) = &input.ip_address {
        object.key("IpAddress").string(var_114.as_str());
    }
    if let Some(var_115) = &input.action {
        object.key("Action").string(var_115.as_str());
    }
    if let Some(var_116) = &input.user_id {
        object.key("UserId").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_default_retention_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDefaultRetentionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.organization_id {
        object.key("OrganizationId").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mailbox_details_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMailboxDetailsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.organization_id {
        object.key("OrganizationId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.user_id {
        object.key("UserId").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.organization_id {
        object.key("OrganizationId").string(var_120.as_str());
    }
    if let Some(var_121) = &input.domain_name {
        object.key("DomainName").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mobile_device_access_effect_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMobileDeviceAccessEffectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.organization_id {
        object.key("OrganizationId").string(var_122.as_str());
    }
    if let Some(var_123) = &input.device_type {
        object.key("DeviceType").string(var_123.as_str());
    }
    if let Some(var_124) = &input.device_model {
        object.key("DeviceModel").string(var_124.as_str());
    }
    if let Some(var_125) = &input.device_operating_system {
        object.key("DeviceOperatingSystem").string(var_125.as_str());
    }
    if let Some(var_126) = &input.device_user_agent {
        object.key("DeviceUserAgent").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mobile_device_access_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMobileDeviceAccessOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.organization_id {
        object.key("OrganizationId").string(var_127.as_str());
    }
    if let Some(var_128) = &input.user_id {
        object.key("UserId").string(var_128.as_str());
    }
    if let Some(var_129) = &input.device_id {
        object.key("DeviceId").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_access_control_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccessControlRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.organization_id {
        object.key("OrganizationId").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.organization_id {
        object.key("OrganizationId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.entity_id {
        object.key("EntityId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.next_token {
        object.key("NextToken").string(var_133.as_str());
    }
    if let Some(var_134) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_availability_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAvailabilityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.organization_id {
        object.key("OrganizationId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    if let Some(var_137) = &input.next_token {
        object.key("NextToken").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_group_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.organization_id {
        object.key("OrganizationId").string(var_138.as_str());
    }
    if let Some(var_139) = &input.group_id {
        object.key("GroupId").string(var_139.as_str());
    }
    if let Some(var_140) = &input.next_token {
        object.key("NextToken").string(var_140.as_str());
    }
    if let Some(var_141) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.organization_id {
        object.key("OrganizationId").string(var_142.as_str());
    }
    if let Some(var_143) = &input.next_token {
        object.key("NextToken").string(var_143.as_str());
    }
    if let Some(var_144) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mailbox_export_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMailboxExportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.organization_id {
        object.key("OrganizationId").string(var_145.as_str());
    }
    if let Some(var_146) = &input.next_token {
        object.key("NextToken").string(var_146.as_str());
    }
    if let Some(var_147) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mailbox_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMailboxPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.organization_id {
        object.key("OrganizationId").string(var_148.as_str());
    }
    if let Some(var_149) = &input.entity_id {
        object.key("EntityId").string(var_149.as_str());
    }
    if let Some(var_150) = &input.next_token {
        object.key("NextToken").string(var_150.as_str());
    }
    if let Some(var_151) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_151).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mail_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMailDomainsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.organization_id {
        object.key("OrganizationId").string(var_152.as_str());
    }
    if let Some(var_153) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_153).into()),
        );
    }
    if let Some(var_154) = &input.next_token {
        object.key("NextToken").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mobile_device_access_overrides_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMobileDeviceAccessOverridesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.organization_id {
        object.key("OrganizationId").string(var_155.as_str());
    }
    if let Some(var_156) = &input.user_id {
        object.key("UserId").string(var_156.as_str());
    }
    if let Some(var_157) = &input.device_id {
        object.key("DeviceId").string(var_157.as_str());
    }
    if let Some(var_158) = &input.next_token {
        object.key("NextToken").string(var_158.as_str());
    }
    if let Some(var_159) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mobile_device_access_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMobileDeviceAccessRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.organization_id {
        object.key("OrganizationId").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_organizations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOrganizationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161.as_str());
    }
    if let Some(var_162) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_162).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_delegates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceDelegatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.organization_id {
        object.key("OrganizationId").string(var_163.as_str());
    }
    if let Some(var_164) = &input.resource_id {
        object.key("ResourceId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.next_token {
        object.key("NextToken").string(var_165.as_str());
    }
    if let Some(var_166) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.organization_id {
        object.key("OrganizationId").string(var_167.as_str());
    }
    if let Some(var_168) = &input.next_token {
        object.key("NextToken").string(var_168.as_str());
    }
    if let Some(var_169) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_169).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.resource_arn {
        object.key("ResourceARN").string(var_170.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.organization_id {
        object.key("OrganizationId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.next_token {
        object.key("NextToken").string(var_172.as_str());
    }
    if let Some(var_173) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_control_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccessControlRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.name {
        object.key("Name").string(var_174.as_str());
    }
    if let Some(var_175) = &input.effect {
        object.key("Effect").string(var_175.as_str());
    }
    if let Some(var_176) = &input.description {
        object.key("Description").string(var_176.as_str());
    }
    if let Some(var_177) = &input.ip_ranges {
        let mut array_178 = object.key("IpRanges").start_array();
        for item_179 in var_177 {
            {
                array_178.value().string(item_179.as_str());
            }
        }
        array_178.finish();
    }
    if let Some(var_180) = &input.not_ip_ranges {
        let mut array_181 = object.key("NotIpRanges").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182.as_str());
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.actions {
        let mut array_184 = object.key("Actions").start_array();
        for item_185 in var_183 {
            {
                array_184.value().string(item_185.as_str());
            }
        }
        array_184.finish();
    }
    if let Some(var_186) = &input.not_actions {
        let mut array_187 = object.key("NotActions").start_array();
        for item_188 in var_186 {
            {
                array_187.value().string(item_188.as_str());
            }
        }
        array_187.finish();
    }
    if let Some(var_189) = &input.user_ids {
        let mut array_190 = object.key("UserIds").start_array();
        for item_191 in var_189 {
            {
                array_190.value().string(item_191.as_str());
            }
        }
        array_190.finish();
    }
    if let Some(var_192) = &input.not_user_ids {
        let mut array_193 = object.key("NotUserIds").start_array();
        for item_194 in var_192 {
            {
                array_193.value().string(item_194.as_str());
            }
        }
        array_193.finish();
    }
    if let Some(var_195) = &input.organization_id {
        object.key("OrganizationId").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_email_monitoring_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEmailMonitoringConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.organization_id {
        object.key("OrganizationId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.role_arn {
        object.key("RoleArn").string(var_197.as_str());
    }
    if let Some(var_198) = &input.log_group_arn {
        object.key("LogGroupArn").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_inbound_dmarc_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInboundDmarcSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.organization_id {
        object.key("OrganizationId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.enforced {
        object.key("Enforced").boolean(*var_200);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_mailbox_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutMailboxPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.organization_id {
        object.key("OrganizationId").string(var_201.as_str());
    }
    if let Some(var_202) = &input.entity_id {
        object.key("EntityId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.grantee_id {
        object.key("GranteeId").string(var_203.as_str());
    }
    if let Some(var_204) = &input.permission_values {
        let mut array_205 = object.key("PermissionValues").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206.as_str());
            }
        }
        array_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_mobile_device_access_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutMobileDeviceAccessOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.organization_id {
        object.key("OrganizationId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.user_id {
        object.key("UserId").string(var_208.as_str());
    }
    if let Some(var_209) = &input.device_id {
        object.key("DeviceId").string(var_209.as_str());
    }
    if let Some(var_210) = &input.effect {
        object.key("Effect").string(var_210.as_str());
    }
    if let Some(var_211) = &input.description {
        object.key("Description").string(var_211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_retention_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRetentionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.organization_id {
        object.key("OrganizationId").string(var_212.as_str());
    }
    if let Some(var_213) = &input.id {
        object.key("Id").string(var_213.as_str());
    }
    if let Some(var_214) = &input.name {
        object.key("Name").string(var_214.as_str());
    }
    if let Some(var_215) = &input.description {
        object.key("Description").string(var_215.as_str());
    }
    if let Some(var_216) = &input.folder_configurations {
        let mut array_217 = object.key("FolderConfigurations").start_array();
        for item_218 in var_216 {
            {
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_crate_model_folder_configuration(
                    &mut object_219,
                    item_218,
                )?;
                object_219.finish();
            }
        }
        array_217.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.client_token {
        object.key("ClientToken").string(var_220.as_str());
    }
    if let Some(var_221) = &input.organization_id {
        object.key("OrganizationId").string(var_221.as_str());
    }
    if let Some(var_222) = &input.domain_name {
        object.key("DomainName").string(var_222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_to_work_mail_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterToWorkMailInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.organization_id {
        object.key("OrganizationId").string(var_223.as_str());
    }
    if let Some(var_224) = &input.entity_id {
        object.key("EntityId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.email {
        object.key("Email").string(var_225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetPasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.organization_id {
        object.key("OrganizationId").string(var_226.as_str());
    }
    if let Some(var_227) = &input.user_id {
        object.key("UserId").string(var_227.as_str());
    }
    if let Some(var_228) = &input.password {
        object.key("Password").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_mailbox_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMailboxExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.client_token {
        object.key("ClientToken").string(var_229.as_str());
    }
    if let Some(var_230) = &input.organization_id {
        object.key("OrganizationId").string(var_230.as_str());
    }
    if let Some(var_231) = &input.entity_id {
        object.key("EntityId").string(var_231.as_str());
    }
    if let Some(var_232) = &input.description {
        object.key("Description").string(var_232.as_str());
    }
    if let Some(var_233) = &input.role_arn {
        object.key("RoleArn").string(var_233.as_str());
    }
    if let Some(var_234) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_234.as_str());
    }
    if let Some(var_235) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_235.as_str());
    }
    if let Some(var_236) = &input.s3_prefix {
        object.key("S3Prefix").string(var_236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.resource_arn {
        object.key("ResourceARN").string(var_237.as_str());
    }
    if let Some(var_238) = &input.tags {
        let mut array_239 = object.key("Tags").start_array();
        for item_240 in var_238 {
            {
                let mut object_241 = array_239.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_241, item_240)?;
                object_241.finish();
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_availability_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestAvailabilityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.organization_id {
        object.key("OrganizationId").string(var_242.as_str());
    }
    if let Some(var_243) = &input.domain_name {
        object.key("DomainName").string(var_243.as_str());
    }
    if let Some(var_244) = &input.ews_provider {
        let mut object_245 = object.key("EwsProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_ews_availability_provider(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    if let Some(var_246) = &input.lambda_provider {
        let mut object_247 = object.key("LambdaProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_availability_provider(
            &mut object_247,
            var_246,
        )?;
        object_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.resource_arn {
        object.key("ResourceARN").string(var_248.as_str());
    }
    if let Some(var_249) = &input.tag_keys {
        let mut array_250 = object.key("TagKeys").start_array();
        for item_251 in var_249 {
            {
                array_250.value().string(item_251.as_str());
            }
        }
        array_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_availability_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAvailabilityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.organization_id {
        object.key("OrganizationId").string(var_252.as_str());
    }
    if let Some(var_253) = &input.domain_name {
        object.key("DomainName").string(var_253.as_str());
    }
    if let Some(var_254) = &input.ews_provider {
        let mut object_255 = object.key("EwsProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_ews_availability_provider(
            &mut object_255,
            var_254,
        )?;
        object_255.finish();
    }
    if let Some(var_256) = &input.lambda_provider {
        let mut object_257 = object.key("LambdaProvider").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_availability_provider(
            &mut object_257,
            var_256,
        )?;
        object_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_default_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDefaultMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.organization_id {
        object.key("OrganizationId").string(var_258.as_str());
    }
    if let Some(var_259) = &input.domain_name {
        object.key("DomainName").string(var_259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_mailbox_quota_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMailboxQuotaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.organization_id {
        object.key("OrganizationId").string(var_260.as_str());
    }
    if let Some(var_261) = &input.user_id {
        object.key("UserId").string(var_261.as_str());
    }
    if let Some(var_262) = &input.mailbox_quota {
        object.key("MailboxQuota").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_mobile_device_access_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMobileDeviceAccessRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.organization_id {
        object.key("OrganizationId").string(var_263.as_str());
    }
    if let Some(var_264) = &input.mobile_device_access_rule_id {
        object
            .key("MobileDeviceAccessRuleId")
            .string(var_264.as_str());
    }
    if let Some(var_265) = &input.name {
        object.key("Name").string(var_265.as_str());
    }
    if let Some(var_266) = &input.description {
        object.key("Description").string(var_266.as_str());
    }
    if let Some(var_267) = &input.effect {
        object.key("Effect").string(var_267.as_str());
    }
    if let Some(var_268) = &input.device_types {
        let mut array_269 = object.key("DeviceTypes").start_array();
        for item_270 in var_268 {
            {
                array_269.value().string(item_270.as_str());
            }
        }
        array_269.finish();
    }
    if let Some(var_271) = &input.not_device_types {
        let mut array_272 = object.key("NotDeviceTypes").start_array();
        for item_273 in var_271 {
            {
                array_272.value().string(item_273.as_str());
            }
        }
        array_272.finish();
    }
    if let Some(var_274) = &input.device_models {
        let mut array_275 = object.key("DeviceModels").start_array();
        for item_276 in var_274 {
            {
                array_275.value().string(item_276.as_str());
            }
        }
        array_275.finish();
    }
    if let Some(var_277) = &input.not_device_models {
        let mut array_278 = object.key("NotDeviceModels").start_array();
        for item_279 in var_277 {
            {
                array_278.value().string(item_279.as_str());
            }
        }
        array_278.finish();
    }
    if let Some(var_280) = &input.device_operating_systems {
        let mut array_281 = object.key("DeviceOperatingSystems").start_array();
        for item_282 in var_280 {
            {
                array_281.value().string(item_282.as_str());
            }
        }
        array_281.finish();
    }
    if let Some(var_283) = &input.not_device_operating_systems {
        let mut array_284 = object.key("NotDeviceOperatingSystems").start_array();
        for item_285 in var_283 {
            {
                array_284.value().string(item_285.as_str());
            }
        }
        array_284.finish();
    }
    if let Some(var_286) = &input.device_user_agents {
        let mut array_287 = object.key("DeviceUserAgents").start_array();
        for item_288 in var_286 {
            {
                array_287.value().string(item_288.as_str());
            }
        }
        array_287.finish();
    }
    if let Some(var_289) = &input.not_device_user_agents {
        let mut array_290 = object.key("NotDeviceUserAgents").start_array();
        for item_291 in var_289 {
            {
                array_290.value().string(item_291.as_str());
            }
        }
        array_290.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_primary_email_address_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePrimaryEmailAddressInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.organization_id {
        object.key("OrganizationId").string(var_292.as_str());
    }
    if let Some(var_293) = &input.entity_id {
        object.key("EntityId").string(var_293.as_str());
    }
    if let Some(var_294) = &input.email {
        object.key("Email").string(var_294.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.organization_id {
        object.key("OrganizationId").string(var_295.as_str());
    }
    if let Some(var_296) = &input.resource_id {
        object.key("ResourceId").string(var_296.as_str());
    }
    if let Some(var_297) = &input.name {
        object.key("Name").string(var_297.as_str());
    }
    if let Some(var_298) = &input.booking_options {
        let mut object_299 = object.key("BookingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_booking_options(&mut object_299, var_298)?;
        object_299.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ews_availability_provider(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EwsAvailabilityProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_300) = &input.ews_endpoint {
        object.key("EwsEndpoint").string(var_300.as_str());
    }
    if let Some(var_301) = &input.ews_username {
        object.key("EwsUsername").string(var_301.as_str());
    }
    if let Some(var_302) = &input.ews_password {
        object.key("EwsPassword").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_availability_provider(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaAvailabilityProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.lambda_arn {
        object.key("LambdaArn").string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Domain,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.domain_name {
        object.key("DomainName").string(var_304.as_str());
    }
    if let Some(var_305) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_folder_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FolderConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.name {
        object.key("Name").string(var_306.as_str());
    }
    if let Some(var_307) = &input.action {
        object.key("Action").string(var_307.as_str());
    }
    if let Some(var_308) = &input.period {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_308).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.key {
        object.key("Key").string(var_309.as_str());
    }
    if let Some(var_310) = &input.value {
        object.key("Value").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_booking_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BookingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_accept_requests {
        object
            .key("AutoAcceptRequests")
            .boolean(input.auto_accept_requests);
    }
    if input.auto_decline_recurring_requests {
        object
            .key("AutoDeclineRecurringRequests")
            .boolean(input.auto_decline_recurring_requests);
    }
    if input.auto_decline_conflicting_requests {
        object
            .key("AutoDeclineConflictingRequests")
            .boolean(input.auto_decline_conflicting_requests);
    }
    Ok(())
}
