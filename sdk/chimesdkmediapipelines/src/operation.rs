// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateMediaCapturePipeline`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_media_capture_pipeline`](crate::client::Client::create_media_capture_pipeline).
///
/// See [`crate::client::fluent_builders::CreateMediaCapturePipeline`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMediaCapturePipeline {
    _private: (),
}
impl CreateMediaCapturePipeline {
    /// Creates a new builder-style object to manufacture [`CreateMediaCapturePipelineInput`](crate::input::CreateMediaCapturePipelineInput).
    pub fn builder() -> crate::input::create_media_capture_pipeline_input::Builder {
        crate::input::create_media_capture_pipeline_input::Builder::default()
    }
    /// Creates a new `CreateMediaCapturePipeline` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateMediaCapturePipeline {
    type Output = std::result::Result<
        crate::output::CreateMediaCapturePipelineOutput,
        crate::error::CreateMediaCapturePipelineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_media_capture_pipeline_error(response)
        } else {
            crate::operation_deser::parse_create_media_capture_pipeline_response(response)
        }
    }
}

/// Operation shape for `DeleteMediaCapturePipeline`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_media_capture_pipeline`](crate::client::Client::delete_media_capture_pipeline).
///
/// See [`crate::client::fluent_builders::DeleteMediaCapturePipeline`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMediaCapturePipeline {
    _private: (),
}
impl DeleteMediaCapturePipeline {
    /// Creates a new builder-style object to manufacture [`DeleteMediaCapturePipelineInput`](crate::input::DeleteMediaCapturePipelineInput).
    pub fn builder() -> crate::input::delete_media_capture_pipeline_input::Builder {
        crate::input::delete_media_capture_pipeline_input::Builder::default()
    }
    /// Creates a new `DeleteMediaCapturePipeline` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteMediaCapturePipeline {
    type Output = std::result::Result<
        crate::output::DeleteMediaCapturePipelineOutput,
        crate::error::DeleteMediaCapturePipelineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_media_capture_pipeline_error(response)
        } else {
            crate::operation_deser::parse_delete_media_capture_pipeline_response(response)
        }
    }
}

/// Operation shape for `GetMediaCapturePipeline`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_media_capture_pipeline`](crate::client::Client::get_media_capture_pipeline).
///
/// See [`crate::client::fluent_builders::GetMediaCapturePipeline`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMediaCapturePipeline {
    _private: (),
}
impl GetMediaCapturePipeline {
    /// Creates a new builder-style object to manufacture [`GetMediaCapturePipelineInput`](crate::input::GetMediaCapturePipelineInput).
    pub fn builder() -> crate::input::get_media_capture_pipeline_input::Builder {
        crate::input::get_media_capture_pipeline_input::Builder::default()
    }
    /// Creates a new `GetMediaCapturePipeline` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMediaCapturePipeline {
    type Output = std::result::Result<
        crate::output::GetMediaCapturePipelineOutput,
        crate::error::GetMediaCapturePipelineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_media_capture_pipeline_error(response)
        } else {
            crate::operation_deser::parse_get_media_capture_pipeline_response(response)
        }
    }
}

/// Operation shape for `ListMediaCapturePipelines`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_media_capture_pipelines`](crate::client::Client::list_media_capture_pipelines).
///
/// See [`crate::client::fluent_builders::ListMediaCapturePipelines`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMediaCapturePipelines {
    _private: (),
}
impl ListMediaCapturePipelines {
    /// Creates a new builder-style object to manufacture [`ListMediaCapturePipelinesInput`](crate::input::ListMediaCapturePipelinesInput).
    pub fn builder() -> crate::input::list_media_capture_pipelines_input::Builder {
        crate::input::list_media_capture_pipelines_input::Builder::default()
    }
    /// Creates a new `ListMediaCapturePipelines` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListMediaCapturePipelines {
    type Output = std::result::Result<
        crate::output::ListMediaCapturePipelinesOutput,
        crate::error::ListMediaCapturePipelinesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_media_capture_pipelines_error(response)
        } else {
            crate::operation_deser::parse_list_media_capture_pipelines_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::Client::list_tags_for_resource).
///
/// See [`crate::client::fluent_builders::ListTagsForResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::Client::tag_resource).
///
/// See [`crate::client::fluent_builders::TagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::Client::untag_resource).
///
/// See [`crate::client::fluent_builders::UntagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}
