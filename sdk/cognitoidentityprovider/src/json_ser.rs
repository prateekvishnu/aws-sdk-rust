// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_custom_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddCustomAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.user_pool_id {
        object.key("UserPoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.custom_attributes {
        let mut array_3 = object.key("CustomAttributes").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_attribute_type(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_add_user_to_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminAddUserToGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.user_pool_id {
        object.key("UserPoolId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.username {
        object.key("Username").string(var_7.as_str());
    }
    if let Some(var_8) = &input.group_name {
        object.key("GroupName").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_confirm_sign_up_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminConfirmSignUpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.user_pool_id {
        object.key("UserPoolId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.username {
        object.key("Username").string(var_10.as_str());
    }
    if let Some(var_11) = &input.client_metadata {
        let mut object_12 = object.key("ClientMetadata").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminCreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.user_pool_id {
        object.key("UserPoolId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.username {
        object.key("Username").string(var_16.as_str());
    }
    if let Some(var_17) = &input.user_attributes {
        let mut array_18 = object.key("UserAttributes").start_array();
        for item_19 in var_17 {
            {
                let mut object_20 = array_18.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(
                    &mut object_20,
                    item_19,
                )?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.validation_data {
        let mut array_22 = object.key("ValidationData").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(
                    &mut object_24,
                    item_23,
                )?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.temporary_password {
        object.key("TemporaryPassword").string(var_25.as_str());
    }
    if input.force_alias_creation {
        object
            .key("ForceAliasCreation")
            .boolean(input.force_alias_creation);
    }
    if let Some(var_26) = &input.message_action {
        object.key("MessageAction").string(var_26.as_str());
    }
    if let Some(var_27) = &input.desired_delivery_mediums {
        let mut array_28 = object.key("DesiredDeliveryMediums").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.client_metadata {
        let mut object_31 = object.key("ClientMetadata").start_object();
        for (key_32, value_33) in var_30 {
            {
                object_31.key(key_32).string(value_33.as_str());
            }
        }
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminDeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.user_pool_id {
        object.key("UserPoolId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.username {
        object.key("Username").string(var_35.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_delete_user_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminDeleteUserAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.user_pool_id {
        object.key("UserPoolId").string(var_36.as_str());
    }
    if let Some(var_37) = &input.username {
        object.key("Username").string(var_37.as_str());
    }
    if let Some(var_38) = &input.user_attribute_names {
        let mut array_39 = object.key("UserAttributeNames").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_disable_provider_for_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminDisableProviderForUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.user_pool_id {
        object.key("UserPoolId").string(var_41.as_str());
    }
    if let Some(var_42) = &input.user {
        let mut object_43 = object.key("User").start_object();
        crate::json_ser::serialize_structure_crate_model_provider_user_identifier_type(
            &mut object_43,
            var_42,
        )?;
        object_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_disable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminDisableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.user_pool_id {
        object.key("UserPoolId").string(var_44.as_str());
    }
    if let Some(var_45) = &input.username {
        object.key("Username").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_enable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminEnableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.user_pool_id {
        object.key("UserPoolId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.username {
        object.key("Username").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_forget_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminForgetDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.user_pool_id {
        object.key("UserPoolId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.username {
        object.key("Username").string(var_49.as_str());
    }
    if let Some(var_50) = &input.device_key {
        object.key("DeviceKey").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_get_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminGetDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.device_key {
        object.key("DeviceKey").string(var_51.as_str());
    }
    if let Some(var_52) = &input.user_pool_id {
        object.key("UserPoolId").string(var_52.as_str());
    }
    if let Some(var_53) = &input.username {
        object.key("Username").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_get_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminGetUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.user_pool_id {
        object.key("UserPoolId").string(var_54.as_str());
    }
    if let Some(var_55) = &input.username {
        object.key("Username").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_initiate_auth_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminInitiateAuthInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.user_pool_id {
        object.key("UserPoolId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.client_id {
        object.key("ClientId").string(var_57.as_str());
    }
    if let Some(var_58) = &input.auth_flow {
        object.key("AuthFlow").string(var_58.as_str());
    }
    if let Some(var_59) = &input.auth_parameters {
        let mut object_60 = object.key("AuthParameters").start_object();
        for (key_61, value_62) in var_59 {
            {
                object_60.key(key_61).string(value_62.as_str());
            }
        }
        object_60.finish();
    }
    if let Some(var_63) = &input.client_metadata {
        let mut object_64 = object.key("ClientMetadata").start_object();
        for (key_65, value_66) in var_63 {
            {
                object_64.key(key_65).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.analytics_metadata {
        let mut object_68 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_68,
            var_67,
        )?;
        object_68.finish();
    }
    if let Some(var_69) = &input.context_data {
        let mut object_70 = object.key("ContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_context_data_type(&mut object_70, var_69)?;
        object_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_link_provider_for_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminLinkProviderForUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.user_pool_id {
        object.key("UserPoolId").string(var_71.as_str());
    }
    if let Some(var_72) = &input.destination_user {
        let mut object_73 = object.key("DestinationUser").start_object();
        crate::json_ser::serialize_structure_crate_model_provider_user_identifier_type(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.source_user {
        let mut object_75 = object.key("SourceUser").start_object();
        crate::json_ser::serialize_structure_crate_model_provider_user_identifier_type(
            &mut object_75,
            var_74,
        )?;
        object_75.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_list_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminListDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.user_pool_id {
        object.key("UserPoolId").string(var_76.as_str());
    }
    if let Some(var_77) = &input.username {
        object.key("Username").string(var_77.as_str());
    }
    if let Some(var_78) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_78).into()),
        );
    }
    if let Some(var_79) = &input.pagination_token {
        object.key("PaginationToken").string(var_79.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_list_groups_for_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminListGroupsForUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.username {
        object.key("Username").string(var_80.as_str());
    }
    if let Some(var_81) = &input.user_pool_id {
        object.key("UserPoolId").string(var_81.as_str());
    }
    if let Some(var_82) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_82).into()),
        );
    }
    if let Some(var_83) = &input.next_token {
        object.key("NextToken").string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_list_user_auth_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminListUserAuthEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.user_pool_id {
        object.key("UserPoolId").string(var_84.as_str());
    }
    if let Some(var_85) = &input.username {
        object.key("Username").string(var_85.as_str());
    }
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    if let Some(var_87) = &input.next_token {
        object.key("NextToken").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_remove_user_from_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminRemoveUserFromGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.user_pool_id {
        object.key("UserPoolId").string(var_88.as_str());
    }
    if let Some(var_89) = &input.username {
        object.key("Username").string(var_89.as_str());
    }
    if let Some(var_90) = &input.group_name {
        object.key("GroupName").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_reset_user_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminResetUserPasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.user_pool_id {
        object.key("UserPoolId").string(var_91.as_str());
    }
    if let Some(var_92) = &input.username {
        object.key("Username").string(var_92.as_str());
    }
    if let Some(var_93) = &input.client_metadata {
        let mut object_94 = object.key("ClientMetadata").start_object();
        for (key_95, value_96) in var_93 {
            {
                object_94.key(key_95).string(value_96.as_str());
            }
        }
        object_94.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_respond_to_auth_challenge_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminRespondToAuthChallengeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.user_pool_id {
        object.key("UserPoolId").string(var_97.as_str());
    }
    if let Some(var_98) = &input.client_id {
        object.key("ClientId").string(var_98.as_str());
    }
    if let Some(var_99) = &input.challenge_name {
        object.key("ChallengeName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.challenge_responses {
        let mut object_101 = object.key("ChallengeResponses").start_object();
        for (key_102, value_103) in var_100 {
            {
                object_101.key(key_102).string(value_103.as_str());
            }
        }
        object_101.finish();
    }
    if let Some(var_104) = &input.session {
        object.key("Session").string(var_104.as_str());
    }
    if let Some(var_105) = &input.analytics_metadata {
        let mut object_106 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_106,
            var_105,
        )?;
        object_106.finish();
    }
    if let Some(var_107) = &input.context_data {
        let mut object_108 = object.key("ContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_context_data_type(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    if let Some(var_109) = &input.client_metadata {
        let mut object_110 = object.key("ClientMetadata").start_object();
        for (key_111, value_112) in var_109 {
            {
                object_110.key(key_111).string(value_112.as_str());
            }
        }
        object_110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_set_user_mfa_preference_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminSetUserMfaPreferenceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.sms_mfa_settings {
        let mut object_114 = object.key("SMSMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_mfa_settings_type(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.software_token_mfa_settings {
        let mut object_116 = object.key("SoftwareTokenMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_software_token_mfa_settings_type(
            &mut object_116,
            var_115,
        )?;
        object_116.finish();
    }
    if let Some(var_117) = &input.username {
        object.key("Username").string(var_117.as_str());
    }
    if let Some(var_118) = &input.user_pool_id {
        object.key("UserPoolId").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_set_user_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminSetUserPasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.user_pool_id {
        object.key("UserPoolId").string(var_119.as_str());
    }
    if let Some(var_120) = &input.username {
        object.key("Username").string(var_120.as_str());
    }
    if let Some(var_121) = &input.password {
        object.key("Password").string(var_121.as_str());
    }
    if input.permanent {
        object.key("Permanent").boolean(input.permanent);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_set_user_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminSetUserSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.user_pool_id {
        object.key("UserPoolId").string(var_122.as_str());
    }
    if let Some(var_123) = &input.username {
        object.key("Username").string(var_123.as_str());
    }
    if let Some(var_124) = &input.mfa_options {
        let mut array_125 = object.key("MFAOptions").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mfa_option_type(
                    &mut object_127,
                    item_126,
                )?;
                object_127.finish();
            }
        }
        array_125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_update_auth_event_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminUpdateAuthEventFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.user_pool_id {
        object.key("UserPoolId").string(var_128.as_str());
    }
    if let Some(var_129) = &input.username {
        object.key("Username").string(var_129.as_str());
    }
    if let Some(var_130) = &input.event_id {
        object.key("EventId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.feedback_value {
        object.key("FeedbackValue").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_update_device_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminUpdateDeviceStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.user_pool_id {
        object.key("UserPoolId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.username {
        object.key("Username").string(var_133.as_str());
    }
    if let Some(var_134) = &input.device_key {
        object.key("DeviceKey").string(var_134.as_str());
    }
    if let Some(var_135) = &input.device_remembered_status {
        object
            .key("DeviceRememberedStatus")
            .string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_update_user_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminUpdateUserAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.user_pool_id {
        object.key("UserPoolId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.username {
        object.key("Username").string(var_137.as_str());
    }
    if let Some(var_138) = &input.user_attributes {
        let mut array_139 = object.key("UserAttributes").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(
                    &mut object_141,
                    item_140,
                )?;
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.client_metadata {
        let mut object_143 = object.key("ClientMetadata").start_object();
        for (key_144, value_145) in var_142 {
            {
                object_143.key(key_144).string(value_145.as_str());
            }
        }
        object_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_user_global_sign_out_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AdminUserGlobalSignOutInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.user_pool_id {
        object.key("UserPoolId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.username {
        object.key("Username").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_software_token_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSoftwareTokenInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.access_token {
        object.key("AccessToken").string(var_148.as_str());
    }
    if let Some(var_149) = &input.session {
        object.key("Session").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_change_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ChangePasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.previous_password {
        object.key("PreviousPassword").string(var_150.as_str());
    }
    if let Some(var_151) = &input.proposed_password {
        object.key("ProposedPassword").string(var_151.as_str());
    }
    if let Some(var_152) = &input.access_token {
        object.key("AccessToken").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_confirm_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConfirmDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.access_token {
        object.key("AccessToken").string(var_153.as_str());
    }
    if let Some(var_154) = &input.device_key {
        object.key("DeviceKey").string(var_154.as_str());
    }
    if let Some(var_155) = &input.device_secret_verifier_config {
        let mut object_156 = object.key("DeviceSecretVerifierConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_device_secret_verifier_config_type(
            &mut object_156,
            var_155,
        )?;
        object_156.finish();
    }
    if let Some(var_157) = &input.device_name {
        object.key("DeviceName").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_confirm_forgot_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConfirmForgotPasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.client_id {
        object.key("ClientId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.secret_hash {
        object.key("SecretHash").string(var_159.as_str());
    }
    if let Some(var_160) = &input.username {
        object.key("Username").string(var_160.as_str());
    }
    if let Some(var_161) = &input.confirmation_code {
        object.key("ConfirmationCode").string(var_161.as_str());
    }
    if let Some(var_162) = &input.password {
        object.key("Password").string(var_162.as_str());
    }
    if let Some(var_163) = &input.analytics_metadata {
        let mut object_164 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_164,
            var_163,
        )?;
        object_164.finish();
    }
    if let Some(var_165) = &input.user_context_data {
        let mut object_166 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(
            &mut object_166,
            var_165,
        )?;
        object_166.finish();
    }
    if let Some(var_167) = &input.client_metadata {
        let mut object_168 = object.key("ClientMetadata").start_object();
        for (key_169, value_170) in var_167 {
            {
                object_168.key(key_169).string(value_170.as_str());
            }
        }
        object_168.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_confirm_sign_up_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConfirmSignUpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.client_id {
        object.key("ClientId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.secret_hash {
        object.key("SecretHash").string(var_172.as_str());
    }
    if let Some(var_173) = &input.username {
        object.key("Username").string(var_173.as_str());
    }
    if let Some(var_174) = &input.confirmation_code {
        object.key("ConfirmationCode").string(var_174.as_str());
    }
    if input.force_alias_creation {
        object
            .key("ForceAliasCreation")
            .boolean(input.force_alias_creation);
    }
    if let Some(var_175) = &input.analytics_metadata {
        let mut object_176 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_176,
            var_175,
        )?;
        object_176.finish();
    }
    if let Some(var_177) = &input.user_context_data {
        let mut object_178 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(
            &mut object_178,
            var_177,
        )?;
        object_178.finish();
    }
    if let Some(var_179) = &input.client_metadata {
        let mut object_180 = object.key("ClientMetadata").start_object();
        for (key_181, value_182) in var_179 {
            {
                object_180.key(key_181).string(value_182.as_str());
            }
        }
        object_180.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.group_name {
        object.key("GroupName").string(var_183.as_str());
    }
    if let Some(var_184) = &input.user_pool_id {
        object.key("UserPoolId").string(var_184.as_str());
    }
    if let Some(var_185) = &input.description {
        object.key("Description").string(var_185.as_str());
    }
    if let Some(var_186) = &input.role_arn {
        object.key("RoleArn").string(var_186.as_str());
    }
    if let Some(var_187) = &input.precedence {
        object.key("Precedence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.user_pool_id {
        object.key("UserPoolId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.provider_name {
        object.key("ProviderName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.provider_type {
        object.key("ProviderType").string(var_190.as_str());
    }
    if let Some(var_191) = &input.provider_details {
        let mut object_192 = object.key("ProviderDetails").start_object();
        for (key_193, value_194) in var_191 {
            {
                object_192.key(key_193).string(value_194.as_str());
            }
        }
        object_192.finish();
    }
    if let Some(var_195) = &input.attribute_mapping {
        let mut object_196 = object.key("AttributeMapping").start_object();
        for (key_197, value_198) in var_195 {
            {
                object_196.key(key_197).string(value_198.as_str());
            }
        }
        object_196.finish();
    }
    if let Some(var_199) = &input.idp_identifiers {
        let mut array_200 = object.key("IdpIdentifiers").start_array();
        for item_201 in var_199 {
            {
                array_200.value().string(item_201.as_str());
            }
        }
        array_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.user_pool_id {
        object.key("UserPoolId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.identifier {
        object.key("Identifier").string(var_203.as_str());
    }
    if let Some(var_204) = &input.name {
        object.key("Name").string(var_204.as_str());
    }
    if let Some(var_205) = &input.scopes {
        let mut array_206 = object.key("Scopes").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_server_scope_type(
                    &mut object_208,
                    item_207,
                )?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.job_name {
        object.key("JobName").string(var_209.as_str());
    }
    if let Some(var_210) = &input.user_pool_id {
        object.key("UserPoolId").string(var_210.as_str());
    }
    if let Some(var_211) = &input.cloud_watch_logs_role_arn {
        object.key("CloudWatchLogsRoleArn").string(var_211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserPoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.pool_name {
        object.key("PoolName").string(var_212.as_str());
    }
    if let Some(var_213) = &input.policies {
        let mut object_214 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_policy_type(
            &mut object_214,
            var_213,
        )?;
        object_214.finish();
    }
    if let Some(var_215) = &input.lambda_config {
        let mut object_216 = object.key("LambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_config_type(
            &mut object_216,
            var_215,
        )?;
        object_216.finish();
    }
    if let Some(var_217) = &input.auto_verified_attributes {
        let mut array_218 = object.key("AutoVerifiedAttributes").start_array();
        for item_219 in var_217 {
            {
                array_218.value().string(item_219.as_str());
            }
        }
        array_218.finish();
    }
    if let Some(var_220) = &input.alias_attributes {
        let mut array_221 = object.key("AliasAttributes").start_array();
        for item_222 in var_220 {
            {
                array_221.value().string(item_222.as_str());
            }
        }
        array_221.finish();
    }
    if let Some(var_223) = &input.username_attributes {
        let mut array_224 = object.key("UsernameAttributes").start_array();
        for item_225 in var_223 {
            {
                array_224.value().string(item_225.as_str());
            }
        }
        array_224.finish();
    }
    if let Some(var_226) = &input.sms_verification_message {
        object
            .key("SmsVerificationMessage")
            .string(var_226.as_str());
    }
    if let Some(var_227) = &input.email_verification_message {
        object
            .key("EmailVerificationMessage")
            .string(var_227.as_str());
    }
    if let Some(var_228) = &input.email_verification_subject {
        object
            .key("EmailVerificationSubject")
            .string(var_228.as_str());
    }
    if let Some(var_229) = &input.verification_message_template {
        let mut object_230 = object.key("VerificationMessageTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_verification_message_template_type(
            &mut object_230,
            var_229,
        )?;
        object_230.finish();
    }
    if let Some(var_231) = &input.sms_authentication_message {
        object
            .key("SmsAuthenticationMessage")
            .string(var_231.as_str());
    }
    if let Some(var_232) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_232.as_str());
    }
    if let Some(var_233) = &input.user_attribute_update_settings {
        let mut object_234 = object.key("UserAttributeUpdateSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_attribute_update_settings_type(
            &mut object_234,
            var_233,
        )?;
        object_234.finish();
    }
    if let Some(var_235) = &input.device_configuration {
        let mut object_236 = object.key("DeviceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_device_configuration_type(
            &mut object_236,
            var_235,
        )?;
        object_236.finish();
    }
    if let Some(var_237) = &input.email_configuration {
        let mut object_238 = object.key("EmailConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_email_configuration_type(
            &mut object_238,
            var_237,
        )?;
        object_238.finish();
    }
    if let Some(var_239) = &input.sms_configuration {
        let mut object_240 = object.key("SmsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_configuration_type(
            &mut object_240,
            var_239,
        )?;
        object_240.finish();
    }
    if let Some(var_241) = &input.user_pool_tags {
        let mut object_242 = object.key("UserPoolTags").start_object();
        for (key_243, value_244) in var_241 {
            {
                object_242.key(key_243).string(value_244.as_str());
            }
        }
        object_242.finish();
    }
    if let Some(var_245) = &input.admin_create_user_config {
        let mut object_246 = object.key("AdminCreateUserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_admin_create_user_config_type(
            &mut object_246,
            var_245,
        )?;
        object_246.finish();
    }
    if let Some(var_247) = &input.schema {
        let mut array_248 = object.key("Schema").start_array();
        for item_249 in var_247 {
            {
                let mut object_250 = array_248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_attribute_type(
                    &mut object_250,
                    item_249,
                )?;
                object_250.finish();
            }
        }
        array_248.finish();
    }
    if let Some(var_251) = &input.user_pool_add_ons {
        let mut object_252 = object.key("UserPoolAddOns").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_add_ons_type(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    if let Some(var_253) = &input.username_configuration {
        let mut object_254 = object.key("UsernameConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_username_configuration_type(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.account_recovery_setting {
        let mut object_256 = object.key("AccountRecoverySetting").start_object();
        crate::json_ser::serialize_structure_crate_model_account_recovery_setting_type(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_pool_client_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserPoolClientInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.user_pool_id {
        object.key("UserPoolId").string(var_257.as_str());
    }
    if let Some(var_258) = &input.client_name {
        object.key("ClientName").string(var_258.as_str());
    }
    if input.generate_secret {
        object.key("GenerateSecret").boolean(input.generate_secret);
    }
    if input.refresh_token_validity != 0 {
        object.key("RefreshTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.refresh_token_validity).into()),
        );
    }
    if let Some(var_259) = &input.access_token_validity {
        object.key("AccessTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_259).into()),
        );
    }
    if let Some(var_260) = &input.id_token_validity {
        object.key("IdTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_260).into()),
        );
    }
    if let Some(var_261) = &input.token_validity_units {
        let mut object_262 = object.key("TokenValidityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_token_validity_units_type(
            &mut object_262,
            var_261,
        )?;
        object_262.finish();
    }
    if let Some(var_263) = &input.read_attributes {
        let mut array_264 = object.key("ReadAttributes").start_array();
        for item_265 in var_263 {
            {
                array_264.value().string(item_265.as_str());
            }
        }
        array_264.finish();
    }
    if let Some(var_266) = &input.write_attributes {
        let mut array_267 = object.key("WriteAttributes").start_array();
        for item_268 in var_266 {
            {
                array_267.value().string(item_268.as_str());
            }
        }
        array_267.finish();
    }
    if let Some(var_269) = &input.explicit_auth_flows {
        let mut array_270 = object.key("ExplicitAuthFlows").start_array();
        for item_271 in var_269 {
            {
                array_270.value().string(item_271.as_str());
            }
        }
        array_270.finish();
    }
    if let Some(var_272) = &input.supported_identity_providers {
        let mut array_273 = object.key("SupportedIdentityProviders").start_array();
        for item_274 in var_272 {
            {
                array_273.value().string(item_274.as_str());
            }
        }
        array_273.finish();
    }
    if let Some(var_275) = &input.callback_ur_ls {
        let mut array_276 = object.key("CallbackURLs").start_array();
        for item_277 in var_275 {
            {
                array_276.value().string(item_277.as_str());
            }
        }
        array_276.finish();
    }
    if let Some(var_278) = &input.logout_ur_ls {
        let mut array_279 = object.key("LogoutURLs").start_array();
        for item_280 in var_278 {
            {
                array_279.value().string(item_280.as_str());
            }
        }
        array_279.finish();
    }
    if let Some(var_281) = &input.default_redirect_uri {
        object.key("DefaultRedirectURI").string(var_281.as_str());
    }
    if let Some(var_282) = &input.allowed_o_auth_flows {
        let mut array_283 = object.key("AllowedOAuthFlows").start_array();
        for item_284 in var_282 {
            {
                array_283.value().string(item_284.as_str());
            }
        }
        array_283.finish();
    }
    if let Some(var_285) = &input.allowed_o_auth_scopes {
        let mut array_286 = object.key("AllowedOAuthScopes").start_array();
        for item_287 in var_285 {
            {
                array_286.value().string(item_287.as_str());
            }
        }
        array_286.finish();
    }
    if input.allowed_o_auth_flows_user_pool_client {
        object
            .key("AllowedOAuthFlowsUserPoolClient")
            .boolean(input.allowed_o_auth_flows_user_pool_client);
    }
    if let Some(var_288) = &input.analytics_configuration {
        let mut object_289 = object.key("AnalyticsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_configuration_type(
            &mut object_289,
            var_288,
        )?;
        object_289.finish();
    }
    if let Some(var_290) = &input.prevent_user_existence_errors {
        object
            .key("PreventUserExistenceErrors")
            .string(var_290.as_str());
    }
    if let Some(var_291) = &input.enable_token_revocation {
        object.key("EnableTokenRevocation").boolean(*var_291);
    }
    if let Some(var_292) = &input.enable_propagate_additional_user_context_data {
        object
            .key("EnablePropagateAdditionalUserContextData")
            .boolean(*var_292);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_pool_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserPoolDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.domain {
        object.key("Domain").string(var_293.as_str());
    }
    if let Some(var_294) = &input.user_pool_id {
        object.key("UserPoolId").string(var_294.as_str());
    }
    if let Some(var_295) = &input.custom_domain_config {
        let mut object_296 = object.key("CustomDomainConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_domain_config_type(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.group_name {
        object.key("GroupName").string(var_297.as_str());
    }
    if let Some(var_298) = &input.user_pool_id {
        object.key("UserPoolId").string(var_298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.user_pool_id {
        object.key("UserPoolId").string(var_299.as_str());
    }
    if let Some(var_300) = &input.provider_name {
        object.key("ProviderName").string(var_300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.user_pool_id {
        object.key("UserPoolId").string(var_301.as_str());
    }
    if let Some(var_302) = &input.identifier {
        object.key("Identifier").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.access_token {
        object.key("AccessToken").string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.user_attribute_names {
        let mut array_305 = object.key("UserAttributeNames").start_array();
        for item_306 in var_304 {
            {
                array_305.value().string(item_306.as_str());
            }
        }
        array_305.finish();
    }
    if let Some(var_307) = &input.access_token {
        object.key("AccessToken").string(var_307.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserPoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.user_pool_id {
        object.key("UserPoolId").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_pool_client_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserPoolClientInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.user_pool_id {
        object.key("UserPoolId").string(var_309.as_str());
    }
    if let Some(var_310) = &input.client_id {
        object.key("ClientId").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_pool_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserPoolDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.domain {
        object.key("Domain").string(var_311.as_str());
    }
    if let Some(var_312) = &input.user_pool_id {
        object.key("UserPoolId").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.user_pool_id {
        object.key("UserPoolId").string(var_313.as_str());
    }
    if let Some(var_314) = &input.provider_name {
        object.key("ProviderName").string(var_314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeResourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.user_pool_id {
        object.key("UserPoolId").string(var_315.as_str());
    }
    if let Some(var_316) = &input.identifier {
        object.key("Identifier").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_risk_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRiskConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.user_pool_id {
        object.key("UserPoolId").string(var_317.as_str());
    }
    if let Some(var_318) = &input.client_id {
        object.key("ClientId").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.user_pool_id {
        object.key("UserPoolId").string(var_319.as_str());
    }
    if let Some(var_320) = &input.job_id {
        object.key("JobId").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserPoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.user_pool_id {
        object.key("UserPoolId").string(var_321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_pool_client_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserPoolClientInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.user_pool_id {
        object.key("UserPoolId").string(var_322.as_str());
    }
    if let Some(var_323) = &input.client_id {
        object.key("ClientId").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_pool_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserPoolDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.domain {
        object.key("Domain").string(var_324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_forget_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ForgetDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.access_token {
        object.key("AccessToken").string(var_325.as_str());
    }
    if let Some(var_326) = &input.device_key {
        object.key("DeviceKey").string(var_326.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_forgot_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ForgotPasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.client_id {
        object.key("ClientId").string(var_327.as_str());
    }
    if let Some(var_328) = &input.secret_hash {
        object.key("SecretHash").string(var_328.as_str());
    }
    if let Some(var_329) = &input.user_context_data {
        let mut object_330 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(
            &mut object_330,
            var_329,
        )?;
        object_330.finish();
    }
    if let Some(var_331) = &input.username {
        object.key("Username").string(var_331.as_str());
    }
    if let Some(var_332) = &input.analytics_metadata {
        let mut object_333 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_333,
            var_332,
        )?;
        object_333.finish();
    }
    if let Some(var_334) = &input.client_metadata {
        let mut object_335 = object.key("ClientMetadata").start_object();
        for (key_336, value_337) in var_334 {
            {
                object_335.key(key_336).string(value_337.as_str());
            }
        }
        object_335.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_csv_header_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCsvHeaderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.user_pool_id {
        object.key("UserPoolId").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.device_key {
        object.key("DeviceKey").string(var_339.as_str());
    }
    if let Some(var_340) = &input.access_token {
        object.key("AccessToken").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.group_name {
        object.key("GroupName").string(var_341.as_str());
    }
    if let Some(var_342) = &input.user_pool_id {
        object.key("UserPoolId").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_identity_provider_by_identifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIdentityProviderByIdentifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.user_pool_id {
        object.key("UserPoolId").string(var_343.as_str());
    }
    if let Some(var_344) = &input.idp_identifier {
        object.key("IdpIdentifier").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_signing_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSigningCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.user_pool_id {
        object.key("UserPoolId").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ui_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUiCustomizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.user_pool_id {
        object.key("UserPoolId").string(var_346.as_str());
    }
    if let Some(var_347) = &input.client_id {
        object.key("ClientId").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.access_token {
        object.key("AccessToken").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_attribute_verification_code_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserAttributeVerificationCodeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.access_token {
        object.key("AccessToken").string(var_349.as_str());
    }
    if let Some(var_350) = &input.attribute_name {
        object.key("AttributeName").string(var_350.as_str());
    }
    if let Some(var_351) = &input.client_metadata {
        let mut object_352 = object.key("ClientMetadata").start_object();
        for (key_353, value_354) in var_351 {
            {
                object_352.key(key_353).string(value_354.as_str());
            }
        }
        object_352.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_pool_mfa_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserPoolMfaConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.user_pool_id {
        object.key("UserPoolId").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_global_sign_out_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GlobalSignOutInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.access_token {
        object.key("AccessToken").string(var_356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_initiate_auth_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InitiateAuthInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.auth_flow {
        object.key("AuthFlow").string(var_357.as_str());
    }
    if let Some(var_358) = &input.auth_parameters {
        let mut object_359 = object.key("AuthParameters").start_object();
        for (key_360, value_361) in var_358 {
            {
                object_359.key(key_360).string(value_361.as_str());
            }
        }
        object_359.finish();
    }
    if let Some(var_362) = &input.client_metadata {
        let mut object_363 = object.key("ClientMetadata").start_object();
        for (key_364, value_365) in var_362 {
            {
                object_363.key(key_364).string(value_365.as_str());
            }
        }
        object_363.finish();
    }
    if let Some(var_366) = &input.client_id {
        object.key("ClientId").string(var_366.as_str());
    }
    if let Some(var_367) = &input.analytics_metadata {
        let mut object_368 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_368,
            var_367,
        )?;
        object_368.finish();
    }
    if let Some(var_369) = &input.user_context_data {
        let mut object_370 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.access_token {
        object.key("AccessToken").string(var_371.as_str());
    }
    if let Some(var_372) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_372).into()),
        );
    }
    if let Some(var_373) = &input.pagination_token {
        object.key("PaginationToken").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.user_pool_id {
        object.key("UserPoolId").string(var_374.as_str());
    }
    if let Some(var_375) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_375).into()),
        );
    }
    if let Some(var_376) = &input.next_token {
        object.key("NextToken").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_identity_providers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIdentityProvidersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.user_pool_id {
        object.key("UserPoolId").string(var_377.as_str());
    }
    if let Some(var_378) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_378).into()),
        );
    }
    if let Some(var_379) = &input.next_token {
        object.key("NextToken").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_servers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceServersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.user_pool_id {
        object.key("UserPoolId").string(var_380.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_381) = &input.next_token {
        object.key("NextToken").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.resource_arn {
        object.key("ResourceArn").string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_import_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserImportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.user_pool_id {
        object.key("UserPoolId").string(var_383.as_str());
    }
    {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_384) = &input.pagination_token {
        object.key("PaginationToken").string(var_384.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_pool_clients_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserPoolClientsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.user_pool_id {
        object.key("UserPoolId").string(var_385.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_386) = &input.next_token {
        object.key("NextToken").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_pools_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserPoolsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.next_token {
        object.key("NextToken").string(var_387.as_str());
    }
    {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.user_pool_id {
        object.key("UserPoolId").string(var_388.as_str());
    }
    if let Some(var_389) = &input.attributes_to_get {
        let mut array_390 = object.key("AttributesToGet").start_array();
        for item_391 in var_389 {
            {
                array_390.value().string(item_391.as_str());
            }
        }
        array_390.finish();
    }
    if let Some(var_392) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_392).into()),
        );
    }
    if let Some(var_393) = &input.pagination_token {
        object.key("PaginationToken").string(var_393.as_str());
    }
    if let Some(var_394) = &input.filter {
        object.key("Filter").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_in_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsersInGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.user_pool_id {
        object.key("UserPoolId").string(var_395.as_str());
    }
    if let Some(var_396) = &input.group_name {
        object.key("GroupName").string(var_396.as_str());
    }
    if let Some(var_397) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_397).into()),
        );
    }
    if let Some(var_398) = &input.next_token {
        object.key("NextToken").string(var_398.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resend_confirmation_code_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResendConfirmationCodeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_399) = &input.client_id {
        object.key("ClientId").string(var_399.as_str());
    }
    if let Some(var_400) = &input.secret_hash {
        object.key("SecretHash").string(var_400.as_str());
    }
    if let Some(var_401) = &input.user_context_data {
        let mut object_402 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(
            &mut object_402,
            var_401,
        )?;
        object_402.finish();
    }
    if let Some(var_403) = &input.username {
        object.key("Username").string(var_403.as_str());
    }
    if let Some(var_404) = &input.analytics_metadata {
        let mut object_405 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_405,
            var_404,
        )?;
        object_405.finish();
    }
    if let Some(var_406) = &input.client_metadata {
        let mut object_407 = object.key("ClientMetadata").start_object();
        for (key_408, value_409) in var_406 {
            {
                object_407.key(key_408).string(value_409.as_str());
            }
        }
        object_407.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_respond_to_auth_challenge_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RespondToAuthChallengeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_410) = &input.client_id {
        object.key("ClientId").string(var_410.as_str());
    }
    if let Some(var_411) = &input.challenge_name {
        object.key("ChallengeName").string(var_411.as_str());
    }
    if let Some(var_412) = &input.session {
        object.key("Session").string(var_412.as_str());
    }
    if let Some(var_413) = &input.challenge_responses {
        let mut object_414 = object.key("ChallengeResponses").start_object();
        for (key_415, value_416) in var_413 {
            {
                object_414.key(key_415).string(value_416.as_str());
            }
        }
        object_414.finish();
    }
    if let Some(var_417) = &input.analytics_metadata {
        let mut object_418 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    if let Some(var_419) = &input.user_context_data {
        let mut object_420 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(
            &mut object_420,
            var_419,
        )?;
        object_420.finish();
    }
    if let Some(var_421) = &input.client_metadata {
        let mut object_422 = object.key("ClientMetadata").start_object();
        for (key_423, value_424) in var_421 {
            {
                object_422.key(key_423).string(value_424.as_str());
            }
        }
        object_422.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_token_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokeTokenInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.token {
        object.key("Token").string(var_425.as_str());
    }
    if let Some(var_426) = &input.client_id {
        object.key("ClientId").string(var_426.as_str());
    }
    if let Some(var_427) = &input.client_secret {
        object.key("ClientSecret").string(var_427.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_risk_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetRiskConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.user_pool_id {
        object.key("UserPoolId").string(var_428.as_str());
    }
    if let Some(var_429) = &input.client_id {
        object.key("ClientId").string(var_429.as_str());
    }
    if let Some(var_430) = &input.compromised_credentials_risk_configuration {
        let mut object_431 = object
            .key("CompromisedCredentialsRiskConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_compromised_credentials_risk_configuration_type(&mut object_431, var_430)?;
        object_431.finish();
    }
    if let Some(var_432) = &input.account_takeover_risk_configuration {
        let mut object_433 = object
            .key("AccountTakeoverRiskConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_risk_configuration_type(
            &mut object_433,
            var_432,
        )?;
        object_433.finish();
    }
    if let Some(var_434) = &input.risk_exception_configuration {
        let mut object_435 = object.key("RiskExceptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_risk_exception_configuration_type(
            &mut object_435,
            var_434,
        )?;
        object_435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_ui_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetUiCustomizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.user_pool_id {
        object.key("UserPoolId").string(var_436.as_str());
    }
    if let Some(var_437) = &input.client_id {
        object.key("ClientId").string(var_437.as_str());
    }
    if let Some(var_438) = &input.css {
        object.key("CSS").string(var_438.as_str());
    }
    if let Some(var_439) = &input.image_file {
        object
            .key("ImageFile")
            .string_unchecked(&aws_smithy_types::base64::encode(var_439));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_user_mfa_preference_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetUserMfaPreferenceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.sms_mfa_settings {
        let mut object_441 = object.key("SMSMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_mfa_settings_type(
            &mut object_441,
            var_440,
        )?;
        object_441.finish();
    }
    if let Some(var_442) = &input.software_token_mfa_settings {
        let mut object_443 = object.key("SoftwareTokenMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_software_token_mfa_settings_type(
            &mut object_443,
            var_442,
        )?;
        object_443.finish();
    }
    if let Some(var_444) = &input.access_token {
        object.key("AccessToken").string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_user_pool_mfa_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetUserPoolMfaConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.user_pool_id {
        object.key("UserPoolId").string(var_445.as_str());
    }
    if let Some(var_446) = &input.sms_mfa_configuration {
        let mut object_447 = object.key("SmsMfaConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_mfa_config_type(
            &mut object_447,
            var_446,
        )?;
        object_447.finish();
    }
    if let Some(var_448) = &input.software_token_mfa_configuration {
        let mut object_449 = object.key("SoftwareTokenMfaConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_software_token_mfa_config_type(
            &mut object_449,
            var_448,
        )?;
        object_449.finish();
    }
    if let Some(var_450) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_450.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_user_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetUserSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.access_token {
        object.key("AccessToken").string(var_451.as_str());
    }
    if let Some(var_452) = &input.mfa_options {
        let mut array_453 = object.key("MFAOptions").start_array();
        for item_454 in var_452 {
            {
                let mut object_455 = array_453.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mfa_option_type(
                    &mut object_455,
                    item_454,
                )?;
                object_455.finish();
            }
        }
        array_453.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_sign_up_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SignUpInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.client_id {
        object.key("ClientId").string(var_456.as_str());
    }
    if let Some(var_457) = &input.secret_hash {
        object.key("SecretHash").string(var_457.as_str());
    }
    if let Some(var_458) = &input.username {
        object.key("Username").string(var_458.as_str());
    }
    if let Some(var_459) = &input.password {
        object.key("Password").string(var_459.as_str());
    }
    if let Some(var_460) = &input.user_attributes {
        let mut array_461 = object.key("UserAttributes").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(
                    &mut object_463,
                    item_462,
                )?;
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.validation_data {
        let mut array_465 = object.key("ValidationData").start_array();
        for item_466 in var_464 {
            {
                let mut object_467 = array_465.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(
                    &mut object_467,
                    item_466,
                )?;
                object_467.finish();
            }
        }
        array_465.finish();
    }
    if let Some(var_468) = &input.analytics_metadata {
        let mut object_469 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(
            &mut object_469,
            var_468,
        )?;
        object_469.finish();
    }
    if let Some(var_470) = &input.user_context_data {
        let mut object_471 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(
            &mut object_471,
            var_470,
        )?;
        object_471.finish();
    }
    if let Some(var_472) = &input.client_metadata {
        let mut object_473 = object.key("ClientMetadata").start_object();
        for (key_474, value_475) in var_472 {
            {
                object_473.key(key_474).string(value_475.as_str());
            }
        }
        object_473.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_user_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartUserImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_476) = &input.user_pool_id {
        object.key("UserPoolId").string(var_476.as_str());
    }
    if let Some(var_477) = &input.job_id {
        object.key("JobId").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_user_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopUserImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.user_pool_id {
        object.key("UserPoolId").string(var_478.as_str());
    }
    if let Some(var_479) = &input.job_id {
        object.key("JobId").string(var_479.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_480) = &input.resource_arn {
        object.key("ResourceArn").string(var_480.as_str());
    }
    if let Some(var_481) = &input.tags {
        let mut object_482 = object.key("Tags").start_object();
        for (key_483, value_484) in var_481 {
            {
                object_482.key(key_483).string(value_484.as_str());
            }
        }
        object_482.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_485) = &input.resource_arn {
        object.key("ResourceArn").string(var_485.as_str());
    }
    if let Some(var_486) = &input.tag_keys {
        let mut array_487 = object.key("TagKeys").start_array();
        for item_488 in var_486 {
            {
                array_487.value().string(item_488.as_str());
            }
        }
        array_487.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_auth_event_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuthEventFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.user_pool_id {
        object.key("UserPoolId").string(var_489.as_str());
    }
    if let Some(var_490) = &input.username {
        object.key("Username").string(var_490.as_str());
    }
    if let Some(var_491) = &input.event_id {
        object.key("EventId").string(var_491.as_str());
    }
    if let Some(var_492) = &input.feedback_token {
        object.key("FeedbackToken").string(var_492.as_str());
    }
    if let Some(var_493) = &input.feedback_value {
        object.key("FeedbackValue").string(var_493.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_device_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_494) = &input.access_token {
        object.key("AccessToken").string(var_494.as_str());
    }
    if let Some(var_495) = &input.device_key {
        object.key("DeviceKey").string(var_495.as_str());
    }
    if let Some(var_496) = &input.device_remembered_status {
        object
            .key("DeviceRememberedStatus")
            .string(var_496.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_497) = &input.group_name {
        object.key("GroupName").string(var_497.as_str());
    }
    if let Some(var_498) = &input.user_pool_id {
        object.key("UserPoolId").string(var_498.as_str());
    }
    if let Some(var_499) = &input.description {
        object.key("Description").string(var_499.as_str());
    }
    if let Some(var_500) = &input.role_arn {
        object.key("RoleArn").string(var_500.as_str());
    }
    if let Some(var_501) = &input.precedence {
        object.key("Precedence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_501).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_502) = &input.user_pool_id {
        object.key("UserPoolId").string(var_502.as_str());
    }
    if let Some(var_503) = &input.provider_name {
        object.key("ProviderName").string(var_503.as_str());
    }
    if let Some(var_504) = &input.provider_details {
        let mut object_505 = object.key("ProviderDetails").start_object();
        for (key_506, value_507) in var_504 {
            {
                object_505.key(key_506).string(value_507.as_str());
            }
        }
        object_505.finish();
    }
    if let Some(var_508) = &input.attribute_mapping {
        let mut object_509 = object.key("AttributeMapping").start_object();
        for (key_510, value_511) in var_508 {
            {
                object_509.key(key_510).string(value_511.as_str());
            }
        }
        object_509.finish();
    }
    if let Some(var_512) = &input.idp_identifiers {
        let mut array_513 = object.key("IdpIdentifiers").start_array();
        for item_514 in var_512 {
            {
                array_513.value().string(item_514.as_str());
            }
        }
        array_513.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_515) = &input.user_pool_id {
        object.key("UserPoolId").string(var_515.as_str());
    }
    if let Some(var_516) = &input.identifier {
        object.key("Identifier").string(var_516.as_str());
    }
    if let Some(var_517) = &input.name {
        object.key("Name").string(var_517.as_str());
    }
    if let Some(var_518) = &input.scopes {
        let mut array_519 = object.key("Scopes").start_array();
        for item_520 in var_518 {
            {
                let mut object_521 = array_519.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_server_scope_type(
                    &mut object_521,
                    item_520,
                )?;
                object_521.finish();
            }
        }
        array_519.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.user_attributes {
        let mut array_523 = object.key("UserAttributes").start_array();
        for item_524 in var_522 {
            {
                let mut object_525 = array_523.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(
                    &mut object_525,
                    item_524,
                )?;
                object_525.finish();
            }
        }
        array_523.finish();
    }
    if let Some(var_526) = &input.access_token {
        object.key("AccessToken").string(var_526.as_str());
    }
    if let Some(var_527) = &input.client_metadata {
        let mut object_528 = object.key("ClientMetadata").start_object();
        for (key_529, value_530) in var_527 {
            {
                object_528.key(key_529).string(value_530.as_str());
            }
        }
        object_528.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserPoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_531) = &input.user_pool_id {
        object.key("UserPoolId").string(var_531.as_str());
    }
    if let Some(var_532) = &input.policies {
        let mut object_533 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_policy_type(
            &mut object_533,
            var_532,
        )?;
        object_533.finish();
    }
    if let Some(var_534) = &input.lambda_config {
        let mut object_535 = object.key("LambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_config_type(
            &mut object_535,
            var_534,
        )?;
        object_535.finish();
    }
    if let Some(var_536) = &input.auto_verified_attributes {
        let mut array_537 = object.key("AutoVerifiedAttributes").start_array();
        for item_538 in var_536 {
            {
                array_537.value().string(item_538.as_str());
            }
        }
        array_537.finish();
    }
    if let Some(var_539) = &input.sms_verification_message {
        object
            .key("SmsVerificationMessage")
            .string(var_539.as_str());
    }
    if let Some(var_540) = &input.email_verification_message {
        object
            .key("EmailVerificationMessage")
            .string(var_540.as_str());
    }
    if let Some(var_541) = &input.email_verification_subject {
        object
            .key("EmailVerificationSubject")
            .string(var_541.as_str());
    }
    if let Some(var_542) = &input.verification_message_template {
        let mut object_543 = object.key("VerificationMessageTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_verification_message_template_type(
            &mut object_543,
            var_542,
        )?;
        object_543.finish();
    }
    if let Some(var_544) = &input.sms_authentication_message {
        object
            .key("SmsAuthenticationMessage")
            .string(var_544.as_str());
    }
    if let Some(var_545) = &input.user_attribute_update_settings {
        let mut object_546 = object.key("UserAttributeUpdateSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_attribute_update_settings_type(
            &mut object_546,
            var_545,
        )?;
        object_546.finish();
    }
    if let Some(var_547) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_547.as_str());
    }
    if let Some(var_548) = &input.device_configuration {
        let mut object_549 = object.key("DeviceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_device_configuration_type(
            &mut object_549,
            var_548,
        )?;
        object_549.finish();
    }
    if let Some(var_550) = &input.email_configuration {
        let mut object_551 = object.key("EmailConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_email_configuration_type(
            &mut object_551,
            var_550,
        )?;
        object_551.finish();
    }
    if let Some(var_552) = &input.sms_configuration {
        let mut object_553 = object.key("SmsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_configuration_type(
            &mut object_553,
            var_552,
        )?;
        object_553.finish();
    }
    if let Some(var_554) = &input.user_pool_tags {
        let mut object_555 = object.key("UserPoolTags").start_object();
        for (key_556, value_557) in var_554 {
            {
                object_555.key(key_556).string(value_557.as_str());
            }
        }
        object_555.finish();
    }
    if let Some(var_558) = &input.admin_create_user_config {
        let mut object_559 = object.key("AdminCreateUserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_admin_create_user_config_type(
            &mut object_559,
            var_558,
        )?;
        object_559.finish();
    }
    if let Some(var_560) = &input.user_pool_add_ons {
        let mut object_561 = object.key("UserPoolAddOns").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_add_ons_type(
            &mut object_561,
            var_560,
        )?;
        object_561.finish();
    }
    if let Some(var_562) = &input.account_recovery_setting {
        let mut object_563 = object.key("AccountRecoverySetting").start_object();
        crate::json_ser::serialize_structure_crate_model_account_recovery_setting_type(
            &mut object_563,
            var_562,
        )?;
        object_563.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_pool_client_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserPoolClientInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_564) = &input.user_pool_id {
        object.key("UserPoolId").string(var_564.as_str());
    }
    if let Some(var_565) = &input.client_id {
        object.key("ClientId").string(var_565.as_str());
    }
    if let Some(var_566) = &input.client_name {
        object.key("ClientName").string(var_566.as_str());
    }
    if input.refresh_token_validity != 0 {
        object.key("RefreshTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.refresh_token_validity).into()),
        );
    }
    if let Some(var_567) = &input.access_token_validity {
        object.key("AccessTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_567).into()),
        );
    }
    if let Some(var_568) = &input.id_token_validity {
        object.key("IdTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_568).into()),
        );
    }
    if let Some(var_569) = &input.token_validity_units {
        let mut object_570 = object.key("TokenValidityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_token_validity_units_type(
            &mut object_570,
            var_569,
        )?;
        object_570.finish();
    }
    if let Some(var_571) = &input.read_attributes {
        let mut array_572 = object.key("ReadAttributes").start_array();
        for item_573 in var_571 {
            {
                array_572.value().string(item_573.as_str());
            }
        }
        array_572.finish();
    }
    if let Some(var_574) = &input.write_attributes {
        let mut array_575 = object.key("WriteAttributes").start_array();
        for item_576 in var_574 {
            {
                array_575.value().string(item_576.as_str());
            }
        }
        array_575.finish();
    }
    if let Some(var_577) = &input.explicit_auth_flows {
        let mut array_578 = object.key("ExplicitAuthFlows").start_array();
        for item_579 in var_577 {
            {
                array_578.value().string(item_579.as_str());
            }
        }
        array_578.finish();
    }
    if let Some(var_580) = &input.supported_identity_providers {
        let mut array_581 = object.key("SupportedIdentityProviders").start_array();
        for item_582 in var_580 {
            {
                array_581.value().string(item_582.as_str());
            }
        }
        array_581.finish();
    }
    if let Some(var_583) = &input.callback_ur_ls {
        let mut array_584 = object.key("CallbackURLs").start_array();
        for item_585 in var_583 {
            {
                array_584.value().string(item_585.as_str());
            }
        }
        array_584.finish();
    }
    if let Some(var_586) = &input.logout_ur_ls {
        let mut array_587 = object.key("LogoutURLs").start_array();
        for item_588 in var_586 {
            {
                array_587.value().string(item_588.as_str());
            }
        }
        array_587.finish();
    }
    if let Some(var_589) = &input.default_redirect_uri {
        object.key("DefaultRedirectURI").string(var_589.as_str());
    }
    if let Some(var_590) = &input.allowed_o_auth_flows {
        let mut array_591 = object.key("AllowedOAuthFlows").start_array();
        for item_592 in var_590 {
            {
                array_591.value().string(item_592.as_str());
            }
        }
        array_591.finish();
    }
    if let Some(var_593) = &input.allowed_o_auth_scopes {
        let mut array_594 = object.key("AllowedOAuthScopes").start_array();
        for item_595 in var_593 {
            {
                array_594.value().string(item_595.as_str());
            }
        }
        array_594.finish();
    }
    if input.allowed_o_auth_flows_user_pool_client {
        object
            .key("AllowedOAuthFlowsUserPoolClient")
            .boolean(input.allowed_o_auth_flows_user_pool_client);
    }
    if let Some(var_596) = &input.analytics_configuration {
        let mut object_597 = object.key("AnalyticsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_configuration_type(
            &mut object_597,
            var_596,
        )?;
        object_597.finish();
    }
    if let Some(var_598) = &input.prevent_user_existence_errors {
        object
            .key("PreventUserExistenceErrors")
            .string(var_598.as_str());
    }
    if let Some(var_599) = &input.enable_token_revocation {
        object.key("EnableTokenRevocation").boolean(*var_599);
    }
    if let Some(var_600) = &input.enable_propagate_additional_user_context_data {
        object
            .key("EnablePropagateAdditionalUserContextData")
            .boolean(*var_600);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_pool_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserPoolDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_601) = &input.domain {
        object.key("Domain").string(var_601.as_str());
    }
    if let Some(var_602) = &input.user_pool_id {
        object.key("UserPoolId").string(var_602.as_str());
    }
    if let Some(var_603) = &input.custom_domain_config {
        let mut object_604 = object.key("CustomDomainConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_domain_config_type(
            &mut object_604,
            var_603,
        )?;
        object_604.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_software_token_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::VerifySoftwareTokenInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_605) = &input.access_token {
        object.key("AccessToken").string(var_605.as_str());
    }
    if let Some(var_606) = &input.session {
        object.key("Session").string(var_606.as_str());
    }
    if let Some(var_607) = &input.user_code {
        object.key("UserCode").string(var_607.as_str());
    }
    if let Some(var_608) = &input.friendly_device_name {
        object.key("FriendlyDeviceName").string(var_608.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_user_attribute_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::VerifyUserAttributeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_609) = &input.access_token {
        object.key("AccessToken").string(var_609.as_str());
    }
    if let Some(var_610) = &input.attribute_name {
        object.key("AttributeName").string(var_610.as_str());
    }
    if let Some(var_611) = &input.code {
        object.key("Code").string(var_611.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_attribute_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaAttributeType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_612) = &input.name {
        object.key("Name").string(var_612.as_str());
    }
    if let Some(var_613) = &input.attribute_data_type {
        object.key("AttributeDataType").string(var_613.as_str());
    }
    if let Some(var_614) = &input.developer_only_attribute {
        object.key("DeveloperOnlyAttribute").boolean(*var_614);
    }
    if let Some(var_615) = &input.mutable {
        object.key("Mutable").boolean(*var_615);
    }
    if let Some(var_616) = &input.required {
        object.key("Required").boolean(*var_616);
    }
    if let Some(var_617) = &input.number_attribute_constraints {
        let mut object_618 = object.key("NumberAttributeConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_number_attribute_constraints_type(
            &mut object_618,
            var_617,
        )?;
        object_618.finish();
    }
    if let Some(var_619) = &input.string_attribute_constraints {
        let mut object_620 = object.key("StringAttributeConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_string_attribute_constraints_type(
            &mut object_620,
            var_619,
        )?;
        object_620.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_621) = &input.name {
        object.key("Name").string(var_621.as_str());
    }
    if let Some(var_622) = &input.value {
        object.key("Value").string(var_622.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provider_user_identifier_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProviderUserIdentifierType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_623) = &input.provider_name {
        object.key("ProviderName").string(var_623.as_str());
    }
    if let Some(var_624) = &input.provider_attribute_name {
        object.key("ProviderAttributeName").string(var_624.as_str());
    }
    if let Some(var_625) = &input.provider_attribute_value {
        object
            .key("ProviderAttributeValue")
            .string(var_625.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_metadata_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalyticsMetadataType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_626) = &input.analytics_endpoint_id {
        object.key("AnalyticsEndpointId").string(var_626.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_context_data_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextDataType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_627) = &input.ip_address {
        object.key("IpAddress").string(var_627.as_str());
    }
    if let Some(var_628) = &input.server_name {
        object.key("ServerName").string(var_628.as_str());
    }
    if let Some(var_629) = &input.server_path {
        object.key("ServerPath").string(var_629.as_str());
    }
    if let Some(var_630) = &input.http_headers {
        let mut array_631 = object.key("HttpHeaders").start_array();
        for item_632 in var_630 {
            {
                let mut object_633 = array_631.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_header(
                    &mut object_633,
                    item_632,
                )?;
                object_633.finish();
            }
        }
        array_631.finish();
    }
    if let Some(var_634) = &input.encoded_data {
        object.key("EncodedData").string(var_634.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sms_mfa_settings_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmsMfaSettingsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.preferred_mfa {
        object.key("PreferredMfa").boolean(input.preferred_mfa);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_software_token_mfa_settings_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SoftwareTokenMfaSettingsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.preferred_mfa {
        object.key("PreferredMfa").boolean(input.preferred_mfa);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mfa_option_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MfaOptionType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_635) = &input.delivery_medium {
        object.key("DeliveryMedium").string(var_635.as_str());
    }
    if let Some(var_636) = &input.attribute_name {
        object.key("AttributeName").string(var_636.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_secret_verifier_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceSecretVerifierConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_637) = &input.password_verifier {
        object.key("PasswordVerifier").string(var_637.as_str());
    }
    if let Some(var_638) = &input.salt {
        object.key("Salt").string(var_638.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context_data_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContextDataType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_639) = &input.ip_address {
        object.key("IpAddress").string(var_639.as_str());
    }
    if let Some(var_640) = &input.encoded_data {
        object.key("EncodedData").string(var_640.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_server_scope_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceServerScopeType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_641) = &input.scope_name {
        object.key("ScopeName").string(var_641.as_str());
    }
    if let Some(var_642) = &input.scope_description {
        object.key("ScopeDescription").string(var_642.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_pool_policy_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPoolPolicyType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_643) = &input.password_policy {
        let mut object_644 = object.key("PasswordPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_password_policy_type(
            &mut object_644,
            var_643,
        )?;
        object_644.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.pre_sign_up {
        object.key("PreSignUp").string(var_645.as_str());
    }
    if let Some(var_646) = &input.custom_message {
        object.key("CustomMessage").string(var_646.as_str());
    }
    if let Some(var_647) = &input.post_confirmation {
        object.key("PostConfirmation").string(var_647.as_str());
    }
    if let Some(var_648) = &input.pre_authentication {
        object.key("PreAuthentication").string(var_648.as_str());
    }
    if let Some(var_649) = &input.post_authentication {
        object.key("PostAuthentication").string(var_649.as_str());
    }
    if let Some(var_650) = &input.define_auth_challenge {
        object.key("DefineAuthChallenge").string(var_650.as_str());
    }
    if let Some(var_651) = &input.create_auth_challenge {
        object.key("CreateAuthChallenge").string(var_651.as_str());
    }
    if let Some(var_652) = &input.verify_auth_challenge_response {
        object
            .key("VerifyAuthChallengeResponse")
            .string(var_652.as_str());
    }
    if let Some(var_653) = &input.pre_token_generation {
        object.key("PreTokenGeneration").string(var_653.as_str());
    }
    if let Some(var_654) = &input.user_migration {
        object.key("UserMigration").string(var_654.as_str());
    }
    if let Some(var_655) = &input.custom_sms_sender {
        let mut object_656 = object.key("CustomSMSSender").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_sms_lambda_version_config_type(
            &mut object_656,
            var_655,
        )?;
        object_656.finish();
    }
    if let Some(var_657) = &input.custom_email_sender {
        let mut object_658 = object.key("CustomEmailSender").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_email_lambda_version_config_type(
            &mut object_658,
            var_657,
        )?;
        object_658.finish();
    }
    if let Some(var_659) = &input.kms_key_id {
        object.key("KMSKeyID").string(var_659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_verification_message_template_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VerificationMessageTemplateType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.sms_message {
        object.key("SmsMessage").string(var_660.as_str());
    }
    if let Some(var_661) = &input.email_message {
        object.key("EmailMessage").string(var_661.as_str());
    }
    if let Some(var_662) = &input.email_subject {
        object.key("EmailSubject").string(var_662.as_str());
    }
    if let Some(var_663) = &input.email_message_by_link {
        object.key("EmailMessageByLink").string(var_663.as_str());
    }
    if let Some(var_664) = &input.email_subject_by_link {
        object.key("EmailSubjectByLink").string(var_664.as_str());
    }
    if let Some(var_665) = &input.default_email_option {
        object.key("DefaultEmailOption").string(var_665.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_attribute_update_settings_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserAttributeUpdateSettingsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_666) = &input.attributes_require_verification_before_update {
        let mut array_667 = object
            .key("AttributesRequireVerificationBeforeUpdate")
            .start_array();
        for item_668 in var_666 {
            {
                array_667.value().string(item_668.as_str());
            }
        }
        array_667.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.challenge_required_on_new_device {
        object
            .key("ChallengeRequiredOnNewDevice")
            .boolean(input.challenge_required_on_new_device);
    }
    if input.device_only_remembered_on_user_prompt {
        object
            .key("DeviceOnlyRememberedOnUserPrompt")
            .boolean(input.device_only_remembered_on_user_prompt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_email_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmailConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_669) = &input.source_arn {
        object.key("SourceArn").string(var_669.as_str());
    }
    if let Some(var_670) = &input.reply_to_email_address {
        object.key("ReplyToEmailAddress").string(var_670.as_str());
    }
    if let Some(var_671) = &input.email_sending_account {
        object.key("EmailSendingAccount").string(var_671.as_str());
    }
    if let Some(var_672) = &input.from {
        object.key("From").string(var_672.as_str());
    }
    if let Some(var_673) = &input.configuration_set {
        object.key("ConfigurationSet").string(var_673.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sms_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmsConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_674) = &input.sns_caller_arn {
        object.key("SnsCallerArn").string(var_674.as_str());
    }
    if let Some(var_675) = &input.external_id {
        object.key("ExternalId").string(var_675.as_str());
    }
    if let Some(var_676) = &input.sns_region {
        object.key("SnsRegion").string(var_676.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_admin_create_user_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdminCreateUserConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_admin_create_user_only {
        object
            .key("AllowAdminCreateUserOnly")
            .boolean(input.allow_admin_create_user_only);
    }
    if input.unused_account_validity_days != 0 {
        object.key("UnusedAccountValidityDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.unused_account_validity_days).into()),
        );
    }
    if let Some(var_677) = &input.invite_message_template {
        let mut object_678 = object.key("InviteMessageTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_message_template_type(
            &mut object_678,
            var_677,
        )?;
        object_678.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_pool_add_ons_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPoolAddOnsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_679) = &input.advanced_security_mode {
        object.key("AdvancedSecurityMode").string(var_679.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_username_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UsernameConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_680) = &input.case_sensitive {
        object.key("CaseSensitive").boolean(*var_680);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_recovery_setting_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountRecoverySettingType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_681) = &input.recovery_mechanisms {
        let mut array_682 = object.key("RecoveryMechanisms").start_array();
        for item_683 in var_681 {
            {
                let mut object_684 = array_682.value().start_object();
                crate::json_ser::serialize_structure_crate_model_recovery_option_type(
                    &mut object_684,
                    item_683,
                )?;
                object_684.finish();
            }
        }
        array_682.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_token_validity_units_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TokenValidityUnitsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_685) = &input.access_token {
        object.key("AccessToken").string(var_685.as_str());
    }
    if let Some(var_686) = &input.id_token {
        object.key("IdToken").string(var_686.as_str());
    }
    if let Some(var_687) = &input.refresh_token {
        object.key("RefreshToken").string(var_687.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalyticsConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_688) = &input.application_id {
        object.key("ApplicationId").string(var_688.as_str());
    }
    if let Some(var_689) = &input.application_arn {
        object.key("ApplicationArn").string(var_689.as_str());
    }
    if let Some(var_690) = &input.role_arn {
        object.key("RoleArn").string(var_690.as_str());
    }
    if let Some(var_691) = &input.external_id {
        object.key("ExternalId").string(var_691.as_str());
    }
    if input.user_data_shared {
        object.key("UserDataShared").boolean(input.user_data_shared);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_domain_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDomainConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_692) = &input.certificate_arn {
        object.key("CertificateArn").string(var_692.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compromised_credentials_risk_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompromisedCredentialsRiskConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.event_filter {
        let mut array_694 = object.key("EventFilter").start_array();
        for item_695 in var_693 {
            {
                array_694.value().string(item_695.as_str());
            }
        }
        array_694.finish();
    }
    if let Some(var_696) = &input.actions {
        let mut object_697 = object.key("Actions").start_object();
        crate::json_ser::serialize_structure_crate_model_compromised_credentials_actions_type(
            &mut object_697,
            var_696,
        )?;
        object_697.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_takeover_risk_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountTakeoverRiskConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.notify_configuration {
        let mut object_699 = object.key("NotifyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_configuration_type(
            &mut object_699,
            var_698,
        )?;
        object_699.finish();
    }
    if let Some(var_700) = &input.actions {
        let mut object_701 = object.key("Actions").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_actions_type(
            &mut object_701,
            var_700,
        )?;
        object_701.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_risk_exception_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RiskExceptionConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_702) = &input.blocked_ip_range_list {
        let mut array_703 = object.key("BlockedIPRangeList").start_array();
        for item_704 in var_702 {
            {
                array_703.value().string(item_704.as_str());
            }
        }
        array_703.finish();
    }
    if let Some(var_705) = &input.skipped_ip_range_list {
        let mut array_706 = object.key("SkippedIPRangeList").start_array();
        for item_707 in var_705 {
            {
                array_706.value().string(item_707.as_str());
            }
        }
        array_706.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sms_mfa_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmsMfaConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_708) = &input.sms_authentication_message {
        object
            .key("SmsAuthenticationMessage")
            .string(var_708.as_str());
    }
    if let Some(var_709) = &input.sms_configuration {
        let mut object_710 = object.key("SmsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_configuration_type(
            &mut object_710,
            var_709,
        )?;
        object_710.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_software_token_mfa_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SoftwareTokenMfaConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_attribute_constraints_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberAttributeConstraintsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.min_value {
        object.key("MinValue").string(var_711.as_str());
    }
    if let Some(var_712) = &input.max_value {
        object.key("MaxValue").string(var_712.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_attribute_constraints_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringAttributeConstraintsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_713) = &input.min_length {
        object.key("MinLength").string(var_713.as_str());
    }
    if let Some(var_714) = &input.max_length {
        object.key("MaxLength").string(var_714.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.header_name {
        object.key("headerName").string(var_715.as_str());
    }
    if let Some(var_716) = &input.header_value {
        object.key("headerValue").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_password_policy_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PasswordPolicyType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_length != 0 {
        object.key("MinimumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_length).into()),
        );
    }
    if input.require_uppercase {
        object
            .key("RequireUppercase")
            .boolean(input.require_uppercase);
    }
    if input.require_lowercase {
        object
            .key("RequireLowercase")
            .boolean(input.require_lowercase);
    }
    if input.require_numbers {
        object.key("RequireNumbers").boolean(input.require_numbers);
    }
    if input.require_symbols {
        object.key("RequireSymbols").boolean(input.require_symbols);
    }
    if input.temporary_password_validity_days != 0 {
        object.key("TemporaryPasswordValidityDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.temporary_password_validity_days).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_sms_lambda_version_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomSmsLambdaVersionConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_717) = &input.lambda_version {
        object.key("LambdaVersion").string(var_717.as_str());
    }
    if let Some(var_718) = &input.lambda_arn {
        object.key("LambdaArn").string(var_718.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_email_lambda_version_config_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomEmailLambdaVersionConfigType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_719) = &input.lambda_version {
        object.key("LambdaVersion").string(var_719.as_str());
    }
    if let Some(var_720) = &input.lambda_arn {
        object.key("LambdaArn").string(var_720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_template_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageTemplateType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_721) = &input.sms_message {
        object.key("SMSMessage").string(var_721.as_str());
    }
    if let Some(var_722) = &input.email_message {
        object.key("EmailMessage").string(var_722.as_str());
    }
    if let Some(var_723) = &input.email_subject {
        object.key("EmailSubject").string(var_723.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recovery_option_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecoveryOptionType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_724) = &input.name {
        object.key("Name").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compromised_credentials_actions_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompromisedCredentialsActionsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.event_action {
        object.key("EventAction").string(var_725.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notify_configuration_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotifyConfigurationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.from {
        object.key("From").string(var_726.as_str());
    }
    if let Some(var_727) = &input.reply_to {
        object.key("ReplyTo").string(var_727.as_str());
    }
    if let Some(var_728) = &input.source_arn {
        object.key("SourceArn").string(var_728.as_str());
    }
    if let Some(var_729) = &input.block_email {
        let mut object_730 = object.key("BlockEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_email_type(
            &mut object_730,
            var_729,
        )?;
        object_730.finish();
    }
    if let Some(var_731) = &input.no_action_email {
        let mut object_732 = object.key("NoActionEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_email_type(
            &mut object_732,
            var_731,
        )?;
        object_732.finish();
    }
    if let Some(var_733) = &input.mfa_email {
        let mut object_734 = object.key("MfaEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_email_type(
            &mut object_734,
            var_733,
        )?;
        object_734.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_takeover_actions_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountTakeoverActionsType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_735) = &input.low_action {
        let mut object_736 = object.key("LowAction").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_action_type(
            &mut object_736,
            var_735,
        )?;
        object_736.finish();
    }
    if let Some(var_737) = &input.medium_action {
        let mut object_738 = object.key("MediumAction").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_action_type(
            &mut object_738,
            var_737,
        )?;
        object_738.finish();
    }
    if let Some(var_739) = &input.high_action {
        let mut object_740 = object.key("HighAction").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_action_type(
            &mut object_740,
            var_739,
        )?;
        object_740.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notify_email_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotifyEmailType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_741) = &input.subject {
        object.key("Subject").string(var_741.as_str());
    }
    if let Some(var_742) = &input.html_body {
        object.key("HtmlBody").string(var_742.as_str());
    }
    if let Some(var_743) = &input.text_body {
        object.key("TextBody").string(var_743.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_takeover_action_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountTakeoverActionType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Notify").boolean(input.notify);
    }
    if let Some(var_744) = &input.event_action {
        object.key("EventAction").string(var_744.as_str());
    }
    Ok(())
}
