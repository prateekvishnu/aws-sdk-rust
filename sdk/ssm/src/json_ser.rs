// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_tags_to_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.resource_type {
        object.key("ResourceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_ops_item_related_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateOpsItemRelatedItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.ops_item_id {
        object.key("OpsItemId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.association_type {
        object.key("AssociationType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.resource_type {
        object.key("ResourceType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.resource_uri {
        object.key("ResourceUri").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.command_id {
        object.key("CommandId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.instance_ids {
        let mut array_13 = object.key("InstanceIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_maintenance_window_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMaintenanceWindowExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_15.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_activation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActivationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.description {
        object.key("Description").string(var_16.as_str());
    }
    if let Some(var_17) = &input.default_instance_name {
        object.key("DefaultInstanceName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.iam_role {
        object.key("IamRole").string(var_18.as_str());
    }
    if let Some(var_19) = &input.registration_limit {
        object.key("RegistrationLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.expiration_date {
        object
            .key("ExpirationDate")
            .date_time(var_20, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.registration_metadata {
        let mut array_26 = object.key("RegistrationMetadata").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_registration_metadata_item(
                    &mut object_28,
                    item_27,
                )?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.name {
        object.key("Name").string(var_29.as_str());
    }
    if let Some(var_30) = &input.document_version {
        object.key("DocumentVersion").string(var_30.as_str());
    }
    if let Some(var_31) = &input.instance_id {
        object.key("InstanceId").string(var_31.as_str());
    }
    if let Some(var_32) = &input.parameters {
        let mut object_33 = object.key("Parameters").start_object();
        for (key_34, value_35) in var_32 {
            {
                let mut array_36 = object_33.key(key_34).start_array();
                for item_37 in value_35 {
                    {
                        array_36.value().string(item_37.as_str());
                    }
                }
                array_36.finish();
            }
        }
        object_33.finish();
    }
    if let Some(var_38) = &input.targets {
        let mut array_39 = object.key("Targets").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_42.as_str());
    }
    if let Some(var_43) = &input.output_location {
        let mut object_44 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_44,
            var_43,
        )?;
        object_44.finish();
    }
    if let Some(var_45) = &input.association_name {
        object.key("AssociationName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_46.as_str());
    }
    if let Some(var_47) = &input.max_errors {
        object.key("MaxErrors").string(var_47.as_str());
    }
    if let Some(var_48) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_48.as_str());
    }
    if let Some(var_49) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_49.as_str());
    }
    if let Some(var_50) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_50.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_51) = &input.calendar_names {
        let mut array_52 = object.key("CalendarNames").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.target_locations {
        let mut array_55 = object.key("TargetLocations").start_array();
        for item_56 in var_54 {
            {
                let mut object_57 = array_55.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_57,
                    item_56,
                )?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    if let Some(var_58) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.target_maps {
        let mut array_60 = object.key("TargetMaps").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                for (key_63, value_64) in item_61 {
                    {
                        let mut array_65 = object_62.key(key_63).start_array();
                        for item_66 in value_64 {
                            {
                                array_65.value().string(item_66.as_str());
                            }
                        }
                        array_65.finish();
                    }
                }
                object_62.finish();
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_batch_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationBatchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.entries {
        let mut array_68 = object.key("Entries").start_array();
        for item_69 in var_67 {
            {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_association_batch_request_entry(&mut object_70, item_69)?;
                object_70.finish();
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.content {
        object.key("Content").string(var_71.as_str());
    }
    if let Some(var_72) = &input.requires {
        let mut array_73 = object.key("Requires").start_array();
        for item_74 in var_72 {
            {
                let mut object_75 = array_73.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_requires(
                    &mut object_75,
                    item_74,
                )?;
                object_75.finish();
            }
        }
        array_73.finish();
    }
    if let Some(var_76) = &input.attachments {
        let mut array_77 = object.key("Attachments").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(
                    &mut object_79,
                    item_78,
                )?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80.as_str());
    }
    if let Some(var_81) = &input.display_name {
        object.key("DisplayName").string(var_81.as_str());
    }
    if let Some(var_82) = &input.version_name {
        object.key("VersionName").string(var_82.as_str());
    }
    if let Some(var_83) = &input.document_type {
        object.key("DocumentType").string(var_83.as_str());
    }
    if let Some(var_84) = &input.document_format {
        object.key("DocumentFormat").string(var_84.as_str());
    }
    if let Some(var_85) = &input.target_type {
        object.key("TargetType").string(var_85.as_str());
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_89, item_88)?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.name {
        object.key("Name").string(var_90.as_str());
    }
    if let Some(var_91) = &input.description {
        object.key("Description").string(var_91.as_str());
    }
    if let Some(var_92) = &input.start_date {
        object.key("StartDate").string(var_92.as_str());
    }
    if let Some(var_93) = &input.end_date {
        object.key("EndDate").string(var_93.as_str());
    }
    if let Some(var_94) = &input.schedule {
        object.key("Schedule").string(var_94.as_str());
    }
    if let Some(var_95) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_95.as_str());
    }
    if let Some(var_96) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_96).into()),
        );
    }
    {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cutoff).into()),
        );
    }
    {
        object
            .key("AllowUnassociatedTargets")
            .boolean(input.allow_unassociated_targets);
    }
    if let Some(var_97) = &input.client_token {
        object.key("ClientToken").string(var_97.as_str());
    }
    if let Some(var_98) = &input.tags {
        let mut array_99 = object.key("Tags").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_101, item_100)?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.description {
        object.key("Description").string(var_102.as_str());
    }
    if let Some(var_103) = &input.ops_item_type {
        object.key("OpsItemType").string(var_103.as_str());
    }
    if let Some(var_104) = &input.operational_data {
        let mut object_105 = object.key("OperationalData").start_object();
        for (key_106, value_107) in var_104 {
            {
                let mut object_108 = object_105.key(key_106).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(
                    &mut object_108,
                    value_107,
                )?;
                object_108.finish();
            }
        }
        object_105.finish();
    }
    if let Some(var_109) = &input.notifications {
        let mut array_110 = object.key("Notifications").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_113).into()),
        );
    }
    if let Some(var_114) = &input.related_ops_items {
        let mut array_115 = object.key("RelatedOpsItems").start_array();
        for item_116 in var_114 {
            {
                let mut object_117 = array_115.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(
                    &mut object_117,
                    item_116,
                )?;
                object_117.finish();
            }
        }
        array_115.finish();
    }
    if let Some(var_118) = &input.source {
        object.key("Source").string(var_118.as_str());
    }
    if let Some(var_119) = &input.title {
        object.key("Title").string(var_119.as_str());
    }
    if let Some(var_120) = &input.tags {
        let mut array_121 = object.key("Tags").start_array();
        for item_122 in var_120 {
            {
                let mut object_123 = array_121.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_123, item_122)?;
                object_123.finish();
            }
        }
        array_121.finish();
    }
    if let Some(var_124) = &input.category {
        object.key("Category").string(var_124.as_str());
    }
    if let Some(var_125) = &input.severity {
        object.key("Severity").string(var_125.as_str());
    }
    if let Some(var_126) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .date_time(var_126, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_127) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .date_time(var_127, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_128) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .date_time(var_128, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_129) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .date_time(var_129, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.resource_id {
        object.key("ResourceId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.metadata {
        let mut object_132 = object.key("Metadata").start_object();
        for (key_133, value_134) in var_131 {
            {
                let mut object_135 = object_132.key(key_133).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(
                    &mut object_135,
                    value_134,
                )?;
                object_135.finish();
            }
        }
        object_132.finish();
    }
    if let Some(var_136) = &input.tags {
        let mut array_137 = object.key("Tags").start_array();
        for item_138 in var_136 {
            {
                let mut object_139 = array_137.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_139, item_138)?;
                object_139.finish();
            }
        }
        array_137.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.operating_system {
        object.key("OperatingSystem").string(var_140.as_str());
    }
    if let Some(var_141) = &input.name {
        object.key("Name").string(var_141.as_str());
    }
    if let Some(var_142) = &input.global_filters {
        let mut object_143 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_143,
            var_142,
        )?;
        object_143.finish();
    }
    if let Some(var_144) = &input.approval_rules {
        let mut object_145 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_145,
            var_144,
        )?;
        object_145.finish();
    }
    if let Some(var_146) = &input.approved_patches {
        let mut array_147 = object.key("ApprovedPatches").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148.as_str());
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_149.as_str());
    }
    if let Some(var_150) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_150);
    }
    if let Some(var_151) = &input.rejected_patches {
        let mut array_152 = object.key("RejectedPatches").start_array();
        for item_153 in var_151 {
            {
                array_152.value().string(item_153.as_str());
            }
        }
        array_152.finish();
    }
    if let Some(var_154) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_154.as_str());
    }
    if let Some(var_155) = &input.description {
        object.key("Description").string(var_155.as_str());
    }
    if let Some(var_156) = &input.sources {
        let mut array_157 = object.key("Sources").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_159,
                    item_158,
                )?;
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.client_token {
        object.key("ClientToken").string(var_160.as_str());
    }
    if let Some(var_161) = &input.tags {
        let mut array_162 = object.key("Tags").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_164, item_163)?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.sync_name {
        object.key("SyncName").string(var_165.as_str());
    }
    if let Some(var_166) = &input.s3_destination {
        let mut object_167 = object.key("S3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_s3_destination(
            &mut object_167,
            var_166,
        )?;
        object_167.finish();
    }
    if let Some(var_168) = &input.sync_type {
        object.key("SyncType").string(var_168.as_str());
    }
    if let Some(var_169) = &input.sync_source {
        let mut object_170 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(
            &mut object_170,
            var_169,
        )?;
        object_170.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_activation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActivationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.activation_id {
        object.key("ActivationId").string(var_171.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.name {
        object.key("Name").string(var_172.as_str());
    }
    if let Some(var_173) = &input.instance_id {
        object.key("InstanceId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.association_id {
        object.key("AssociationId").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.name {
        object.key("Name").string(var_175.as_str());
    }
    if let Some(var_176) = &input.document_version {
        object.key("DocumentVersion").string(var_176.as_str());
    }
    if let Some(var_177) = &input.version_name {
        object.key("VersionName").string(var_177.as_str());
    }
    if input.force {
        object.key("Force").boolean(input.force);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.type_name {
        object.key("TypeName").string(var_178.as_str());
    }
    if let Some(var_179) = &input.schema_delete_option {
        object.key("SchemaDeleteOption").string(var_179.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_180) = &input.client_token {
        object.key("ClientToken").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.window_id {
        object.key("WindowId").string(var_181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.name {
        object.key("Name").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.names {
        let mut array_185 = object.key("Names").start_array();
        for item_186 in var_184 {
            {
                array_185.value().string(item_186.as_str());
            }
        }
        array_185.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.baseline_id {
        object.key("BaselineId").string(var_187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.sync_name {
        object.key("SyncName").string(var_188.as_str());
    }
    if let Some(var_189) = &input.sync_type {
        object.key("SyncType").string(var_189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_managed_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterManagedInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.instance_id {
        object.key("InstanceId").string(var_190.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.baseline_id {
        object.key("BaselineId").string(var_191.as_str());
    }
    if let Some(var_192) = &input.patch_group {
        object.key("PatchGroup").string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_target_from_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTargetFromMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.window_id {
        object.key("WindowId").string(var_193.as_str());
    }
    if let Some(var_194) = &input.window_target_id {
        object.key("WindowTargetId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.safe {
        object.key("Safe").boolean(*var_195);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_task_from_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTaskFromMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.window_id {
        object.key("WindowId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.window_task_id {
        object.key("WindowTaskId").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_activations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActivationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.filters {
        let mut array_199 = object.key("Filters").start_array();
        for item_200 in var_198 {
            {
                let mut object_201 = array_199.value().start_object();
                crate::json_ser::serialize_structure_crate_model_describe_activations_filter(
                    &mut object_201,
                    item_200,
                )?;
                object_201.finish();
            }
        }
        array_199.finish();
    }
    if let Some(var_202) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_202).into()),
        );
    }
    if let Some(var_203) = &input.next_token {
        object.key("NextToken").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.name {
        object.key("Name").string(var_204.as_str());
    }
    if let Some(var_205) = &input.instance_id {
        object.key("InstanceId").string(var_205.as_str());
    }
    if let Some(var_206) = &input.association_id {
        object.key("AssociationId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.association_version {
        object.key("AssociationVersion").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.association_id {
        object.key("AssociationId").string(var_208.as_str());
    }
    if let Some(var_209) = &input.filters {
        let mut array_210 = object.key("Filters").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_filter(
                    &mut object_212,
                    item_211,
                )?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.next_token {
        object.key("NextToken").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_execution_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.association_id {
        object.key("AssociationId").string(var_215.as_str());
    }
    if let Some(var_216) = &input.execution_id {
        object.key("ExecutionId").string(var_216.as_str());
    }
    if let Some(var_217) = &input.filters {
        let mut array_218 = object.key("Filters").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_targets_filter(&mut object_220, item_219)?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.next_token {
        object.key("NextToken").string(var_222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.filters {
        let mut array_224 = object.key("Filters").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_automation_execution_filter(
                    &mut object_226,
                    item_225,
                )?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    if let Some(var_227) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    if let Some(var_228) = &input.next_token {
        object.key("NextToken").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_step_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationStepExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_229.as_str());
    }
    if let Some(var_230) = &input.filters {
        let mut array_231 = object.key("Filters").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_execution_filter(
                    &mut object_233,
                    item_232,
                )?;
                object_233.finish();
            }
        }
        array_231.finish();
    }
    if let Some(var_234) = &input.next_token {
        object.key("NextToken").string(var_234.as_str());
    }
    if let Some(var_235) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    if let Some(var_236) = &input.reverse_order {
        object.key("ReverseOrder").boolean(*var_236);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_available_patches_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAvailablePatchesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.filters {
        let mut array_238 = object.key("Filters").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_240,
                    item_239,
                )?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    if let Some(var_242) = &input.next_token {
        object.key("NextToken").string(var_242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.name {
        object.key("Name").string(var_243.as_str());
    }
    if let Some(var_244) = &input.document_version {
        object.key("DocumentVersion").string(var_244.as_str());
    }
    if let Some(var_245) = &input.version_name {
        object.key("VersionName").string(var_245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentPermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.name {
        object.key("Name").string(var_246.as_str());
    }
    if let Some(var_247) = &input.permission_type {
        object.key("PermissionType").string(var_247.as_str());
    }
    if let Some(var_248) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    if let Some(var_249) = &input.next_token {
        object.key("NextToken").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_instance_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectiveInstanceAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.instance_id {
        object.key("InstanceId").string(var_250.as_str());
    }
    if let Some(var_251) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_251).into()),
        );
    }
    if let Some(var_252) = &input.next_token {
        object.key("NextToken").string(var_252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_patches_for_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectivePatchesForPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.baseline_id {
        object.key("BaselineId").string(var_253.as_str());
    }
    if let Some(var_254) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_254).into()),
        );
    }
    if let Some(var_255) = &input.next_token {
        object.key("NextToken").string(var_255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_associations_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceAssociationsStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.instance_id {
        object.key("InstanceId").string(var_256.as_str());
    }
    if let Some(var_257) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_257).into()),
        );
    }
    if let Some(var_258) = &input.next_token {
        object.key("NextToken").string(var_258.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_information_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceInformationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.instance_information_filter_list {
        let mut array_260 = object.key("InstanceInformationFilterList").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_filter(
                    &mut object_262,
                    item_261,
                )?;
                object_262.finish();
            }
        }
        array_260.finish();
    }
    if let Some(var_263) = &input.filters {
        let mut array_264 = object.key("Filters").start_array();
        for item_265 in var_263 {
            {
                let mut object_266 = array_264.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_string_filter(&mut object_266, item_265)?;
                object_266.finish();
            }
        }
        array_264.finish();
    }
    if let Some(var_267) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_267).into()),
        );
    }
    if let Some(var_268) = &input.next_token {
        object.key("NextToken").string(var_268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patches_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.instance_id {
        object.key("InstanceId").string(var_269.as_str());
    }
    if let Some(var_270) = &input.filters {
        let mut array_271 = object.key("Filters").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_273,
                    item_272,
                )?;
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.next_token {
        object.key("NextToken").string(var_274.as_str());
    }
    if let Some(var_275) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_275).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.instance_ids {
        let mut array_277 = object.key("InstanceIds").start_array();
        for item_278 in var_276 {
            {
                array_277.value().string(item_278.as_str());
            }
        }
        array_277.finish();
    }
    if let Some(var_279) = &input.next_token {
        object.key("NextToken").string(var_279.as_str());
    }
    if let Some(var_280) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.patch_group {
        object.key("PatchGroup").string(var_281.as_str());
    }
    if let Some(var_282) = &input.filters {
        let mut array_283 = object.key("Filters").start_array();
        for item_284 in var_282 {
            {
                let mut object_285 = array_283.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_patch_state_filter(
                    &mut object_285,
                    item_284,
                )?;
                object_285.finish();
            }
        }
        array_283.finish();
    }
    if let Some(var_286) = &input.next_token {
        object.key("NextToken").string(var_286.as_str());
    }
    if let Some(var_287) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_287).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inventory_deletions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInventoryDeletionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.deletion_id {
        object.key("DeletionId").string(var_288.as_str());
    }
    if let Some(var_289) = &input.next_token {
        object.key("NextToken").string(var_289.as_str());
    }
    if let Some(var_290) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_290).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.window_id {
        object.key("WindowId").string(var_291.as_str());
    }
    if let Some(var_292) = &input.filters {
        let mut array_293 = object.key("Filters").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_295,
                    item_294,
                )?;
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.next_token {
        object.key("NextToken").string(var_297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_task_invocations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTaskInvocationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_298.as_str());
    }
    if let Some(var_299) = &input.task_id {
        object.key("TaskId").string(var_299.as_str());
    }
    if let Some(var_300) = &input.filters {
        let mut array_301 = object.key("Filters").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_303,
                    item_302,
                )?;
                object_303.finish();
            }
        }
        array_301.finish();
    }
    if let Some(var_304) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_304).into()),
        );
    }
    if let Some(var_305) = &input.next_token {
        object.key("NextToken").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_306.as_str());
    }
    if let Some(var_307) = &input.filters {
        let mut array_308 = object.key("Filters").start_array();
        for item_309 in var_307 {
            {
                let mut object_310 = array_308.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_310,
                    item_309,
                )?;
                object_310.finish();
            }
        }
        array_308.finish();
    }
    if let Some(var_311) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    if let Some(var_312) = &input.next_token {
        object.key("NextToken").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.filters {
        let mut array_314 = object.key("Filters").start_array();
        for item_315 in var_313 {
            {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_316,
                    item_315,
                )?;
                object_316.finish();
            }
        }
        array_314.finish();
    }
    if let Some(var_317) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_317).into()),
        );
    }
    if let Some(var_318) = &input.next_token {
        object.key("NextToken").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.window_id {
        object.key("WindowId").string(var_319.as_str());
    }
    if let Some(var_320) = &input.targets {
        let mut array_321 = object.key("Targets").start_array();
        for item_322 in var_320 {
            {
                let mut object_323 = array_321.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_323, item_322)?;
                object_323.finish();
            }
        }
        array_321.finish();
    }
    if let Some(var_324) = &input.resource_type {
        object.key("ResourceType").string(var_324.as_str());
    }
    if let Some(var_325) = &input.filters {
        let mut array_326 = object.key("Filters").start_array();
        for item_327 in var_325 {
            {
                let mut object_328 = array_326.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_328,
                    item_327,
                )?;
                object_328.finish();
            }
        }
        array_326.finish();
    }
    if let Some(var_329) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_329).into()),
        );
    }
    if let Some(var_330) = &input.next_token {
        object.key("NextToken").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_for_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsForTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.targets {
        let mut array_332 = object.key("Targets").start_array();
        for item_333 in var_331 {
            {
                let mut object_334 = array_332.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_334, item_333)?;
                object_334.finish();
            }
        }
        array_332.finish();
    }
    if let Some(var_335) = &input.resource_type {
        object.key("ResourceType").string(var_335.as_str());
    }
    if let Some(var_336) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_336).into()),
        );
    }
    if let Some(var_337) = &input.next_token {
        object.key("NextToken").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.window_id {
        object.key("WindowId").string(var_338.as_str());
    }
    if let Some(var_339) = &input.filters {
        let mut array_340 = object.key("Filters").start_array();
        for item_341 in var_339 {
            {
                let mut object_342 = array_340.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_342,
                    item_341,
                )?;
                object_342.finish();
            }
        }
        array_340.finish();
    }
    if let Some(var_343) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_343).into()),
        );
    }
    if let Some(var_344) = &input.next_token {
        object.key("NextToken").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.window_id {
        object.key("WindowId").string(var_345.as_str());
    }
    if let Some(var_346) = &input.filters {
        let mut array_347 = object.key("Filters").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_349,
                    item_348,
                )?;
                object_349.finish();
            }
        }
        array_347.finish();
    }
    if let Some(var_350) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_350).into()),
        );
    }
    if let Some(var_351) = &input.next_token {
        object.key("NextToken").string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_ops_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOpsItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.ops_item_filters {
        let mut array_353 = object.key("OpsItemFilters").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_filter(
                    &mut object_355,
                    item_354,
                )?;
                object_355.finish();
            }
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_356).into()),
        );
    }
    if let Some(var_357) = &input.next_token {
        object.key("NextToken").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.filters {
        let mut array_359 = object.key("Filters").start_array();
        for item_360 in var_358 {
            {
                let mut object_361 = array_359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameters_filter(
                    &mut object_361,
                    item_360,
                )?;
                object_361.finish();
            }
        }
        array_359.finish();
    }
    if let Some(var_362) = &input.parameter_filters {
        let mut array_363 = object.key("ParameterFilters").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(
                    &mut object_365,
                    item_364,
                )?;
                object_365.finish();
            }
        }
        array_363.finish();
    }
    if let Some(var_366) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_366).into()),
        );
    }
    if let Some(var_367) = &input.next_token {
        object.key("NextToken").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_baselines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchBaselinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.filters {
        let mut array_369 = object.key("Filters").start_array();
        for item_370 in var_368 {
            {
                let mut object_371 = array_369.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_371,
                    item_370,
                )?;
                object_371.finish();
            }
        }
        array_369.finish();
    }
    if let Some(var_372) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_372).into()),
        );
    }
    if let Some(var_373) = &input.next_token {
        object.key("NextToken").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_374).into()),
        );
    }
    if let Some(var_375) = &input.filters {
        let mut array_376 = object.key("Filters").start_array();
        for item_377 in var_375 {
            {
                let mut object_378 = array_376.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_378,
                    item_377,
                )?;
                object_378.finish();
            }
        }
        array_376.finish();
    }
    if let Some(var_379) = &input.next_token {
        object.key("NextToken").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_group_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.patch_group {
        object.key("PatchGroup").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.operating_system {
        object.key("OperatingSystem").string(var_381.as_str());
    }
    if let Some(var_382) = &input.property {
        object.key("Property").string(var_382.as_str());
    }
    if let Some(var_383) = &input.patch_set {
        object.key("PatchSet").string(var_383.as_str());
    }
    if let Some(var_384) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_384).into()),
        );
    }
    if let Some(var_385) = &input.next_token {
        object.key("NextToken").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.state {
        object.key("State").string(var_386.as_str());
    }
    if let Some(var_387) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_387).into()),
        );
    }
    if let Some(var_388) = &input.next_token {
        object.key("NextToken").string(var_388.as_str());
    }
    if let Some(var_389) = &input.filters {
        let mut array_390 = object.key("Filters").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_filter(
                    &mut object_392,
                    item_391,
                )?;
                object_392.finish();
            }
        }
        array_390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_ops_item_related_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateOpsItemRelatedItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_393) = &input.ops_item_id {
        object.key("OpsItemId").string(var_393.as_str());
    }
    if let Some(var_394) = &input.association_id {
        object.key("AssociationId").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_calendar_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCalendarStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.calendar_names {
        let mut array_397 = object.key("CalendarNames").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398.as_str());
            }
        }
        array_397.finish();
    }
    if let Some(var_399) = &input.at_time {
        object.key("AtTime").string(var_399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_command_invocation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCommandInvocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.command_id {
        object.key("CommandId").string(var_400.as_str());
    }
    if let Some(var_401) = &input.instance_id {
        object.key("InstanceId").string(var_401.as_str());
    }
    if let Some(var_402) = &input.plugin_name {
        object.key("PluginName").string(var_402.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_403) = &input.target {
        object.key("Target").string(var_403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_default_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDefaultPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.operating_system {
        object.key("OperatingSystem").string(var_404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_deployable_patch_snapshot_for_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeployablePatchSnapshotForInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_405) = &input.instance_id {
        object.key("InstanceId").string(var_405.as_str());
    }
    if let Some(var_406) = &input.snapshot_id {
        object.key("SnapshotId").string(var_406.as_str());
    }
    if let Some(var_407) = &input.baseline_override {
        let mut object_408 = object.key("BaselineOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_baseline_override(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.name {
        object.key("Name").string(var_409.as_str());
    }
    if let Some(var_410) = &input.version_name {
        object.key("VersionName").string(var_410.as_str());
    }
    if let Some(var_411) = &input.document_version {
        object.key("DocumentVersion").string(var_411.as_str());
    }
    if let Some(var_412) = &input.document_format {
        object.key("DocumentFormat").string(var_412.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.filters {
        let mut array_414 = object.key("Filters").start_array();
        for item_415 in var_413 {
            {
                let mut object_416 = array_414.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_416,
                    item_415,
                )?;
                object_416.finish();
            }
        }
        array_414.finish();
    }
    if let Some(var_417) = &input.aggregators {
        let mut array_418 = object.key("Aggregators").start_array();
        for item_419 in var_417 {
            {
                let mut object_420 = array_418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(
                    &mut object_420,
                    item_419,
                )?;
                object_420.finish();
            }
        }
        array_418.finish();
    }
    if let Some(var_421) = &input.result_attributes {
        let mut array_422 = object.key("ResultAttributes").start_array();
        for item_423 in var_421 {
            {
                let mut object_424 = array_422.value().start_object();
                crate::json_ser::serialize_structure_crate_model_result_attribute(
                    &mut object_424,
                    item_423,
                )?;
                object_424.finish();
            }
        }
        array_422.finish();
    }
    if let Some(var_425) = &input.next_token {
        object.key("NextToken").string(var_425.as_str());
    }
    if let Some(var_426) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_426).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventorySchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.type_name {
        object.key("TypeName").string(var_427.as_str());
    }
    if let Some(var_428) = &input.next_token {
        object.key("NextToken").string(var_428.as_str());
    }
    if let Some(var_429) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_429).into()),
        );
    }
    if input.aggregator {
        object.key("Aggregator").boolean(input.aggregator);
    }
    if let Some(var_430) = &input.sub_type {
        object.key("SubType").boolean(*var_430);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.window_id {
        object.key("WindowId").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_433.as_str());
    }
    if let Some(var_434) = &input.task_id {
        object.key("TaskId").string(var_434.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_invocation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInvocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_435) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_435.as_str());
    }
    if let Some(var_436) = &input.task_id {
        object.key("TaskId").string(var_436.as_str());
    }
    if let Some(var_437) = &input.invocation_id {
        object.key("InvocationId").string(var_437.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.window_id {
        object.key("WindowId").string(var_438.as_str());
    }
    if let Some(var_439) = &input.window_task_id {
        object.key("WindowTaskId").string(var_439.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.ops_item_id {
        object.key("OpsItemId").string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_441.as_str());
    }
    if let Some(var_442) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.next_token {
        object.key("NextToken").string(var_443.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_summary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsSummaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.sync_name {
        object.key("SyncName").string(var_444.as_str());
    }
    if let Some(var_445) = &input.filters {
        let mut array_446 = object.key("Filters").start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(
                    &mut object_448,
                    item_447,
                )?;
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.aggregators {
        let mut array_450 = object.key("Aggregators").start_array();
        for item_451 in var_449 {
            {
                let mut object_452 = array_450.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(
                    &mut object_452,
                    item_451,
                )?;
                object_452.finish();
            }
        }
        array_450.finish();
    }
    if let Some(var_453) = &input.result_attributes {
        let mut array_454 = object.key("ResultAttributes").start_array();
        for item_455 in var_453 {
            {
                let mut object_456 = array_454.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_result_attribute(
                    &mut object_456,
                    item_455,
                )?;
                object_456.finish();
            }
        }
        array_454.finish();
    }
    if let Some(var_457) = &input.next_token {
        object.key("NextToken").string(var_457.as_str());
    }
    if let Some(var_458) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_458).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.name {
        object.key("Name").string(var_459.as_str());
    }
    if let Some(var_460) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_460);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.name {
        object.key("Name").string(var_461.as_str());
    }
    if let Some(var_462) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_462);
    }
    if let Some(var_463) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_463).into()),
        );
    }
    if let Some(var_464) = &input.next_token {
        object.key("NextToken").string(var_464.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_465) = &input.names {
        let mut array_466 = object.key("Names").start_array();
        for item_467 in var_465 {
            {
                array_466.value().string(item_467.as_str());
            }
        }
        array_466.finish();
    }
    if let Some(var_468) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_468);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_by_path_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersByPathInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_469) = &input.path {
        object.key("Path").string(var_469.as_str());
    }
    if let Some(var_470) = &input.recursive {
        object.key("Recursive").boolean(*var_470);
    }
    if let Some(var_471) = &input.parameter_filters {
        let mut array_472 = object.key("ParameterFilters").start_array();
        for item_473 in var_471 {
            {
                let mut object_474 = array_472.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(
                    &mut object_474,
                    item_473,
                )?;
                object_474.finish();
            }
        }
        array_472.finish();
    }
    if let Some(var_475) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_475);
    }
    if let Some(var_476) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_476).into()),
        );
    }
    if let Some(var_477) = &input.next_token {
        object.key("NextToken").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.baseline_id {
        object.key("BaselineId").string(var_478.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.patch_group {
        object.key("PatchGroup").string(var_479.as_str());
    }
    if let Some(var_480) = &input.operating_system {
        object.key("OperatingSystem").string(var_480.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.setting_id {
        object.key("SettingId").string(var_481.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_label_parameter_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::LabelParameterVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_482) = &input.name {
        object.key("Name").string(var_482.as_str());
    }
    if let Some(var_483) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    if let Some(var_484) = &input.labels {
        let mut array_485 = object.key("Labels").start_array();
        for item_486 in var_484 {
            {
                array_485.value().string(item_486.as_str());
            }
        }
        array_485.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.association_filter_list {
        let mut array_488 = object.key("AssociationFilterList").start_array();
        for item_489 in var_487 {
            {
                let mut object_490 = array_488.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_filter(
                    &mut object_490,
                    item_489,
                )?;
                object_490.finish();
            }
        }
        array_488.finish();
    }
    if let Some(var_491) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_491).into()),
        );
    }
    if let Some(var_492) = &input.next_token {
        object.key("NextToken").string(var_492.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_association_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.association_id {
        object.key("AssociationId").string(var_493.as_str());
    }
    if let Some(var_494) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_494).into()),
        );
    }
    if let Some(var_495) = &input.next_token {
        object.key("NextToken").string(var_495.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_command_invocations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandInvocationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_496) = &input.command_id {
        object.key("CommandId").string(var_496.as_str());
    }
    if let Some(var_497) = &input.instance_id {
        object.key("InstanceId").string(var_497.as_str());
    }
    if let Some(var_498) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_498).into()),
        );
    }
    if let Some(var_499) = &input.next_token {
        object.key("NextToken").string(var_499.as_str());
    }
    if let Some(var_500) = &input.filters {
        let mut array_501 = object.key("Filters").start_array();
        for item_502 in var_500 {
            {
                let mut object_503 = array_501.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(
                    &mut object_503,
                    item_502,
                )?;
                object_503.finish();
            }
        }
        array_501.finish();
    }
    if input.details {
        object.key("Details").boolean(input.details);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_commands_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.command_id {
        object.key("CommandId").string(var_504.as_str());
    }
    if let Some(var_505) = &input.instance_id {
        object.key("InstanceId").string(var_505.as_str());
    }
    if let Some(var_506) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_506).into()),
        );
    }
    if let Some(var_507) = &input.next_token {
        object.key("NextToken").string(var_507.as_str());
    }
    if let Some(var_508) = &input.filters {
        let mut array_509 = object.key("Filters").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(
                    &mut object_511,
                    item_510,
                )?;
                object_511.finish();
            }
        }
        array_509.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_512) = &input.filters {
        let mut array_513 = object.key("Filters").start_array();
        for item_514 in var_512 {
            {
                let mut object_515 = array_513.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_515,
                    item_514,
                )?;
                object_515.finish();
            }
        }
        array_513.finish();
    }
    if let Some(var_516) = &input.resource_ids {
        let mut array_517 = object.key("ResourceIds").start_array();
        for item_518 in var_516 {
            {
                array_517.value().string(item_518.as_str());
            }
        }
        array_517.finish();
    }
    if let Some(var_519) = &input.resource_types {
        let mut array_520 = object.key("ResourceTypes").start_array();
        for item_521 in var_519 {
            {
                array_520.value().string(item_521.as_str());
            }
        }
        array_520.finish();
    }
    if let Some(var_522) = &input.next_token {
        object.key("NextToken").string(var_522.as_str());
    }
    if let Some(var_523) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_523).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_524) = &input.filters {
        let mut array_525 = object.key("Filters").start_array();
        for item_526 in var_524 {
            {
                let mut object_527 = array_525.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_527,
                    item_526,
                )?;
                object_527.finish();
            }
        }
        array_525.finish();
    }
    if let Some(var_528) = &input.next_token {
        object.key("NextToken").string(var_528.as_str());
    }
    if let Some(var_529) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_529).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_metadata_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentMetadataHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_530) = &input.name {
        object.key("Name").string(var_530.as_str());
    }
    if let Some(var_531) = &input.document_version {
        object.key("DocumentVersion").string(var_531.as_str());
    }
    if let Some(var_532) = &input.metadata {
        object.key("Metadata").string(var_532.as_str());
    }
    if let Some(var_533) = &input.next_token {
        object.key("NextToken").string(var_533.as_str());
    }
    if let Some(var_534) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_534).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_documents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_535) = &input.document_filter_list {
        let mut array_536 = object.key("DocumentFilterList").start_array();
        for item_537 in var_535 {
            {
                let mut object_538 = array_536.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_filter(
                    &mut object_538,
                    item_537,
                )?;
                object_538.finish();
            }
        }
        array_536.finish();
    }
    if let Some(var_539) = &input.filters {
        let mut array_540 = object.key("Filters").start_array();
        for item_541 in var_539 {
            {
                let mut object_542 = array_540.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_key_values_filter(
                    &mut object_542,
                    item_541,
                )?;
                object_542.finish();
            }
        }
        array_540.finish();
    }
    if let Some(var_543) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_543).into()),
        );
    }
    if let Some(var_544) = &input.next_token {
        object.key("NextToken").string(var_544.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_545) = &input.name {
        object.key("Name").string(var_545.as_str());
    }
    if let Some(var_546) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_546).into()),
        );
    }
    if let Some(var_547) = &input.next_token {
        object.key("NextToken").string(var_547.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inventory_entries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInventoryEntriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.instance_id {
        object.key("InstanceId").string(var_548.as_str());
    }
    if let Some(var_549) = &input.type_name {
        object.key("TypeName").string(var_549.as_str());
    }
    if let Some(var_550) = &input.filters {
        let mut array_551 = object.key("Filters").start_array();
        for item_552 in var_550 {
            {
                let mut object_553 = array_551.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_553,
                    item_552,
                )?;
                object_553.finish();
            }
        }
        array_551.finish();
    }
    if let Some(var_554) = &input.next_token {
        object.key("NextToken").string(var_554.as_str());
    }
    if let Some(var_555) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_555).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_556) = &input.filters {
        let mut array_557 = object.key("Filters").start_array();
        for item_558 in var_556 {
            {
                let mut object_559 = array_557.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_event_filter(
                    &mut object_559,
                    item_558,
                )?;
                object_559.finish();
            }
        }
        array_557.finish();
    }
    if let Some(var_560) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_560).into()),
        );
    }
    if let Some(var_561) = &input.next_token {
        object.key("NextToken").string(var_561.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_related_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemRelatedItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_562) = &input.ops_item_id {
        object.key("OpsItemId").string(var_562.as_str());
    }
    if let Some(var_563) = &input.filters {
        let mut array_564 = object.key("Filters").start_array();
        for item_565 in var_563 {
            {
                let mut object_566 = array_564.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_related_items_filter(
                    &mut object_566,
                    item_565,
                )?;
                object_566.finish();
            }
        }
        array_564.finish();
    }
    if let Some(var_567) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_567).into()),
        );
    }
    if let Some(var_568) = &input.next_token {
        object.key("NextToken").string(var_568.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_569) = &input.filters {
        let mut array_570 = object.key("Filters").start_array();
        for item_571 in var_569 {
            {
                let mut object_572 = array_570.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_metadata_filter(
                    &mut object_572,
                    item_571,
                )?;
                object_572.finish();
            }
        }
        array_570.finish();
    }
    if let Some(var_573) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    if let Some(var_574) = &input.next_token {
        object.key("NextToken").string(var_574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_compliance_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceComplianceSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_575) = &input.filters {
        let mut array_576 = object.key("Filters").start_array();
        for item_577 in var_575 {
            {
                let mut object_578 = array_576.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_578,
                    item_577,
                )?;
                object_578.finish();
            }
        }
        array_576.finish();
    }
    if let Some(var_579) = &input.next_token {
        object.key("NextToken").string(var_579.as_str());
    }
    if let Some(var_580) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_580).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.sync_type {
        object.key("SyncType").string(var_581.as_str());
    }
    if let Some(var_582) = &input.next_token {
        object.key("NextToken").string(var_582.as_str());
    }
    if let Some(var_583) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_583).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_584) = &input.resource_type {
        object.key("ResourceType").string(var_584.as_str());
    }
    if let Some(var_585) = &input.resource_id {
        object.key("ResourceId").string(var_585.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_document_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyDocumentPermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.name {
        object.key("Name").string(var_586.as_str());
    }
    if let Some(var_587) = &input.permission_type {
        object.key("PermissionType").string(var_587.as_str());
    }
    if let Some(var_588) = &input.account_ids_to_add {
        let mut array_589 = object.key("AccountIdsToAdd").start_array();
        for item_590 in var_588 {
            {
                array_589.value().string(item_590.as_str());
            }
        }
        array_589.finish();
    }
    if let Some(var_591) = &input.account_ids_to_remove {
        let mut array_592 = object.key("AccountIdsToRemove").start_array();
        for item_593 in var_591 {
            {
                array_592.value().string(item_593.as_str());
            }
        }
        array_592.finish();
    }
    if let Some(var_594) = &input.shared_document_version {
        object.key("SharedDocumentVersion").string(var_594.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_compliance_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutComplianceItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.resource_id {
        object.key("ResourceId").string(var_595.as_str());
    }
    if let Some(var_596) = &input.resource_type {
        object.key("ResourceType").string(var_596.as_str());
    }
    if let Some(var_597) = &input.compliance_type {
        object.key("ComplianceType").string(var_597.as_str());
    }
    if let Some(var_598) = &input.execution_summary {
        let mut object_599 = object.key("ExecutionSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_compliance_execution_summary(
            &mut object_599,
            var_598,
        )?;
        object_599.finish();
    }
    if let Some(var_600) = &input.items {
        let mut array_601 = object.key("Items").start_array();
        for item_602 in var_600 {
            {
                let mut object_603 = array_601.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_item_entry(
                    &mut object_603,
                    item_602,
                )?;
                object_603.finish();
            }
        }
        array_601.finish();
    }
    if let Some(var_604) = &input.item_content_hash {
        object.key("ItemContentHash").string(var_604.as_str());
    }
    if let Some(var_605) = &input.upload_type {
        object.key("UploadType").string(var_605.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_606) = &input.instance_id {
        object.key("InstanceId").string(var_606.as_str());
    }
    if let Some(var_607) = &input.items {
        let mut array_608 = object.key("Items").start_array();
        for item_609 in var_607 {
            {
                let mut object_610 = array_608.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_item(
                    &mut object_610,
                    item_609,
                )?;
                object_610.finish();
            }
        }
        array_608.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_611) = &input.name {
        object.key("Name").string(var_611.as_str());
    }
    if let Some(var_612) = &input.description {
        object.key("Description").string(var_612.as_str());
    }
    if let Some(var_613) = &input.value {
        object.key("Value").string(var_613.as_str());
    }
    if let Some(var_614) = &input.r#type {
        object.key("Type").string(var_614.as_str());
    }
    if let Some(var_615) = &input.key_id {
        object.key("KeyId").string(var_615.as_str());
    }
    if let Some(var_616) = &input.overwrite {
        object.key("Overwrite").boolean(*var_616);
    }
    if let Some(var_617) = &input.allowed_pattern {
        object.key("AllowedPattern").string(var_617.as_str());
    }
    if let Some(var_618) = &input.tags {
        let mut array_619 = object.key("Tags").start_array();
        for item_620 in var_618 {
            {
                let mut object_621 = array_619.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_621, item_620)?;
                object_621.finish();
            }
        }
        array_619.finish();
    }
    if let Some(var_622) = &input.tier {
        object.key("Tier").string(var_622.as_str());
    }
    if let Some(var_623) = &input.policies {
        object.key("Policies").string(var_623.as_str());
    }
    if let Some(var_624) = &input.data_type {
        object.key("DataType").string(var_624.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_default_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDefaultPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_625) = &input.baseline_id {
        object.key("BaselineId").string(var_625.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_626) = &input.baseline_id {
        object.key("BaselineId").string(var_626.as_str());
    }
    if let Some(var_627) = &input.patch_group {
        object.key("PatchGroup").string(var_627.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_target_with_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTargetWithMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_628) = &input.window_id {
        object.key("WindowId").string(var_628.as_str());
    }
    if let Some(var_629) = &input.resource_type {
        object.key("ResourceType").string(var_629.as_str());
    }
    if let Some(var_630) = &input.targets {
        let mut array_631 = object.key("Targets").start_array();
        for item_632 in var_630 {
            {
                let mut object_633 = array_631.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_633, item_632)?;
                object_633.finish();
            }
        }
        array_631.finish();
    }
    if let Some(var_634) = &input.owner_information {
        object.key("OwnerInformation").string(var_634.as_str());
    }
    if let Some(var_635) = &input.name {
        object.key("Name").string(var_635.as_str());
    }
    if let Some(var_636) = &input.description {
        object.key("Description").string(var_636.as_str());
    }
    if let Some(var_637) = &input.client_token {
        object.key("ClientToken").string(var_637.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_task_with_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTaskWithMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_638) = &input.window_id {
        object.key("WindowId").string(var_638.as_str());
    }
    if let Some(var_639) = &input.targets {
        let mut array_640 = object.key("Targets").start_array();
        for item_641 in var_639 {
            {
                let mut object_642 = array_640.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_642, item_641)?;
                object_642.finish();
            }
        }
        array_640.finish();
    }
    if let Some(var_643) = &input.task_arn {
        object.key("TaskArn").string(var_643.as_str());
    }
    if let Some(var_644) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_644.as_str());
    }
    if let Some(var_645) = &input.task_type {
        object.key("TaskType").string(var_645.as_str());
    }
    if let Some(var_646) = &input.task_parameters {
        let mut object_647 = object.key("TaskParameters").start_object();
        for (key_648, value_649) in var_646 {
            {
                let mut object_650 = object_647.key(key_648).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_650, value_649)?;
                object_650.finish();
            }
        }
        object_647.finish();
    }
    if let Some(var_651) = &input.task_invocation_parameters {
        let mut object_652 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_652, var_651)?;
        object_652.finish();
    }
    if let Some(var_653) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_653).into()),
        );
    }
    if let Some(var_654) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_654.as_str());
    }
    if let Some(var_655) = &input.max_errors {
        object.key("MaxErrors").string(var_655.as_str());
    }
    if let Some(var_656) = &input.logging_info {
        let mut object_657 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_657, var_656)?;
        object_657.finish();
    }
    if let Some(var_658) = &input.name {
        object.key("Name").string(var_658.as_str());
    }
    if let Some(var_659) = &input.description {
        object.key("Description").string(var_659.as_str());
    }
    if let Some(var_660) = &input.client_token {
        object.key("ClientToken").string(var_660.as_str());
    }
    if let Some(var_661) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_661.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_662) = &input.resource_type {
        object.key("ResourceType").string(var_662.as_str());
    }
    if let Some(var_663) = &input.resource_id {
        object.key("ResourceId").string(var_663.as_str());
    }
    if let Some(var_664) = &input.tag_keys {
        let mut array_665 = object.key("TagKeys").start_array();
        for item_666 in var_664 {
            {
                array_665.value().string(item_666.as_str());
            }
        }
        array_665.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.setting_id {
        object.key("SettingId").string(var_667.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_668) = &input.session_id {
        object.key("SessionId").string(var_668.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_automation_signal_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendAutomationSignalInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_669) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_669.as_str());
    }
    if let Some(var_670) = &input.signal_type {
        object.key("SignalType").string(var_670.as_str());
    }
    if let Some(var_671) = &input.payload {
        let mut object_672 = object.key("Payload").start_object();
        for (key_673, value_674) in var_671 {
            {
                let mut array_675 = object_672.key(key_673).start_array();
                for item_676 in value_674 {
                    {
                        array_675.value().string(item_676.as_str());
                    }
                }
                array_675.finish();
            }
        }
        object_672.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_677) = &input.instance_ids {
        let mut array_678 = object.key("InstanceIds").start_array();
        for item_679 in var_677 {
            {
                array_678.value().string(item_679.as_str());
            }
        }
        array_678.finish();
    }
    if let Some(var_680) = &input.targets {
        let mut array_681 = object.key("Targets").start_array();
        for item_682 in var_680 {
            {
                let mut object_683 = array_681.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_683, item_682)?;
                object_683.finish();
            }
        }
        array_681.finish();
    }
    if let Some(var_684) = &input.document_name {
        object.key("DocumentName").string(var_684.as_str());
    }
    if let Some(var_685) = &input.document_version {
        object.key("DocumentVersion").string(var_685.as_str());
    }
    if let Some(var_686) = &input.document_hash {
        object.key("DocumentHash").string(var_686.as_str());
    }
    if let Some(var_687) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_687.as_str());
    }
    if let Some(var_688) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_688).into()),
        );
    }
    if let Some(var_689) = &input.comment {
        object.key("Comment").string(var_689.as_str());
    }
    if let Some(var_690) = &input.parameters {
        let mut object_691 = object.key("Parameters").start_object();
        for (key_692, value_693) in var_690 {
            {
                let mut array_694 = object_691.key(key_692).start_array();
                for item_695 in value_693 {
                    {
                        array_694.value().string(item_695.as_str());
                    }
                }
                array_694.finish();
            }
        }
        object_691.finish();
    }
    if let Some(var_696) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_696.as_str());
    }
    if let Some(var_697) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_697.as_str());
    }
    if let Some(var_698) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_698.as_str());
    }
    if let Some(var_699) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_699.as_str());
    }
    if let Some(var_700) = &input.max_errors {
        object.key("MaxErrors").string(var_700.as_str());
    }
    if let Some(var_701) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_701.as_str());
    }
    if let Some(var_702) = &input.notification_config {
        let mut object_703 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(
            &mut object_703,
            var_702,
        )?;
        object_703.finish();
    }
    if let Some(var_704) = &input.cloud_watch_output_config {
        let mut object_705 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(
            &mut object_705,
            var_704,
        )?;
        object_705.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_associations_once_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAssociationsOnceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_706) = &input.association_ids {
        let mut array_707 = object.key("AssociationIds").start_array();
        for item_708 in var_706 {
            {
                array_707.value().string(item_708.as_str());
            }
        }
        array_707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_709) = &input.document_name {
        object.key("DocumentName").string(var_709.as_str());
    }
    if let Some(var_710) = &input.document_version {
        object.key("DocumentVersion").string(var_710.as_str());
    }
    if let Some(var_711) = &input.parameters {
        let mut object_712 = object.key("Parameters").start_object();
        for (key_713, value_714) in var_711 {
            {
                let mut array_715 = object_712.key(key_713).start_array();
                for item_716 in value_714 {
                    {
                        array_715.value().string(item_716.as_str());
                    }
                }
                array_715.finish();
            }
        }
        object_712.finish();
    }
    if let Some(var_717) = &input.client_token {
        object.key("ClientToken").string(var_717.as_str());
    }
    if let Some(var_718) = &input.mode {
        object.key("Mode").string(var_718.as_str());
    }
    if let Some(var_719) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_719.as_str());
    }
    if let Some(var_720) = &input.targets {
        let mut array_721 = object.key("Targets").start_array();
        for item_722 in var_720 {
            {
                let mut object_723 = array_721.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_723, item_722)?;
                object_723.finish();
            }
        }
        array_721.finish();
    }
    if let Some(var_724) = &input.target_maps {
        let mut array_725 = object.key("TargetMaps").start_array();
        for item_726 in var_724 {
            {
                let mut object_727 = array_725.value().start_object();
                for (key_728, value_729) in item_726 {
                    {
                        let mut array_730 = object_727.key(key_728).start_array();
                        for item_731 in value_729 {
                            {
                                array_730.value().string(item_731.as_str());
                            }
                        }
                        array_730.finish();
                    }
                }
                object_727.finish();
            }
        }
        array_725.finish();
    }
    if let Some(var_732) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_732.as_str());
    }
    if let Some(var_733) = &input.max_errors {
        object.key("MaxErrors").string(var_733.as_str());
    }
    if let Some(var_734) = &input.target_locations {
        let mut array_735 = object.key("TargetLocations").start_array();
        for item_736 in var_734 {
            {
                let mut object_737 = array_735.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_737,
                    item_736,
                )?;
                object_737.finish();
            }
        }
        array_735.finish();
    }
    if let Some(var_738) = &input.tags {
        let mut array_739 = object.key("Tags").start_array();
        for item_740 in var_738 {
            {
                let mut object_741 = array_739.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_741, item_740)?;
                object_741.finish();
            }
        }
        array_739.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_change_request_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChangeRequestExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_742) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_742, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_743) = &input.document_name {
        object.key("DocumentName").string(var_743.as_str());
    }
    if let Some(var_744) = &input.document_version {
        object.key("DocumentVersion").string(var_744.as_str());
    }
    if let Some(var_745) = &input.parameters {
        let mut object_746 = object.key("Parameters").start_object();
        for (key_747, value_748) in var_745 {
            {
                let mut array_749 = object_746.key(key_747).start_array();
                for item_750 in value_748 {
                    {
                        array_749.value().string(item_750.as_str());
                    }
                }
                array_749.finish();
            }
        }
        object_746.finish();
    }
    if let Some(var_751) = &input.change_request_name {
        object.key("ChangeRequestName").string(var_751.as_str());
    }
    if let Some(var_752) = &input.client_token {
        object.key("ClientToken").string(var_752.as_str());
    }
    if input.auto_approve {
        object.key("AutoApprove").boolean(input.auto_approve);
    }
    if let Some(var_753) = &input.runbooks {
        let mut array_754 = object.key("Runbooks").start_array();
        for item_755 in var_753 {
            {
                let mut object_756 = array_754.value().start_object();
                crate::json_ser::serialize_structure_crate_model_runbook(
                    &mut object_756,
                    item_755,
                )?;
                object_756.finish();
            }
        }
        array_754.finish();
    }
    if let Some(var_757) = &input.tags {
        let mut array_758 = object.key("Tags").start_array();
        for item_759 in var_757 {
            {
                let mut object_760 = array_758.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_760, item_759)?;
                object_760.finish();
            }
        }
        array_758.finish();
    }
    if let Some(var_761) = &input.scheduled_end_time {
        object
            .key("ScheduledEndTime")
            .date_time(var_761, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_762) = &input.change_details {
        object.key("ChangeDetails").string(var_762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_763) = &input.target {
        object.key("Target").string(var_763.as_str());
    }
    if let Some(var_764) = &input.document_name {
        object.key("DocumentName").string(var_764.as_str());
    }
    if let Some(var_765) = &input.reason {
        object.key("Reason").string(var_765.as_str());
    }
    if let Some(var_766) = &input.parameters {
        let mut object_767 = object.key("Parameters").start_object();
        for (key_768, value_769) in var_766 {
            {
                let mut array_770 = object_767.key(key_768).start_array();
                for item_771 in value_769 {
                    {
                        array_770.value().string(item_771.as_str());
                    }
                }
                array_770.finish();
            }
        }
        object_767.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_772) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_772.as_str());
    }
    if let Some(var_773) = &input.r#type {
        object.key("Type").string(var_773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_774) = &input.session_id {
        object.key("SessionId").string(var_774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_unlabel_parameter_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UnlabelParameterVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_775) = &input.name {
        object.key("Name").string(var_775.as_str());
    }
    if let Some(var_776) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_776).into()),
        );
    }
    if let Some(var_777) = &input.labels {
        let mut array_778 = object.key("Labels").start_array();
        for item_779 in var_777 {
            {
                array_778.value().string(item_779.as_str());
            }
        }
        array_778.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_780) = &input.association_id {
        object.key("AssociationId").string(var_780.as_str());
    }
    if let Some(var_781) = &input.parameters {
        let mut object_782 = object.key("Parameters").start_object();
        for (key_783, value_784) in var_781 {
            {
                let mut array_785 = object_782.key(key_783).start_array();
                for item_786 in value_784 {
                    {
                        array_785.value().string(item_786.as_str());
                    }
                }
                array_785.finish();
            }
        }
        object_782.finish();
    }
    if let Some(var_787) = &input.document_version {
        object.key("DocumentVersion").string(var_787.as_str());
    }
    if let Some(var_788) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_788.as_str());
    }
    if let Some(var_789) = &input.output_location {
        let mut object_790 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_790,
            var_789,
        )?;
        object_790.finish();
    }
    if let Some(var_791) = &input.name {
        object.key("Name").string(var_791.as_str());
    }
    if let Some(var_792) = &input.targets {
        let mut array_793 = object.key("Targets").start_array();
        for item_794 in var_792 {
            {
                let mut object_795 = array_793.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_795, item_794)?;
                object_795.finish();
            }
        }
        array_793.finish();
    }
    if let Some(var_796) = &input.association_name {
        object.key("AssociationName").string(var_796.as_str());
    }
    if let Some(var_797) = &input.association_version {
        object.key("AssociationVersion").string(var_797.as_str());
    }
    if let Some(var_798) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_798.as_str());
    }
    if let Some(var_799) = &input.max_errors {
        object.key("MaxErrors").string(var_799.as_str());
    }
    if let Some(var_800) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_800.as_str());
    }
    if let Some(var_801) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_801.as_str());
    }
    if let Some(var_802) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_802.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_803) = &input.calendar_names {
        let mut array_804 = object.key("CalendarNames").start_array();
        for item_805 in var_803 {
            {
                array_804.value().string(item_805.as_str());
            }
        }
        array_804.finish();
    }
    if let Some(var_806) = &input.target_locations {
        let mut array_807 = object.key("TargetLocations").start_array();
        for item_808 in var_806 {
            {
                let mut object_809 = array_807.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_809,
                    item_808,
                )?;
                object_809.finish();
            }
        }
        array_807.finish();
    }
    if let Some(var_810) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_810).into()),
        );
    }
    if let Some(var_811) = &input.target_maps {
        let mut array_812 = object.key("TargetMaps").start_array();
        for item_813 in var_811 {
            {
                let mut object_814 = array_812.value().start_object();
                for (key_815, value_816) in item_813 {
                    {
                        let mut array_817 = object_814.key(key_815).start_array();
                        for item_818 in value_816 {
                            {
                                array_817.value().string(item_818.as_str());
                            }
                        }
                        array_817.finish();
                    }
                }
                object_814.finish();
            }
        }
        array_812.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_819) = &input.name {
        object.key("Name").string(var_819.as_str());
    }
    if let Some(var_820) = &input.instance_id {
        object.key("InstanceId").string(var_820.as_str());
    }
    if let Some(var_821) = &input.association_status {
        let mut object_822 = object.key("AssociationStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_association_status(
            &mut object_822,
            var_821,
        )?;
        object_822.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_823) = &input.content {
        object.key("Content").string(var_823.as_str());
    }
    if let Some(var_824) = &input.attachments {
        let mut array_825 = object.key("Attachments").start_array();
        for item_826 in var_824 {
            {
                let mut object_827 = array_825.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(
                    &mut object_827,
                    item_826,
                )?;
                object_827.finish();
            }
        }
        array_825.finish();
    }
    if let Some(var_828) = &input.name {
        object.key("Name").string(var_828.as_str());
    }
    if let Some(var_829) = &input.display_name {
        object.key("DisplayName").string(var_829.as_str());
    }
    if let Some(var_830) = &input.version_name {
        object.key("VersionName").string(var_830.as_str());
    }
    if let Some(var_831) = &input.document_version {
        object.key("DocumentVersion").string(var_831.as_str());
    }
    if let Some(var_832) = &input.document_format {
        object.key("DocumentFormat").string(var_832.as_str());
    }
    if let Some(var_833) = &input.target_type {
        object.key("TargetType").string(var_833.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_default_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentDefaultVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_834) = &input.name {
        object.key("Name").string(var_834.as_str());
    }
    if let Some(var_835) = &input.document_version {
        object.key("DocumentVersion").string(var_835.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_836) = &input.name {
        object.key("Name").string(var_836.as_str());
    }
    if let Some(var_837) = &input.document_version {
        object.key("DocumentVersion").string(var_837.as_str());
    }
    if let Some(var_838) = &input.document_reviews {
        let mut object_839 = object.key("DocumentReviews").start_object();
        crate::json_ser::serialize_structure_crate_model_document_reviews(
            &mut object_839,
            var_838,
        )?;
        object_839.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_840) = &input.window_id {
        object.key("WindowId").string(var_840.as_str());
    }
    if let Some(var_841) = &input.name {
        object.key("Name").string(var_841.as_str());
    }
    if let Some(var_842) = &input.description {
        object.key("Description").string(var_842.as_str());
    }
    if let Some(var_843) = &input.start_date {
        object.key("StartDate").string(var_843.as_str());
    }
    if let Some(var_844) = &input.end_date {
        object.key("EndDate").string(var_844.as_str());
    }
    if let Some(var_845) = &input.schedule {
        object.key("Schedule").string(var_845.as_str());
    }
    if let Some(var_846) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_846.as_str());
    }
    if let Some(var_847) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_847).into()),
        );
    }
    if let Some(var_848) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_848).into()),
        );
    }
    if let Some(var_849) = &input.cutoff {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_849).into()),
        );
    }
    if let Some(var_850) = &input.allow_unassociated_targets {
        object.key("AllowUnassociatedTargets").boolean(*var_850);
    }
    if let Some(var_851) = &input.enabled {
        object.key("Enabled").boolean(*var_851);
    }
    if let Some(var_852) = &input.replace {
        object.key("Replace").boolean(*var_852);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_853) = &input.window_id {
        object.key("WindowId").string(var_853.as_str());
    }
    if let Some(var_854) = &input.window_target_id {
        object.key("WindowTargetId").string(var_854.as_str());
    }
    if let Some(var_855) = &input.targets {
        let mut array_856 = object.key("Targets").start_array();
        for item_857 in var_855 {
            {
                let mut object_858 = array_856.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_858, item_857)?;
                object_858.finish();
            }
        }
        array_856.finish();
    }
    if let Some(var_859) = &input.owner_information {
        object.key("OwnerInformation").string(var_859.as_str());
    }
    if let Some(var_860) = &input.name {
        object.key("Name").string(var_860.as_str());
    }
    if let Some(var_861) = &input.description {
        object.key("Description").string(var_861.as_str());
    }
    if let Some(var_862) = &input.replace {
        object.key("Replace").boolean(*var_862);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_863) = &input.window_id {
        object.key("WindowId").string(var_863.as_str());
    }
    if let Some(var_864) = &input.window_task_id {
        object.key("WindowTaskId").string(var_864.as_str());
    }
    if let Some(var_865) = &input.targets {
        let mut array_866 = object.key("Targets").start_array();
        for item_867 in var_865 {
            {
                let mut object_868 = array_866.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_868, item_867)?;
                object_868.finish();
            }
        }
        array_866.finish();
    }
    if let Some(var_869) = &input.task_arn {
        object.key("TaskArn").string(var_869.as_str());
    }
    if let Some(var_870) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_870.as_str());
    }
    if let Some(var_871) = &input.task_parameters {
        let mut object_872 = object.key("TaskParameters").start_object();
        for (key_873, value_874) in var_871 {
            {
                let mut object_875 = object_872.key(key_873).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_875, value_874)?;
                object_875.finish();
            }
        }
        object_872.finish();
    }
    if let Some(var_876) = &input.task_invocation_parameters {
        let mut object_877 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_877, var_876)?;
        object_877.finish();
    }
    if let Some(var_878) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_878).into()),
        );
    }
    if let Some(var_879) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_879.as_str());
    }
    if let Some(var_880) = &input.max_errors {
        object.key("MaxErrors").string(var_880.as_str());
    }
    if let Some(var_881) = &input.logging_info {
        let mut object_882 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_882, var_881)?;
        object_882.finish();
    }
    if let Some(var_883) = &input.name {
        object.key("Name").string(var_883.as_str());
    }
    if let Some(var_884) = &input.description {
        object.key("Description").string(var_884.as_str());
    }
    if let Some(var_885) = &input.replace {
        object.key("Replace").boolean(*var_885);
    }
    if let Some(var_886) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_886.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_managed_instance_role_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedInstanceRoleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_887) = &input.instance_id {
        object.key("InstanceId").string(var_887.as_str());
    }
    if let Some(var_888) = &input.iam_role {
        object.key("IamRole").string(var_888.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_889) = &input.description {
        object.key("Description").string(var_889.as_str());
    }
    if let Some(var_890) = &input.operational_data {
        let mut object_891 = object.key("OperationalData").start_object();
        for (key_892, value_893) in var_890 {
            {
                let mut object_894 = object_891.key(key_892).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(
                    &mut object_894,
                    value_893,
                )?;
                object_894.finish();
            }
        }
        object_891.finish();
    }
    if let Some(var_895) = &input.operational_data_to_delete {
        let mut array_896 = object.key("OperationalDataToDelete").start_array();
        for item_897 in var_895 {
            {
                array_896.value().string(item_897.as_str());
            }
        }
        array_896.finish();
    }
    if let Some(var_898) = &input.notifications {
        let mut array_899 = object.key("Notifications").start_array();
        for item_900 in var_898 {
            {
                let mut object_901 = array_899.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(
                    &mut object_901,
                    item_900,
                )?;
                object_901.finish();
            }
        }
        array_899.finish();
    }
    if let Some(var_902) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_902).into()),
        );
    }
    if let Some(var_903) = &input.related_ops_items {
        let mut array_904 = object.key("RelatedOpsItems").start_array();
        for item_905 in var_903 {
            {
                let mut object_906 = array_904.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(
                    &mut object_906,
                    item_905,
                )?;
                object_906.finish();
            }
        }
        array_904.finish();
    }
    if let Some(var_907) = &input.status {
        object.key("Status").string(var_907.as_str());
    }
    if let Some(var_908) = &input.ops_item_id {
        object.key("OpsItemId").string(var_908.as_str());
    }
    if let Some(var_909) = &input.title {
        object.key("Title").string(var_909.as_str());
    }
    if let Some(var_910) = &input.category {
        object.key("Category").string(var_910.as_str());
    }
    if let Some(var_911) = &input.severity {
        object.key("Severity").string(var_911.as_str());
    }
    if let Some(var_912) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .date_time(var_912, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_913) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .date_time(var_913, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_914) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .date_time(var_914, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_915) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .date_time(var_915, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_916) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_916.as_str());
    }
    if let Some(var_917) = &input.metadata_to_update {
        let mut object_918 = object.key("MetadataToUpdate").start_object();
        for (key_919, value_920) in var_917 {
            {
                let mut object_921 = object_918.key(key_919).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(
                    &mut object_921,
                    value_920,
                )?;
                object_921.finish();
            }
        }
        object_918.finish();
    }
    if let Some(var_922) = &input.keys_to_delete {
        let mut array_923 = object.key("KeysToDelete").start_array();
        for item_924 in var_922 {
            {
                array_923.value().string(item_924.as_str());
            }
        }
        array_923.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_925) = &input.baseline_id {
        object.key("BaselineId").string(var_925.as_str());
    }
    if let Some(var_926) = &input.name {
        object.key("Name").string(var_926.as_str());
    }
    if let Some(var_927) = &input.global_filters {
        let mut object_928 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_928,
            var_927,
        )?;
        object_928.finish();
    }
    if let Some(var_929) = &input.approval_rules {
        let mut object_930 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_930,
            var_929,
        )?;
        object_930.finish();
    }
    if let Some(var_931) = &input.approved_patches {
        let mut array_932 = object.key("ApprovedPatches").start_array();
        for item_933 in var_931 {
            {
                array_932.value().string(item_933.as_str());
            }
        }
        array_932.finish();
    }
    if let Some(var_934) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_934.as_str());
    }
    if let Some(var_935) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_935);
    }
    if let Some(var_936) = &input.rejected_patches {
        let mut array_937 = object.key("RejectedPatches").start_array();
        for item_938 in var_936 {
            {
                array_937.value().string(item_938.as_str());
            }
        }
        array_937.finish();
    }
    if let Some(var_939) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_939.as_str());
    }
    if let Some(var_940) = &input.description {
        object.key("Description").string(var_940.as_str());
    }
    if let Some(var_941) = &input.sources {
        let mut array_942 = object.key("Sources").start_array();
        for item_943 in var_941 {
            {
                let mut object_944 = array_942.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_944,
                    item_943,
                )?;
                object_944.finish();
            }
        }
        array_942.finish();
    }
    if let Some(var_945) = &input.replace {
        object.key("Replace").boolean(*var_945);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_946) = &input.sync_name {
        object.key("SyncName").string(var_946.as_str());
    }
    if let Some(var_947) = &input.sync_type {
        object.key("SyncType").string(var_947.as_str());
    }
    if let Some(var_948) = &input.sync_source {
        let mut object_949 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(
            &mut object_949,
            var_948,
        )?;
        object_949.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_950) = &input.setting_id {
        object.key("SettingId").string(var_950.as_str());
    }
    if let Some(var_951) = &input.setting_value {
        object.key("SettingValue").string(var_951.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_952) = &input.key {
        object.key("Key").string(var_952.as_str());
    }
    if let Some(var_953) = &input.value {
        object.key("Value").string(var_953.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registration_metadata_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistrationMetadataItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_954) = &input.key {
        object.key("Key").string(var_954.as_str());
    }
    if let Some(var_955) = &input.value {
        object.key("Value").string(var_955.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_956) = &input.key {
        object.key("Key").string(var_956.as_str());
    }
    if let Some(var_957) = &input.values {
        let mut array_958 = object.key("Values").start_array();
        for item_959 in var_957 {
            {
                array_958.value().string(item_959.as_str());
            }
        }
        array_958.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_association_output_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceAssociationOutputLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_960) = &input.s3_location {
        let mut object_961 = object.key("S3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_output_location(
            &mut object_961,
            var_960,
        )?;
        object_961.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_962) = &input.accounts {
        let mut array_963 = object.key("Accounts").start_array();
        for item_964 in var_962 {
            {
                array_963.value().string(item_964.as_str());
            }
        }
        array_963.finish();
    }
    if let Some(var_965) = &input.regions {
        let mut array_966 = object.key("Regions").start_array();
        for item_967 in var_965 {
            {
                array_966.value().string(item_967.as_str());
            }
        }
        array_966.finish();
    }
    if let Some(var_968) = &input.target_location_max_concurrency {
        object
            .key("TargetLocationMaxConcurrency")
            .string(var_968.as_str());
    }
    if let Some(var_969) = &input.target_location_max_errors {
        object
            .key("TargetLocationMaxErrors")
            .string(var_969.as_str());
    }
    if let Some(var_970) = &input.execution_role_name {
        object.key("ExecutionRoleName").string(var_970.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_association_batch_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAssociationBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_971) = &input.name {
        object.key("Name").string(var_971.as_str());
    }
    if let Some(var_972) = &input.instance_id {
        object.key("InstanceId").string(var_972.as_str());
    }
    if let Some(var_973) = &input.parameters {
        let mut object_974 = object.key("Parameters").start_object();
        for (key_975, value_976) in var_973 {
            {
                let mut array_977 = object_974.key(key_975).start_array();
                for item_978 in value_976 {
                    {
                        array_977.value().string(item_978.as_str());
                    }
                }
                array_977.finish();
            }
        }
        object_974.finish();
    }
    if let Some(var_979) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_979.as_str());
    }
    if let Some(var_980) = &input.document_version {
        object.key("DocumentVersion").string(var_980.as_str());
    }
    if let Some(var_981) = &input.targets {
        let mut array_982 = object.key("Targets").start_array();
        for item_983 in var_981 {
            {
                let mut object_984 = array_982.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_984, item_983)?;
                object_984.finish();
            }
        }
        array_982.finish();
    }
    if let Some(var_985) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_985.as_str());
    }
    if let Some(var_986) = &input.output_location {
        let mut object_987 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_987,
            var_986,
        )?;
        object_987.finish();
    }
    if let Some(var_988) = &input.association_name {
        object.key("AssociationName").string(var_988.as_str());
    }
    if let Some(var_989) = &input.max_errors {
        object.key("MaxErrors").string(var_989.as_str());
    }
    if let Some(var_990) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_990.as_str());
    }
    if let Some(var_991) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_991.as_str());
    }
    if let Some(var_992) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_992.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_993) = &input.calendar_names {
        let mut array_994 = object.key("CalendarNames").start_array();
        for item_995 in var_993 {
            {
                array_994.value().string(item_995.as_str());
            }
        }
        array_994.finish();
    }
    if let Some(var_996) = &input.target_locations {
        let mut array_997 = object.key("TargetLocations").start_array();
        for item_998 in var_996 {
            {
                let mut object_999 = array_997.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_999,
                    item_998,
                )?;
                object_999.finish();
            }
        }
        array_997.finish();
    }
    if let Some(var_1000) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1000).into()),
        );
    }
    if let Some(var_1001) = &input.target_maps {
        let mut array_1002 = object.key("TargetMaps").start_array();
        for item_1003 in var_1001 {
            {
                let mut object_1004 = array_1002.value().start_object();
                for (key_1005, value_1006) in item_1003 {
                    {
                        let mut array_1007 = object_1004.key(key_1005).start_array();
                        for item_1008 in value_1006 {
                            {
                                array_1007.value().string(item_1008.as_str());
                            }
                        }
                        array_1007.finish();
                    }
                }
                object_1004.finish();
            }
        }
        array_1002.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_requires(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRequires,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1009) = &input.name {
        object.key("Name").string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.version {
        object.key("Version").string(var_1010.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attachments_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttachmentsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1011) = &input.key {
        object.key("Key").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.values {
        let mut array_1013 = object.key("Values").start_array();
        for item_1014 in var_1012 {
            {
                array_1013.value().string(item_1014.as_str());
            }
        }
        array_1013.finish();
    }
    if let Some(var_1015) = &input.name {
        object.key("Name").string(var_1015.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_data_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemDataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1016) = &input.value {
        object.key("Value").string(var_1016.as_str());
    }
    if let Some(var_1017) = &input.r#type {
        object.key("Type").string(var_1017.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_notification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemNotification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1018) = &input.arn {
        object.key("Arn").string(var_1018.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_ops_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedOpsItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1019) = &input.ops_item_id {
        object.key("OpsItemId").string(var_1019.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1020) = &input.value {
        object.key("Value").string(var_1020.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1021) = &input.patch_filters {
        let mut array_1022 = object.key("PatchFilters").start_array();
        for item_1023 in var_1021 {
            {
                let mut object_1024 = array_1022.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_filter(
                    &mut object_1024,
                    item_1023,
                )?;
                object_1024.finish();
            }
        }
        array_1022.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRuleGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1025) = &input.patch_rules {
        let mut array_1026 = object.key("PatchRules").start_array();
        for item_1027 in var_1025 {
            {
                let mut object_1028 = array_1026.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_rule(
                    &mut object_1028,
                    item_1027,
                )?;
                object_1028.finish();
            }
        }
        array_1026.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1029) = &input.name {
        object.key("Name").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.products {
        let mut array_1031 = object.key("Products").start_array();
        for item_1032 in var_1030 {
            {
                array_1031.value().string(item_1032.as_str());
            }
        }
        array_1031.finish();
    }
    if let Some(var_1033) = &input.configuration {
        object.key("Configuration").string(var_1033.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_s3_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncS3Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1034) = &input.bucket_name {
        object.key("BucketName").string(var_1034.as_str());
    }
    if let Some(var_1035) = &input.prefix {
        object.key("Prefix").string(var_1035.as_str());
    }
    if let Some(var_1036) = &input.sync_format {
        object.key("SyncFormat").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.region {
        object.key("Region").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.awskms_key_arn {
        object.key("AWSKMSKeyARN").string(var_1038.as_str());
    }
    if let Some(var_1039) = &input.destination_data_sharing {
        let mut object_1040 = object.key("DestinationDataSharing").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_destination_data_sharing(&mut object_1040, var_1039)?;
        object_1040.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1041) = &input.source_type {
        object.key("SourceType").string(var_1041.as_str());
    }
    if let Some(var_1042) = &input.aws_organizations_source {
        let mut object_1043 = object.key("AwsOrganizationsSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_aws_organizations_source(&mut object_1043, var_1042)?;
        object_1043.finish();
    }
    if let Some(var_1044) = &input.source_regions {
        let mut array_1045 = object.key("SourceRegions").start_array();
        for item_1046 in var_1044 {
            {
                array_1045.value().string(item_1046.as_str());
            }
        }
        array_1045.finish();
    }
    if input.include_future_regions {
        object
            .key("IncludeFutureRegions")
            .boolean(input.include_future_regions);
    }
    if input.enable_all_ops_data_sources {
        object
            .key("EnableAllOpsDataSources")
            .boolean(input.enable_all_ops_data_sources);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_activations_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeActivationsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1047) = &input.filter_key {
        object.key("FilterKey").string(var_1047.as_str());
    }
    if let Some(var_1048) = &input.filter_values {
        let mut array_1049 = object.key("FilterValues").start_array();
        for item_1050 in var_1048 {
            {
                array_1049.value().string(item_1050.as_str());
            }
        }
        array_1049.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1051) = &input.key {
        object.key("Key").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.value {
        object.key("Value").string(var_1052.as_str());
    }
    if let Some(var_1053) = &input.r#type {
        object.key("Type").string(var_1053.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_targets_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionTargetsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1054) = &input.key {
        object.key("Key").string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.value {
        object.key("Value").string(var_1055.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_automation_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutomationExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1056) = &input.key {
        object.key("Key").string(var_1056.as_str());
    }
    if let Some(var_1057) = &input.values {
        let mut array_1058 = object.key("Values").start_array();
        for item_1059 in var_1057 {
            {
                array_1058.value().string(item_1059.as_str());
            }
        }
        array_1058.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1060) = &input.key {
        object.key("Key").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.values {
        let mut array_1062 = object.key("Values").start_array();
        for item_1063 in var_1061 {
            {
                array_1062.value().string(item_1063.as_str());
            }
        }
        array_1062.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_orchestrator_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchOrchestratorFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1064) = &input.key {
        object.key("Key").string(var_1064.as_str());
    }
    if let Some(var_1065) = &input.values {
        let mut array_1066 = object.key("Values").start_array();
        for item_1067 in var_1065 {
            {
                array_1066.value().string(item_1067.as_str());
            }
        }
        array_1066.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1068) = &input.key {
        object.key("key").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.value_set {
        let mut array_1070 = object.key("valueSet").start_array();
        for item_1071 in var_1069 {
            {
                array_1070.value().string(item_1071.as_str());
            }
        }
        array_1070.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1072) = &input.key {
        object.key("Key").string(var_1072.as_str());
    }
    if let Some(var_1073) = &input.values {
        let mut array_1074 = object.key("Values").start_array();
        for item_1075 in var_1073 {
            {
                array_1074.value().string(item_1075.as_str());
            }
        }
        array_1074.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_patch_state_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstancePatchStateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1076) = &input.key {
        object.key("Key").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.values {
        let mut array_1078 = object.key("Values").start_array();
        for item_1079 in var_1077 {
            {
                array_1078.value().string(item_1079.as_str());
            }
        }
        array_1078.finish();
    }
    if let Some(var_1080) = &input.r#type {
        object.key("Type").string(var_1080.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1081) = &input.key {
        object.key("Key").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.values {
        let mut array_1083 = object.key("Values").start_array();
        for item_1084 in var_1082 {
            {
                array_1083.value().string(item_1084.as_str());
            }
        }
        array_1083.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1085) = &input.key {
        object.key("Key").string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.values {
        let mut array_1087 = object.key("Values").start_array();
        for item_1088 in var_1086 {
            {
                array_1087.value().string(item_1088.as_str());
            }
        }
        array_1087.finish();
    }
    if let Some(var_1089) = &input.operator {
        object.key("Operator").string(var_1089.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameters_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParametersFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1090) = &input.key {
        object.key("Key").string(var_1090.as_str());
    }
    if let Some(var_1091) = &input.values {
        let mut array_1092 = object.key("Values").start_array();
        for item_1093 in var_1091 {
            {
                array_1092.value().string(item_1093.as_str());
            }
        }
        array_1092.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1094) = &input.key {
        object.key("Key").string(var_1094.as_str());
    }
    if let Some(var_1095) = &input.option {
        object.key("Option").string(var_1095.as_str());
    }
    if let Some(var_1096) = &input.values {
        let mut array_1097 = object.key("Values").start_array();
        for item_1098 in var_1096 {
            {
                array_1097.value().string(item_1098.as_str());
            }
        }
        array_1097.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1099) = &input.key {
        object.key("key").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.value {
        object.key("value").string(var_1100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_baseline_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaselineOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1101) = &input.operating_system {
        object.key("OperatingSystem").string(var_1101.as_str());
    }
    if let Some(var_1102) = &input.global_filters {
        let mut object_1103 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_1103,
            var_1102,
        )?;
        object_1103.finish();
    }
    if let Some(var_1104) = &input.approval_rules {
        let mut object_1105 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_1105,
            var_1104,
        )?;
        object_1105.finish();
    }
    if let Some(var_1106) = &input.approved_patches {
        let mut array_1107 = object.key("ApprovedPatches").start_array();
        for item_1108 in var_1106 {
            {
                array_1107.value().string(item_1108.as_str());
            }
        }
        array_1107.finish();
    }
    if let Some(var_1109) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_1109.as_str());
    }
    if let Some(var_1110) = &input.rejected_patches {
        let mut array_1111 = object.key("RejectedPatches").start_array();
        for item_1112 in var_1110 {
            {
                array_1111.value().string(item_1112.as_str());
            }
        }
        array_1111.finish();
    }
    if let Some(var_1113) = &input.rejected_patches_action {
        object
            .key("RejectedPatchesAction")
            .string(var_1113.as_str());
    }
    if input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(input.approved_patches_enable_non_security);
    }
    if let Some(var_1114) = &input.sources {
        let mut array_1115 = object.key("Sources").start_array();
        for item_1116 in var_1114 {
            {
                let mut object_1117 = array_1115.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_1117,
                    item_1116,
                )?;
                object_1117.finish();
            }
        }
        array_1115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1118) = &input.key {
        object.key("Key").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.values {
        let mut array_1120 = object.key("Values").start_array();
        for item_1121 in var_1119 {
            {
                array_1120.value().string(item_1121.as_str());
            }
        }
        array_1120.finish();
    }
    if let Some(var_1122) = &input.r#type {
        object.key("Type").string(var_1122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_aggregator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryAggregator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1123) = &input.expression {
        object.key("Expression").string(var_1123.as_str());
    }
    if let Some(var_1124) = &input.aggregators {
        let mut array_1125 = object.key("Aggregators").start_array();
        for item_1126 in var_1124 {
            {
                let mut object_1127 = array_1125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(
                    &mut object_1127,
                    item_1126,
                )?;
                object_1127.finish();
            }
        }
        array_1125.finish();
    }
    if let Some(var_1128) = &input.groups {
        let mut array_1129 = object.key("Groups").start_array();
        for item_1130 in var_1128 {
            {
                let mut object_1131 = array_1129.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_group(
                    &mut object_1131,
                    item_1130,
                )?;
                object_1131.finish();
            }
        }
        array_1129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_result_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResultAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1132) = &input.type_name {
        object.key("TypeName").string(var_1132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1133) = &input.key {
        object.key("Key").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.values {
        let mut array_1135 = object.key("Values").start_array();
        for item_1136 in var_1134 {
            {
                array_1135.value().string(item_1136.as_str());
            }
        }
        array_1135.finish();
    }
    if let Some(var_1137) = &input.r#type {
        object.key("Type").string(var_1137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_aggregator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsAggregator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1138) = &input.aggregator_type {
        object.key("AggregatorType").string(var_1138.as_str());
    }
    if let Some(var_1139) = &input.type_name {
        object.key("TypeName").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.attribute_name {
        object.key("AttributeName").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.values {
        let mut object_1142 = object.key("Values").start_object();
        for (key_1143, value_1144) in var_1141 {
            {
                object_1142.key(key_1143).string(value_1144.as_str());
            }
        }
        object_1142.finish();
    }
    if let Some(var_1145) = &input.filters {
        let mut array_1146 = object.key("Filters").start_array();
        for item_1147 in var_1145 {
            {
                let mut object_1148 = array_1146.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(
                    &mut object_1148,
                    item_1147,
                )?;
                object_1148.finish();
            }
        }
        array_1146.finish();
    }
    if let Some(var_1149) = &input.aggregators {
        let mut array_1150 = object.key("Aggregators").start_array();
        for item_1151 in var_1149 {
            {
                let mut object_1152 = array_1150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(
                    &mut object_1152,
                    item_1151,
                )?;
                object_1152.finish();
            }
        }
        array_1150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_result_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsResultAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1153) = &input.type_name {
        object.key("TypeName").string(var_1153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1154) = &input.key {
        object.key("key").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.value {
        object.key("value").string(var_1155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_command_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CommandFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1156) = &input.key {
        object.key("key").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.value {
        object.key("value").string(var_1157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1158) = &input.key {
        object.key("Key").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.values {
        let mut array_1160 = object.key("Values").start_array();
        for item_1161 in var_1159 {
            {
                array_1160.value().string(item_1161.as_str());
            }
        }
        array_1160.finish();
    }
    if let Some(var_1162) = &input.r#type {
        object.key("Type").string(var_1162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1163) = &input.key {
        object.key("key").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.value {
        object.key("value").string(var_1164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_key_values_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentKeyValuesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1165) = &input.key {
        object.key("Key").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.values {
        let mut array_1167 = object.key("Values").start_array();
        for item_1168 in var_1166 {
            {
                array_1167.value().string(item_1168.as_str());
            }
        }
        array_1167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_event_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemEventFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1169) = &input.key {
        object.key("Key").string(var_1169.as_str());
    }
    if let Some(var_1170) = &input.values {
        let mut array_1171 = object.key("Values").start_array();
        for item_1172 in var_1170 {
            {
                array_1171.value().string(item_1172.as_str());
            }
        }
        array_1171.finish();
    }
    if let Some(var_1173) = &input.operator {
        object.key("Operator").string(var_1173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_related_items_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemRelatedItemsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1174) = &input.key {
        object.key("Key").string(var_1174.as_str());
    }
    if let Some(var_1175) = &input.values {
        let mut array_1176 = object.key("Values").start_array();
        for item_1177 in var_1175 {
            {
                array_1176.value().string(item_1177.as_str());
            }
        }
        array_1176.finish();
    }
    if let Some(var_1178) = &input.operator {
        object.key("Operator").string(var_1178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_metadata_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsMetadataFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1179) = &input.key {
        object.key("Key").string(var_1179.as_str());
    }
    if let Some(var_1180) = &input.values {
        let mut array_1181 = object.key("Values").start_array();
        for item_1182 in var_1180 {
            {
                array_1181.value().string(item_1182.as_str());
            }
        }
        array_1181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_execution_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceExecutionSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1183) = &input.execution_time {
        object
            .key("ExecutionTime")
            .date_time(var_1183, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1184) = &input.execution_id {
        object.key("ExecutionId").string(var_1184.as_str());
    }
    if let Some(var_1185) = &input.execution_type {
        object.key("ExecutionType").string(var_1185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_item_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceItemEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1186) = &input.id {
        object.key("Id").string(var_1186.as_str());
    }
    if let Some(var_1187) = &input.title {
        object.key("Title").string(var_1187.as_str());
    }
    if let Some(var_1188) = &input.severity {
        object.key("Severity").string(var_1188.as_str());
    }
    if let Some(var_1189) = &input.status {
        object.key("Status").string(var_1189.as_str());
    }
    if let Some(var_1190) = &input.details {
        let mut object_1191 = object.key("Details").start_object();
        for (key_1192, value_1193) in var_1190 {
            {
                object_1191.key(key_1192).string(value_1193.as_str());
            }
        }
        object_1191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1194) = &input.type_name {
        object.key("TypeName").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.schema_version {
        object.key("SchemaVersion").string(var_1195.as_str());
    }
    if let Some(var_1196) = &input.capture_time {
        object.key("CaptureTime").string(var_1196.as_str());
    }
    if let Some(var_1197) = &input.content_hash {
        object.key("ContentHash").string(var_1197.as_str());
    }
    if let Some(var_1198) = &input.content {
        let mut array_1199 = object.key("Content").start_array();
        for item_1200 in var_1198 {
            {
                let mut object_1201 = array_1199.value().start_object();
                for (key_1202, value_1203) in item_1200 {
                    {
                        object_1201.key(key_1202).string(value_1203.as_str());
                    }
                }
                object_1201.finish();
            }
        }
        array_1199.finish();
    }
    if let Some(var_1204) = &input.context {
        let mut object_1205 = object.key("Context").start_object();
        for (key_1206, value_1207) in var_1204 {
            {
                object_1205.key(key_1206).string(value_1207.as_str());
            }
        }
        object_1205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskParameterValueExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1208) = &input.values {
        let mut array_1209 = object.key("Values").start_array();
        for item_1210 in var_1208 {
            {
                array_1209.value().string(item_1210.as_str());
            }
        }
        array_1209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_invocation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskInvocationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1211) = &input.run_command {
        let mut object_1212 = object.key("RunCommand").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_run_command_parameters(
            &mut object_1212,
            var_1211,
        )?;
        object_1212.finish();
    }
    if let Some(var_1213) = &input.automation {
        let mut object_1214 = object.key("Automation").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_automation_parameters(
            &mut object_1214,
            var_1213,
        )?;
        object_1214.finish();
    }
    if let Some(var_1215) = &input.step_functions {
        let mut object_1216 = object.key("StepFunctions").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_step_functions_parameters(&mut object_1216, var_1215)?;
        object_1216.finish();
    }
    if let Some(var_1217) = &input.lambda {
        let mut object_1218 = object.key("Lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_lambda_parameters(
            &mut object_1218,
            var_1217,
        )?;
        object_1218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1219) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1220.as_str());
    }
    if let Some(var_1221) = &input.s3_region {
        object.key("S3Region").string(var_1221.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1222) = &input.notification_arn {
        object.key("NotificationArn").string(var_1222.as_str());
    }
    if let Some(var_1223) = &input.notification_events {
        let mut array_1224 = object.key("NotificationEvents").start_array();
        for item_1225 in var_1223 {
            {
                array_1224.value().string(item_1225.as_str());
            }
        }
        array_1224.finish();
    }
    if let Some(var_1226) = &input.notification_type {
        object.key("NotificationType").string(var_1226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1227) = &input.cloud_watch_log_group_name {
        object
            .key("CloudWatchLogGroupName")
            .string(var_1227.as_str());
    }
    if input.cloud_watch_output_enabled {
        object
            .key("CloudWatchOutputEnabled")
            .boolean(input.cloud_watch_output_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_runbook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Runbook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1228) = &input.document_name {
        object.key("DocumentName").string(var_1228.as_str());
    }
    if let Some(var_1229) = &input.document_version {
        object.key("DocumentVersion").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.parameters {
        let mut object_1231 = object.key("Parameters").start_object();
        for (key_1232, value_1233) in var_1230 {
            {
                let mut array_1234 = object_1231.key(key_1232).start_array();
                for item_1235 in value_1233 {
                    {
                        array_1234.value().string(item_1235.as_str());
                    }
                }
                array_1234.finish();
            }
        }
        object_1231.finish();
    }
    if let Some(var_1236) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_1236.as_str());
    }
    if let Some(var_1237) = &input.targets {
        let mut array_1238 = object.key("Targets").start_array();
        for item_1239 in var_1237 {
            {
                let mut object_1240 = array_1238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(
                    &mut object_1240,
                    item_1239,
                )?;
                object_1240.finish();
            }
        }
        array_1238.finish();
    }
    if let Some(var_1241) = &input.target_maps {
        let mut array_1242 = object.key("TargetMaps").start_array();
        for item_1243 in var_1241 {
            {
                let mut object_1244 = array_1242.value().start_object();
                for (key_1245, value_1246) in item_1243 {
                    {
                        let mut array_1247 = object_1244.key(key_1245).start_array();
                        for item_1248 in value_1246 {
                            {
                                array_1247.value().string(item_1248.as_str());
                            }
                        }
                        array_1247.finish();
                    }
                }
                object_1244.finish();
            }
        }
        array_1242.finish();
    }
    if let Some(var_1249) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_1249.as_str());
    }
    if let Some(var_1250) = &input.max_errors {
        object.key("MaxErrors").string(var_1250.as_str());
    }
    if let Some(var_1251) = &input.target_locations {
        let mut array_1252 = object.key("TargetLocations").start_array();
        for item_1253 in var_1251 {
            {
                let mut object_1254 = array_1252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_1254,
                    item_1253,
                )?;
                object_1254.finish();
            }
        }
        array_1252.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1255) = &input.date {
        object
            .key("Date")
            .date_time(var_1255, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1256) = &input.name {
        object.key("Name").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.message {
        object.key("Message").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.additional_info {
        object.key("AdditionalInfo").string(var_1258.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_reviews(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviews,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1259) = &input.action {
        object.key("Action").string(var_1259.as_str());
    }
    if let Some(var_1260) = &input.comment {
        let mut array_1261 = object.key("Comment").start_array();
        for item_1262 in var_1260 {
            {
                let mut object_1263 = array_1261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_review_comment_source(
                    &mut object_1263,
                    item_1262,
                )?;
                object_1263.finish();
            }
        }
        array_1261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_output_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3OutputLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1264) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1266.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1267) = &input.key {
        object.key("Key").string(var_1267.as_str());
    }
    if let Some(var_1268) = &input.values {
        let mut array_1269 = object.key("Values").start_array();
        for item_1270 in var_1268 {
            {
                array_1269.value().string(item_1270.as_str());
            }
        }
        array_1269.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1271) = &input.patch_filter_group {
        let mut object_1272 = object.key("PatchFilterGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_1272,
            var_1271,
        )?;
        object_1272.finish();
    }
    if let Some(var_1273) = &input.compliance_level {
        object.key("ComplianceLevel").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.approve_after_days {
        object.key("ApproveAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1274).into()),
        );
    }
    if let Some(var_1275) = &input.approve_until_date {
        object.key("ApproveUntilDate").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.enable_non_security {
        object.key("EnableNonSecurity").boolean(*var_1276);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_destination_data_sharing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncDestinationDataSharing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1277) = &input.destination_data_sharing_type {
        object
            .key("DestinationDataSharingType")
            .string(var_1277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_aws_organizations_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncAwsOrganizationsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1278) = &input.organization_source_type {
        object
            .key("OrganizationSourceType")
            .string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.organizational_units {
        let mut array_1280 = object.key("OrganizationalUnits").start_array();
        for item_1281 in var_1279 {
            {
                let mut object_1282 = array_1280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_data_sync_organizational_unit(&mut object_1282, item_1281)?;
                object_1282.finish();
            }
        }
        array_1280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1283) = &input.name {
        object.key("Name").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.filters {
        let mut array_1285 = object.key("Filters").start_array();
        for item_1286 in var_1284 {
            {
                let mut object_1287 = array_1285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_1287,
                    item_1286,
                )?;
                object_1287.finish();
            }
        }
        array_1285.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_run_command_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowRunCommandParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1288) = &input.comment {
        object.key("Comment").string(var_1288.as_str());
    }
    if let Some(var_1289) = &input.cloud_watch_output_config {
        let mut object_1290 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(
            &mut object_1290,
            var_1289,
        )?;
        object_1290.finish();
    }
    if let Some(var_1291) = &input.document_hash {
        object.key("DocumentHash").string(var_1291.as_str());
    }
    if let Some(var_1292) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_1292.as_str());
    }
    if let Some(var_1293) = &input.document_version {
        object.key("DocumentVersion").string(var_1293.as_str());
    }
    if let Some(var_1294) = &input.notification_config {
        let mut object_1295 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(
            &mut object_1295,
            var_1294,
        )?;
        object_1295.finish();
    }
    if let Some(var_1296) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1296.as_str());
    }
    if let Some(var_1297) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1297.as_str());
    }
    if let Some(var_1298) = &input.parameters {
        let mut object_1299 = object.key("Parameters").start_object();
        for (key_1300, value_1301) in var_1298 {
            {
                let mut array_1302 = object_1299.key(key_1300).start_array();
                for item_1303 in value_1301 {
                    {
                        array_1302.value().string(item_1303.as_str());
                    }
                }
                array_1302.finish();
            }
        }
        object_1299.finish();
    }
    if let Some(var_1304) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_1304.as_str());
    }
    if let Some(var_1305) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1305).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_automation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowAutomationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1306) = &input.document_version {
        object.key("DocumentVersion").string(var_1306.as_str());
    }
    if let Some(var_1307) = &input.parameters {
        let mut object_1308 = object.key("Parameters").start_object();
        for (key_1309, value_1310) in var_1307 {
            {
                let mut array_1311 = object_1308.key(key_1309).start_array();
                for item_1312 in value_1310 {
                    {
                        array_1311.value().string(item_1312.as_str());
                    }
                }
                array_1311.finish();
            }
        }
        object_1308.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_step_functions_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowStepFunctionsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1313) = &input.input {
        object.key("Input").string(var_1313.as_str());
    }
    if let Some(var_1314) = &input.name {
        object.key("Name").string(var_1314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_lambda_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowLambdaParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1315) = &input.client_context {
        object.key("ClientContext").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.qualifier {
        object.key("Qualifier").string(var_1316.as_str());
    }
    if let Some(var_1317) = &input.payload {
        object
            .key("Payload")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1317));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_review_comment_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviewCommentSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1318) = &input.r#type {
        object.key("Type").string(var_1318.as_str());
    }
    if let Some(var_1319) = &input.content {
        object.key("Content").string(var_1319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_organizational_unit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncOrganizationalUnit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1320) = &input.organizational_unit_id {
        object.key("OrganizationalUnitId").string(var_1320.as_str());
    }
    Ok(())
}
