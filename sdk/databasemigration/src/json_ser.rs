// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_tags_to_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.resource_arn {
        object.key("ResourceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.tags {
        let mut array_3 = object.key("Tags").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_apply_pending_maintenance_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.apply_action {
        object.key("ApplyAction").string(var_7.as_str());
    }
    if let Some(var_8) = &input.opt_in_type {
        object.key("OptInType").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_replication_task_assessment_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelReplicationTaskAssessmentRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.replication_task_assessment_run_arn {
        object
            .key("ReplicationTaskAssessmentRunArn")
            .string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_10.as_str());
    }
    if let Some(var_11) = &input.endpoint_type {
        object.key("EndpointType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.engine_name {
        object.key("EngineName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.username {
        object.key("Username").string(var_13.as_str());
    }
    if let Some(var_14) = &input.password {
        object.key("Password").string(var_14.as_str());
    }
    if let Some(var_15) = &input.server_name {
        object.key("ServerName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.database_name {
        object.key("DatabaseName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.extra_connection_attributes {
        object
            .key("ExtraConnectionAttributes")
            .string(var_18.as_str());
    }
    if let Some(var_19) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.certificate_arn {
        object.key("CertificateArn").string(var_24.as_str());
    }
    if let Some(var_25) = &input.ssl_mode {
        object.key("SslMode").string(var_25.as_str());
    }
    if let Some(var_26) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_26.as_str());
    }
    if let Some(var_27) = &input.external_table_definition {
        object
            .key("ExternalTableDefinition")
            .string(var_27.as_str());
    }
    if let Some(var_28) = &input.dynamo_db_settings {
        let mut object_29 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_settings(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    if let Some(var_30) = &input.s3_settings {
        let mut object_31 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_settings(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.dms_transfer_settings {
        let mut object_33 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dms_transfer_settings(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    if let Some(var_34) = &input.mongo_db_settings {
        let mut object_35 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_mongo_db_settings(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.kinesis_settings {
        let mut object_37 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_settings(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.kafka_settings {
        let mut object_39 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_settings(&mut object_39, var_38)?;
        object_39.finish();
    }
    if let Some(var_40) = &input.elasticsearch_settings {
        let mut object_41 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_settings(
            &mut object_41,
            var_40,
        )?;
        object_41.finish();
    }
    if let Some(var_42) = &input.neptune_settings {
        let mut object_43 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_neptune_settings(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.redshift_settings {
        let mut object_45 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_settings(&mut object_45, var_44)?;
        object_45.finish();
    }
    if let Some(var_46) = &input.postgre_sql_settings {
        let mut object_47 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_settings(
            &mut object_47,
            var_46,
        )?;
        object_47.finish();
    }
    if let Some(var_48) = &input.my_sql_settings {
        let mut object_49 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_settings(&mut object_49, var_48)?;
        object_49.finish();
    }
    if let Some(var_50) = &input.oracle_settings {
        let mut object_51 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_settings(&mut object_51, var_50)?;
        object_51.finish();
    }
    if let Some(var_52) = &input.sybase_settings {
        let mut object_53 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sybase_settings(&mut object_53, var_52)?;
        object_53.finish();
    }
    if let Some(var_54) = &input.microsoft_sql_server_settings {
        let mut object_55 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_settings(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    if let Some(var_56) = &input.ibm_db2_settings {
        let mut object_57 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_ibm_db2_settings(&mut object_57, var_56)?;
        object_57.finish();
    }
    if let Some(var_58) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_58.as_str());
    }
    if let Some(var_59) = &input.doc_db_settings {
        let mut object_60 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_doc_db_settings(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.redis_settings {
        let mut object_62 = object.key("RedisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redis_settings(&mut object_62, var_61)?;
        object_62.finish();
    }
    if let Some(var_63) = &input.gcp_my_sql_settings {
        let mut object_64 = object.key("GcpMySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_gcp_my_sql_settings(
            &mut object_64,
            var_63,
        )?;
        object_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_event_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.subscription_name {
        object.key("SubscriptionName").string(var_65.as_str());
    }
    if let Some(var_66) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_66.as_str());
    }
    if let Some(var_67) = &input.source_type {
        object.key("SourceType").string(var_67.as_str());
    }
    if let Some(var_68) = &input.event_categories {
        let mut array_69 = object.key("EventCategories").start_array();
        for item_70 in var_68 {
            {
                array_69.value().string(item_70.as_str());
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.source_ids {
        let mut array_72 = object.key("SourceIds").start_array();
        for item_73 in var_71 {
            {
                array_72.value().string(item_73.as_str());
            }
        }
        array_72.finish();
    }
    if let Some(var_74) = &input.enabled {
        object.key("Enabled").boolean(*var_74);
    }
    if let Some(var_75) = &input.tags {
        let mut array_76 = object.key("Tags").start_array();
        for item_77 in var_75 {
            {
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_78, item_77)?;
                object_78.finish();
            }
        }
        array_76.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fleet_advisor_collector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetAdvisorCollectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.collector_name {
        object.key("CollectorName").string(var_79.as_str());
    }
    if let Some(var_80) = &input.description {
        object.key("Description").string(var_80.as_str());
    }
    if let Some(var_81) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_81.as_str());
    }
    if let Some(var_82) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.replication_instance_identifier {
        object
            .key("ReplicationInstanceIdentifier")
            .string(var_83.as_str());
    }
    if let Some(var_84) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    if let Some(var_85) = &input.replication_instance_class {
        object
            .key("ReplicationInstanceClass")
            .string(var_85.as_str());
    }
    if let Some(var_86) = &input.vpc_security_group_ids {
        let mut array_87 = object.key("VpcSecurityGroupIds").start_array();
        for item_88 in var_86 {
            {
                array_87.value().string(item_88.as_str());
            }
        }
        array_87.finish();
    }
    if let Some(var_89) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_89.as_str());
    }
    if let Some(var_90) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_90.as_str());
    }
    if let Some(var_91) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_91.as_str());
    }
    if let Some(var_92) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_92);
    }
    if let Some(var_93) = &input.engine_version {
        object.key("EngineVersion").string(var_93.as_str());
    }
    if let Some(var_94) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_94);
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    if let Some(var_99) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_99.as_str());
    }
    if let Some(var_100) = &input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(*var_100);
    }
    if let Some(var_101) = &input.dns_name_servers {
        object.key("DnsNameServers").string(var_101.as_str());
    }
    if let Some(var_102) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_replication_subnet_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationSubnetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_103.as_str());
    }
    if let Some(var_104) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_104.as_str());
    }
    if let Some(var_105) = &input.subnet_ids {
        let mut array_106 = object.key("SubnetIds").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    if let Some(var_108) = &input.tags {
        let mut array_109 = object.key("Tags").start_array();
        for item_110 in var_108 {
            {
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_111, item_110)?;
                object_111.finish();
            }
        }
        array_109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.replication_task_identifier {
        object
            .key("ReplicationTaskIdentifier")
            .string(var_112.as_str());
    }
    if let Some(var_113) = &input.source_endpoint_arn {
        object.key("SourceEndpointArn").string(var_113.as_str());
    }
    if let Some(var_114) = &input.target_endpoint_arn {
        object.key("TargetEndpointArn").string(var_114.as_str());
    }
    if let Some(var_115) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_115.as_str());
    }
    if let Some(var_116) = &input.migration_type {
        object.key("MigrationType").string(var_116.as_str());
    }
    if let Some(var_117) = &input.table_mappings {
        object.key("TableMappings").string(var_117.as_str());
    }
    if let Some(var_118) = &input.replication_task_settings {
        object
            .key("ReplicationTaskSettings")
            .string(var_118.as_str());
    }
    if let Some(var_119) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .date_time(var_119, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_120) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_120.as_str());
    }
    if let Some(var_121) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut array_123 = object.key("Tags").start_array();
        for item_124 in var_122 {
            {
                let mut object_125 = array_123.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_125, item_124)?;
                object_125.finish();
            }
        }
        array_123.finish();
    }
    if let Some(var_126) = &input.task_data {
        object.key("TaskData").string(var_126.as_str());
    }
    if let Some(var_127) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.certificate_arn {
        object.key("CertificateArn").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_129.as_str());
    }
    if let Some(var_130) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_event_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.subscription_name {
        object.key("SubscriptionName").string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_fleet_advisor_collector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFleetAdvisorCollectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.collector_referenced_id {
        object.key("CollectorReferencedId").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_fleet_advisor_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFleetAdvisorDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.database_ids {
        let mut array_135 = object.key("DatabaseIds").start_array();
        for item_136 in var_134 {
            {
                array_135.value().string(item_136.as_str());
            }
        }
        array_135.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_subnet_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationSubnetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_task_assessment_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskAssessmentRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.replication_task_assessment_run_arn {
        object
            .key("ReplicationTaskAssessmentRunArn")
            .string(var_140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_applicable_individual_assessments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicableIndividualAssessmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_141.as_str());
    }
    if let Some(var_142) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_142.as_str());
    }
    if let Some(var_143) = &input.source_engine_name {
        object.key("SourceEngineName").string(var_143.as_str());
    }
    if let Some(var_144) = &input.target_engine_name {
        object.key("TargetEngineName").string(var_144.as_str());
    }
    if let Some(var_145) = &input.migration_type {
        object.key("MigrationType").string(var_145.as_str());
    }
    if let Some(var_146) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    if let Some(var_147) = &input.marker {
        object.key("Marker").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_certificates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCertificatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.filters {
        let mut array_149 = object.key("Filters").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_151, item_150)?;
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    if let Some(var_153) = &input.marker {
        object.key("Marker").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.filters {
        let mut array_155 = object.key("Filters").start_array();
        for item_156 in var_154 {
            {
                let mut object_157 = array_155.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_157, item_156)?;
                object_157.finish();
            }
        }
        array_155.finish();
    }
    if let Some(var_158) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_158).into()),
        );
    }
    if let Some(var_159) = &input.marker {
        object.key("Marker").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.filters {
        let mut array_161 = object.key("Filters").start_array();
        for item_162 in var_160 {
            {
                let mut object_163 = array_161.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_163, item_162)?;
                object_163.finish();
            }
        }
        array_161.finish();
    }
    if let Some(var_164) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.marker {
        object.key("Marker").string(var_165.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.engine_name {
        object.key("EngineName").string(var_166.as_str());
    }
    if let Some(var_167) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.marker {
        object.key("Marker").string(var_168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.filters {
        let mut array_170 = object.key("Filters").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_172, item_171)?;
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.marker {
        object.key("Marker").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_event_categories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.source_type {
        object.key("SourceType").string(var_175.as_str());
    }
    if let Some(var_176) = &input.filters {
        let mut array_177 = object.key("Filters").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_179, item_178)?;
                object_179.finish();
            }
        }
        array_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.source_identifier {
        object.key("SourceIdentifier").string(var_180.as_str());
    }
    if let Some(var_181) = &input.source_type {
        object.key("SourceType").string(var_181.as_str());
    }
    if let Some(var_182) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_182, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_183) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_183, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_184) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    if let Some(var_185) = &input.event_categories {
        let mut array_186 = object.key("EventCategories").start_array();
        for item_187 in var_185 {
            {
                array_186.value().string(item_187.as_str());
            }
        }
        array_186.finish();
    }
    if let Some(var_188) = &input.filters {
        let mut array_189 = object.key("Filters").start_array();
        for item_190 in var_188 {
            {
                let mut object_191 = array_189.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_191, item_190)?;
                object_191.finish();
            }
        }
        array_189.finish();
    }
    if let Some(var_192) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.marker {
        object.key("Marker").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_event_subscriptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.subscription_name {
        object.key("SubscriptionName").string(var_194.as_str());
    }
    if let Some(var_195) = &input.filters {
        let mut array_196 = object.key("Filters").start_array();
        for item_197 in var_195 {
            {
                let mut object_198 = array_196.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_198, item_197)?;
                object_198.finish();
            }
        }
        array_196.finish();
    }
    if let Some(var_199) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_199).into()),
        );
    }
    if let Some(var_200) = &input.marker {
        object.key("Marker").string(var_200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleet_advisor_collectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetAdvisorCollectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.filters {
        let mut array_202 = object.key("Filters").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_204, item_203)?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.next_token {
        object.key("NextToken").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleet_advisor_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetAdvisorDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.filters {
        let mut array_208 = object.key("Filters").start_array();
        for item_209 in var_207 {
            {
                let mut object_210 = array_208.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_210, item_209)?;
                object_210.finish();
            }
        }
        array_208.finish();
    }
    if let Some(var_211) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.next_token {
        object.key("NextToken").string(var_212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleet_advisor_lsa_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetAdvisorLsaAnalysisInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.next_token {
        object.key("NextToken").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleet_advisor_schema_object_summary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetAdvisorSchemaObjectSummaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.filters {
        let mut array_216 = object.key("Filters").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_218, item_217)?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.next_token {
        object.key("NextToken").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleet_advisor_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetAdvisorSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.filters {
        let mut array_222 = object.key("Filters").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_225).into()),
        );
    }
    if let Some(var_226) = &input.next_token {
        object.key("NextToken").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_orderable_replication_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrderableReplicationInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    if let Some(var_228) = &input.marker {
        object.key("Marker").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pending_maintenance_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_229.as_str());
    }
    if let Some(var_230) = &input.filters {
        let mut array_231 = object.key("Filters").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_233, item_232)?;
                object_233.finish();
            }
        }
        array_231.finish();
    }
    if let Some(var_234) = &input.marker {
        object.key("Marker").string(var_234.as_str());
    }
    if let Some(var_235) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_refresh_schemas_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRefreshSchemasStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_236) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.filters {
        let mut array_238 = object.key("Filters").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_240, item_239)?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    if let Some(var_242) = &input.marker {
        object.key("Marker").string(var_242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_instance_task_logs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstanceTaskLogsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_243.as_str());
    }
    if let Some(var_244) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_244).into()),
        );
    }
    if let Some(var_245) = &input.marker {
        object.key("Marker").string(var_245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_subnet_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationSubnetGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.filters {
        let mut array_247 = object.key("Filters").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_249, item_248)?;
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_250).into()),
        );
    }
    if let Some(var_251) = &input.marker {
        object.key("Marker").string(var_251.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_task_assessment_results_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentResultsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_252.as_str());
    }
    if let Some(var_253) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    if let Some(var_254) = &input.marker {
        object.key("Marker").string(var_254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_task_assessment_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.filters {
        let mut array_256 = object.key("Filters").start_array();
        for item_257 in var_255 {
            {
                let mut object_258 = array_256.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_258, item_257)?;
                object_258.finish();
            }
        }
        array_256.finish();
    }
    if let Some(var_259) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_259).into()),
        );
    }
    if let Some(var_260) = &input.marker {
        object.key("Marker").string(var_260.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_task_individual_assessments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskIndividualAssessmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.filters {
        let mut array_262 = object.key("Filters").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_264, item_263)?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    if let Some(var_265) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_265).into()),
        );
    }
    if let Some(var_266) = &input.marker {
        object.key("Marker").string(var_266.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.filters {
        let mut array_268 = object.key("Filters").start_array();
        for item_269 in var_267 {
            {
                let mut object_270 = array_268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_270, item_269)?;
                object_270.finish();
            }
        }
        array_268.finish();
    }
    if let Some(var_271) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_271).into()),
        );
    }
    if let Some(var_272) = &input.marker {
        object.key("Marker").string(var_272.as_str());
    }
    if let Some(var_273) = &input.without_settings {
        object.key("WithoutSettings").boolean(*var_273);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_274.as_str());
    }
    if let Some(var_275) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_275).into()),
        );
    }
    if let Some(var_276) = &input.marker {
        object.key("Marker").string(var_276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_table_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTableStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_277.as_str());
    }
    if let Some(var_278) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    if let Some(var_279) = &input.marker {
        object.key("Marker").string(var_279.as_str());
    }
    if let Some(var_280) = &input.filters {
        let mut array_281 = object.key("Filters").start_array();
        for item_282 in var_280 {
            {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_283, item_282)?;
                object_283.finish();
            }
        }
        array_281.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.certificate_identifier {
        object.key("CertificateIdentifier").string(var_284.as_str());
    }
    if let Some(var_285) = &input.certificate_pem {
        object.key("CertificatePem").string(var_285.as_str());
    }
    if let Some(var_286) = &input.certificate_wallet {
        object
            .key("CertificateWallet")
            .string_unchecked(&aws_smithy_types::base64::encode(var_286));
    }
    if let Some(var_287) = &input.tags {
        let mut array_288 = object.key("Tags").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_290, item_289)?;
                object_290.finish();
            }
        }
        array_288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.resource_arn {
        object.key("ResourceArn").string(var_291.as_str());
    }
    if let Some(var_292) = &input.resource_arn_list {
        let mut array_293 = object.key("ResourceArnList").start_array();
        for item_294 in var_292 {
            {
                array_293.value().string(item_294.as_str());
            }
        }
        array_293.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_295.as_str());
    }
    if let Some(var_296) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_296.as_str());
    }
    if let Some(var_297) = &input.endpoint_type {
        object.key("EndpointType").string(var_297.as_str());
    }
    if let Some(var_298) = &input.engine_name {
        object.key("EngineName").string(var_298.as_str());
    }
    if let Some(var_299) = &input.username {
        object.key("Username").string(var_299.as_str());
    }
    if let Some(var_300) = &input.password {
        object.key("Password").string(var_300.as_str());
    }
    if let Some(var_301) = &input.server_name {
        object.key("ServerName").string(var_301.as_str());
    }
    if let Some(var_302) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_302).into()),
        );
    }
    if let Some(var_303) = &input.database_name {
        object.key("DatabaseName").string(var_303.as_str());
    }
    if let Some(var_304) = &input.extra_connection_attributes {
        object
            .key("ExtraConnectionAttributes")
            .string(var_304.as_str());
    }
    if let Some(var_305) = &input.certificate_arn {
        object.key("CertificateArn").string(var_305.as_str());
    }
    if let Some(var_306) = &input.ssl_mode {
        object.key("SslMode").string(var_306.as_str());
    }
    if let Some(var_307) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_307.as_str());
    }
    if let Some(var_308) = &input.external_table_definition {
        object
            .key("ExternalTableDefinition")
            .string(var_308.as_str());
    }
    if let Some(var_309) = &input.dynamo_db_settings {
        let mut object_310 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_settings(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    if let Some(var_311) = &input.s3_settings {
        let mut object_312 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_settings(&mut object_312, var_311)?;
        object_312.finish();
    }
    if let Some(var_313) = &input.dms_transfer_settings {
        let mut object_314 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dms_transfer_settings(
            &mut object_314,
            var_313,
        )?;
        object_314.finish();
    }
    if let Some(var_315) = &input.mongo_db_settings {
        let mut object_316 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_mongo_db_settings(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.kinesis_settings {
        let mut object_318 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_settings(
            &mut object_318,
            var_317,
        )?;
        object_318.finish();
    }
    if let Some(var_319) = &input.kafka_settings {
        let mut object_320 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_settings(&mut object_320, var_319)?;
        object_320.finish();
    }
    if let Some(var_321) = &input.elasticsearch_settings {
        let mut object_322 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_settings(
            &mut object_322,
            var_321,
        )?;
        object_322.finish();
    }
    if let Some(var_323) = &input.neptune_settings {
        let mut object_324 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_neptune_settings(
            &mut object_324,
            var_323,
        )?;
        object_324.finish();
    }
    if let Some(var_325) = &input.redshift_settings {
        let mut object_326 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_settings(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    if let Some(var_327) = &input.postgre_sql_settings {
        let mut object_328 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_settings(
            &mut object_328,
            var_327,
        )?;
        object_328.finish();
    }
    if let Some(var_329) = &input.my_sql_settings {
        let mut object_330 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_settings(&mut object_330, var_329)?;
        object_330.finish();
    }
    if let Some(var_331) = &input.oracle_settings {
        let mut object_332 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_settings(&mut object_332, var_331)?;
        object_332.finish();
    }
    if let Some(var_333) = &input.sybase_settings {
        let mut object_334 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sybase_settings(&mut object_334, var_333)?;
        object_334.finish();
    }
    if let Some(var_335) = &input.microsoft_sql_server_settings {
        let mut object_336 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_settings(
            &mut object_336,
            var_335,
        )?;
        object_336.finish();
    }
    if let Some(var_337) = &input.ibm_db2_settings {
        let mut object_338 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_ibm_db2_settings(
            &mut object_338,
            var_337,
        )?;
        object_338.finish();
    }
    if let Some(var_339) = &input.doc_db_settings {
        let mut object_340 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_doc_db_settings(&mut object_340, var_339)?;
        object_340.finish();
    }
    if let Some(var_341) = &input.redis_settings {
        let mut object_342 = object.key("RedisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redis_settings(&mut object_342, var_341)?;
        object_342.finish();
    }
    if let Some(var_343) = &input.exact_settings {
        object.key("ExactSettings").boolean(*var_343);
    }
    if let Some(var_344) = &input.gcp_my_sql_settings {
        let mut object_345 = object.key("GcpMySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_gcp_my_sql_settings(
            &mut object_345,
            var_344,
        )?;
        object_345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_event_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.subscription_name {
        object.key("SubscriptionName").string(var_346.as_str());
    }
    if let Some(var_347) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_347.as_str());
    }
    if let Some(var_348) = &input.source_type {
        object.key("SourceType").string(var_348.as_str());
    }
    if let Some(var_349) = &input.event_categories {
        let mut array_350 = object.key("EventCategories").start_array();
        for item_351 in var_349 {
            {
                array_350.value().string(item_351.as_str());
            }
        }
        array_350.finish();
    }
    if let Some(var_352) = &input.enabled {
        object.key("Enabled").boolean(*var_352);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_353.as_str());
    }
    if let Some(var_354) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_354).into()),
        );
    }
    if input.apply_immediately {
        object
            .key("ApplyImmediately")
            .boolean(input.apply_immediately);
    }
    if let Some(var_355) = &input.replication_instance_class {
        object
            .key("ReplicationInstanceClass")
            .string(var_355.as_str());
    }
    if let Some(var_356) = &input.vpc_security_group_ids {
        let mut array_357 = object.key("VpcSecurityGroupIds").start_array();
        for item_358 in var_356 {
            {
                array_357.value().string(item_358.as_str());
            }
        }
        array_357.finish();
    }
    if let Some(var_359) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_359.as_str());
    }
    if let Some(var_360) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_360);
    }
    if let Some(var_361) = &input.engine_version {
        object.key("EngineVersion").string(var_361.as_str());
    }
    if input.allow_major_version_upgrade {
        object
            .key("AllowMajorVersionUpgrade")
            .boolean(input.allow_major_version_upgrade);
    }
    if let Some(var_362) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_362);
    }
    if let Some(var_363) = &input.replication_instance_identifier {
        object
            .key("ReplicationInstanceIdentifier")
            .string(var_363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_replication_subnet_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationSubnetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_364.as_str());
    }
    if let Some(var_365) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_365.as_str());
    }
    if let Some(var_366) = &input.subnet_ids {
        let mut array_367 = object.key("SubnetIds").start_array();
        for item_368 in var_366 {
            {
                array_367.value().string(item_368.as_str());
            }
        }
        array_367.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_369.as_str());
    }
    if let Some(var_370) = &input.replication_task_identifier {
        object
            .key("ReplicationTaskIdentifier")
            .string(var_370.as_str());
    }
    if let Some(var_371) = &input.migration_type {
        object.key("MigrationType").string(var_371.as_str());
    }
    if let Some(var_372) = &input.table_mappings {
        object.key("TableMappings").string(var_372.as_str());
    }
    if let Some(var_373) = &input.replication_task_settings {
        object
            .key("ReplicationTaskSettings")
            .string(var_373.as_str());
    }
    if let Some(var_374) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .date_time(var_374, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_375) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_375.as_str());
    }
    if let Some(var_376) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_376.as_str());
    }
    if let Some(var_377) = &input.task_data {
        object.key("TaskData").string(var_377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_move_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MoveReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_378.as_str());
    }
    if let Some(var_379) = &input.target_replication_instance_arn {
        object
            .key("TargetReplicationInstanceArn")
            .string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reboot_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_380.as_str());
    }
    if let Some(var_381) = &input.force_failover {
        object.key("ForceFailover").boolean(*var_381);
    }
    if let Some(var_382) = &input.force_planned_failover {
        object.key("ForcePlannedFailover").boolean(*var_382);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_refresh_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RefreshSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_383.as_str());
    }
    if let Some(var_384) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_384.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reload_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReloadTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_385.as_str());
    }
    if let Some(var_386) = &input.tables_to_reload {
        let mut array_387 = object.key("TablesToReload").start_array();
        for item_388 in var_386 {
            {
                let mut object_389 = array_387.value().start_object();
                crate::json_ser::serialize_structure_crate_model_table_to_reload(
                    &mut object_389,
                    item_388,
                )?;
                object_389.finish();
            }
        }
        array_387.finish();
    }
    if let Some(var_390) = &input.reload_option {
        object.key("ReloadOption").string(var_390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.resource_arn {
        object.key("ResourceArn").string(var_391.as_str());
    }
    if let Some(var_392) = &input.tag_keys {
        let mut array_393 = object.key("TagKeys").start_array();
        for item_394 in var_392 {
            {
                array_393.value().string(item_394.as_str());
            }
        }
        array_393.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_395.as_str());
    }
    if let Some(var_396) = &input.start_replication_task_type {
        object
            .key("StartReplicationTaskType")
            .string(var_396.as_str());
    }
    if let Some(var_397) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .date_time(var_397, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_398) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_398.as_str());
    }
    if let Some(var_399) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_replication_task_assessment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_400.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_replication_task_assessment_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_401.as_str());
    }
    if let Some(var_402) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_402.as_str());
    }
    if let Some(var_403) = &input.result_location_bucket {
        object.key("ResultLocationBucket").string(var_403.as_str());
    }
    if let Some(var_404) = &input.result_location_folder {
        object.key("ResultLocationFolder").string(var_404.as_str());
    }
    if let Some(var_405) = &input.result_encryption_mode {
        object.key("ResultEncryptionMode").string(var_405.as_str());
    }
    if let Some(var_406) = &input.result_kms_key_arn {
        object.key("ResultKmsKeyArn").string(var_406.as_str());
    }
    if let Some(var_407) = &input.assessment_run_name {
        object.key("AssessmentRunName").string(var_407.as_str());
    }
    if let Some(var_408) = &input.include_only {
        let mut array_409 = object.key("IncludeOnly").start_array();
        for item_410 in var_408 {
            {
                array_409.value().string(item_410.as_str());
            }
        }
        array_409.finish();
    }
    if let Some(var_411) = &input.exclude {
        let mut array_412 = object.key("Exclude").start_array();
        for item_413 in var_411 {
            {
                array_412.value().string(item_413.as_str());
            }
        }
        array_412.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_414.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_415) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_415.as_str());
    }
    if let Some(var_416) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_416.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_subscriptions_to_event_bridge_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSubscriptionsToEventBridgeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.force_move {
        object.key("ForceMove").boolean(*var_417);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.key {
        object.key("Key").string(var_418.as_str());
    }
    if let Some(var_419) = &input.value {
        object.key("Value").string(var_419.as_str());
    }
    if let Some(var_420) = &input.resource_arn {
        object.key("ResourceArn").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Settings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_422.as_str());
    }
    if let Some(var_423) = &input.external_table_definition {
        object
            .key("ExternalTableDefinition")
            .string(var_423.as_str());
    }
    if let Some(var_424) = &input.csv_row_delimiter {
        object.key("CsvRowDelimiter").string(var_424.as_str());
    }
    if let Some(var_425) = &input.csv_delimiter {
        object.key("CsvDelimiter").string(var_425.as_str());
    }
    if let Some(var_426) = &input.bucket_folder {
        object.key("BucketFolder").string(var_426.as_str());
    }
    if let Some(var_427) = &input.bucket_name {
        object.key("BucketName").string(var_427.as_str());
    }
    if let Some(var_428) = &input.compression_type {
        object.key("CompressionType").string(var_428.as_str());
    }
    if let Some(var_429) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_429.as_str());
    }
    if let Some(var_430) = &input.server_side_encryption_kms_key_id {
        object
            .key("ServerSideEncryptionKmsKeyId")
            .string(var_430.as_str());
    }
    if let Some(var_431) = &input.data_format {
        object.key("DataFormat").string(var_431.as_str());
    }
    if let Some(var_432) = &input.encoding_type {
        object.key("EncodingType").string(var_432.as_str());
    }
    if let Some(var_433) = &input.dict_page_size_limit {
        object.key("DictPageSizeLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_433).into()),
        );
    }
    if let Some(var_434) = &input.row_group_length {
        object.key("RowGroupLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    if let Some(var_435) = &input.data_page_size {
        object.key("DataPageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_435).into()),
        );
    }
    if let Some(var_436) = &input.parquet_version {
        object.key("ParquetVersion").string(var_436.as_str());
    }
    if let Some(var_437) = &input.enable_statistics {
        object.key("EnableStatistics").boolean(*var_437);
    }
    if let Some(var_438) = &input.include_op_for_full_load {
        object.key("IncludeOpForFullLoad").boolean(*var_438);
    }
    if let Some(var_439) = &input.cdc_inserts_only {
        object.key("CdcInsertsOnly").boolean(*var_439);
    }
    if let Some(var_440) = &input.timestamp_column_name {
        object.key("TimestampColumnName").string(var_440.as_str());
    }
    if let Some(var_441) = &input.parquet_timestamp_in_millisecond {
        object
            .key("ParquetTimestampInMillisecond")
            .boolean(*var_441);
    }
    if let Some(var_442) = &input.cdc_inserts_and_updates {
        object.key("CdcInsertsAndUpdates").boolean(*var_442);
    }
    if let Some(var_443) = &input.date_partition_enabled {
        object.key("DatePartitionEnabled").boolean(*var_443);
    }
    if let Some(var_444) = &input.date_partition_sequence {
        object.key("DatePartitionSequence").string(var_444.as_str());
    }
    if let Some(var_445) = &input.date_partition_delimiter {
        object
            .key("DatePartitionDelimiter")
            .string(var_445.as_str());
    }
    if let Some(var_446) = &input.use_csv_no_sup_value {
        object.key("UseCsvNoSupValue").boolean(*var_446);
    }
    if let Some(var_447) = &input.csv_no_sup_value {
        object.key("CsvNoSupValue").string(var_447.as_str());
    }
    if let Some(var_448) = &input.preserve_transactions {
        object.key("PreserveTransactions").boolean(*var_448);
    }
    if let Some(var_449) = &input.cdc_path {
        object.key("CdcPath").string(var_449.as_str());
    }
    if let Some(var_450) = &input.use_task_start_time_for_full_load_timestamp {
        object
            .key("UseTaskStartTimeForFullLoadTimestamp")
            .boolean(*var_450);
    }
    if let Some(var_451) = &input.canned_acl_for_objects {
        object.key("CannedAclForObjects").string(var_451.as_str());
    }
    if let Some(var_452) = &input.add_column_name {
        object.key("AddColumnName").boolean(*var_452);
    }
    if let Some(var_453) = &input.cdc_max_batch_interval {
        object.key("CdcMaxBatchInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    if let Some(var_454) = &input.cdc_min_file_size {
        object.key("CdcMinFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    if let Some(var_455) = &input.csv_null_value {
        object.key("CsvNullValue").string(var_455.as_str());
    }
    if let Some(var_456) = &input.ignore_header_rows {
        object.key("IgnoreHeaderRows").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_456).into()),
        );
    }
    if let Some(var_457) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_457).into()),
        );
    }
    if let Some(var_458) = &input.rfc4180 {
        object.key("Rfc4180").boolean(*var_458);
    }
    if let Some(var_459) = &input.date_partition_timezone {
        object.key("DatePartitionTimezone").string(var_459.as_str());
    }
    if let Some(var_460) = &input.add_trailing_padding_character {
        object.key("AddTrailingPaddingCharacter").boolean(*var_460);
    }
    if let Some(var_461) = &input.expected_bucket_owner {
        object.key("ExpectedBucketOwner").string(var_461.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dms_transfer_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DmsTransferSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_462.as_str());
    }
    if let Some(var_463) = &input.bucket_name {
        object.key("BucketName").string(var_463.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_464) = &input.username {
        object.key("Username").string(var_464.as_str());
    }
    if let Some(var_465) = &input.password {
        object.key("Password").string(var_465.as_str());
    }
    if let Some(var_466) = &input.server_name {
        object.key("ServerName").string(var_466.as_str());
    }
    if let Some(var_467) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_467).into()),
        );
    }
    if let Some(var_468) = &input.database_name {
        object.key("DatabaseName").string(var_468.as_str());
    }
    if let Some(var_469) = &input.auth_type {
        object.key("AuthType").string(var_469.as_str());
    }
    if let Some(var_470) = &input.auth_mechanism {
        object.key("AuthMechanism").string(var_470.as_str());
    }
    if let Some(var_471) = &input.nesting_level {
        object.key("NestingLevel").string(var_471.as_str());
    }
    if let Some(var_472) = &input.extract_doc_id {
        object.key("ExtractDocId").string(var_472.as_str());
    }
    if let Some(var_473) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").string(var_473.as_str());
    }
    if let Some(var_474) = &input.auth_source {
        object.key("AuthSource").string(var_474.as_str());
    }
    if let Some(var_475) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_475.as_str());
    }
    if let Some(var_476) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_476.as_str());
    }
    if let Some(var_477) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.stream_arn {
        object.key("StreamArn").string(var_478.as_str());
    }
    if let Some(var_479) = &input.message_format {
        object.key("MessageFormat").string(var_479.as_str());
    }
    if let Some(var_480) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_480.as_str());
    }
    if let Some(var_481) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_481);
    }
    if let Some(var_482) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_482);
    }
    if let Some(var_483) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_483);
    }
    if let Some(var_484) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_484);
    }
    if let Some(var_485) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_485);
    }
    if let Some(var_486) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_486);
    }
    if let Some(var_487) = &input.no_hex_prefix {
        object.key("NoHexPrefix").boolean(*var_487);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.broker {
        object.key("Broker").string(var_488.as_str());
    }
    if let Some(var_489) = &input.topic {
        object.key("Topic").string(var_489.as_str());
    }
    if let Some(var_490) = &input.message_format {
        object.key("MessageFormat").string(var_490.as_str());
    }
    if let Some(var_491) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_491);
    }
    if let Some(var_492) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_492);
    }
    if let Some(var_493) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_493);
    }
    if let Some(var_494) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_494);
    }
    if let Some(var_495) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_495);
    }
    if let Some(var_496) = &input.message_max_bytes {
        object.key("MessageMaxBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_496).into()),
        );
    }
    if let Some(var_497) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_497);
    }
    if let Some(var_498) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_498.as_str());
    }
    if let Some(var_499) = &input.ssl_client_certificate_arn {
        object
            .key("SslClientCertificateArn")
            .string(var_499.as_str());
    }
    if let Some(var_500) = &input.ssl_client_key_arn {
        object.key("SslClientKeyArn").string(var_500.as_str());
    }
    if let Some(var_501) = &input.ssl_client_key_password {
        object.key("SslClientKeyPassword").string(var_501.as_str());
    }
    if let Some(var_502) = &input.ssl_ca_certificate_arn {
        object.key("SslCaCertificateArn").string(var_502.as_str());
    }
    if let Some(var_503) = &input.sasl_username {
        object.key("SaslUsername").string(var_503.as_str());
    }
    if let Some(var_504) = &input.sasl_password {
        object.key("SaslPassword").string(var_504.as_str());
    }
    if let Some(var_505) = &input.no_hex_prefix {
        object.key("NoHexPrefix").boolean(*var_505);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elasticsearch_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_506) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_506.as_str());
    }
    if let Some(var_507) = &input.endpoint_uri {
        object.key("EndpointUri").string(var_507.as_str());
    }
    if let Some(var_508) = &input.full_load_error_percentage {
        object.key("FullLoadErrorPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    if let Some(var_509) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_509).into()),
        );
    }
    if let Some(var_510) = &input.use_new_mapping_type {
        object.key("UseNewMappingType").boolean(*var_510);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_neptune_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeptuneSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_511) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_511.as_str());
    }
    if let Some(var_512) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_512.as_str());
    }
    if let Some(var_513) = &input.s3_bucket_folder {
        object.key("S3BucketFolder").string(var_513.as_str());
    }
    if let Some(var_514) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_514).into()),
        );
    }
    if let Some(var_515) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_515).into()),
        );
    }
    if let Some(var_516) = &input.max_retry_count {
        object.key("MaxRetryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_516).into()),
        );
    }
    if let Some(var_517) = &input.iam_auth_enabled {
        object.key("IamAuthEnabled").boolean(*var_517);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_518) = &input.accept_any_date {
        object.key("AcceptAnyDate").boolean(*var_518);
    }
    if let Some(var_519) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_519.as_str());
    }
    if let Some(var_520) = &input.bucket_folder {
        object.key("BucketFolder").string(var_520.as_str());
    }
    if let Some(var_521) = &input.bucket_name {
        object.key("BucketName").string(var_521.as_str());
    }
    if let Some(var_522) = &input.case_sensitive_names {
        object.key("CaseSensitiveNames").boolean(*var_522);
    }
    if let Some(var_523) = &input.comp_update {
        object.key("CompUpdate").boolean(*var_523);
    }
    if let Some(var_524) = &input.connection_timeout {
        object.key("ConnectionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    if let Some(var_525) = &input.database_name {
        object.key("DatabaseName").string(var_525.as_str());
    }
    if let Some(var_526) = &input.date_format {
        object.key("DateFormat").string(var_526.as_str());
    }
    if let Some(var_527) = &input.empty_as_null {
        object.key("EmptyAsNull").boolean(*var_527);
    }
    if let Some(var_528) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_528.as_str());
    }
    if let Some(var_529) = &input.explicit_ids {
        object.key("ExplicitIds").boolean(*var_529);
    }
    if let Some(var_530) = &input.file_transfer_upload_streams {
        object.key("FileTransferUploadStreams").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_530).into()),
        );
    }
    if let Some(var_531) = &input.load_timeout {
        object.key("LoadTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    if let Some(var_532) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_532).into()),
        );
    }
    if let Some(var_533) = &input.password {
        object.key("Password").string(var_533.as_str());
    }
    if let Some(var_534) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_534).into()),
        );
    }
    if let Some(var_535) = &input.remove_quotes {
        object.key("RemoveQuotes").boolean(*var_535);
    }
    if let Some(var_536) = &input.replace_invalid_chars {
        object.key("ReplaceInvalidChars").string(var_536.as_str());
    }
    if let Some(var_537) = &input.replace_chars {
        object.key("ReplaceChars").string(var_537.as_str());
    }
    if let Some(var_538) = &input.server_name {
        object.key("ServerName").string(var_538.as_str());
    }
    if let Some(var_539) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_539.as_str());
    }
    if let Some(var_540) = &input.server_side_encryption_kms_key_id {
        object
            .key("ServerSideEncryptionKmsKeyId")
            .string(var_540.as_str());
    }
    if let Some(var_541) = &input.time_format {
        object.key("TimeFormat").string(var_541.as_str());
    }
    if let Some(var_542) = &input.trim_blanks {
        object.key("TrimBlanks").boolean(*var_542);
    }
    if let Some(var_543) = &input.truncate_columns {
        object.key("TruncateColumns").boolean(*var_543);
    }
    if let Some(var_544) = &input.username {
        object.key("Username").string(var_544.as_str());
    }
    if let Some(var_545) = &input.write_buffer_size {
        object.key("WriteBufferSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_545).into()),
        );
    }
    if let Some(var_546) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_546.as_str());
    }
    if let Some(var_547) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_547.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_548.as_str());
    }
    if let Some(var_549) = &input.capture_ddls {
        object.key("CaptureDdls").boolean(*var_549);
    }
    if let Some(var_550) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_550).into()),
        );
    }
    if let Some(var_551) = &input.database_name {
        object.key("DatabaseName").string(var_551.as_str());
    }
    if let Some(var_552) = &input.ddl_artifacts_schema {
        object.key("DdlArtifactsSchema").string(var_552.as_str());
    }
    if let Some(var_553) = &input.execute_timeout {
        object.key("ExecuteTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_553).into()),
        );
    }
    if let Some(var_554) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_554);
    }
    if let Some(var_555) = &input.heartbeat_enable {
        object.key("HeartbeatEnable").boolean(*var_555);
    }
    if let Some(var_556) = &input.heartbeat_schema {
        object.key("HeartbeatSchema").string(var_556.as_str());
    }
    if let Some(var_557) = &input.heartbeat_frequency {
        object.key("HeartbeatFrequency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_557).into()),
        );
    }
    if let Some(var_558) = &input.password {
        object.key("Password").string(var_558.as_str());
    }
    if let Some(var_559) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_559).into()),
        );
    }
    if let Some(var_560) = &input.server_name {
        object.key("ServerName").string(var_560.as_str());
    }
    if let Some(var_561) = &input.username {
        object.key("Username").string(var_561.as_str());
    }
    if let Some(var_562) = &input.slot_name {
        object.key("SlotName").string(var_562.as_str());
    }
    if let Some(var_563) = &input.plugin_name {
        object.key("PluginName").string(var_563.as_str());
    }
    if let Some(var_564) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_564.as_str());
    }
    if let Some(var_565) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_565.as_str());
    }
    if let Some(var_566) = &input.trim_space_in_char {
        object.key("TrimSpaceInChar").boolean(*var_566);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_567.as_str());
    }
    if let Some(var_568) = &input.clean_source_metadata_on_mismatch {
        object
            .key("CleanSourceMetadataOnMismatch")
            .boolean(*var_568);
    }
    if let Some(var_569) = &input.database_name {
        object.key("DatabaseName").string(var_569.as_str());
    }
    if let Some(var_570) = &input.events_poll_interval {
        object.key("EventsPollInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_570).into()),
        );
    }
    if let Some(var_571) = &input.target_db_type {
        object.key("TargetDbType").string(var_571.as_str());
    }
    if let Some(var_572) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_572).into()),
        );
    }
    if let Some(var_573) = &input.parallel_load_threads {
        object.key("ParallelLoadThreads").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    if let Some(var_574) = &input.password {
        object.key("Password").string(var_574.as_str());
    }
    if let Some(var_575) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_575).into()),
        );
    }
    if let Some(var_576) = &input.server_name {
        object.key("ServerName").string(var_576.as_str());
    }
    if let Some(var_577) = &input.server_timezone {
        object.key("ServerTimezone").string(var_577.as_str());
    }
    if let Some(var_578) = &input.username {
        object.key("Username").string(var_578.as_str());
    }
    if let Some(var_579) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_579.as_str());
    }
    if let Some(var_580) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_580.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.add_supplemental_logging {
        object.key("AddSupplementalLogging").boolean(*var_581);
    }
    if let Some(var_582) = &input.archived_log_dest_id {
        object.key("ArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_582).into()),
        );
    }
    if let Some(var_583) = &input.additional_archived_log_dest_id {
        object.key("AdditionalArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_583).into()),
        );
    }
    if let Some(var_584) = &input.extra_archived_log_dest_ids {
        let mut array_585 = object.key("ExtraArchivedLogDestIds").start_array();
        for item_586 in var_584 {
            {
                array_585.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_586).into()),
                );
            }
        }
        array_585.finish();
    }
    if let Some(var_587) = &input.allow_select_nested_tables {
        object.key("AllowSelectNestedTables").boolean(*var_587);
    }
    if let Some(var_588) = &input.parallel_asm_read_threads {
        object.key("ParallelAsmReadThreads").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_588).into()),
        );
    }
    if let Some(var_589) = &input.read_ahead_blocks {
        object.key("ReadAheadBlocks").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_589).into()),
        );
    }
    if let Some(var_590) = &input.access_alternate_directly {
        object.key("AccessAlternateDirectly").boolean(*var_590);
    }
    if let Some(var_591) = &input.use_alternate_folder_for_online {
        object.key("UseAlternateFolderForOnline").boolean(*var_591);
    }
    if let Some(var_592) = &input.oracle_path_prefix {
        object.key("OraclePathPrefix").string(var_592.as_str());
    }
    if let Some(var_593) = &input.use_path_prefix {
        object.key("UsePathPrefix").string(var_593.as_str());
    }
    if let Some(var_594) = &input.replace_path_prefix {
        object.key("ReplacePathPrefix").boolean(*var_594);
    }
    if let Some(var_595) = &input.enable_homogenous_tablespace {
        object.key("EnableHomogenousTablespace").boolean(*var_595);
    }
    if let Some(var_596) = &input.direct_path_no_log {
        object.key("DirectPathNoLog").boolean(*var_596);
    }
    if let Some(var_597) = &input.archived_logs_only {
        object.key("ArchivedLogsOnly").boolean(*var_597);
    }
    if let Some(var_598) = &input.asm_password {
        object.key("AsmPassword").string(var_598.as_str());
    }
    if let Some(var_599) = &input.asm_server {
        object.key("AsmServer").string(var_599.as_str());
    }
    if let Some(var_600) = &input.asm_user {
        object.key("AsmUser").string(var_600.as_str());
    }
    if let Some(var_601) = &input.char_length_semantics {
        object.key("CharLengthSemantics").string(var_601.as_str());
    }
    if let Some(var_602) = &input.database_name {
        object.key("DatabaseName").string(var_602.as_str());
    }
    if let Some(var_603) = &input.direct_path_parallel_load {
        object.key("DirectPathParallelLoad").boolean(*var_603);
    }
    if let Some(var_604) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_604);
    }
    if let Some(var_605) = &input.number_datatype_scale {
        object.key("NumberDatatypeScale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_605).into()),
        );
    }
    if let Some(var_606) = &input.password {
        object.key("Password").string(var_606.as_str());
    }
    if let Some(var_607) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_607).into()),
        );
    }
    if let Some(var_608) = &input.read_table_space_name {
        object.key("ReadTableSpaceName").boolean(*var_608);
    }
    if let Some(var_609) = &input.retry_interval {
        object.key("RetryInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_609).into()),
        );
    }
    if let Some(var_610) = &input.security_db_encryption {
        object.key("SecurityDbEncryption").string(var_610.as_str());
    }
    if let Some(var_611) = &input.security_db_encryption_name {
        object
            .key("SecurityDbEncryptionName")
            .string(var_611.as_str());
    }
    if let Some(var_612) = &input.server_name {
        object.key("ServerName").string(var_612.as_str());
    }
    if let Some(var_613) = &input.spatial_data_option_to_geo_json_function_name {
        object
            .key("SpatialDataOptionToGeoJsonFunctionName")
            .string(var_613.as_str());
    }
    if let Some(var_614) = &input.standby_delay_time {
        object.key("StandbyDelayTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_614).into()),
        );
    }
    if let Some(var_615) = &input.username {
        object.key("Username").string(var_615.as_str());
    }
    if let Some(var_616) = &input.use_b_file {
        object.key("UseBFile").boolean(*var_616);
    }
    if let Some(var_617) = &input.use_direct_path_full_load {
        object.key("UseDirectPathFullLoad").boolean(*var_617);
    }
    if let Some(var_618) = &input.use_logminer_reader {
        object.key("UseLogminerReader").boolean(*var_618);
    }
    if let Some(var_619) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_619.as_str());
    }
    if let Some(var_620) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_620.as_str());
    }
    if let Some(var_621) = &input.secrets_manager_oracle_asm_access_role_arn {
        object
            .key("SecretsManagerOracleAsmAccessRoleArn")
            .string(var_621.as_str());
    }
    if let Some(var_622) = &input.secrets_manager_oracle_asm_secret_id {
        object
            .key("SecretsManagerOracleAsmSecretId")
            .string(var_622.as_str());
    }
    if let Some(var_623) = &input.trim_space_in_char {
        object.key("TrimSpaceInChar").boolean(*var_623);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sybase_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SybaseSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_624) = &input.database_name {
        object.key("DatabaseName").string(var_624.as_str());
    }
    if let Some(var_625) = &input.password {
        object.key("Password").string(var_625.as_str());
    }
    if let Some(var_626) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_626).into()),
        );
    }
    if let Some(var_627) = &input.server_name {
        object.key("ServerName").string(var_627.as_str());
    }
    if let Some(var_628) = &input.username {
        object.key("Username").string(var_628.as_str());
    }
    if let Some(var_629) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_629.as_str());
    }
    if let Some(var_630) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_630.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_631) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_631).into()),
        );
    }
    if let Some(var_632) = &input.bcp_packet_size {
        object.key("BcpPacketSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_632).into()),
        );
    }
    if let Some(var_633) = &input.database_name {
        object.key("DatabaseName").string(var_633.as_str());
    }
    if let Some(var_634) = &input.control_tables_file_group {
        object
            .key("ControlTablesFileGroup")
            .string(var_634.as_str());
    }
    if let Some(var_635) = &input.password {
        object.key("Password").string(var_635.as_str());
    }
    if let Some(var_636) = &input.query_single_always_on_node {
        object.key("QuerySingleAlwaysOnNode").boolean(*var_636);
    }
    if let Some(var_637) = &input.read_backup_only {
        object.key("ReadBackupOnly").boolean(*var_637);
    }
    if let Some(var_638) = &input.safeguard_policy {
        object.key("SafeguardPolicy").string(var_638.as_str());
    }
    if let Some(var_639) = &input.server_name {
        object.key("ServerName").string(var_639.as_str());
    }
    if let Some(var_640) = &input.username {
        object.key("Username").string(var_640.as_str());
    }
    if let Some(var_641) = &input.use_bcp_full_load {
        object.key("UseBcpFullLoad").boolean(*var_641);
    }
    if let Some(var_642) = &input.use_third_party_backup_device {
        object.key("UseThirdPartyBackupDevice").boolean(*var_642);
    }
    if let Some(var_643) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_643.as_str());
    }
    if let Some(var_644) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_644.as_str());
    }
    if let Some(var_645) = &input.trim_space_in_char {
        object.key("TrimSpaceInChar").boolean(*var_645);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ibm_db2_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IbmDb2Settings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_646) = &input.database_name {
        object.key("DatabaseName").string(var_646.as_str());
    }
    if let Some(var_647) = &input.password {
        object.key("Password").string(var_647.as_str());
    }
    if let Some(var_648) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_648).into()),
        );
    }
    if let Some(var_649) = &input.server_name {
        object.key("ServerName").string(var_649.as_str());
    }
    if let Some(var_650) = &input.set_data_capture_changes {
        object.key("SetDataCaptureChanges").boolean(*var_650);
    }
    if let Some(var_651) = &input.current_lsn {
        object.key("CurrentLsn").string(var_651.as_str());
    }
    if let Some(var_652) = &input.max_k_bytes_per_read {
        object.key("MaxKBytesPerRead").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_652).into()),
        );
    }
    if let Some(var_653) = &input.username {
        object.key("Username").string(var_653.as_str());
    }
    if let Some(var_654) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_654.as_str());
    }
    if let Some(var_655) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_655.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_doc_db_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocDbSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_656) = &input.username {
        object.key("Username").string(var_656.as_str());
    }
    if let Some(var_657) = &input.password {
        object.key("Password").string(var_657.as_str());
    }
    if let Some(var_658) = &input.server_name {
        object.key("ServerName").string(var_658.as_str());
    }
    if let Some(var_659) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_659).into()),
        );
    }
    if let Some(var_660) = &input.database_name {
        object.key("DatabaseName").string(var_660.as_str());
    }
    if let Some(var_661) = &input.nesting_level {
        object.key("NestingLevel").string(var_661.as_str());
    }
    if let Some(var_662) = &input.extract_doc_id {
        object.key("ExtractDocId").boolean(*var_662);
    }
    if let Some(var_663) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_663).into()),
        );
    }
    if let Some(var_664) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_664.as_str());
    }
    if let Some(var_665) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_665.as_str());
    }
    if let Some(var_666) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_666.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedisSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.server_name {
        object.key("ServerName").string(var_667.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_668) = &input.ssl_security_protocol {
        object.key("SslSecurityProtocol").string(var_668.as_str());
    }
    if let Some(var_669) = &input.auth_type {
        object.key("AuthType").string(var_669.as_str());
    }
    if let Some(var_670) = &input.auth_user_name {
        object.key("AuthUserName").string(var_670.as_str());
    }
    if let Some(var_671) = &input.auth_password {
        object.key("AuthPassword").string(var_671.as_str());
    }
    if let Some(var_672) = &input.ssl_ca_certificate_arn {
        object.key("SslCaCertificateArn").string(var_672.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gcp_my_sql_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GcpMySqlSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_673) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_673.as_str());
    }
    if let Some(var_674) = &input.clean_source_metadata_on_mismatch {
        object
            .key("CleanSourceMetadataOnMismatch")
            .boolean(*var_674);
    }
    if let Some(var_675) = &input.database_name {
        object.key("DatabaseName").string(var_675.as_str());
    }
    if let Some(var_676) = &input.events_poll_interval {
        object.key("EventsPollInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_676).into()),
        );
    }
    if let Some(var_677) = &input.target_db_type {
        object.key("TargetDbType").string(var_677.as_str());
    }
    if let Some(var_678) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_678).into()),
        );
    }
    if let Some(var_679) = &input.parallel_load_threads {
        object.key("ParallelLoadThreads").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_679).into()),
        );
    }
    if let Some(var_680) = &input.password {
        object.key("Password").string(var_680.as_str());
    }
    if let Some(var_681) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_681).into()),
        );
    }
    if let Some(var_682) = &input.server_name {
        object.key("ServerName").string(var_682.as_str());
    }
    if let Some(var_683) = &input.server_timezone {
        object.key("ServerTimezone").string(var_683.as_str());
    }
    if let Some(var_684) = &input.username {
        object.key("Username").string(var_684.as_str());
    }
    if let Some(var_685) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_685.as_str());
    }
    if let Some(var_686) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_686.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_687) = &input.name {
        object.key("Name").string(var_687.as_str());
    }
    if let Some(var_688) = &input.values {
        let mut array_689 = object.key("Values").start_array();
        for item_690 in var_688 {
            {
                array_689.value().string(item_690.as_str());
            }
        }
        array_689.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_to_reload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableToReload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_691) = &input.schema_name {
        object.key("SchemaName").string(var_691.as_str());
    }
    if let Some(var_692) = &input.table_name {
        object.key("TableName").string(var_692.as_str());
    }
    Ok(())
}
