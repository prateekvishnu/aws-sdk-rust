// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_create_campaign_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_campaign_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_campaign_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_campaign_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_campaign_service_quota_exceeded_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_campaign_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_campaign_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_campaign_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_campaign_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_campaign_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_campaign_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_connect_instance_config_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_connect_instance_config_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_connect_instance_config_invalid_state_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_connect_instance_config_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_connect_instance_config_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_connect_instance_config_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_instance_onboarding_job_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_instance_onboarding_job_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_instance_onboarding_job_invalid_state_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_instance_onboarding_job_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_instance_onboarding_job_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_describe_campaign_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_describe_campaign_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_describe_campaign_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_describe_campaign_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_batch_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_batch_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_batch_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_campaign_state_batch_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_connect_instance_config_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_connect_instance_config_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_connect_instance_config_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_connect_instance_config_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_instance_onboarding_job_status_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_instance_onboarding_job_status_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_instance_onboarding_job_status_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_instance_onboarding_job_status_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_campaigns_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_campaigns_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_campaigns_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_tags_for_resource_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_tags_for_resource_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_tags_for_resource_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_tags_for_resource_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_tags_for_resource_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_pause_campaign_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_pause_campaign_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_pause_campaign_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_pause_campaign_invalid_campaign_state_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_pause_campaign_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_pause_campaign_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_dial_request_batch_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_dial_request_batch_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_dial_request_batch_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_dial_request_batch_invalid_campaign_state_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_dial_request_batch_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_dial_request_batch_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_dial_request_batch_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_resume_campaign_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_resume_campaign_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_resume_campaign_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_resume_campaign_invalid_campaign_state_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_resume_campaign_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_resume_campaign_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_campaign_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_campaign_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_campaign_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_campaign_invalid_campaign_state_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_campaign_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_campaign_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_instance_onboarding_job_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_instance_onboarding_job_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_instance_onboarding_job_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_instance_onboarding_job_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_instance_onboarding_job_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_instance_onboarding_job_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_stop_campaign_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_stop_campaign_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_stop_campaign_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_stop_campaign_invalid_campaign_state_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_stop_campaign_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_stop_campaign_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_dialer_config_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_dialer_config_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_dialer_config_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_dialer_config_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_dialer_config_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_name_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_name_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_name_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_name_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_name_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_outbound_call_config_access_denied_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_outbound_call_config_conflict_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_outbound_call_config_internal_server_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_outbound_call_config_resource_not_found_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_outbound_call_config_throttling_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_campaign_outbound_call_config_validation_exception_x_amz_error_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-ErrorType").iter();
    aws_smithy_http::header::one_or_none(headers)
}
