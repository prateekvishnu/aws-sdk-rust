// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateCampaignOutput, crate::error::CreateCampaignError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateCampaignError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::CreateCampaignError {
            meta: generic,
            kind: crate::error::CreateCampaignErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::CreateCampaignError {
                meta: generic,
                kind: crate::error::CreateCampaignErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::CreateCampaignError {
            meta: generic,
            kind: crate::error::CreateCampaignErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::CreateCampaignError {
            meta: generic,
            kind: crate::error::CreateCampaignErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ServiceQuotaExceededException" => crate::error::CreateCampaignError {
            meta: generic,
            kind: crate::error::CreateCampaignErrorKind::ServiceQuotaExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::service_quota_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_service_quota_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_service_quota_exceeded_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::CreateCampaignError {
            meta: generic,
            kind: crate::error::CreateCampaignErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::CreateCampaignError {
            meta: generic,
            kind: crate::error::CreateCampaignErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateCampaignOutput, crate::error::CreateCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_campaign_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_campaign(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateCampaignError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteCampaignOutput, crate::error::DeleteCampaignError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteCampaignError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::DeleteCampaignError {
            meta: generic,
            kind: crate::error::DeleteCampaignErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::DeleteCampaignError {
            meta: generic,
            kind: crate::error::DeleteCampaignErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::DeleteCampaignError {
            meta: generic,
            kind: crate::error::DeleteCampaignErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::DeleteCampaignError {
            meta: generic,
            kind: crate::error::DeleteCampaignErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteCampaignOutput, crate::error::DeleteCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_campaign_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_connect_instance_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteConnectInstanceConfigOutput,
    crate::error::DeleteConnectInstanceConfigError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteConnectInstanceConfigError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::DeleteConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::DeleteConnectInstanceConfigErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::DeleteConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::DeleteConnectInstanceConfigErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidStateException" => crate::error::DeleteConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::DeleteConnectInstanceConfigErrorKind::InvalidStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_invalid_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::DeleteConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::DeleteConnectInstanceConfigErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::DeleteConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::DeleteConnectInstanceConfigErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::DeleteConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::DeleteConnectInstanceConfigErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteConnectInstanceConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_connect_instance_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteConnectInstanceConfigOutput,
    crate::error::DeleteConnectInstanceConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_connect_instance_config_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_instance_onboarding_job_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteInstanceOnboardingJobOutput,
    crate::error::DeleteInstanceOnboardingJobError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteInstanceOnboardingJobError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::DeleteInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::DeleteInstanceOnboardingJobErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::DeleteInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::DeleteInstanceOnboardingJobErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidStateException" => crate::error::DeleteInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::DeleteInstanceOnboardingJobErrorKind::InvalidStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_invalid_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::DeleteInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::DeleteInstanceOnboardingJobErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::DeleteInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::DeleteInstanceOnboardingJobErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteInstanceOnboardingJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_instance_onboarding_job_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteInstanceOnboardingJobOutput,
    crate::error::DeleteInstanceOnboardingJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_instance_onboarding_job_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeCampaignOutput, crate::error::DescribeCampaignError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeCampaignError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::DescribeCampaignError {
            meta: generic,
            kind: crate::error::DescribeCampaignErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::DescribeCampaignError {
            meta: generic,
            kind: crate::error::DescribeCampaignErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::DescribeCampaignError {
            meta: generic,
            kind: crate::error::DescribeCampaignErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::DescribeCampaignError {
            meta: generic,
            kind: crate::error::DescribeCampaignErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeCampaignOutput, crate::error::DescribeCampaignError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_campaign_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_campaign(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeCampaignError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetCampaignStateOutput, crate::error::GetCampaignStateError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::GetCampaignStateError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetCampaignStateError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::GetCampaignStateError {
            meta: generic,
            kind: crate::error::GetCampaignStateErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::GetCampaignStateError {
            meta: generic,
            kind: crate::error::GetCampaignStateErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::GetCampaignStateError {
            meta: generic,
            kind: crate::error::GetCampaignStateErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::GetCampaignStateError {
            meta: generic,
            kind: crate::error::GetCampaignStateErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetCampaignStateError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetCampaignStateOutput, crate::error::GetCampaignStateError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_campaign_state_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_campaign_state(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetCampaignStateError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_batch_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetCampaignStateBatchOutput,
    crate::error::GetCampaignStateBatchError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetCampaignStateBatchError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::GetCampaignStateBatchError {
            meta: generic,
            kind: crate::error::GetCampaignStateBatchErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::GetCampaignStateBatchError {
            meta: generic,
            kind: crate::error::GetCampaignStateBatchErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::GetCampaignStateBatchError {
            meta: generic,
            kind: crate::error::GetCampaignStateBatchErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::GetCampaignStateBatchError {
            meta: generic,
            kind: crate::error::GetCampaignStateBatchErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetCampaignStateBatchError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_batch_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetCampaignStateBatchOutput,
    crate::error::GetCampaignStateBatchError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_campaign_state_batch_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_campaign_state_batch(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_connect_instance_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetConnectInstanceConfigOutput,
    crate::error::GetConnectInstanceConfigError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetConnectInstanceConfigError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::GetConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::GetConnectInstanceConfigErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::GetConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::GetConnectInstanceConfigErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::GetConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::GetConnectInstanceConfigErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::GetConnectInstanceConfigError {
            meta: generic,
            kind: crate::error::GetConnectInstanceConfigErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetConnectInstanceConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_connect_instance_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetConnectInstanceConfigOutput,
    crate::error::GetConnectInstanceConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_connect_instance_config_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_connect_instance_config(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_instance_onboarding_job_status_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetInstanceOnboardingJobStatusOutput,
    crate::error::GetInstanceOnboardingJobStatusError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetInstanceOnboardingJobStatusError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::GetInstanceOnboardingJobStatusError {
            meta: generic,
            kind: crate::error::GetInstanceOnboardingJobStatusErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::GetInstanceOnboardingJobStatusError {
            meta: generic,
            kind: crate::error::GetInstanceOnboardingJobStatusErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::GetInstanceOnboardingJobStatusError {
            meta: generic,
            kind: crate::error::GetInstanceOnboardingJobStatusErrorKind::ResourceNotFoundException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_not_found_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "ValidationException" => crate::error::GetInstanceOnboardingJobStatusError {
            meta: generic,
            kind: crate::error::GetInstanceOnboardingJobStatusErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetInstanceOnboardingJobStatusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_instance_onboarding_job_status_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetInstanceOnboardingJobStatusOutput,
    crate::error::GetInstanceOnboardingJobStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::get_instance_onboarding_job_status_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_get_instance_onboarding_job_status(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_campaigns_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListCampaignsOutput, crate::error::ListCampaignsError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListCampaignsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListCampaignsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::ListCampaignsError {
            meta: generic,
            kind: crate::error::ListCampaignsErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListCampaignsError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_campaigns_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListCampaignsError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::ListCampaignsError {
            meta: generic,
            kind: crate::error::ListCampaignsErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListCampaignsError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_campaigns_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListCampaignsError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::ListCampaignsError {
            meta: generic,
            kind: crate::error::ListCampaignsErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListCampaignsError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_campaigns_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListCampaignsError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListCampaignsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_campaigns_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListCampaignsOutput, crate::error::ListCampaignsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_campaigns_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_campaigns(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListCampaignsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_pause_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PauseCampaignOutput, crate::error::PauseCampaignError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::PauseCampaignError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PauseCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::PauseCampaignError {
            meta: generic,
            kind: crate::error::PauseCampaignErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::PauseCampaignError {
                meta: generic,
                kind: crate::error::PauseCampaignErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::PauseCampaignError {
            meta: generic,
            kind: crate::error::PauseCampaignErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidCampaignStateException" => crate::error::PauseCampaignError {
            meta: generic,
            kind: crate::error::PauseCampaignErrorKind::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::PauseCampaignError {
            meta: generic,
            kind: crate::error::PauseCampaignErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::PauseCampaignError {
            meta: generic,
            kind: crate::error::PauseCampaignErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::PauseCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_pause_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PauseCampaignOutput, crate::error::PauseCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::pause_campaign_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_dial_request_batch_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PutDialRequestBatchOutput,
    crate::error::PutDialRequestBatchError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::PutDialRequestBatchError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PutDialRequestBatchError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::PutDialRequestBatchError {
            meta: generic,
            kind: crate::error::PutDialRequestBatchErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::PutDialRequestBatchError {
                meta: generic,
                kind: crate::error::PutDialRequestBatchErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::PutDialRequestBatchError {
            meta: generic,
            kind: crate::error::PutDialRequestBatchErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidCampaignStateException" => crate::error::PutDialRequestBatchError {
            meta: generic,
            kind: crate::error::PutDialRequestBatchErrorKind::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::PutDialRequestBatchError {
            meta: generic,
            kind: crate::error::PutDialRequestBatchErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::PutDialRequestBatchError {
            meta: generic,
            kind: crate::error::PutDialRequestBatchErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::PutDialRequestBatchError {
            meta: generic,
            kind: crate::error::PutDialRequestBatchErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::PutDialRequestBatchError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_dial_request_batch_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PutDialRequestBatchOutput,
    crate::error::PutDialRequestBatchError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::put_dial_request_batch_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_put_dial_request_batch(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PutDialRequestBatchError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resume_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResumeCampaignOutput, crate::error::ResumeCampaignError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ResumeCampaignError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ResumeCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::ResumeCampaignError {
            meta: generic,
            kind: crate::error::ResumeCampaignErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::ResumeCampaignError {
                meta: generic,
                kind: crate::error::ResumeCampaignErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::ResumeCampaignError {
            meta: generic,
            kind: crate::error::ResumeCampaignErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidCampaignStateException" => crate::error::ResumeCampaignError {
            meta: generic,
            kind: crate::error::ResumeCampaignErrorKind::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::ResumeCampaignError {
            meta: generic,
            kind: crate::error::ResumeCampaignErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::ResumeCampaignError {
            meta: generic,
            kind: crate::error::ResumeCampaignErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ResumeCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resume_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResumeCampaignOutput, crate::error::ResumeCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::resume_campaign_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartCampaignOutput, crate::error::StartCampaignError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::StartCampaignError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StartCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::StartCampaignError {
            meta: generic,
            kind: crate::error::StartCampaignErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::StartCampaignError {
                meta: generic,
                kind: crate::error::StartCampaignErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::StartCampaignError {
            meta: generic,
            kind: crate::error::StartCampaignErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidCampaignStateException" => crate::error::StartCampaignError {
            meta: generic,
            kind: crate::error::StartCampaignErrorKind::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::StartCampaignError {
            meta: generic,
            kind: crate::error::StartCampaignErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::StartCampaignError {
            meta: generic,
            kind: crate::error::StartCampaignErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::StartCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartCampaignOutput, crate::error::StartCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_campaign_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_instance_onboarding_job_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartInstanceOnboardingJobOutput,
    crate::error::StartInstanceOnboardingJobError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::StartInstanceOnboardingJobError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::StartInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::StartInstanceOnboardingJobErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::StartInstanceOnboardingJobError {
                meta: generic,
                kind: crate::error::StartInstanceOnboardingJobErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::StartInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::StartInstanceOnboardingJobErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::StartInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::StartInstanceOnboardingJobErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::StartInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::StartInstanceOnboardingJobErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::StartInstanceOnboardingJobError {
            meta: generic,
            kind: crate::error::StartInstanceOnboardingJobErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::StartInstanceOnboardingJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_instance_onboarding_job_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartInstanceOnboardingJobOutput,
    crate::error::StartInstanceOnboardingJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_instance_onboarding_job_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_start_instance_onboarding_job(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopCampaignOutput, crate::error::StopCampaignError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::StopCampaignError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StopCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::StopCampaignError {
            meta: generic,
            kind: crate::error::StopCampaignErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::StopCampaignError {
                meta: generic,
                kind: crate::error::StopCampaignErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::StopCampaignError {
            meta: generic,
            kind: crate::error::StopCampaignErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidCampaignStateException" => crate::error::StopCampaignError {
            meta: generic,
            kind: crate::error::StopCampaignErrorKind::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::StopCampaignError {
            meta: generic,
            kind: crate::error::StopCampaignErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::StopCampaignError {
            meta: generic,
            kind: crate::error::StopCampaignErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::StopCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopCampaignOutput, crate::error::StopCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::stop_campaign_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::TagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UntagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ThrottlingException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UntagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_dialer_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignDialerConfigOutput,
    crate::error::UpdateCampaignDialerConfigError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateCampaignDialerConfigError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::UpdateCampaignDialerConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignDialerConfigErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::UpdateCampaignDialerConfigError {
                meta: generic,
                kind: crate::error::UpdateCampaignDialerConfigErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::UpdateCampaignDialerConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignDialerConfigErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::UpdateCampaignDialerConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignDialerConfigErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::UpdateCampaignDialerConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignDialerConfigErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateCampaignDialerConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_dialer_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignDialerConfigOutput,
    crate::error::UpdateCampaignDialerConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_campaign_dialer_config_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_name_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignNameOutput,
    crate::error::UpdateCampaignNameError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateCampaignNameError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateCampaignNameError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::UpdateCampaignNameError {
            meta: generic,
            kind: crate::error::UpdateCampaignNameErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::UpdateCampaignNameError {
                meta: generic,
                kind: crate::error::UpdateCampaignNameErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::UpdateCampaignNameError {
            meta: generic,
            kind: crate::error::UpdateCampaignNameErrorKind::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::UpdateCampaignNameError {
            meta: generic,
            kind: crate::error::UpdateCampaignNameErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::UpdateCampaignNameError {
            meta: generic,
            kind: crate::error::UpdateCampaignNameErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateCampaignNameError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_name_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignNameOutput,
    crate::error::UpdateCampaignNameError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_campaign_name_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_outbound_call_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignOutboundCallConfigOutput,
    crate::error::UpdateCampaignOutboundCallConfigError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::UpdateCampaignOutboundCallConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignOutboundCallConfigErrorKind::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ConflictException" => {
            crate::error::UpdateCampaignOutboundCallConfigError {
                meta: generic,
                kind: crate::error::UpdateCampaignOutboundCallConfigErrorKind::ConflictException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::conflict_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerException" => crate::error::UpdateCampaignOutboundCallConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignOutboundCallConfigErrorKind::InternalServerException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::internal_server_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                        output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "ResourceNotFoundException" => crate::error::UpdateCampaignOutboundCallConfigError {
            meta: generic,
            kind:
                crate::error::UpdateCampaignOutboundCallConfigErrorKind::ResourceNotFoundException(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::resource_not_found_exception::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                            output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
        },
        "ThrottlingException" => crate::error::UpdateCampaignOutboundCallConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignOutboundCallConfigErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ValidationException" => crate::error::UpdateCampaignOutboundCallConfigError {
            meta: generic,
            kind: crate::error::UpdateCampaignOutboundCallConfigErrorKind::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateCampaignOutboundCallConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_outbound_call_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignOutboundCallConfigOutput,
    crate::error::UpdateCampaignOutboundCallConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::update_campaign_outbound_call_config_output::Builder::default();
        let _ = response;
        output.build()
    })
}
