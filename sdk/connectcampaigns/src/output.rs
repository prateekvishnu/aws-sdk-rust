// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCampaignOutboundCallConfigOutput {}
impl std::fmt::Debug for UpdateCampaignOutboundCallConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCampaignOutboundCallConfigOutput");
        formatter.finish()
    }
}
/// See [`UpdateCampaignOutboundCallConfigOutput`](crate::output::UpdateCampaignOutboundCallConfigOutput).
pub mod update_campaign_outbound_call_config_output {

    /// A builder for [`UpdateCampaignOutboundCallConfigOutput`](crate::output::UpdateCampaignOutboundCallConfigOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateCampaignOutboundCallConfigOutput`](crate::output::UpdateCampaignOutboundCallConfigOutput).
        pub fn build(self) -> crate::output::UpdateCampaignOutboundCallConfigOutput {
            crate::output::UpdateCampaignOutboundCallConfigOutput {}
        }
    }
}
impl UpdateCampaignOutboundCallConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCampaignOutboundCallConfigOutput`](crate::output::UpdateCampaignOutboundCallConfigOutput).
    pub fn builder() -> crate::output::update_campaign_outbound_call_config_output::Builder {
        crate::output::update_campaign_outbound_call_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCampaignNameOutput {}
impl std::fmt::Debug for UpdateCampaignNameOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCampaignNameOutput");
        formatter.finish()
    }
}
/// See [`UpdateCampaignNameOutput`](crate::output::UpdateCampaignNameOutput).
pub mod update_campaign_name_output {

    /// A builder for [`UpdateCampaignNameOutput`](crate::output::UpdateCampaignNameOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateCampaignNameOutput`](crate::output::UpdateCampaignNameOutput).
        pub fn build(self) -> crate::output::UpdateCampaignNameOutput {
            crate::output::UpdateCampaignNameOutput {}
        }
    }
}
impl UpdateCampaignNameOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCampaignNameOutput`](crate::output::UpdateCampaignNameOutput).
    pub fn builder() -> crate::output::update_campaign_name_output::Builder {
        crate::output::update_campaign_name_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCampaignDialerConfigOutput {}
impl std::fmt::Debug for UpdateCampaignDialerConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCampaignDialerConfigOutput");
        formatter.finish()
    }
}
/// See [`UpdateCampaignDialerConfigOutput`](crate::output::UpdateCampaignDialerConfigOutput).
pub mod update_campaign_dialer_config_output {

    /// A builder for [`UpdateCampaignDialerConfigOutput`](crate::output::UpdateCampaignDialerConfigOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateCampaignDialerConfigOutput`](crate::output::UpdateCampaignDialerConfigOutput).
        pub fn build(self) -> crate::output::UpdateCampaignDialerConfigOutput {
            crate::output::UpdateCampaignDialerConfigOutput {}
        }
    }
}
impl UpdateCampaignDialerConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCampaignDialerConfigOutput`](crate::output::UpdateCampaignDialerConfigOutput).
    pub fn builder() -> crate::output::update_campaign_dialer_config_output::Builder {
        crate::output::update_campaign_dialer_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopCampaignOutput {}
impl std::fmt::Debug for StopCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopCampaignOutput");
        formatter.finish()
    }
}
/// See [`StopCampaignOutput`](crate::output::StopCampaignOutput).
pub mod stop_campaign_output {

    /// A builder for [`StopCampaignOutput`](crate::output::StopCampaignOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopCampaignOutput`](crate::output::StopCampaignOutput).
        pub fn build(self) -> crate::output::StopCampaignOutput {
            crate::output::StopCampaignOutput {}
        }
    }
}
impl StopCampaignOutput {
    /// Creates a new builder-style object to manufacture [`StopCampaignOutput`](crate::output::StopCampaignOutput).
    pub fn builder() -> crate::output::stop_campaign_output::Builder {
        crate::output::stop_campaign_output::Builder::default()
    }
}

/// The response for StartInstanceOnboardingJob API.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartInstanceOnboardingJobOutput {
    /// Instance onboarding job status object
    pub connect_instance_onboarding_job_status:
        std::option::Option<crate::model::InstanceOnboardingJobStatus>,
}
impl StartInstanceOnboardingJobOutput {
    /// Instance onboarding job status object
    pub fn connect_instance_onboarding_job_status(
        &self,
    ) -> std::option::Option<&crate::model::InstanceOnboardingJobStatus> {
        self.connect_instance_onboarding_job_status.as_ref()
    }
}
impl std::fmt::Debug for StartInstanceOnboardingJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartInstanceOnboardingJobOutput");
        formatter.field(
            "connect_instance_onboarding_job_status",
            &self.connect_instance_onboarding_job_status,
        );
        formatter.finish()
    }
}
/// See [`StartInstanceOnboardingJobOutput`](crate::output::StartInstanceOnboardingJobOutput).
pub mod start_instance_onboarding_job_output {

    /// A builder for [`StartInstanceOnboardingJobOutput`](crate::output::StartInstanceOnboardingJobOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connect_instance_onboarding_job_status:
            std::option::Option<crate::model::InstanceOnboardingJobStatus>,
    }
    impl Builder {
        /// Instance onboarding job status object
        pub fn connect_instance_onboarding_job_status(
            mut self,
            input: crate::model::InstanceOnboardingJobStatus,
        ) -> Self {
            self.connect_instance_onboarding_job_status = Some(input);
            self
        }
        /// Instance onboarding job status object
        pub fn set_connect_instance_onboarding_job_status(
            mut self,
            input: std::option::Option<crate::model::InstanceOnboardingJobStatus>,
        ) -> Self {
            self.connect_instance_onboarding_job_status = input;
            self
        }
        /// Consumes the builder and constructs a [`StartInstanceOnboardingJobOutput`](crate::output::StartInstanceOnboardingJobOutput).
        pub fn build(self) -> crate::output::StartInstanceOnboardingJobOutput {
            crate::output::StartInstanceOnboardingJobOutput {
                connect_instance_onboarding_job_status: self.connect_instance_onboarding_job_status,
            }
        }
    }
}
impl StartInstanceOnboardingJobOutput {
    /// Creates a new builder-style object to manufacture [`StartInstanceOnboardingJobOutput`](crate::output::StartInstanceOnboardingJobOutput).
    pub fn builder() -> crate::output::start_instance_onboarding_job_output::Builder {
        crate::output::start_instance_onboarding_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartCampaignOutput {}
impl std::fmt::Debug for StartCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartCampaignOutput");
        formatter.finish()
    }
}
/// See [`StartCampaignOutput`](crate::output::StartCampaignOutput).
pub mod start_campaign_output {

    /// A builder for [`StartCampaignOutput`](crate::output::StartCampaignOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StartCampaignOutput`](crate::output::StartCampaignOutput).
        pub fn build(self) -> crate::output::StartCampaignOutput {
            crate::output::StartCampaignOutput {}
        }
    }
}
impl StartCampaignOutput {
    /// Creates a new builder-style object to manufacture [`StartCampaignOutput`](crate::output::StartCampaignOutput).
    pub fn builder() -> crate::output::start_campaign_output::Builder {
        crate::output::start_campaign_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResumeCampaignOutput {}
impl std::fmt::Debug for ResumeCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResumeCampaignOutput");
        formatter.finish()
    }
}
/// See [`ResumeCampaignOutput`](crate::output::ResumeCampaignOutput).
pub mod resume_campaign_output {

    /// A builder for [`ResumeCampaignOutput`](crate::output::ResumeCampaignOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResumeCampaignOutput`](crate::output::ResumeCampaignOutput).
        pub fn build(self) -> crate::output::ResumeCampaignOutput {
            crate::output::ResumeCampaignOutput {}
        }
    }
}
impl ResumeCampaignOutput {
    /// Creates a new builder-style object to manufacture [`ResumeCampaignOutput`](crate::output::ResumeCampaignOutput).
    pub fn builder() -> crate::output::resume_campaign_output::Builder {
        crate::output::resume_campaign_output::Builder::default()
    }
}

/// PutDialRequestBatchResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutDialRequestBatchOutput {
    /// A list of successful requests identified by the unique client token.
    pub successful_requests: std::option::Option<std::vec::Vec<crate::model::SuccessfulRequest>>,
    /// A list of failed requests.
    pub failed_requests: std::option::Option<std::vec::Vec<crate::model::FailedRequest>>,
}
impl PutDialRequestBatchOutput {
    /// A list of successful requests identified by the unique client token.
    pub fn successful_requests(&self) -> std::option::Option<&[crate::model::SuccessfulRequest]> {
        self.successful_requests.as_deref()
    }
    /// A list of failed requests.
    pub fn failed_requests(&self) -> std::option::Option<&[crate::model::FailedRequest]> {
        self.failed_requests.as_deref()
    }
}
impl std::fmt::Debug for PutDialRequestBatchOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutDialRequestBatchOutput");
        formatter.field("successful_requests", &self.successful_requests);
        formatter.field("failed_requests", &self.failed_requests);
        formatter.finish()
    }
}
/// See [`PutDialRequestBatchOutput`](crate::output::PutDialRequestBatchOutput).
pub mod put_dial_request_batch_output {

    /// A builder for [`PutDialRequestBatchOutput`](crate::output::PutDialRequestBatchOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_requests:
            std::option::Option<std::vec::Vec<crate::model::SuccessfulRequest>>,
        pub(crate) failed_requests: std::option::Option<std::vec::Vec<crate::model::FailedRequest>>,
    }
    impl Builder {
        /// Appends an item to `successful_requests`.
        ///
        /// To override the contents of this collection use [`set_successful_requests`](Self::set_successful_requests).
        ///
        /// A list of successful requests identified by the unique client token.
        pub fn successful_requests(mut self, input: crate::model::SuccessfulRequest) -> Self {
            let mut v = self.successful_requests.unwrap_or_default();
            v.push(input);
            self.successful_requests = Some(v);
            self
        }
        /// A list of successful requests identified by the unique client token.
        pub fn set_successful_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SuccessfulRequest>>,
        ) -> Self {
            self.successful_requests = input;
            self
        }
        /// Appends an item to `failed_requests`.
        ///
        /// To override the contents of this collection use [`set_failed_requests`](Self::set_failed_requests).
        ///
        /// A list of failed requests.
        pub fn failed_requests(mut self, input: crate::model::FailedRequest) -> Self {
            let mut v = self.failed_requests.unwrap_or_default();
            v.push(input);
            self.failed_requests = Some(v);
            self
        }
        /// A list of failed requests.
        pub fn set_failed_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FailedRequest>>,
        ) -> Self {
            self.failed_requests = input;
            self
        }
        /// Consumes the builder and constructs a [`PutDialRequestBatchOutput`](crate::output::PutDialRequestBatchOutput).
        pub fn build(self) -> crate::output::PutDialRequestBatchOutput {
            crate::output::PutDialRequestBatchOutput {
                successful_requests: self.successful_requests,
                failed_requests: self.failed_requests,
            }
        }
    }
}
impl PutDialRequestBatchOutput {
    /// Creates a new builder-style object to manufacture [`PutDialRequestBatchOutput`](crate::output::PutDialRequestBatchOutput).
    pub fn builder() -> crate::output::put_dial_request_batch_output::Builder {
        crate::output::put_dial_request_batch_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PauseCampaignOutput {}
impl std::fmt::Debug for PauseCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PauseCampaignOutput");
        formatter.finish()
    }
}
/// See [`PauseCampaignOutput`](crate::output::PauseCampaignOutput).
pub mod pause_campaign_output {

    /// A builder for [`PauseCampaignOutput`](crate::output::PauseCampaignOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PauseCampaignOutput`](crate::output::PauseCampaignOutput).
        pub fn build(self) -> crate::output::PauseCampaignOutput {
            crate::output::PauseCampaignOutput {}
        }
    }
}
impl PauseCampaignOutput {
    /// Creates a new builder-style object to manufacture [`PauseCampaignOutput`](crate::output::PauseCampaignOutput).
    pub fn builder() -> crate::output::pause_campaign_output::Builder {
        crate::output::pause_campaign_output::Builder::default()
    }
}

/// ListTagsForResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// Tag map with key and value.
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// Tag map with key and value.
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// Tag map with key and value.
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// Tag map with key and value.
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// ListCampaignsResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListCampaignsOutput {
    /// The token for the next set of results.
    pub next_token: std::option::Option<std::string::String>,
    /// A list of Amazon Connect campaigns.
    pub campaign_summary_list: std::option::Option<std::vec::Vec<crate::model::CampaignSummary>>,
}
impl ListCampaignsOutput {
    /// The token for the next set of results.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// A list of Amazon Connect campaigns.
    pub fn campaign_summary_list(&self) -> std::option::Option<&[crate::model::CampaignSummary]> {
        self.campaign_summary_list.as_deref()
    }
}
impl std::fmt::Debug for ListCampaignsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListCampaignsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("campaign_summary_list", &self.campaign_summary_list);
        formatter.finish()
    }
}
/// See [`ListCampaignsOutput`](crate::output::ListCampaignsOutput).
pub mod list_campaigns_output {

    /// A builder for [`ListCampaignsOutput`](crate::output::ListCampaignsOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) campaign_summary_list:
            std::option::Option<std::vec::Vec<crate::model::CampaignSummary>>,
    }
    impl Builder {
        /// The token for the next set of results.
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// The token for the next set of results.
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `campaign_summary_list`.
        ///
        /// To override the contents of this collection use [`set_campaign_summary_list`](Self::set_campaign_summary_list).
        ///
        /// A list of Amazon Connect campaigns.
        pub fn campaign_summary_list(mut self, input: crate::model::CampaignSummary) -> Self {
            let mut v = self.campaign_summary_list.unwrap_or_default();
            v.push(input);
            self.campaign_summary_list = Some(v);
            self
        }
        /// A list of Amazon Connect campaigns.
        pub fn set_campaign_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CampaignSummary>>,
        ) -> Self {
            self.campaign_summary_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListCampaignsOutput`](crate::output::ListCampaignsOutput).
        pub fn build(self) -> crate::output::ListCampaignsOutput {
            crate::output::ListCampaignsOutput {
                next_token: self.next_token,
                campaign_summary_list: self.campaign_summary_list,
            }
        }
    }
}
impl ListCampaignsOutput {
    /// Creates a new builder-style object to manufacture [`ListCampaignsOutput`](crate::output::ListCampaignsOutput).
    pub fn builder() -> crate::output::list_campaigns_output::Builder {
        crate::output::list_campaigns_output::Builder::default()
    }
}

/// GetInstanceOnboardingJobStatusResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetInstanceOnboardingJobStatusOutput {
    /// Instance onboarding job status object
    pub connect_instance_onboarding_job_status:
        std::option::Option<crate::model::InstanceOnboardingJobStatus>,
}
impl GetInstanceOnboardingJobStatusOutput {
    /// Instance onboarding job status object
    pub fn connect_instance_onboarding_job_status(
        &self,
    ) -> std::option::Option<&crate::model::InstanceOnboardingJobStatus> {
        self.connect_instance_onboarding_job_status.as_ref()
    }
}
impl std::fmt::Debug for GetInstanceOnboardingJobStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetInstanceOnboardingJobStatusOutput");
        formatter.field(
            "connect_instance_onboarding_job_status",
            &self.connect_instance_onboarding_job_status,
        );
        formatter.finish()
    }
}
/// See [`GetInstanceOnboardingJobStatusOutput`](crate::output::GetInstanceOnboardingJobStatusOutput).
pub mod get_instance_onboarding_job_status_output {

    /// A builder for [`GetInstanceOnboardingJobStatusOutput`](crate::output::GetInstanceOnboardingJobStatusOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connect_instance_onboarding_job_status:
            std::option::Option<crate::model::InstanceOnboardingJobStatus>,
    }
    impl Builder {
        /// Instance onboarding job status object
        pub fn connect_instance_onboarding_job_status(
            mut self,
            input: crate::model::InstanceOnboardingJobStatus,
        ) -> Self {
            self.connect_instance_onboarding_job_status = Some(input);
            self
        }
        /// Instance onboarding job status object
        pub fn set_connect_instance_onboarding_job_status(
            mut self,
            input: std::option::Option<crate::model::InstanceOnboardingJobStatus>,
        ) -> Self {
            self.connect_instance_onboarding_job_status = input;
            self
        }
        /// Consumes the builder and constructs a [`GetInstanceOnboardingJobStatusOutput`](crate::output::GetInstanceOnboardingJobStatusOutput).
        pub fn build(self) -> crate::output::GetInstanceOnboardingJobStatusOutput {
            crate::output::GetInstanceOnboardingJobStatusOutput {
                connect_instance_onboarding_job_status: self.connect_instance_onboarding_job_status,
            }
        }
    }
}
impl GetInstanceOnboardingJobStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetInstanceOnboardingJobStatusOutput`](crate::output::GetInstanceOnboardingJobStatusOutput).
    pub fn builder() -> crate::output::get_instance_onboarding_job_status_output::Builder {
        crate::output::get_instance_onboarding_job_status_output::Builder::default()
    }
}

/// GetConnectInstanceConfigResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetConnectInstanceConfigOutput {
    /// Instance config object
    pub connect_instance_config: std::option::Option<crate::model::InstanceConfig>,
}
impl GetConnectInstanceConfigOutput {
    /// Instance config object
    pub fn connect_instance_config(&self) -> std::option::Option<&crate::model::InstanceConfig> {
        self.connect_instance_config.as_ref()
    }
}
impl std::fmt::Debug for GetConnectInstanceConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetConnectInstanceConfigOutput");
        formatter.field("connect_instance_config", &self.connect_instance_config);
        formatter.finish()
    }
}
/// See [`GetConnectInstanceConfigOutput`](crate::output::GetConnectInstanceConfigOutput).
pub mod get_connect_instance_config_output {

    /// A builder for [`GetConnectInstanceConfigOutput`](crate::output::GetConnectInstanceConfigOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connect_instance_config: std::option::Option<crate::model::InstanceConfig>,
    }
    impl Builder {
        /// Instance config object
        pub fn connect_instance_config(mut self, input: crate::model::InstanceConfig) -> Self {
            self.connect_instance_config = Some(input);
            self
        }
        /// Instance config object
        pub fn set_connect_instance_config(
            mut self,
            input: std::option::Option<crate::model::InstanceConfig>,
        ) -> Self {
            self.connect_instance_config = input;
            self
        }
        /// Consumes the builder and constructs a [`GetConnectInstanceConfigOutput`](crate::output::GetConnectInstanceConfigOutput).
        pub fn build(self) -> crate::output::GetConnectInstanceConfigOutput {
            crate::output::GetConnectInstanceConfigOutput {
                connect_instance_config: self.connect_instance_config,
            }
        }
    }
}
impl GetConnectInstanceConfigOutput {
    /// Creates a new builder-style object to manufacture [`GetConnectInstanceConfigOutput`](crate::output::GetConnectInstanceConfigOutput).
    pub fn builder() -> crate::output::get_connect_instance_config_output::Builder {
        crate::output::get_connect_instance_config_output::Builder::default()
    }
}

/// GetCampaignStateBatchResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignStateBatchOutput {
    /// List of successful response of campaign state
    pub successful_requests:
        std::option::Option<std::vec::Vec<crate::model::SuccessfulCampaignStateResponse>>,
    /// List of failed requests of campaign state
    pub failed_requests:
        std::option::Option<std::vec::Vec<crate::model::FailedCampaignStateResponse>>,
}
impl GetCampaignStateBatchOutput {
    /// List of successful response of campaign state
    pub fn successful_requests(
        &self,
    ) -> std::option::Option<&[crate::model::SuccessfulCampaignStateResponse]> {
        self.successful_requests.as_deref()
    }
    /// List of failed requests of campaign state
    pub fn failed_requests(
        &self,
    ) -> std::option::Option<&[crate::model::FailedCampaignStateResponse]> {
        self.failed_requests.as_deref()
    }
}
impl std::fmt::Debug for GetCampaignStateBatchOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignStateBatchOutput");
        formatter.field("successful_requests", &self.successful_requests);
        formatter.field("failed_requests", &self.failed_requests);
        formatter.finish()
    }
}
/// See [`GetCampaignStateBatchOutput`](crate::output::GetCampaignStateBatchOutput).
pub mod get_campaign_state_batch_output {

    /// A builder for [`GetCampaignStateBatchOutput`](crate::output::GetCampaignStateBatchOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_requests:
            std::option::Option<std::vec::Vec<crate::model::SuccessfulCampaignStateResponse>>,
        pub(crate) failed_requests:
            std::option::Option<std::vec::Vec<crate::model::FailedCampaignStateResponse>>,
    }
    impl Builder {
        /// Appends an item to `successful_requests`.
        ///
        /// To override the contents of this collection use [`set_successful_requests`](Self::set_successful_requests).
        ///
        /// List of successful response of campaign state
        pub fn successful_requests(
            mut self,
            input: crate::model::SuccessfulCampaignStateResponse,
        ) -> Self {
            let mut v = self.successful_requests.unwrap_or_default();
            v.push(input);
            self.successful_requests = Some(v);
            self
        }
        /// List of successful response of campaign state
        pub fn set_successful_requests(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::SuccessfulCampaignStateResponse>,
            >,
        ) -> Self {
            self.successful_requests = input;
            self
        }
        /// Appends an item to `failed_requests`.
        ///
        /// To override the contents of this collection use [`set_failed_requests`](Self::set_failed_requests).
        ///
        /// List of failed requests of campaign state
        pub fn failed_requests(mut self, input: crate::model::FailedCampaignStateResponse) -> Self {
            let mut v = self.failed_requests.unwrap_or_default();
            v.push(input);
            self.failed_requests = Some(v);
            self
        }
        /// List of failed requests of campaign state
        pub fn set_failed_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FailedCampaignStateResponse>>,
        ) -> Self {
            self.failed_requests = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignStateBatchOutput`](crate::output::GetCampaignStateBatchOutput).
        pub fn build(self) -> crate::output::GetCampaignStateBatchOutput {
            crate::output::GetCampaignStateBatchOutput {
                successful_requests: self.successful_requests,
                failed_requests: self.failed_requests,
            }
        }
    }
}
impl GetCampaignStateBatchOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignStateBatchOutput`](crate::output::GetCampaignStateBatchOutput).
    pub fn builder() -> crate::output::get_campaign_state_batch_output::Builder {
        crate::output::get_campaign_state_batch_output::Builder::default()
    }
}

/// GetCampaignStateResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignStateOutput {
    /// State of a campaign
    pub state: std::option::Option<crate::model::CampaignState>,
}
impl GetCampaignStateOutput {
    /// State of a campaign
    pub fn state(&self) -> std::option::Option<&crate::model::CampaignState> {
        self.state.as_ref()
    }
}
impl std::fmt::Debug for GetCampaignStateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignStateOutput");
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`GetCampaignStateOutput`](crate::output::GetCampaignStateOutput).
pub mod get_campaign_state_output {

    /// A builder for [`GetCampaignStateOutput`](crate::output::GetCampaignStateOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) state: std::option::Option<crate::model::CampaignState>,
    }
    impl Builder {
        /// State of a campaign
        pub fn state(mut self, input: crate::model::CampaignState) -> Self {
            self.state = Some(input);
            self
        }
        /// State of a campaign
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::CampaignState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignStateOutput`](crate::output::GetCampaignStateOutput).
        pub fn build(self) -> crate::output::GetCampaignStateOutput {
            crate::output::GetCampaignStateOutput { state: self.state }
        }
    }
}
impl GetCampaignStateOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignStateOutput`](crate::output::GetCampaignStateOutput).
    pub fn builder() -> crate::output::get_campaign_state_output::Builder {
        crate::output::get_campaign_state_output::Builder::default()
    }
}

/// DescribeCampaignResponse
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCampaignOutput {
    /// An Amazon Connect campaign.
    pub campaign: std::option::Option<crate::model::Campaign>,
}
impl DescribeCampaignOutput {
    /// An Amazon Connect campaign.
    pub fn campaign(&self) -> std::option::Option<&crate::model::Campaign> {
        self.campaign.as_ref()
    }
}
impl std::fmt::Debug for DescribeCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCampaignOutput");
        formatter.field("campaign", &self.campaign);
        formatter.finish()
    }
}
/// See [`DescribeCampaignOutput`](crate::output::DescribeCampaignOutput).
pub mod describe_campaign_output {

    /// A builder for [`DescribeCampaignOutput`](crate::output::DescribeCampaignOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaign: std::option::Option<crate::model::Campaign>,
    }
    impl Builder {
        /// An Amazon Connect campaign.
        pub fn campaign(mut self, input: crate::model::Campaign) -> Self {
            self.campaign = Some(input);
            self
        }
        /// An Amazon Connect campaign.
        pub fn set_campaign(mut self, input: std::option::Option<crate::model::Campaign>) -> Self {
            self.campaign = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCampaignOutput`](crate::output::DescribeCampaignOutput).
        pub fn build(self) -> crate::output::DescribeCampaignOutput {
            crate::output::DescribeCampaignOutput {
                campaign: self.campaign,
            }
        }
    }
}
impl DescribeCampaignOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCampaignOutput`](crate::output::DescribeCampaignOutput).
    pub fn builder() -> crate::output::describe_campaign_output::Builder {
        crate::output::describe_campaign_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInstanceOnboardingJobOutput {}
impl std::fmt::Debug for DeleteInstanceOnboardingJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteInstanceOnboardingJobOutput");
        formatter.finish()
    }
}
/// See [`DeleteInstanceOnboardingJobOutput`](crate::output::DeleteInstanceOnboardingJobOutput).
pub mod delete_instance_onboarding_job_output {

    /// A builder for [`DeleteInstanceOnboardingJobOutput`](crate::output::DeleteInstanceOnboardingJobOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteInstanceOnboardingJobOutput`](crate::output::DeleteInstanceOnboardingJobOutput).
        pub fn build(self) -> crate::output::DeleteInstanceOnboardingJobOutput {
            crate::output::DeleteInstanceOnboardingJobOutput {}
        }
    }
}
impl DeleteInstanceOnboardingJobOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceOnboardingJobOutput`](crate::output::DeleteInstanceOnboardingJobOutput).
    pub fn builder() -> crate::output::delete_instance_onboarding_job_output::Builder {
        crate::output::delete_instance_onboarding_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteConnectInstanceConfigOutput {}
impl std::fmt::Debug for DeleteConnectInstanceConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteConnectInstanceConfigOutput");
        formatter.finish()
    }
}
/// See [`DeleteConnectInstanceConfigOutput`](crate::output::DeleteConnectInstanceConfigOutput).
pub mod delete_connect_instance_config_output {

    /// A builder for [`DeleteConnectInstanceConfigOutput`](crate::output::DeleteConnectInstanceConfigOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteConnectInstanceConfigOutput`](crate::output::DeleteConnectInstanceConfigOutput).
        pub fn build(self) -> crate::output::DeleteConnectInstanceConfigOutput {
            crate::output::DeleteConnectInstanceConfigOutput {}
        }
    }
}
impl DeleteConnectInstanceConfigOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConnectInstanceConfigOutput`](crate::output::DeleteConnectInstanceConfigOutput).
    pub fn builder() -> crate::output::delete_connect_instance_config_output::Builder {
        crate::output::delete_connect_instance_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCampaignOutput {}
impl std::fmt::Debug for DeleteCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCampaignOutput");
        formatter.finish()
    }
}
/// See [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput).
pub mod delete_campaign_output {

    /// A builder for [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput).
        pub fn build(self) -> crate::output::DeleteCampaignOutput {
            crate::output::DeleteCampaignOutput {}
        }
    }
}
impl DeleteCampaignOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput).
    pub fn builder() -> crate::output::delete_campaign_output::Builder {
        crate::output::delete_campaign_output::Builder::default()
    }
}

/// The response for Create Campaign API
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCampaignOutput {
    /// Identifier representing a Campaign
    pub id: std::option::Option<std::string::String>,
    /// The resource name of an Amazon Connect campaign.
    pub arn: std::option::Option<std::string::String>,
    /// Tag map with key and value.
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateCampaignOutput {
    /// Identifier representing a Campaign
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The resource name of an Amazon Connect campaign.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Tag map with key and value.
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for CreateCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCampaignOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`CreateCampaignOutput`](crate::output::CreateCampaignOutput).
pub mod create_campaign_output {

    /// A builder for [`CreateCampaignOutput`](crate::output::CreateCampaignOutput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Identifier representing a Campaign
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// Identifier representing a Campaign
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// The resource name of an Amazon Connect campaign.
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// The resource name of an Amazon Connect campaign.
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// Tag map with key and value.
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// Tag map with key and value.
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCampaignOutput`](crate::output::CreateCampaignOutput).
        pub fn build(self) -> crate::output::CreateCampaignOutput {
            crate::output::CreateCampaignOutput {
                id: self.id,
                arn: self.arn,
                tags: self.tags,
            }
        }
    }
}
impl CreateCampaignOutput {
    /// Creates a new builder-style object to manufacture [`CreateCampaignOutput`](crate::output::CreateCampaignOutput).
    pub fn builder() -> crate::output::create_campaign_output::Builder {
        crate::output::create_campaign_output::Builder::default()
    }
}
