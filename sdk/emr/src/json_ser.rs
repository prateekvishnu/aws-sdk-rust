// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_instance_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.cluster_id {
        object.key("ClusterId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.instance_fleet {
        let mut object_3 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_fleet_config(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_instance_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.instance_groups {
        let mut array_5 = object.key("InstanceGroups").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group_config(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.job_flow_id {
        object.key("JobFlowId").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_job_flow_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddJobFlowStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.job_flow_id {
        object.key("JobFlowId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.steps {
        let mut array_11 = object.key("Steps").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_config(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.resource_id {
        object.key("ResourceId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.cluster_id {
        object.key("ClusterId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.step_ids {
        let mut array_22 = object.key("StepIds").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.step_cancellation_option {
        object.key("StepCancellationOption").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.name {
        object.key("Name").string(var_25.as_str());
    }
    if let Some(var_26) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27.as_str());
    }
    if let Some(var_28) = &input.description {
        object.key("Description").string(var_28.as_str());
    }
    if let Some(var_29) = &input.auth_mode {
        object.key("AuthMode").string(var_29.as_str());
    }
    if let Some(var_30) = &input.vpc_id {
        object.key("VpcId").string(var_30.as_str());
    }
    if let Some(var_31) = &input.subnet_ids {
        let mut array_32 = object.key("SubnetIds").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.service_role {
        object.key("ServiceRole").string(var_34.as_str());
    }
    if let Some(var_35) = &input.user_role {
        object.key("UserRole").string(var_35.as_str());
    }
    if let Some(var_36) = &input.workspace_security_group_id {
        object
            .key("WorkspaceSecurityGroupId")
            .string(var_36.as_str());
    }
    if let Some(var_37) = &input.engine_security_group_id {
        object.key("EngineSecurityGroupId").string(var_37.as_str());
    }
    if let Some(var_38) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_38.as_str());
    }
    if let Some(var_39) = &input.idp_auth_url {
        object.key("IdpAuthUrl").string(var_39.as_str());
    }
    if let Some(var_40) = &input.idp_relay_state_parameter_name {
        object
            .key("IdpRelayStateParameterName")
            .string(var_40.as_str());
    }
    if let Some(var_41) = &input.tags {
        let mut array_42 = object.key("Tags").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.studio_id {
        object.key("StudioId").string(var_45.as_str());
    }
    if let Some(var_46) = &input.identity_id {
        object.key("IdentityId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.identity_name {
        object.key("IdentityName").string(var_47.as_str());
    }
    if let Some(var_48) = &input.identity_type {
        object.key("IdentityType").string(var_48.as_str());
    }
    if let Some(var_49) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.name {
        object.key("Name").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.studio_id {
        object.key("StudioId").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.studio_id {
        object.key("StudioId").string(var_52.as_str());
    }
    if let Some(var_53) = &input.identity_id {
        object.key("IdentityId").string(var_53.as_str());
    }
    if let Some(var_54) = &input.identity_name {
        object.key("IdentityName").string(var_54.as_str());
    }
    if let Some(var_55) = &input.identity_type {
        object.key("IdentityType").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.cluster_id {
        object.key("ClusterId").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_job_flows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobFlowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_57, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_58) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_58, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_59) = &input.job_flow_ids {
        let mut array_60 = object.key("JobFlowIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    if let Some(var_62) = &input.job_flow_states {
        let mut array_63 = object.key("JobFlowStates").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64.as_str());
            }
        }
        array_63.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_release_label_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReleaseLabelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.release_label {
        object.key("ReleaseLabel").string(var_66.as_str());
    }
    if let Some(var_67) = &input.next_token {
        object.key("NextToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_68).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.name {
        object.key("Name").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_step_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStepInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.cluster_id {
        object.key("ClusterId").string(var_70.as_str());
    }
    if let Some(var_71) = &input.step_id {
        object.key("StepId").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.studio_id {
        object.key("StudioId").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_auto_termination_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutoTerminationPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.cluster_id {
        object.key("ClusterId").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_managed_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.cluster_id {
        object.key("ClusterId").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.studio_id {
        object.key("StudioId").string(var_75.as_str());
    }
    if let Some(var_76) = &input.identity_id {
        object.key("IdentityId").string(var_76.as_str());
    }
    if let Some(var_77) = &input.identity_name {
        object.key("IdentityName").string(var_77.as_str());
    }
    if let Some(var_78) = &input.identity_type {
        object.key("IdentityType").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bootstrap_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBootstrapActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.cluster_id {
        object.key("ClusterId").string(var_79.as_str());
    }
    if let Some(var_80) = &input.marker {
        object.key("Marker").string(var_80.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_clusters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClustersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_81, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_82) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_82, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_83) = &input.cluster_states {
        let mut array_84 = object.key("ClusterStates").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85.as_str());
            }
        }
        array_84.finish();
    }
    if let Some(var_86) = &input.marker {
        object.key("Marker").string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_instance_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.cluster_id {
        object.key("ClusterId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.marker {
        object.key("Marker").string(var_88.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_instance_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.cluster_id {
        object.key("ClusterId").string(var_89.as_str());
    }
    if let Some(var_90) = &input.marker {
        object.key("Marker").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.cluster_id {
        object.key("ClusterId").string(var_91.as_str());
    }
    if let Some(var_92) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_92.as_str());
    }
    if let Some(var_93) = &input.instance_group_types {
        let mut array_94 = object.key("InstanceGroupTypes").start_array();
        for item_95 in var_93 {
            {
                array_94.value().string(item_95.as_str());
            }
        }
        array_94.finish();
    }
    if let Some(var_96) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_96.as_str());
    }
    if let Some(var_97) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_97.as_str());
    }
    if let Some(var_98) = &input.instance_states {
        let mut array_99 = object.key("InstanceStates").start_array();
        for item_100 in var_98 {
            {
                array_99.value().string(item_100.as_str());
            }
        }
        array_99.finish();
    }
    if let Some(var_101) = &input.marker {
        object.key("Marker").string(var_101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.editor_id {
        object.key("EditorId").string(var_102.as_str());
    }
    if let Some(var_103) = &input.status {
        object.key("Status").string(var_103.as_str());
    }
    if let Some(var_104) = &input.from {
        object
            .key("From")
            .date_time(var_104, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_105) = &input.to {
        object
            .key("To")
            .date_time(var_105, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_106) = &input.marker {
        object.key("Marker").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_release_labels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListReleaseLabelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.filters {
        let mut object_108 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_release_label_filter(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    if let Some(var_109) = &input.next_token {
        object.key("NextToken").string(var_109.as_str());
    }
    if let Some(var_110) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.marker {
        object.key("Marker").string(var_111.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.cluster_id {
        object.key("ClusterId").string(var_112.as_str());
    }
    if let Some(var_113) = &input.step_states {
        let mut array_114 = object.key("StepStates").start_array();
        for item_115 in var_113 {
            {
                array_114.value().string(item_115.as_str());
            }
        }
        array_114.finish();
    }
    if let Some(var_116) = &input.step_ids {
        let mut array_117 = object.key("StepIds").start_array();
        for item_118 in var_116 {
            {
                array_117.value().string(item_118.as_str());
            }
        }
        array_117.finish();
    }
    if let Some(var_119) = &input.marker {
        object.key("Marker").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studios_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudiosInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.marker {
        object.key("Marker").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studio_session_mappings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioSessionMappingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.studio_id {
        object.key("StudioId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.identity_type {
        object.key("IdentityType").string(var_122.as_str());
    }
    if let Some(var_123) = &input.marker {
        object.key("Marker").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.cluster_id {
        object.key("ClusterId").string(var_124.as_str());
    }
    if let Some(var_125) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_instance_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.cluster_id {
        object.key("ClusterId").string(var_126.as_str());
    }
    if let Some(var_127) = &input.instance_fleet {
        let mut object_128 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_fleet_modify_config(
            &mut object_128,
            var_127,
        )?;
        object_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_instance_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.cluster_id {
        object.key("ClusterId").string(var_129.as_str());
    }
    if let Some(var_130) = &input.instance_groups {
        let mut array_131 = object.key("InstanceGroups").start_array();
        for item_132 in var_130 {
            {
                let mut object_133 = array_131.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group_modify_config(
                    &mut object_133,
                    item_132,
                )?;
                object_133.finish();
            }
        }
        array_131.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_auto_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.cluster_id {
        object.key("ClusterId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.auto_scaling_policy {
        let mut object_137 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_policy(
            &mut object_137,
            var_136,
        )?;
        object_137.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_auto_termination_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoTerminationPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.cluster_id {
        object.key("ClusterId").string(var_138.as_str());
    }
    if let Some(var_139) = &input.auto_termination_policy {
        let mut object_140 = object.key("AutoTerminationPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_termination_policy(
            &mut object_140,
            var_139,
        )?;
        object_140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_block_public_access_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBlockPublicAccessConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.block_public_access_configuration {
        let mut object_142 = object.key("BlockPublicAccessConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_block_public_access_configuration(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_managed_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.cluster_id {
        object.key("ClusterId").string(var_143.as_str());
    }
    if let Some(var_144) = &input.managed_scaling_policy {
        let mut object_145 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_scaling_policy(
            &mut object_145,
            var_144,
        )?;
        object_145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_auto_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.cluster_id {
        object.key("ClusterId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_auto_termination_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoTerminationPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.cluster_id {
        object.key("ClusterId").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_managed_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveManagedScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.cluster_id {
        object.key("ClusterId").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.resource_id {
        object.key("ResourceId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.tag_keys {
        let mut array_152 = object.key("TagKeys").start_array();
        for item_153 in var_151 {
            {
                array_152.value().string(item_153.as_str());
            }
        }
        array_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_job_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunJobFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.name {
        object.key("Name").string(var_154.as_str());
    }
    if let Some(var_155) = &input.log_uri {
        object.key("LogUri").string(var_155.as_str());
    }
    if let Some(var_156) = &input.log_encryption_kms_key_id {
        object.key("LogEncryptionKmsKeyId").string(var_156.as_str());
    }
    if let Some(var_157) = &input.additional_info {
        object.key("AdditionalInfo").string(var_157.as_str());
    }
    if let Some(var_158) = &input.ami_version {
        object.key("AmiVersion").string(var_158.as_str());
    }
    if let Some(var_159) = &input.release_label {
        object.key("ReleaseLabel").string(var_159.as_str());
    }
    if let Some(var_160) = &input.instances {
        let mut object_161 = object.key("Instances").start_object();
        crate::json_ser::serialize_structure_crate_model_job_flow_instances_config(
            &mut object_161,
            var_160,
        )?;
        object_161.finish();
    }
    if let Some(var_162) = &input.steps {
        let mut array_163 = object.key("Steps").start_array();
        for item_164 in var_162 {
            {
                let mut object_165 = array_163.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_config(
                    &mut object_165,
                    item_164,
                )?;
                object_165.finish();
            }
        }
        array_163.finish();
    }
    if let Some(var_166) = &input.bootstrap_actions {
        let mut array_167 = object.key("BootstrapActions").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bootstrap_action_config(
                    &mut object_169,
                    item_168,
                )?;
                object_169.finish();
            }
        }
        array_167.finish();
    }
    if let Some(var_170) = &input.supported_products {
        let mut array_171 = object.key("SupportedProducts").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172.as_str());
            }
        }
        array_171.finish();
    }
    if let Some(var_173) = &input.new_supported_products {
        let mut array_174 = object.key("NewSupportedProducts").start_array();
        for item_175 in var_173 {
            {
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_crate_model_supported_product_config(
                    &mut object_176,
                    item_175,
                )?;
                object_176.finish();
            }
        }
        array_174.finish();
    }
    if let Some(var_177) = &input.applications {
        let mut array_178 = object.key("Applications").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_application(
                    &mut object_180,
                    item_179,
                )?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.configurations {
        let mut array_182 = object.key("Configurations").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if input.visible_to_all_users {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
    if let Some(var_185) = &input.job_flow_role {
        object.key("JobFlowRole").string(var_185.as_str());
    }
    if let Some(var_186) = &input.service_role {
        object.key("ServiceRole").string(var_186.as_str());
    }
    if let Some(var_187) = &input.tags {
        let mut array_188 = object.key("Tags").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_190, item_189)?;
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_191.as_str());
    }
    if let Some(var_192) = &input.auto_scaling_role {
        object.key("AutoScalingRole").string(var_192.as_str());
    }
    if let Some(var_193) = &input.scale_down_behavior {
        object.key("ScaleDownBehavior").string(var_193.as_str());
    }
    if let Some(var_194) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.ebs_root_volume_size {
        object.key("EbsRootVolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_195).into()),
        );
    }
    if let Some(var_196) = &input.repo_upgrade_on_boot {
        object.key("RepoUpgradeOnBoot").string(var_196.as_str());
    }
    if let Some(var_197) = &input.kerberos_attributes {
        let mut object_198 = object.key("KerberosAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_kerberos_attributes(
            &mut object_198,
            var_197,
        )?;
        object_198.finish();
    }
    if let Some(var_199) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_199).into()),
        );
    }
    if let Some(var_200) = &input.managed_scaling_policy {
        let mut object_201 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_scaling_policy(
            &mut object_201,
            var_200,
        )?;
        object_201.finish();
    }
    if let Some(var_202) = &input.placement_group_configs {
        let mut array_203 = object.key("PlacementGroupConfigs").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_group_config(
                    &mut object_205,
                    item_204,
                )?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    if let Some(var_206) = &input.auto_termination_policy {
        let mut object_207 = object.key("AutoTerminationPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_termination_policy(
            &mut object_207,
            var_206,
        )?;
        object_207.finish();
    }
    if let Some(var_208) = &input.os_release_label {
        object.key("OSReleaseLabel").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_termination_protection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetTerminationProtectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.job_flow_ids {
        let mut array_210 = object.key("JobFlowIds").start_array();
        for item_211 in var_209 {
            {
                array_210.value().string(item_211.as_str());
            }
        }
        array_210.finish();
    }
    {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_visible_to_all_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetVisibleToAllUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.job_flow_ids {
        let mut array_213 = object.key("JobFlowIds").start_array();
        for item_214 in var_212 {
            {
                array_213.value().string(item_214.as_str());
            }
        }
        array_213.finish();
    }
    {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_notebook_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.editor_id {
        object.key("EditorId").string(var_215.as_str());
    }
    if let Some(var_216) = &input.relative_path {
        object.key("RelativePath").string(var_216.as_str());
    }
    if let Some(var_217) = &input.notebook_execution_name {
        object.key("NotebookExecutionName").string(var_217.as_str());
    }
    if let Some(var_218) = &input.notebook_params {
        object.key("NotebookParams").string(var_218.as_str());
    }
    if let Some(var_219) = &input.execution_engine {
        let mut object_220 = object.key("ExecutionEngine").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_engine_config(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.service_role {
        object.key("ServiceRole").string(var_221.as_str());
    }
    if let Some(var_222) = &input.notebook_instance_security_group_id {
        object
            .key("NotebookInstanceSecurityGroupId")
            .string(var_222.as_str());
    }
    if let Some(var_223) = &input.tags {
        let mut array_224 = object.key("Tags").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_226, item_225)?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_notebook_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_job_flows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateJobFlowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.job_flow_ids {
        let mut array_229 = object.key("JobFlowIds").start_array();
        for item_230 in var_228 {
            {
                array_229.value().string(item_230.as_str());
            }
        }
        array_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.studio_id {
        object.key("StudioId").string(var_231.as_str());
    }
    if let Some(var_232) = &input.name {
        object.key("Name").string(var_232.as_str());
    }
    if let Some(var_233) = &input.description {
        object.key("Description").string(var_233.as_str());
    }
    if let Some(var_234) = &input.subnet_ids {
        let mut array_235 = object.key("SubnetIds").start_array();
        for item_236 in var_234 {
            {
                array_235.value().string(item_236.as_str());
            }
        }
        array_235.finish();
    }
    if let Some(var_237) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_237.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.studio_id {
        object.key("StudioId").string(var_238.as_str());
    }
    if let Some(var_239) = &input.identity_id {
        object.key("IdentityId").string(var_239.as_str());
    }
    if let Some(var_240) = &input.identity_name {
        object.key("IdentityName").string(var_240.as_str());
    }
    if let Some(var_241) = &input.identity_type {
        object.key("IdentityType").string(var_241.as_str());
    }
    if let Some(var_242) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_fleet_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.name {
        object.key("Name").string(var_243.as_str());
    }
    if let Some(var_244) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_244.as_str());
    }
    if let Some(var_245) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    if let Some(var_246) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_246).into()),
        );
    }
    if let Some(var_247) = &input.instance_type_configs {
        let mut array_248 = object.key("InstanceTypeConfigs").start_array();
        for item_249 in var_247 {
            {
                let mut object_250 = array_248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_type_config(
                    &mut object_250,
                    item_249,
                )?;
                object_250.finish();
            }
        }
        array_248.finish();
    }
    if let Some(var_251) = &input.launch_specifications {
        let mut object_252 = object.key("LaunchSpecifications").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_fleet_provisioning_specifications(&mut object_252, var_251)?;
        object_252.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_group_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.name {
        object.key("Name").string(var_253.as_str());
    }
    if let Some(var_254) = &input.market {
        object.key("Market").string(var_254.as_str());
    }
    if let Some(var_255) = &input.instance_role {
        object.key("InstanceRole").string(var_255.as_str());
    }
    if let Some(var_256) = &input.bid_price {
        object.key("BidPrice").string(var_256.as_str());
    }
    if let Some(var_257) = &input.instance_type {
        object.key("InstanceType").string(var_257.as_str());
    }
    if let Some(var_258) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_258).into()),
        );
    }
    if let Some(var_259) = &input.configurations {
        let mut array_260 = object.key("Configurations").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_262,
                    item_261,
                )?;
                object_262.finish();
            }
        }
        array_260.finish();
    }
    if let Some(var_263) = &input.ebs_configuration {
        let mut object_264 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_configuration(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    if let Some(var_265) = &input.auto_scaling_policy {
        let mut object_266 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_policy(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    if let Some(var_267) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.name {
        object.key("Name").string(var_268.as_str());
    }
    if let Some(var_269) = &input.action_on_failure {
        object.key("ActionOnFailure").string(var_269.as_str());
    }
    if let Some(var_270) = &input.hadoop_jar_step {
        let mut object_271 = object.key("HadoopJarStep").start_object();
        crate::json_ser::serialize_structure_crate_model_hadoop_jar_step_config(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.key {
        object.key("Key").string(var_272.as_str());
    }
    if let Some(var_273) = &input.value {
        object.key("Value").string(var_273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_release_label_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReleaseLabelFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.prefix {
        object.key("Prefix").string(var_274.as_str());
    }
    if let Some(var_275) = &input.application {
        object.key("Application").string(var_275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_fleet_modify_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetModifyConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_276.as_str());
    }
    if let Some(var_277) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_277).into()),
        );
    }
    if let Some(var_278) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_group_modify_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupModifyConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_279.as_str());
    }
    if let Some(var_280) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    if let Some(var_281) = &input.ec2_instance_ids_to_terminate {
        let mut array_282 = object.key("EC2InstanceIdsToTerminate").start_array();
        for item_283 in var_281 {
            {
                array_282.value().string(item_283.as_str());
            }
        }
        array_282.finish();
    }
    if let Some(var_284) = &input.shrink_policy {
        let mut object_285 = object.key("ShrinkPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_shrink_policy(&mut object_285, var_284)?;
        object_285.finish();
    }
    if let Some(var_286) = &input.reconfiguration_type {
        object.key("ReconfigurationType").string(var_286.as_str());
    }
    if let Some(var_287) = &input.configurations {
        let mut array_288 = object.key("Configurations").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_290,
                    item_289,
                )?;
                object_290.finish();
            }
        }
        array_288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_scaling_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.constraints {
        let mut object_292 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_scaling_constraints(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    if let Some(var_293) = &input.rules {
        let mut array_294 = object.key("Rules").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_scaling_rule(
                    &mut object_296,
                    item_295,
                )?;
                object_296.finish();
            }
        }
        array_294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_termination_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoTerminationPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_block_public_access_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockPublicAccessConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("BlockPublicSecurityGroupRules")
            .boolean(input.block_public_security_group_rules);
    }
    if let Some(var_297) = &input.permitted_public_security_group_rule_ranges {
        let mut array_298 = object
            .key("PermittedPublicSecurityGroupRuleRanges")
            .start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(
                    &mut object_300,
                    item_299,
                )?;
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.classification {
        object.key("Classification").string(var_301.as_str());
    }
    if let Some(var_302) = &input.configurations {
        let mut array_303 = object.key("Configurations").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_305,
                    item_304,
                )?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if let Some(var_306) = &input.properties {
        let mut object_307 = object.key("Properties").start_object();
        for (key_308, value_309) in var_306 {
            {
                object_307.key(key_308).string(value_309.as_str());
            }
        }
        object_307.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_managed_scaling_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedScalingPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.compute_limits {
        let mut object_311 = object.key("ComputeLimits").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_limits(&mut object_311, var_310)?;
        object_311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_flow_instances_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobFlowInstancesConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.master_instance_type {
        object.key("MasterInstanceType").string(var_312.as_str());
    }
    if let Some(var_313) = &input.slave_instance_type {
        object.key("SlaveInstanceType").string(var_313.as_str());
    }
    if let Some(var_314) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_314).into()),
        );
    }
    if let Some(var_315) = &input.instance_groups {
        let mut array_316 = object.key("InstanceGroups").start_array();
        for item_317 in var_315 {
            {
                let mut object_318 = array_316.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group_config(
                    &mut object_318,
                    item_317,
                )?;
                object_318.finish();
            }
        }
        array_316.finish();
    }
    if let Some(var_319) = &input.instance_fleets {
        let mut array_320 = object.key("InstanceFleets").start_array();
        for item_321 in var_319 {
            {
                let mut object_322 = array_320.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_fleet_config(
                    &mut object_322,
                    item_321,
                )?;
                object_322.finish();
            }
        }
        array_320.finish();
    }
    if let Some(var_323) = &input.ec2_key_name {
        object.key("Ec2KeyName").string(var_323.as_str());
    }
    if let Some(var_324) = &input.placement {
        let mut object_325 = object.key("Placement").start_object();
        crate::json_ser::serialize_structure_crate_model_placement_type(&mut object_325, var_324)?;
        object_325.finish();
    }
    if input.keep_job_flow_alive_when_no_steps {
        object
            .key("KeepJobFlowAliveWhenNoSteps")
            .boolean(input.keep_job_flow_alive_when_no_steps);
    }
    if input.termination_protected {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
    if let Some(var_326) = &input.hadoop_version {
        object.key("HadoopVersion").string(var_326.as_str());
    }
    if let Some(var_327) = &input.ec2_subnet_id {
        object.key("Ec2SubnetId").string(var_327.as_str());
    }
    if let Some(var_328) = &input.ec2_subnet_ids {
        let mut array_329 = object.key("Ec2SubnetIds").start_array();
        for item_330 in var_328 {
            {
                array_329.value().string(item_330.as_str());
            }
        }
        array_329.finish();
    }
    if let Some(var_331) = &input.emr_managed_master_security_group {
        object
            .key("EmrManagedMasterSecurityGroup")
            .string(var_331.as_str());
    }
    if let Some(var_332) = &input.emr_managed_slave_security_group {
        object
            .key("EmrManagedSlaveSecurityGroup")
            .string(var_332.as_str());
    }
    if let Some(var_333) = &input.service_access_security_group {
        object
            .key("ServiceAccessSecurityGroup")
            .string(var_333.as_str());
    }
    if let Some(var_334) = &input.additional_master_security_groups {
        let mut array_335 = object.key("AdditionalMasterSecurityGroups").start_array();
        for item_336 in var_334 {
            {
                array_335.value().string(item_336.as_str());
            }
        }
        array_335.finish();
    }
    if let Some(var_337) = &input.additional_slave_security_groups {
        let mut array_338 = object.key("AdditionalSlaveSecurityGroups").start_array();
        for item_339 in var_337 {
            {
                array_338.value().string(item_339.as_str());
            }
        }
        array_338.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bootstrap_action_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BootstrapActionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.name {
        object.key("Name").string(var_340.as_str());
    }
    if let Some(var_341) = &input.script_bootstrap_action {
        let mut object_342 = object.key("ScriptBootstrapAction").start_object();
        crate::json_ser::serialize_structure_crate_model_script_bootstrap_action_config(
            &mut object_342,
            var_341,
        )?;
        object_342.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_supported_product_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SupportedProductConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.name {
        object.key("Name").string(var_343.as_str());
    }
    if let Some(var_344) = &input.args {
        let mut array_345 = object.key("Args").start_array();
        for item_346 in var_344 {
            {
                array_345.value().string(item_346.as_str());
            }
        }
        array_345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_application(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Application,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.name {
        object.key("Name").string(var_347.as_str());
    }
    if let Some(var_348) = &input.version {
        object.key("Version").string(var_348.as_str());
    }
    if let Some(var_349) = &input.args {
        let mut array_350 = object.key("Args").start_array();
        for item_351 in var_349 {
            {
                array_350.value().string(item_351.as_str());
            }
        }
        array_350.finish();
    }
    if let Some(var_352) = &input.additional_info {
        let mut object_353 = object.key("AdditionalInfo").start_object();
        for (key_354, value_355) in var_352 {
            {
                object_353.key(key_354).string(value_355.as_str());
            }
        }
        object_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.classification {
        object.key("Classification").string(var_356.as_str());
    }
    if let Some(var_357) = &input.configurations {
        let mut array_358 = object.key("Configurations").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_360,
                    item_359,
                )?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    if let Some(var_361) = &input.properties {
        let mut object_362 = object.key("Properties").start_object();
        for (key_363, value_364) in var_361 {
            {
                object_362.key(key_363).string(value_364.as_str());
            }
        }
        object_362.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kerberos_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KerberosAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.realm {
        object.key("Realm").string(var_365.as_str());
    }
    if let Some(var_366) = &input.kdc_admin_password {
        object.key("KdcAdminPassword").string(var_366.as_str());
    }
    if let Some(var_367) = &input.cross_realm_trust_principal_password {
        object
            .key("CrossRealmTrustPrincipalPassword")
            .string(var_367.as_str());
    }
    if let Some(var_368) = &input.ad_domain_join_user {
        object.key("ADDomainJoinUser").string(var_368.as_str());
    }
    if let Some(var_369) = &input.ad_domain_join_password {
        object.key("ADDomainJoinPassword").string(var_369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_group_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementGroupConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.instance_role {
        object.key("InstanceRole").string(var_370.as_str());
    }
    if let Some(var_371) = &input.placement_strategy {
        object.key("PlacementStrategy").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_engine_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionEngineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.id {
        object.key("Id").string(var_372.as_str());
    }
    if let Some(var_373) = &input.r#type {
        object.key("Type").string(var_373.as_str());
    }
    if let Some(var_374) = &input.master_instance_security_group_id {
        object
            .key("MasterInstanceSecurityGroupId")
            .string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_type_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceTypeConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.instance_type {
        object.key("InstanceType").string(var_375.as_str());
    }
    if let Some(var_376) = &input.weighted_capacity {
        object.key("WeightedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_376).into()),
        );
    }
    if let Some(var_377) = &input.bid_price {
        object.key("BidPrice").string(var_377.as_str());
    }
    if let Some(var_378) = &input.bid_price_as_percentage_of_on_demand_price {
        object.key("BidPriceAsPercentageOfOnDemandPrice").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_378).into()),
        );
    }
    if let Some(var_379) = &input.ebs_configuration {
        let mut object_380 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_configuration(
            &mut object_380,
            var_379,
        )?;
        object_380.finish();
    }
    if let Some(var_381) = &input.configurations {
        let mut array_382 = object.key("Configurations").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_384,
                    item_383,
                )?;
                object_384.finish();
            }
        }
        array_382.finish();
    }
    if let Some(var_385) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_fleet_provisioning_specifications(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetProvisioningSpecifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.spot_specification {
        let mut object_387 = object.key("SpotSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_spot_provisioning_specification(
            &mut object_387,
            var_386,
        )?;
        object_387.finish();
    }
    if let Some(var_388) = &input.on_demand_specification {
        let mut object_389 = object.key("OnDemandSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_on_demand_provisioning_specification(
            &mut object_389,
            var_388,
        )?;
        object_389.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ebs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.ebs_block_device_configs {
        let mut array_391 = object.key("EbsBlockDeviceConfigs").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ebs_block_device_config(
                    &mut object_393,
                    item_392,
                )?;
                object_393.finish();
            }
        }
        array_391.finish();
    }
    if let Some(var_394) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_394);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hadoop_jar_step_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HadoopJarStepConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.properties {
        let mut array_396 = object.key("Properties").start_array();
        for item_397 in var_395 {
            {
                let mut object_398 = array_396.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_value(
                    &mut object_398,
                    item_397,
                )?;
                object_398.finish();
            }
        }
        array_396.finish();
    }
    if let Some(var_399) = &input.jar {
        object.key("Jar").string(var_399.as_str());
    }
    if let Some(var_400) = &input.main_class {
        object.key("MainClass").string(var_400.as_str());
    }
    if let Some(var_401) = &input.args {
        let mut array_402 = object.key("Args").start_array();
        for item_403 in var_401 {
            {
                array_402.value().string(item_403.as_str());
            }
        }
        array_402.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_shrink_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShrinkPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.decommission_timeout {
        object.key("DecommissionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_404).into()),
        );
    }
    if let Some(var_405) = &input.instance_resize_policy {
        let mut object_406 = object.key("InstanceResizePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_resize_policy(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_constraints(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingConstraints,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_407) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    if let Some(var_408) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_408).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.name {
        object.key("Name").string(var_409.as_str());
    }
    if let Some(var_410) = &input.description {
        object.key("Description").string(var_410.as_str());
    }
    if let Some(var_411) = &input.action {
        let mut object_412 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_scaling_action(&mut object_412, var_411)?;
        object_412.finish();
    }
    if let Some(var_413) = &input.trigger {
        let mut object_414 = object.key("Trigger").start_object();
        crate::json_ser::serialize_structure_crate_model_scaling_trigger(&mut object_414, var_413)?;
        object_414.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_415) = &input.min_range {
        object.key("MinRange").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_415).into()),
        );
    }
    if let Some(var_416) = &input.max_range {
        object.key("MaxRange").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_416).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_limits(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeLimits,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.unit_type {
        object.key("UnitType").string(var_417.as_str());
    }
    if let Some(var_418) = &input.minimum_capacity_units {
        object.key("MinimumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_418).into()),
        );
    }
    if let Some(var_419) = &input.maximum_capacity_units {
        object.key("MaximumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_419).into()),
        );
    }
    if let Some(var_420) = &input.maximum_on_demand_capacity_units {
        object.key("MaximumOnDemandCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_420).into()),
        );
    }
    if let Some(var_421) = &input.maximum_core_capacity_units {
        object.key("MaximumCoreCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_421).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_422.as_str());
    }
    if let Some(var_423) = &input.availability_zones {
        let mut array_424 = object.key("AvailabilityZones").start_array();
        for item_425 in var_423 {
            {
                array_424.value().string(item_425.as_str());
            }
        }
        array_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_script_bootstrap_action_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptBootstrapActionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.path {
        object.key("Path").string(var_426.as_str());
    }
    if let Some(var_427) = &input.args {
        let mut array_428 = object.key("Args").start_array();
        for item_429 in var_427 {
            {
                array_428.value().string(item_429.as_str());
            }
        }
        array_428.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spot_provisioning_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpotProvisioningSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.timeout_duration_minutes {
        object.key("TimeoutDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_430).into()),
        );
    }
    if let Some(var_431) = &input.timeout_action {
        object.key("TimeoutAction").string(var_431.as_str());
    }
    if let Some(var_432) = &input.block_duration_minutes {
        object.key("BlockDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_432).into()),
        );
    }
    if let Some(var_433) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_433.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_demand_provisioning_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandProvisioningSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_434.as_str());
    }
    if let Some(var_435) = &input.capacity_reservation_options {
        let mut object_436 = object.key("CapacityReservationOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_on_demand_capacity_reservation_options(
            &mut object_436,
            var_435,
        )?;
        object_436.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ebs_block_device_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsBlockDeviceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_437) = &input.volume_specification {
        let mut object_438 = object.key("VolumeSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_volume_specification(
            &mut object_438,
            var_437,
        )?;
        object_438.finish();
    }
    if let Some(var_439) = &input.volumes_per_instance {
        object.key("VolumesPerInstance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_439).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_key_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.key {
        object.key("Key").string(var_440.as_str());
    }
    if let Some(var_441) = &input.value {
        object.key("Value").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_resize_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceResizePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.instances_to_terminate {
        let mut array_443 = object.key("InstancesToTerminate").start_array();
        for item_444 in var_442 {
            {
                array_443.value().string(item_444.as_str());
            }
        }
        array_443.finish();
    }
    if let Some(var_445) = &input.instances_to_protect {
        let mut array_446 = object.key("InstancesToProtect").start_array();
        for item_447 in var_445 {
            {
                array_446.value().string(item_447.as_str());
            }
        }
        array_446.finish();
    }
    if let Some(var_448) = &input.instance_termination_timeout {
        object.key("InstanceTerminationTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_448).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.market {
        object.key("Market").string(var_449.as_str());
    }
    if let Some(var_450) = &input.simple_scaling_policy_configuration {
        let mut object_451 = object
            .key("SimpleScalingPolicyConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_simple_scaling_policy_configuration(
            &mut object_451,
            var_450,
        )?;
        object_451.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_trigger(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingTrigger,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.cloud_watch_alarm_definition {
        let mut object_453 = object.key("CloudWatchAlarmDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_alarm_definition(
            &mut object_453,
            var_452,
        )?;
        object_453.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_demand_capacity_reservation_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandCapacityReservationOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_454) = &input.usage_strategy {
        object.key("UsageStrategy").string(var_454.as_str());
    }
    if let Some(var_455) = &input.capacity_reservation_preference {
        object
            .key("CapacityReservationPreference")
            .string(var_455.as_str());
    }
    if let Some(var_456) = &input.capacity_reservation_resource_group_arn {
        object
            .key("CapacityReservationResourceGroupArn")
            .string(var_456.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.volume_type {
        object.key("VolumeType").string(var_457.as_str());
    }
    if let Some(var_458) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_458).into()),
        );
    }
    if let Some(var_459) = &input.size_in_gb {
        object.key("SizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    if let Some(var_460) = &input.throughput {
        object.key("Throughput").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_460).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_simple_scaling_policy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleScalingPolicyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.adjustment_type {
        object.key("AdjustmentType").string(var_461.as_str());
    }
    if let Some(var_462) = &input.scaling_adjustment {
        object.key("ScalingAdjustment").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    if let Some(var_463) = &input.cool_down {
        object.key("CoolDown").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_463).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_alarm_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchAlarmDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_464) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_464.as_str());
    }
    if let Some(var_465) = &input.evaluation_periods {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_465).into()),
        );
    }
    if let Some(var_466) = &input.metric_name {
        object.key("MetricName").string(var_466.as_str());
    }
    if let Some(var_467) = &input.namespace {
        object.key("Namespace").string(var_467.as_str());
    }
    if let Some(var_468) = &input.period {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_468).into()),
        );
    }
    if let Some(var_469) = &input.statistic {
        object.key("Statistic").string(var_469.as_str());
    }
    if let Some(var_470) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_470).into()),
        );
    }
    if let Some(var_471) = &input.unit {
        object.key("Unit").string(var_471.as_str());
    }
    if let Some(var_472) = &input.dimensions {
        let mut array_473 = object.key("Dimensions").start_array();
        for item_474 in var_472 {
            {
                let mut object_475 = array_473.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_dimension(
                    &mut object_475,
                    item_474,
                )?;
                object_475.finish();
            }
        }
        array_473.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_476) = &input.key {
        object.key("Key").string(var_476.as_str());
    }
    if let Some(var_477) = &input.value {
        object.key("Value").string(var_477.as_str());
    }
    Ok(())
}
