// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_node_exchange(
    input: &crate::input::AcceptReservedNodeExchangeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptReservedNodeExchange", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ReservedNodeId");
    if let Some(var_2) = &input.reserved_node_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_4) = &input.target_reserved_node_offering_id {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_partner(
    input: &crate::input::AddPartnerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddPartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("AccountId");
    if let Some(var_6) = &input.account_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("ClusterIdentifier");
    if let Some(var_8) = &input.cluster_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DatabaseName");
    if let Some(var_10) = &input.database_name {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("PartnerName");
    if let Some(var_12) = &input.partner_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_data_share_consumer(
    input: &crate::input::AssociateDataShareConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDataShareConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DataShareArn");
    if let Some(var_14) = &input.data_share_arn {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("AssociateEntireAccount");
    if let Some(var_16) = &input.associate_entire_account {
        scope_15.boolean(*var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ConsumerArn");
    if let Some(var_18) = &input.consumer_arn {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("ConsumerRegion");
    if let Some(var_20) = &input.consumer_region {
        scope_19.string(var_20);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_cluster_security_group_ingress(
    input: &crate::input::AuthorizeClusterSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeClusterSecurityGroupIngress",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_22) = &input.cluster_security_group_name {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("CIDRIP");
    if let Some(var_24) = &input.cidrip {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_26) = &input.ec2_security_group_name {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_28) = &input.ec2_security_group_owner_id {
        scope_27.string(var_28);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_data_share(
    input: &crate::input::AuthorizeDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("DataShareArn");
    if let Some(var_30) = &input.data_share_arn {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("ConsumerIdentifier");
    if let Some(var_32) = &input.consumer_identifier {
        scope_31.string(var_32);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_endpoint_access(
    input: &crate::input::AuthorizeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("ClusterIdentifier");
    if let Some(var_34) = &input.cluster_identifier {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("Account");
    if let Some(var_36) = &input.account {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("VpcIds");
    if let Some(var_38) = &input.vpc_ids {
        let mut list_40 = scope_37.start_list(false, Some("VpcIdentifier"));
        for item_39 in var_38 {
            #[allow(unused_mut)]
            let mut entry_41 = list_40.entry();
            entry_41.string(item_39);
        }
        list_40.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_snapshot_access(
    input: &crate::input::AuthorizeSnapshotAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("SnapshotIdentifier");
    if let Some(var_43) = &input.snapshot_identifier {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_45) = &input.snapshot_cluster_identifier {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_47) = &input.account_with_restore_access {
        scope_46.string(var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_delete_cluster_snapshots(
    input: &crate::input::BatchDeleteClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchDeleteClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("Identifiers");
    if let Some(var_49) = &input.identifiers {
        let mut list_51 = scope_48.start_list(false, Some("DeleteClusterSnapshotMessage"));
        for item_50 in var_49 {
            #[allow(unused_mut)]
            let mut entry_52 = list_51.entry();
            crate::query_ser::serialize_structure_crate_model_delete_cluster_snapshot_message(
                entry_52, item_50,
            )?;
        }
        list_51.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_modify_cluster_snapshots(
    input: &crate::input::BatchModifyClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchModifyClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("SnapshotIdentifierList");
    if let Some(var_54) = &input.snapshot_identifier_list {
        let mut list_56 = scope_53.start_list(false, Some("String"));
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            entry_57.string(item_55);
        }
        list_56.finish();
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_59) = &input.manual_snapshot_retention_period {
        scope_58.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_59).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("Force");
    if input.force {
        scope_60.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_resize(
    input: &crate::input::CancelResizeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ClusterIdentifier");
    if let Some(var_62) = &input.cluster_identifier {
        scope_61.string(var_62);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_cluster_snapshot(
    input: &crate::input::CopyClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("SourceSnapshotIdentifier");
    if let Some(var_64) = &input.source_snapshot_identifier {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("SourceSnapshotClusterIdentifier");
    if let Some(var_66) = &input.source_snapshot_cluster_identifier {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("TargetSnapshotIdentifier");
    if let Some(var_68) = &input.target_snapshot_identifier {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_70) = &input.manual_snapshot_retention_period {
        scope_69.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_70).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_authentication_profile(
    input: &crate::input::CreateAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("AuthenticationProfileName");
    if let Some(var_72) = &input.authentication_profile_name {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("AuthenticationProfileContent");
    if let Some(var_74) = &input.authentication_profile_content {
        scope_73.string(var_74);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster(
    input: &crate::input::CreateClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("DBName");
    if let Some(var_76) = &input.db_name {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("ClusterIdentifier");
    if let Some(var_78) = &input.cluster_identifier {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("ClusterType");
    if let Some(var_80) = &input.cluster_type {
        scope_79.string(var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("NodeType");
    if let Some(var_82) = &input.node_type {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("MasterUsername");
    if let Some(var_84) = &input.master_username {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("MasterUserPassword");
    if let Some(var_86) = &input.master_user_password {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_88) = &input.cluster_security_groups {
        let mut list_90 = scope_87.start_list(false, Some("ClusterSecurityGroupName"));
        for item_89 in var_88 {
            #[allow(unused_mut)]
            let mut entry_91 = list_90.entry();
            entry_91.string(item_89);
        }
        list_90.finish();
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_93) = &input.vpc_security_group_ids {
        let mut list_95 = scope_92.start_list(false, Some("VpcSecurityGroupId"));
        for item_94 in var_93 {
            #[allow(unused_mut)]
            let mut entry_96 = list_95.entry();
            entry_96.string(item_94);
        }
        list_95.finish();
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_98) = &input.cluster_subnet_group_name {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("AvailabilityZone");
    if let Some(var_100) = &input.availability_zone {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_102) = &input.preferred_maintenance_window {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_104) = &input.cluster_parameter_group_name {
        scope_103.string(var_104);
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_106) = &input.automated_snapshot_retention_period {
        scope_105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_108) = &input.manual_snapshot_retention_period {
        scope_107.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("Port");
    if let Some(var_110) = &input.port {
        scope_109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("ClusterVersion");
    if let Some(var_112) = &input.cluster_version {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_114) = &input.allow_version_upgrade {
        scope_113.boolean(*var_114);
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("NumberOfNodes");
    if let Some(var_116) = &input.number_of_nodes {
        scope_115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("PubliclyAccessible");
    if let Some(var_118) = &input.publicly_accessible {
        scope_117.boolean(*var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Encrypted");
    if let Some(var_120) = &input.encrypted {
        scope_119.boolean(*var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_122) = &input.hsm_client_certificate_identifier {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_124) = &input.hsm_configuration_identifier {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("ElasticIp");
    if let Some(var_126) = &input.elastic_ip {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("Tags");
    if let Some(var_128) = &input.tags {
        let mut list_130 = scope_127.start_list(false, Some("Tag"));
        for item_129 in var_128 {
            #[allow(unused_mut)]
            let mut entry_131 = list_130.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_131, item_129)?;
        }
        list_130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("KmsKeyId");
    if let Some(var_133) = &input.kms_key_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_135) = &input.enhanced_vpc_routing {
        scope_134.boolean(*var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AdditionalInfo");
    if let Some(var_137) = &input.additional_info {
        scope_136.string(var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("IamRoles");
    if let Some(var_139) = &input.iam_roles {
        let mut list_141 = scope_138.start_list(false, Some("IamRoleArn"));
        for item_140 in var_139 {
            #[allow(unused_mut)]
            let mut entry_142 = list_141.entry();
            entry_142.string(item_140);
        }
        list_141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("MaintenanceTrackName");
    if let Some(var_144) = &input.maintenance_track_name {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_146) = &input.snapshot_schedule_identifier {
        scope_145.string(var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_148) = &input.availability_zone_relocation {
        scope_147.boolean(*var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_150) = &input.aqua_configuration_status {
        scope_149.string(var_150.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_152) = &input.default_iam_role_arn {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("LoadSampleData");
    if let Some(var_154) = &input.load_sample_data {
        scope_153.string(var_154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_parameter_group(
    input: &crate::input::CreateClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("ParameterGroupName");
    if let Some(var_156) = &input.parameter_group_name {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("ParameterGroupFamily");
    if let Some(var_158) = &input.parameter_group_family {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("Description");
    if let Some(var_160) = &input.description {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Tags");
    if let Some(var_162) = &input.tags {
        let mut list_164 = scope_161.start_list(false, Some("Tag"));
        for item_163 in var_162 {
            #[allow(unused_mut)]
            let mut entry_165 = list_164.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_165, item_163)?;
        }
        list_164.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_security_group(
    input: &crate::input::CreateClusterSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_167) = &input.cluster_security_group_name {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("Description");
    if let Some(var_169) = &input.description {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("Tags");
    if let Some(var_171) = &input.tags {
        let mut list_173 = scope_170.start_list(false, Some("Tag"));
        for item_172 in var_171 {
            #[allow(unused_mut)]
            let mut entry_174 = list_173.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_174, item_172)?;
        }
        list_173.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_snapshot(
    input: &crate::input::CreateClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("SnapshotIdentifier");
    if let Some(var_176) = &input.snapshot_identifier {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("ClusterIdentifier");
    if let Some(var_178) = &input.cluster_identifier {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_180) = &input.manual_snapshot_retention_period {
        scope_179.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("Tags");
    if let Some(var_182) = &input.tags {
        let mut list_184 = scope_181.start_list(false, Some("Tag"));
        for item_183 in var_182 {
            #[allow(unused_mut)]
            let mut entry_185 = list_184.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_185, item_183)?;
        }
        list_184.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_subnet_group(
    input: &crate::input::CreateClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_187) = &input.cluster_subnet_group_name {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("Description");
    if let Some(var_189) = &input.description {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("SubnetIds");
    if let Some(var_191) = &input.subnet_ids {
        let mut list_193 = scope_190.start_list(false, Some("SubnetIdentifier"));
        for item_192 in var_191 {
            #[allow(unused_mut)]
            let mut entry_194 = list_193.entry();
            entry_194.string(item_192);
        }
        list_193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("Tags");
    if let Some(var_196) = &input.tags {
        let mut list_198 = scope_195.start_list(false, Some("Tag"));
        for item_197 in var_196 {
            #[allow(unused_mut)]
            let mut entry_199 = list_198.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_199, item_197)?;
        }
        list_198.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_endpoint_access(
    input: &crate::input::CreateEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("ClusterIdentifier");
    if let Some(var_201) = &input.cluster_identifier {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("ResourceOwner");
    if let Some(var_203) = &input.resource_owner {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("EndpointName");
    if let Some(var_205) = &input.endpoint_name {
        scope_204.string(var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("SubnetGroupName");
    if let Some(var_207) = &input.subnet_group_name {
        scope_206.string(var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_209) = &input.vpc_security_group_ids {
        let mut list_211 = scope_208.start_list(false, Some("VpcSecurityGroupId"));
        for item_210 in var_209 {
            #[allow(unused_mut)]
            let mut entry_212 = list_211.entry();
            entry_212.string(item_210);
        }
        list_211.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("SubscriptionName");
    if let Some(var_214) = &input.subscription_name {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("SnsTopicArn");
    if let Some(var_216) = &input.sns_topic_arn {
        scope_215.string(var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("SourceType");
    if let Some(var_218) = &input.source_type {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("SourceIds");
    if let Some(var_220) = &input.source_ids {
        let mut list_222 = scope_219.start_list(false, Some("SourceId"));
        for item_221 in var_220 {
            #[allow(unused_mut)]
            let mut entry_223 = list_222.entry();
            entry_223.string(item_221);
        }
        list_222.finish();
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("EventCategories");
    if let Some(var_225) = &input.event_categories {
        let mut list_227 = scope_224.start_list(false, Some("EventCategory"));
        for item_226 in var_225 {
            #[allow(unused_mut)]
            let mut entry_228 = list_227.entry();
            entry_228.string(item_226);
        }
        list_227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("Severity");
    if let Some(var_230) = &input.severity {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("Enabled");
    if let Some(var_232) = &input.enabled {
        scope_231.boolean(*var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("Tags");
    if let Some(var_234) = &input.tags {
        let mut list_236 = scope_233.start_list(false, Some("Tag"));
        for item_235 in var_234 {
            #[allow(unused_mut)]
            let mut entry_237 = list_236.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_237, item_235)?;
        }
        list_236.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_hsm_client_certificate(
    input: &crate::input::CreateHsmClientCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_239) = &input.hsm_client_certificate_identifier {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("Tags");
    if let Some(var_241) = &input.tags {
        let mut list_243 = scope_240.start_list(false, Some("Tag"));
        for item_242 in var_241 {
            #[allow(unused_mut)]
            let mut entry_244 = list_243.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_244, item_242)?;
        }
        list_243.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_hsm_configuration(
    input: &crate::input::CreateHsmConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_246) = &input.hsm_configuration_identifier {
        scope_245.string(var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("Description");
    if let Some(var_248) = &input.description {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("HsmIpAddress");
    if let Some(var_250) = &input.hsm_ip_address {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("HsmPartitionName");
    if let Some(var_252) = &input.hsm_partition_name {
        scope_251.string(var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("HsmPartitionPassword");
    if let Some(var_254) = &input.hsm_partition_password {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("HsmServerPublicCertificate");
    if let Some(var_256) = &input.hsm_server_public_certificate {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("Tags");
    if let Some(var_258) = &input.tags {
        let mut list_260 = scope_257.start_list(false, Some("Tag"));
        for item_259 in var_258 {
            #[allow(unused_mut)]
            let mut entry_261 = list_260.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_261, item_259)?;
        }
        list_260.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_scheduled_action(
    input: &crate::input::CreateScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("ScheduledActionName");
    if let Some(var_263) = &input.scheduled_action_name {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("TargetAction");
    if let Some(var_265) = &input.target_action {
        crate::query_ser::serialize_structure_crate_model_scheduled_action_type(
            scope_264, var_265,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("Schedule");
    if let Some(var_267) = &input.schedule {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("IamRole");
    if let Some(var_269) = &input.iam_role {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("ScheduledActionDescription");
    if let Some(var_271) = &input.scheduled_action_description {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("StartTime");
    if let Some(var_273) = &input.start_time {
        scope_272.date_time(var_273, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("EndTime");
    if let Some(var_275) = &input.end_time {
        scope_274.date_time(var_275, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Enable");
    if let Some(var_277) = &input.enable {
        scope_276.boolean(*var_277);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot_copy_grant(
    input: &crate::input::CreateSnapshotCopyGrantInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_279) = &input.snapshot_copy_grant_name {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("KmsKeyId");
    if let Some(var_281) = &input.kms_key_id {
        scope_280.string(var_281);
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("Tags");
    if let Some(var_283) = &input.tags {
        let mut list_285 = scope_282.start_list(false, Some("Tag"));
        for item_284 in var_283 {
            #[allow(unused_mut)]
            let mut entry_286 = list_285.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_286, item_284)?;
        }
        list_285.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot_schedule(
    input: &crate::input::CreateSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("ScheduleDefinitions");
    if let Some(var_288) = &input.schedule_definitions {
        let mut list_290 = scope_287.start_list(false, Some("ScheduleDefinition"));
        for item_289 in var_288 {
            #[allow(unused_mut)]
            let mut entry_291 = list_290.entry();
            entry_291.string(item_289);
        }
        list_290.finish();
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("ScheduleIdentifier");
    if let Some(var_293) = &input.schedule_identifier {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("ScheduleDescription");
    if let Some(var_295) = &input.schedule_description {
        scope_294.string(var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Tags");
    if let Some(var_297) = &input.tags {
        let mut list_299 = scope_296.start_list(false, Some("Tag"));
        for item_298 in var_297 {
            #[allow(unused_mut)]
            let mut entry_300 = list_299.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_300, item_298)?;
        }
        list_299.finish();
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("DryRun");
    if let Some(var_302) = &input.dry_run {
        scope_301.boolean(*var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("NextInvocations");
    if let Some(var_304) = &input.next_invocations {
        scope_303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_304).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("ResourceName");
    if let Some(var_306) = &input.resource_name {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("Tags");
    if let Some(var_308) = &input.tags {
        let mut list_310 = scope_307.start_list(false, Some("Tag"));
        for item_309 in var_308 {
            #[allow(unused_mut)]
            let mut entry_311 = list_310.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_311, item_309)?;
        }
        list_310.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_usage_limit(
    input: &crate::input::CreateUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("ClusterIdentifier");
    if let Some(var_313) = &input.cluster_identifier {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("FeatureType");
    if let Some(var_315) = &input.feature_type {
        scope_314.string(var_315.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("LimitType");
    if let Some(var_317) = &input.limit_type {
        scope_316.string(var_317.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("Amount");
    {
        scope_318.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.amount).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("Period");
    if let Some(var_320) = &input.period {
        scope_319.string(var_320.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("BreachAction");
    if let Some(var_322) = &input.breach_action {
        scope_321.string(var_322.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("Tags");
    if let Some(var_324) = &input.tags {
        let mut list_326 = scope_323.start_list(false, Some("Tag"));
        for item_325 in var_324 {
            #[allow(unused_mut)]
            let mut entry_327 = list_326.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_327, item_325)?;
        }
        list_326.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deauthorize_data_share(
    input: &crate::input::DeauthorizeDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeauthorizeDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DataShareArn");
    if let Some(var_329) = &input.data_share_arn {
        scope_328.string(var_329);
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("ConsumerIdentifier");
    if let Some(var_331) = &input.consumer_identifier {
        scope_330.string(var_331);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_authentication_profile(
    input: &crate::input::DeleteAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("AuthenticationProfileName");
    if let Some(var_333) = &input.authentication_profile_name {
        scope_332.string(var_333);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster(
    input: &crate::input::DeleteClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("ClusterIdentifier");
    if let Some(var_335) = &input.cluster_identifier {
        scope_334.string(var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("SkipFinalClusterSnapshot");
    if input.skip_final_cluster_snapshot {
        scope_336.boolean(input.skip_final_cluster_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("FinalClusterSnapshotIdentifier");
    if let Some(var_338) = &input.final_cluster_snapshot_identifier {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("FinalClusterSnapshotRetentionPeriod");
    if let Some(var_340) = &input.final_cluster_snapshot_retention_period {
        scope_339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_parameter_group(
    input: &crate::input::DeleteClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("ParameterGroupName");
    if let Some(var_342) = &input.parameter_group_name {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_security_group(
    input: &crate::input::DeleteClusterSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_344) = &input.cluster_security_group_name {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_snapshot(
    input: &crate::input::DeleteClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("SnapshotIdentifier");
    if let Some(var_346) = &input.snapshot_identifier {
        scope_345.string(var_346);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_348) = &input.snapshot_cluster_identifier {
        scope_347.string(var_348);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_subnet_group(
    input: &crate::input::DeleteClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_350) = &input.cluster_subnet_group_name {
        scope_349.string(var_350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_endpoint_access(
    input: &crate::input::DeleteEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("EndpointName");
    if let Some(var_352) = &input.endpoint_name {
        scope_351.string(var_352);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("SubscriptionName");
    if let Some(var_354) = &input.subscription_name {
        scope_353.string(var_354);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_hsm_client_certificate(
    input: &crate::input::DeleteHsmClientCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_356) = &input.hsm_client_certificate_identifier {
        scope_355.string(var_356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_hsm_configuration(
    input: &crate::input::DeleteHsmConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_358) = &input.hsm_configuration_identifier {
        scope_357.string(var_358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_partner(
    input: &crate::input::DeletePartnerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("AccountId");
    if let Some(var_360) = &input.account_id {
        scope_359.string(var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("ClusterIdentifier");
    if let Some(var_362) = &input.cluster_identifier {
        scope_361.string(var_362);
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("DatabaseName");
    if let Some(var_364) = &input.database_name {
        scope_363.string(var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("PartnerName");
    if let Some(var_366) = &input.partner_name {
        scope_365.string(var_366);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_scheduled_action(
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("ScheduledActionName");
    if let Some(var_368) = &input.scheduled_action_name {
        scope_367.string(var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot_copy_grant(
    input: &crate::input::DeleteSnapshotCopyGrantInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_370) = &input.snapshot_copy_grant_name {
        scope_369.string(var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot_schedule(
    input: &crate::input::DeleteSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("ScheduleIdentifier");
    if let Some(var_372) = &input.schedule_identifier {
        scope_371.string(var_372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("ResourceName");
    if let Some(var_374) = &input.resource_name {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("TagKeys");
    if let Some(var_376) = &input.tag_keys {
        let mut list_378 = scope_375.start_list(false, Some("TagKey"));
        for item_377 in var_376 {
            #[allow(unused_mut)]
            let mut entry_379 = list_378.entry();
            entry_379.string(item_377);
        }
        list_378.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_usage_limit(
    input: &crate::input::DeleteUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("UsageLimitId");
    if let Some(var_381) = &input.usage_limit_id {
        scope_380.string(var_381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("AttributeNames");
    if let Some(var_383) = &input.attribute_names {
        let mut list_385 = scope_382.start_list(false, Some("AttributeName"));
        for item_384 in var_383 {
            #[allow(unused_mut)]
            let mut entry_386 = list_385.entry();
            entry_386.string(item_384);
        }
        list_385.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_authentication_profiles(
    input: &crate::input::DescribeAuthenticationProfilesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeAuthenticationProfiles",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("AuthenticationProfileName");
    if let Some(var_388) = &input.authentication_profile_name {
        scope_387.string(var_388);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_db_revisions(
    input: &crate::input::DescribeClusterDbRevisionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterDbRevisions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("ClusterIdentifier");
    if let Some(var_390) = &input.cluster_identifier {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("MaxRecords");
    if let Some(var_392) = &input.max_records {
        scope_391.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_392).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("Marker");
    if let Some(var_394) = &input.marker {
        scope_393.string(var_394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_parameter_groups(
    input: &crate::input::DescribeClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClusterParameterGroups",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("ParameterGroupName");
    if let Some(var_396) = &input.parameter_group_name {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("MaxRecords");
    if let Some(var_398) = &input.max_records {
        scope_397.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_398).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("Marker");
    if let Some(var_400) = &input.marker {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("TagKeys");
    if let Some(var_402) = &input.tag_keys {
        let mut list_404 = scope_401.start_list(false, Some("TagKey"));
        for item_403 in var_402 {
            #[allow(unused_mut)]
            let mut entry_405 = list_404.entry();
            entry_405.string(item_403);
        }
        list_404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("TagValues");
    if let Some(var_407) = &input.tag_values {
        let mut list_409 = scope_406.start_list(false, Some("TagValue"));
        for item_408 in var_407 {
            #[allow(unused_mut)]
            let mut entry_410 = list_409.entry();
            entry_410.string(item_408);
        }
        list_409.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_parameters(
    input: &crate::input::DescribeClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterParameters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("ParameterGroupName");
    if let Some(var_412) = &input.parameter_group_name {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("Source");
    if let Some(var_414) = &input.source {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("MaxRecords");
    if let Some(var_416) = &input.max_records {
        scope_415.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_416).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("Marker");
    if let Some(var_418) = &input.marker {
        scope_417.string(var_418);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_clusters(
    input: &crate::input::DescribeClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("ClusterIdentifier");
    if let Some(var_420) = &input.cluster_identifier {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("MaxRecords");
    if let Some(var_422) = &input.max_records {
        scope_421.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_422).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("Marker");
    if let Some(var_424) = &input.marker {
        scope_423.string(var_424);
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("TagKeys");
    if let Some(var_426) = &input.tag_keys {
        let mut list_428 = scope_425.start_list(false, Some("TagKey"));
        for item_427 in var_426 {
            #[allow(unused_mut)]
            let mut entry_429 = list_428.entry();
            entry_429.string(item_427);
        }
        list_428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("TagValues");
    if let Some(var_431) = &input.tag_values {
        let mut list_433 = scope_430.start_list(false, Some("TagValue"));
        for item_432 in var_431 {
            #[allow(unused_mut)]
            let mut entry_434 = list_433.entry();
            entry_434.string(item_432);
        }
        list_433.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_security_groups(
    input: &crate::input::DescribeClusterSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSecurityGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_436) = &input.cluster_security_group_name {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("MaxRecords");
    if let Some(var_438) = &input.max_records {
        scope_437.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("Marker");
    if let Some(var_440) = &input.marker {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("TagKeys");
    if let Some(var_442) = &input.tag_keys {
        let mut list_444 = scope_441.start_list(false, Some("TagKey"));
        for item_443 in var_442 {
            #[allow(unused_mut)]
            let mut entry_445 = list_444.entry();
            entry_445.string(item_443);
        }
        list_444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("TagValues");
    if let Some(var_447) = &input.tag_values {
        let mut list_449 = scope_446.start_list(false, Some("TagValue"));
        for item_448 in var_447 {
            #[allow(unused_mut)]
            let mut entry_450 = list_449.entry();
            entry_450.string(item_448);
        }
        list_449.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_snapshots(
    input: &crate::input::DescribeClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("ClusterIdentifier");
    if let Some(var_452) = &input.cluster_identifier {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("SnapshotIdentifier");
    if let Some(var_454) = &input.snapshot_identifier {
        scope_453.string(var_454);
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("SnapshotType");
    if let Some(var_456) = &input.snapshot_type {
        scope_455.string(var_456);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("StartTime");
    if let Some(var_458) = &input.start_time {
        scope_457.date_time(var_458, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("EndTime");
    if let Some(var_460) = &input.end_time {
        scope_459.date_time(var_460, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("MaxRecords");
    if let Some(var_462) = &input.max_records {
        scope_461.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("Marker");
    if let Some(var_464) = &input.marker {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("OwnerAccount");
    if let Some(var_466) = &input.owner_account {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("TagKeys");
    if let Some(var_468) = &input.tag_keys {
        let mut list_470 = scope_467.start_list(false, Some("TagKey"));
        for item_469 in var_468 {
            #[allow(unused_mut)]
            let mut entry_471 = list_470.entry();
            entry_471.string(item_469);
        }
        list_470.finish();
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("TagValues");
    if let Some(var_473) = &input.tag_values {
        let mut list_475 = scope_472.start_list(false, Some("TagValue"));
        for item_474 in var_473 {
            #[allow(unused_mut)]
            let mut entry_476 = list_475.entry();
            entry_476.string(item_474);
        }
        list_475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("ClusterExists");
    if let Some(var_478) = &input.cluster_exists {
        scope_477.boolean(*var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("SortingEntities");
    if let Some(var_480) = &input.sorting_entities {
        let mut list_482 = scope_479.start_list(false, Some("SnapshotSortingEntity"));
        for item_481 in var_480 {
            #[allow(unused_mut)]
            let mut entry_483 = list_482.entry();
            crate::query_ser::serialize_structure_crate_model_snapshot_sorting_entity(
                entry_483, item_481,
            )?;
        }
        list_482.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_subnet_groups(
    input: &crate::input::DescribeClusterSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSubnetGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_485) = &input.cluster_subnet_group_name {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("MaxRecords");
    if let Some(var_487) = &input.max_records {
        scope_486.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_487).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("Marker");
    if let Some(var_489) = &input.marker {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("TagKeys");
    if let Some(var_491) = &input.tag_keys {
        let mut list_493 = scope_490.start_list(false, Some("TagKey"));
        for item_492 in var_491 {
            #[allow(unused_mut)]
            let mut entry_494 = list_493.entry();
            entry_494.string(item_492);
        }
        list_493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("TagValues");
    if let Some(var_496) = &input.tag_values {
        let mut list_498 = scope_495.start_list(false, Some("TagValue"));
        for item_497 in var_496 {
            #[allow(unused_mut)]
            let mut entry_499 = list_498.entry();
            entry_499.string(item_497);
        }
        list_498.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_tracks(
    input: &crate::input::DescribeClusterTracksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterTracks", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("MaintenanceTrackName");
    if let Some(var_501) = &input.maintenance_track_name {
        scope_500.string(var_501);
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("MaxRecords");
    if let Some(var_503) = &input.max_records {
        scope_502.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_503).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("Marker");
    if let Some(var_505) = &input.marker {
        scope_504.string(var_505);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_versions(
    input: &crate::input::DescribeClusterVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterVersions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("ClusterVersion");
    if let Some(var_507) = &input.cluster_version {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("ClusterParameterGroupFamily");
    if let Some(var_509) = &input.cluster_parameter_group_family {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("MaxRecords");
    if let Some(var_511) = &input.max_records {
        scope_510.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_511).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("Marker");
    if let Some(var_513) = &input.marker {
        scope_512.string(var_513);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares(
    input: &crate::input::DescribeDataSharesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataShares", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("DataShareArn");
    if let Some(var_515) = &input.data_share_arn {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("MaxRecords");
    if let Some(var_517) = &input.max_records {
        scope_516.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_517).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("Marker");
    if let Some(var_519) = &input.marker {
        scope_518.string(var_519);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares_for_consumer(
    input: &crate::input::DescribeDataSharesForConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataSharesForConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("ConsumerArn");
    if let Some(var_521) = &input.consumer_arn {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("Status");
    if let Some(var_523) = &input.status {
        scope_522.string(var_523.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("MaxRecords");
    if let Some(var_525) = &input.max_records {
        scope_524.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_525).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("Marker");
    if let Some(var_527) = &input.marker {
        scope_526.string(var_527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares_for_producer(
    input: &crate::input::DescribeDataSharesForProducerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataSharesForProducer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("ProducerArn");
    if let Some(var_529) = &input.producer_arn {
        scope_528.string(var_529);
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("Status");
    if let Some(var_531) = &input.status {
        scope_530.string(var_531.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("MaxRecords");
    if let Some(var_533) = &input.max_records {
        scope_532.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("Marker");
    if let Some(var_535) = &input.marker {
        scope_534.string(var_535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_default_cluster_parameters(
    input: &crate::input::DescribeDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDefaultClusterParameters",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("ParameterGroupFamily");
    if let Some(var_537) = &input.parameter_group_family {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("MaxRecords");
    if let Some(var_539) = &input.max_records {
        scope_538.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_539).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("Marker");
    if let Some(var_541) = &input.marker {
        scope_540.string(var_541);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_endpoint_access(
    input: &crate::input::DescribeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("ClusterIdentifier");
    if let Some(var_543) = &input.cluster_identifier {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("ResourceOwner");
    if let Some(var_545) = &input.resource_owner {
        scope_544.string(var_545);
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("EndpointName");
    if let Some(var_547) = &input.endpoint_name {
        scope_546.string(var_547);
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("VpcId");
    if let Some(var_549) = &input.vpc_id {
        scope_548.string(var_549);
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("MaxRecords");
    if let Some(var_551) = &input.max_records {
        scope_550.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_551).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("Marker");
    if let Some(var_553) = &input.marker {
        scope_552.string(var_553);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_endpoint_authorization(
    input: &crate::input::DescribeEndpointAuthorizationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAuthorization", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("ClusterIdentifier");
    if let Some(var_555) = &input.cluster_identifier {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("Account");
    if let Some(var_557) = &input.account {
        scope_556.string(var_557);
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("Grantee");
    if let Some(var_559) = &input.grantee {
        scope_558.boolean(*var_559);
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("MaxRecords");
    if let Some(var_561) = &input.max_records {
        scope_560.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_561).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("Marker");
    if let Some(var_563) = &input.marker {
        scope_562.string(var_563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("SourceType");
    if let Some(var_565) = &input.source_type {
        scope_564.string(var_565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("SourceIdentifier");
    if let Some(var_567) = &input.source_identifier {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("SourceType");
    if let Some(var_569) = &input.source_type {
        scope_568.string(var_569.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("StartTime");
    if let Some(var_571) = &input.start_time {
        scope_570.date_time(var_571, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("EndTime");
    if let Some(var_573) = &input.end_time {
        scope_572.date_time(var_573, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("Duration");
    if let Some(var_575) = &input.duration {
        scope_574.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_575).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("MaxRecords");
    if let Some(var_577) = &input.max_records {
        scope_576.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_577).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Marker");
    if let Some(var_579) = &input.marker {
        scope_578.string(var_579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("SubscriptionName");
    if let Some(var_581) = &input.subscription_name {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("MaxRecords");
    if let Some(var_583) = &input.max_records {
        scope_582.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_583).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("Marker");
    if let Some(var_585) = &input.marker {
        scope_584.string(var_585);
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("TagKeys");
    if let Some(var_587) = &input.tag_keys {
        let mut list_589 = scope_586.start_list(false, Some("TagKey"));
        for item_588 in var_587 {
            #[allow(unused_mut)]
            let mut entry_590 = list_589.entry();
            entry_590.string(item_588);
        }
        list_589.finish();
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("TagValues");
    if let Some(var_592) = &input.tag_values {
        let mut list_594 = scope_591.start_list(false, Some("TagValue"));
        for item_593 in var_592 {
            #[allow(unused_mut)]
            let mut entry_595 = list_594.entry();
            entry_595.string(item_593);
        }
        list_594.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hsm_client_certificates(
    input: &crate::input::DescribeHsmClientCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHsmClientCertificates", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_597) = &input.hsm_client_certificate_identifier {
        scope_596.string(var_597);
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("MaxRecords");
    if let Some(var_599) = &input.max_records {
        scope_598.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_599).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("Marker");
    if let Some(var_601) = &input.marker {
        scope_600.string(var_601);
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("TagKeys");
    if let Some(var_603) = &input.tag_keys {
        let mut list_605 = scope_602.start_list(false, Some("TagKey"));
        for item_604 in var_603 {
            #[allow(unused_mut)]
            let mut entry_606 = list_605.entry();
            entry_606.string(item_604);
        }
        list_605.finish();
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("TagValues");
    if let Some(var_608) = &input.tag_values {
        let mut list_610 = scope_607.start_list(false, Some("TagValue"));
        for item_609 in var_608 {
            #[allow(unused_mut)]
            let mut entry_611 = list_610.entry();
            entry_611.string(item_609);
        }
        list_610.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hsm_configurations(
    input: &crate::input::DescribeHsmConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHsmConfigurations", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_613) = &input.hsm_configuration_identifier {
        scope_612.string(var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("MaxRecords");
    if let Some(var_615) = &input.max_records {
        scope_614.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_615).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("Marker");
    if let Some(var_617) = &input.marker {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("TagKeys");
    if let Some(var_619) = &input.tag_keys {
        let mut list_621 = scope_618.start_list(false, Some("TagKey"));
        for item_620 in var_619 {
            #[allow(unused_mut)]
            let mut entry_622 = list_621.entry();
            entry_622.string(item_620);
        }
        list_621.finish();
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("TagValues");
    if let Some(var_624) = &input.tag_values {
        let mut list_626 = scope_623.start_list(false, Some("TagValue"));
        for item_625 in var_624 {
            #[allow(unused_mut)]
            let mut entry_627 = list_626.entry();
            entry_627.string(item_625);
        }
        list_626.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_logging_status(
    input: &crate::input::DescribeLoggingStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLoggingStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("ClusterIdentifier");
    if let Some(var_629) = &input.cluster_identifier {
        scope_628.string(var_629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_node_configuration_options(
    input: &crate::input::DescribeNodeConfigurationOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNodeConfigurationOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("ActionType");
    if let Some(var_631) = &input.action_type {
        scope_630.string(var_631.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("ClusterIdentifier");
    if let Some(var_633) = &input.cluster_identifier {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("SnapshotIdentifier");
    if let Some(var_635) = &input.snapshot_identifier {
        scope_634.string(var_635);
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("OwnerAccount");
    if let Some(var_637) = &input.owner_account {
        scope_636.string(var_637);
    }
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("Filter");
    if let Some(var_639) = &input.filters {
        let mut list_641 = scope_638.start_list(false, Some("NodeConfigurationOptionsFilter"));
        for item_640 in var_639 {
            #[allow(unused_mut)]
            let mut entry_642 = list_641.entry();
            crate::query_ser::serialize_structure_crate_model_node_configuration_options_filter(
                entry_642, item_640,
            )?;
        }
        list_641.finish();
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("Marker");
    if let Some(var_644) = &input.marker {
        scope_643.string(var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("MaxRecords");
    if let Some(var_646) = &input.max_records {
        scope_645.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_646).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_cluster_options(
    input: &crate::input::DescribeOrderableClusterOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableClusterOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("ClusterVersion");
    if let Some(var_648) = &input.cluster_version {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("NodeType");
    if let Some(var_650) = &input.node_type {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("MaxRecords");
    if let Some(var_652) = &input.max_records {
        scope_651.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_652).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("Marker");
    if let Some(var_654) = &input.marker {
        scope_653.string(var_654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_partners(
    input: &crate::input::DescribePartnersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePartners", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("AccountId");
    if let Some(var_656) = &input.account_id {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("ClusterIdentifier");
    if let Some(var_658) = &input.cluster_identifier {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("DatabaseName");
    if let Some(var_660) = &input.database_name {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("PartnerName");
    if let Some(var_662) = &input.partner_name {
        scope_661.string(var_662);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_node_exchange_status(
    input: &crate::input::DescribeReservedNodeExchangeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedNodeExchangeStatus",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("ReservedNodeId");
    if let Some(var_664) = &input.reserved_node_id {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ReservedNodeExchangeRequestId");
    if let Some(var_666) = &input.reserved_node_exchange_request_id {
        scope_665.string(var_666);
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("MaxRecords");
    if let Some(var_668) = &input.max_records {
        scope_667.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_668).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("Marker");
    if let Some(var_670) = &input.marker {
        scope_669.string(var_670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_node_offerings(
    input: &crate::input::DescribeReservedNodeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodeOfferings", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_672) = &input.reserved_node_offering_id {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("MaxRecords");
    if let Some(var_674) = &input.max_records {
        scope_673.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_674).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("Marker");
    if let Some(var_676) = &input.marker {
        scope_675.string(var_676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_nodes(
    input: &crate::input::DescribeReservedNodesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("ReservedNodeId");
    if let Some(var_678) = &input.reserved_node_id {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("MaxRecords");
    if let Some(var_680) = &input.max_records {
        scope_679.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_680).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("Marker");
    if let Some(var_682) = &input.marker {
        scope_681.string(var_682);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_resize(
    input: &crate::input::DescribeResizeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("ClusterIdentifier");
    if let Some(var_684) = &input.cluster_identifier {
        scope_683.string(var_684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_actions(
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("ScheduledActionName");
    if let Some(var_686) = &input.scheduled_action_name {
        scope_685.string(var_686);
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("TargetActionType");
    if let Some(var_688) = &input.target_action_type {
        scope_687.string(var_688.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("StartTime");
    if let Some(var_690) = &input.start_time {
        scope_689.date_time(var_690, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("EndTime");
    if let Some(var_692) = &input.end_time {
        scope_691.date_time(var_692, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("Active");
    if let Some(var_694) = &input.active {
        scope_693.boolean(*var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("Filters");
    if let Some(var_696) = &input.filters {
        let mut list_698 = scope_695.start_list(false, Some("ScheduledActionFilter"));
        for item_697 in var_696 {
            #[allow(unused_mut)]
            let mut entry_699 = list_698.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_action_filter(
                entry_699, item_697,
            )?;
        }
        list_698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("Marker");
    if let Some(var_701) = &input.marker {
        scope_700.string(var_701);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("MaxRecords");
    if let Some(var_703) = &input.max_records {
        scope_702.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_703).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_copy_grants(
    input: &crate::input::DescribeSnapshotCopyGrantsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotCopyGrants", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_705) = &input.snapshot_copy_grant_name {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("MaxRecords");
    if let Some(var_707) = &input.max_records {
        scope_706.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_707).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("Marker");
    if let Some(var_709) = &input.marker {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("TagKeys");
    if let Some(var_711) = &input.tag_keys {
        let mut list_713 = scope_710.start_list(false, Some("TagKey"));
        for item_712 in var_711 {
            #[allow(unused_mut)]
            let mut entry_714 = list_713.entry();
            entry_714.string(item_712);
        }
        list_713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("TagValues");
    if let Some(var_716) = &input.tag_values {
        let mut list_718 = scope_715.start_list(false, Some("TagValue"));
        for item_717 in var_716 {
            #[allow(unused_mut)]
            let mut entry_719 = list_718.entry();
            entry_719.string(item_717);
        }
        list_718.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_schedules(
    input: &crate::input::DescribeSnapshotSchedulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotSchedules", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("ClusterIdentifier");
    if let Some(var_721) = &input.cluster_identifier {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("ScheduleIdentifier");
    if let Some(var_723) = &input.schedule_identifier {
        scope_722.string(var_723);
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("TagKeys");
    if let Some(var_725) = &input.tag_keys {
        let mut list_727 = scope_724.start_list(false, Some("TagKey"));
        for item_726 in var_725 {
            #[allow(unused_mut)]
            let mut entry_728 = list_727.entry();
            entry_728.string(item_726);
        }
        list_727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("TagValues");
    if let Some(var_730) = &input.tag_values {
        let mut list_732 = scope_729.start_list(false, Some("TagValue"));
        for item_731 in var_730 {
            #[allow(unused_mut)]
            let mut entry_733 = list_732.entry();
            entry_733.string(item_731);
        }
        list_732.finish();
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("Marker");
    if let Some(var_735) = &input.marker {
        scope_734.string(var_735);
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("MaxRecords");
    if let Some(var_737) = &input.max_records {
        scope_736.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_737).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_storage(
    input: &crate::input::DescribeStorageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStorage", "2012-12-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_table_restore_status(
    input: &crate::input::DescribeTableRestoreStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTableRestoreStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("ClusterIdentifier");
    if let Some(var_739) = &input.cluster_identifier {
        scope_738.string(var_739);
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("TableRestoreRequestId");
    if let Some(var_741) = &input.table_restore_request_id {
        scope_740.string(var_741);
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("MaxRecords");
    if let Some(var_743) = &input.max_records {
        scope_742.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_743).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("Marker");
    if let Some(var_745) = &input.marker {
        scope_744.string(var_745);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("ResourceName");
    if let Some(var_747) = &input.resource_name {
        scope_746.string(var_747);
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("ResourceType");
    if let Some(var_749) = &input.resource_type {
        scope_748.string(var_749);
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("MaxRecords");
    if let Some(var_751) = &input.max_records {
        scope_750.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_751).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("Marker");
    if let Some(var_753) = &input.marker {
        scope_752.string(var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("TagKeys");
    if let Some(var_755) = &input.tag_keys {
        let mut list_757 = scope_754.start_list(false, Some("TagKey"));
        for item_756 in var_755 {
            #[allow(unused_mut)]
            let mut entry_758 = list_757.entry();
            entry_758.string(item_756);
        }
        list_757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("TagValues");
    if let Some(var_760) = &input.tag_values {
        let mut list_762 = scope_759.start_list(false, Some("TagValue"));
        for item_761 in var_760 {
            #[allow(unused_mut)]
            let mut entry_763 = list_762.entry();
            entry_763.string(item_761);
        }
        list_762.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_usage_limits(
    input: &crate::input::DescribeUsageLimitsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUsageLimits", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("UsageLimitId");
    if let Some(var_765) = &input.usage_limit_id {
        scope_764.string(var_765);
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("ClusterIdentifier");
    if let Some(var_767) = &input.cluster_identifier {
        scope_766.string(var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("FeatureType");
    if let Some(var_769) = &input.feature_type {
        scope_768.string(var_769.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("MaxRecords");
    if let Some(var_771) = &input.max_records {
        scope_770.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_771).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("Marker");
    if let Some(var_773) = &input.marker {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("TagKeys");
    if let Some(var_775) = &input.tag_keys {
        let mut list_777 = scope_774.start_list(false, Some("TagKey"));
        for item_776 in var_775 {
            #[allow(unused_mut)]
            let mut entry_778 = list_777.entry();
            entry_778.string(item_776);
        }
        list_777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("TagValues");
    if let Some(var_780) = &input.tag_values {
        let mut list_782 = scope_779.start_list(false, Some("TagValue"));
        for item_781 in var_780 {
            #[allow(unused_mut)]
            let mut entry_783 = list_782.entry();
            entry_783.string(item_781);
        }
        list_782.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_logging(
    input: &crate::input::DisableLoggingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("ClusterIdentifier");
    if let Some(var_785) = &input.cluster_identifier {
        scope_784.string(var_785);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_snapshot_copy(
    input: &crate::input::DisableSnapshotCopyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("ClusterIdentifier");
    if let Some(var_787) = &input.cluster_identifier {
        scope_786.string(var_787);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_data_share_consumer(
    input: &crate::input::DisassociateDataShareConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateDataShareConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("DataShareArn");
    if let Some(var_789) = &input.data_share_arn {
        scope_788.string(var_789);
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("DisassociateEntireAccount");
    if let Some(var_791) = &input.disassociate_entire_account {
        scope_790.boolean(*var_791);
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("ConsumerArn");
    if let Some(var_793) = &input.consumer_arn {
        scope_792.string(var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("ConsumerRegion");
    if let Some(var_795) = &input.consumer_region {
        scope_794.string(var_795);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_logging(
    input: &crate::input::EnableLoggingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("ClusterIdentifier");
    if let Some(var_797) = &input.cluster_identifier {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("BucketName");
    if let Some(var_799) = &input.bucket_name {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("S3KeyPrefix");
    if let Some(var_801) = &input.s3_key_prefix {
        scope_800.string(var_801);
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("LogDestinationType");
    if let Some(var_803) = &input.log_destination_type {
        scope_802.string(var_803.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("LogExports");
    if let Some(var_805) = &input.log_exports {
        let mut list_807 = scope_804.start_list(false, None);
        for item_806 in var_805 {
            #[allow(unused_mut)]
            let mut entry_808 = list_807.entry();
            entry_808.string(item_806);
        }
        list_807.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_snapshot_copy(
    input: &crate::input::EnableSnapshotCopyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("ClusterIdentifier");
    if let Some(var_810) = &input.cluster_identifier {
        scope_809.string(var_810);
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("DestinationRegion");
    if let Some(var_812) = &input.destination_region {
        scope_811.string(var_812);
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("RetentionPeriod");
    if let Some(var_814) = &input.retention_period {
        scope_813.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_814).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_816) = &input.snapshot_copy_grant_name {
        scope_815.string(var_816);
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_818) = &input.manual_snapshot_retention_period {
        scope_817.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_818).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_cluster_credentials(
    input: &crate::input::GetClusterCredentialsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetClusterCredentials", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("DbUser");
    if let Some(var_820) = &input.db_user {
        scope_819.string(var_820);
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("DbName");
    if let Some(var_822) = &input.db_name {
        scope_821.string(var_822);
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("ClusterIdentifier");
    if let Some(var_824) = &input.cluster_identifier {
        scope_823.string(var_824);
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("DurationSeconds");
    if let Some(var_826) = &input.duration_seconds {
        scope_825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("AutoCreate");
    if let Some(var_828) = &input.auto_create {
        scope_827.boolean(*var_828);
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("DbGroups");
    if let Some(var_830) = &input.db_groups {
        let mut list_832 = scope_829.start_list(false, Some("DbGroup"));
        for item_831 in var_830 {
            #[allow(unused_mut)]
            let mut entry_833 = list_832.entry();
            entry_833.string(item_831);
        }
        list_832.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_node_exchange_configuration_options(
    input: &crate::input::GetReservedNodeExchangeConfigurationOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedNodeExchangeConfigurationOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("ActionType");
    if let Some(var_835) = &input.action_type {
        scope_834.string(var_835.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("ClusterIdentifier");
    if let Some(var_837) = &input.cluster_identifier {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("SnapshotIdentifier");
    if let Some(var_839) = &input.snapshot_identifier {
        scope_838.string(var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("MaxRecords");
    if let Some(var_841) = &input.max_records {
        scope_840.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_841).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("Marker");
    if let Some(var_843) = &input.marker {
        scope_842.string(var_843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_node_exchange_offerings(
    input: &crate::input::GetReservedNodeExchangeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedNodeExchangeOfferings",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("ReservedNodeId");
    if let Some(var_845) = &input.reserved_node_id {
        scope_844.string(var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("MaxRecords");
    if let Some(var_847) = &input.max_records {
        scope_846.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_847).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Marker");
    if let Some(var_849) = &input.marker {
        scope_848.string(var_849);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_aqua_configuration(
    input: &crate::input::ModifyAquaConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAquaConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("ClusterIdentifier");
    if let Some(var_851) = &input.cluster_identifier {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_853) = &input.aqua_configuration_status {
        scope_852.string(var_853.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_authentication_profile(
    input: &crate::input::ModifyAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("AuthenticationProfileName");
    if let Some(var_855) = &input.authentication_profile_name {
        scope_854.string(var_855);
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("AuthenticationProfileContent");
    if let Some(var_857) = &input.authentication_profile_content {
        scope_856.string(var_857);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster(
    input: &crate::input::ModifyClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("ClusterIdentifier");
    if let Some(var_859) = &input.cluster_identifier {
        scope_858.string(var_859);
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("ClusterType");
    if let Some(var_861) = &input.cluster_type {
        scope_860.string(var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("NodeType");
    if let Some(var_863) = &input.node_type {
        scope_862.string(var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("NumberOfNodes");
    if let Some(var_865) = &input.number_of_nodes {
        scope_864.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_865).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_867) = &input.cluster_security_groups {
        let mut list_869 = scope_866.start_list(false, Some("ClusterSecurityGroupName"));
        for item_868 in var_867 {
            #[allow(unused_mut)]
            let mut entry_870 = list_869.entry();
            entry_870.string(item_868);
        }
        list_869.finish();
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_872) = &input.vpc_security_group_ids {
        let mut list_874 = scope_871.start_list(false, Some("VpcSecurityGroupId"));
        for item_873 in var_872 {
            #[allow(unused_mut)]
            let mut entry_875 = list_874.entry();
            entry_875.string(item_873);
        }
        list_874.finish();
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("MasterUserPassword");
    if let Some(var_877) = &input.master_user_password {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_879) = &input.cluster_parameter_group_name {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_881) = &input.automated_snapshot_retention_period {
        scope_880.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_881).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_883) = &input.manual_snapshot_retention_period {
        scope_882.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_883).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_885) = &input.preferred_maintenance_window {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("ClusterVersion");
    if let Some(var_887) = &input.cluster_version {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_889) = &input.allow_version_upgrade {
        scope_888.boolean(*var_889);
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_891) = &input.hsm_client_certificate_identifier {
        scope_890.string(var_891);
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_893) = &input.hsm_configuration_identifier {
        scope_892.string(var_893);
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("NewClusterIdentifier");
    if let Some(var_895) = &input.new_cluster_identifier {
        scope_894.string(var_895);
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("PubliclyAccessible");
    if let Some(var_897) = &input.publicly_accessible {
        scope_896.boolean(*var_897);
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("ElasticIp");
    if let Some(var_899) = &input.elastic_ip {
        scope_898.string(var_899);
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_901) = &input.enhanced_vpc_routing {
        scope_900.boolean(*var_901);
    }
    #[allow(unused_mut)]
    let mut scope_902 = writer.prefix("MaintenanceTrackName");
    if let Some(var_903) = &input.maintenance_track_name {
        scope_902.string(var_903);
    }
    #[allow(unused_mut)]
    let mut scope_904 = writer.prefix("Encrypted");
    if let Some(var_905) = &input.encrypted {
        scope_904.boolean(*var_905);
    }
    #[allow(unused_mut)]
    let mut scope_906 = writer.prefix("KmsKeyId");
    if let Some(var_907) = &input.kms_key_id {
        scope_906.string(var_907);
    }
    #[allow(unused_mut)]
    let mut scope_908 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_909) = &input.availability_zone_relocation {
        scope_908.boolean(*var_909);
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("AvailabilityZone");
    if let Some(var_911) = &input.availability_zone {
        scope_910.string(var_911);
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("Port");
    if let Some(var_913) = &input.port {
        scope_912.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_913).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_db_revision(
    input: &crate::input::ModifyClusterDbRevisionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterDbRevision", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("ClusterIdentifier");
    if let Some(var_915) = &input.cluster_identifier {
        scope_914.string(var_915);
    }
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("RevisionTarget");
    if let Some(var_917) = &input.revision_target {
        scope_916.string(var_917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_iam_roles(
    input: &crate::input::ModifyClusterIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterIamRoles", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("ClusterIdentifier");
    if let Some(var_919) = &input.cluster_identifier {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("AddIamRoles");
    if let Some(var_921) = &input.add_iam_roles {
        let mut list_923 = scope_920.start_list(false, Some("IamRoleArn"));
        for item_922 in var_921 {
            #[allow(unused_mut)]
            let mut entry_924 = list_923.entry();
            entry_924.string(item_922);
        }
        list_923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("RemoveIamRoles");
    if let Some(var_926) = &input.remove_iam_roles {
        let mut list_928 = scope_925.start_list(false, Some("IamRoleArn"));
        for item_927 in var_926 {
            #[allow(unused_mut)]
            let mut entry_929 = list_928.entry();
            entry_929.string(item_927);
        }
        list_928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_931) = &input.default_iam_role_arn {
        scope_930.string(var_931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_maintenance(
    input: &crate::input::ModifyClusterMaintenanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterMaintenance", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("ClusterIdentifier");
    if let Some(var_933) = &input.cluster_identifier {
        scope_932.string(var_933);
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("DeferMaintenance");
    if let Some(var_935) = &input.defer_maintenance {
        scope_934.boolean(*var_935);
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("DeferMaintenanceIdentifier");
    if let Some(var_937) = &input.defer_maintenance_identifier {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("DeferMaintenanceStartTime");
    if let Some(var_939) = &input.defer_maintenance_start_time {
        scope_938.date_time(var_939, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("DeferMaintenanceEndTime");
    if let Some(var_941) = &input.defer_maintenance_end_time {
        scope_940.date_time(var_941, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("DeferMaintenanceDuration");
    if let Some(var_943) = &input.defer_maintenance_duration {
        scope_942.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_943).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_parameter_group(
    input: &crate::input::ModifyClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("ParameterGroupName");
    if let Some(var_945) = &input.parameter_group_name {
        scope_944.string(var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("Parameters");
    if let Some(var_947) = &input.parameters {
        let mut list_949 = scope_946.start_list(false, Some("Parameter"));
        for item_948 in var_947 {
            #[allow(unused_mut)]
            let mut entry_950 = list_949.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_950, item_948)?;
        }
        list_949.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_snapshot(
    input: &crate::input::ModifyClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("SnapshotIdentifier");
    if let Some(var_952) = &input.snapshot_identifier {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_954) = &input.manual_snapshot_retention_period {
        scope_953.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_954).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("Force");
    if input.force {
        scope_955.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_snapshot_schedule(
    input: &crate::input::ModifyClusterSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("ClusterIdentifier");
    if let Some(var_957) = &input.cluster_identifier {
        scope_956.string(var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("ScheduleIdentifier");
    if let Some(var_959) = &input.schedule_identifier {
        scope_958.string(var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("DisassociateSchedule");
    if let Some(var_961) = &input.disassociate_schedule {
        scope_960.boolean(*var_961);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_subnet_group(
    input: &crate::input::ModifyClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_963) = &input.cluster_subnet_group_name {
        scope_962.string(var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("Description");
    if let Some(var_965) = &input.description {
        scope_964.string(var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("SubnetIds");
    if let Some(var_967) = &input.subnet_ids {
        let mut list_969 = scope_966.start_list(false, Some("SubnetIdentifier"));
        for item_968 in var_967 {
            #[allow(unused_mut)]
            let mut entry_970 = list_969.entry();
            entry_970.string(item_968);
        }
        list_969.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_endpoint_access(
    input: &crate::input::ModifyEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("EndpointName");
    if let Some(var_972) = &input.endpoint_name {
        scope_971.string(var_972);
    }
    #[allow(unused_mut)]
    let mut scope_973 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_974) = &input.vpc_security_group_ids {
        let mut list_976 = scope_973.start_list(false, Some("VpcSecurityGroupId"));
        for item_975 in var_974 {
            #[allow(unused_mut)]
            let mut entry_977 = list_976.entry();
            entry_977.string(item_975);
        }
        list_976.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("SubscriptionName");
    if let Some(var_979) = &input.subscription_name {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("SnsTopicArn");
    if let Some(var_981) = &input.sns_topic_arn {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("SourceType");
    if let Some(var_983) = &input.source_type {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("SourceIds");
    if let Some(var_985) = &input.source_ids {
        let mut list_987 = scope_984.start_list(false, Some("SourceId"));
        for item_986 in var_985 {
            #[allow(unused_mut)]
            let mut entry_988 = list_987.entry();
            entry_988.string(item_986);
        }
        list_987.finish();
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("EventCategories");
    if let Some(var_990) = &input.event_categories {
        let mut list_992 = scope_989.start_list(false, Some("EventCategory"));
        for item_991 in var_990 {
            #[allow(unused_mut)]
            let mut entry_993 = list_992.entry();
            entry_993.string(item_991);
        }
        list_992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("Severity");
    if let Some(var_995) = &input.severity {
        scope_994.string(var_995);
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("Enabled");
    if let Some(var_997) = &input.enabled {
        scope_996.boolean(*var_997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_scheduled_action(
    input: &crate::input::ModifyScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("ScheduledActionName");
    if let Some(var_999) = &input.scheduled_action_name {
        scope_998.string(var_999);
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("TargetAction");
    if let Some(var_1001) = &input.target_action {
        crate::query_ser::serialize_structure_crate_model_scheduled_action_type(
            scope_1000, var_1001,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("Schedule");
    if let Some(var_1003) = &input.schedule {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("IamRole");
    if let Some(var_1005) = &input.iam_role {
        scope_1004.string(var_1005);
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("ScheduledActionDescription");
    if let Some(var_1007) = &input.scheduled_action_description {
        scope_1006.string(var_1007);
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("StartTime");
    if let Some(var_1009) = &input.start_time {
        scope_1008.date_time(var_1009, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("EndTime");
    if let Some(var_1011) = &input.end_time {
        scope_1010.date_time(var_1011, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("Enable");
    if let Some(var_1013) = &input.enable {
        scope_1012.boolean(*var_1013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_copy_retention_period(
    input: &crate::input::ModifySnapshotCopyRetentionPeriodInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifySnapshotCopyRetentionPeriod",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("ClusterIdentifier");
    if let Some(var_1015) = &input.cluster_identifier {
        scope_1014.string(var_1015);
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("RetentionPeriod");
    {
        scope_1016.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("Manual");
    if input.manual {
        scope_1017.boolean(input.manual);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_schedule(
    input: &crate::input::ModifySnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("ScheduleIdentifier");
    if let Some(var_1019) = &input.schedule_identifier {
        scope_1018.string(var_1019);
    }
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("ScheduleDefinitions");
    if let Some(var_1021) = &input.schedule_definitions {
        let mut list_1023 = scope_1020.start_list(false, Some("ScheduleDefinition"));
        for item_1022 in var_1021 {
            #[allow(unused_mut)]
            let mut entry_1024 = list_1023.entry();
            entry_1024.string(item_1022);
        }
        list_1023.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_usage_limit(
    input: &crate::input::ModifyUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("UsageLimitId");
    if let Some(var_1026) = &input.usage_limit_id {
        scope_1025.string(var_1026);
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("Amount");
    if let Some(var_1028) = &input.amount {
        scope_1027.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1028).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("BreachAction");
    if let Some(var_1030) = &input.breach_action {
        scope_1029.string(var_1030.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_pause_cluster(
    input: &crate::input::PauseClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PauseCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("ClusterIdentifier");
    if let Some(var_1032) = &input.cluster_identifier {
        scope_1031.string(var_1032);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_node_offering(
    input: &crate::input::PurchaseReservedNodeOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseReservedNodeOffering", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_1034) = &input.reserved_node_offering_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("NodeCount");
    if let Some(var_1036) = &input.node_count {
        scope_1035.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1036).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_cluster(
    input: &crate::input::RebootClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("ClusterIdentifier");
    if let Some(var_1038) = &input.cluster_identifier {
        scope_1037.string(var_1038);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_data_share(
    input: &crate::input::RejectDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("DataShareArn");
    if let Some(var_1040) = &input.data_share_arn {
        scope_1039.string(var_1040);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_cluster_parameter_group(
    input: &crate::input::ResetClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("ParameterGroupName");
    if let Some(var_1042) = &input.parameter_group_name {
        scope_1041.string(var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1043.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("Parameters");
    if let Some(var_1045) = &input.parameters {
        let mut list_1047 = scope_1044.start_list(false, Some("Parameter"));
        for item_1046 in var_1045 {
            #[allow(unused_mut)]
            let mut entry_1048 = list_1047.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1048, item_1046)?;
        }
        list_1047.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resize_cluster(
    input: &crate::input::ResizeClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResizeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("ClusterIdentifier");
    if let Some(var_1050) = &input.cluster_identifier {
        scope_1049.string(var_1050);
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("ClusterType");
    if let Some(var_1052) = &input.cluster_type {
        scope_1051.string(var_1052);
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("NodeType");
    if let Some(var_1054) = &input.node_type {
        scope_1053.string(var_1054);
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("NumberOfNodes");
    if let Some(var_1056) = &input.number_of_nodes {
        scope_1055.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1056).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("Classic");
    if let Some(var_1058) = &input.classic {
        scope_1057.boolean(*var_1058);
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("ReservedNodeId");
    if let Some(var_1060) = &input.reserved_node_id {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_1062) = &input.target_reserved_node_offering_id {
        scope_1061.string(var_1062);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_from_cluster_snapshot(
    input: &crate::input::RestoreFromClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreFromClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("ClusterIdentifier");
    if let Some(var_1064) = &input.cluster_identifier {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1066) = &input.snapshot_identifier {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_1068) = &input.snapshot_cluster_identifier {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("Port");
    if let Some(var_1070) = &input.port {
        scope_1069.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1070).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("AvailabilityZone");
    if let Some(var_1072) = &input.availability_zone {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_1074) = &input.allow_version_upgrade {
        scope_1073.boolean(*var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_1076) = &input.cluster_subnet_group_name {
        scope_1075.string(var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("PubliclyAccessible");
    if let Some(var_1078) = &input.publicly_accessible {
        scope_1077.boolean(*var_1078);
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("OwnerAccount");
    if let Some(var_1080) = &input.owner_account {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_1082) = &input.hsm_client_certificate_identifier {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_1084) = &input.hsm_configuration_identifier {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("ElasticIp");
    if let Some(var_1086) = &input.elastic_ip {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_1088) = &input.cluster_parameter_group_name {
        scope_1087.string(var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_1090) = &input.cluster_security_groups {
        let mut list_1092 = scope_1089.start_list(false, Some("ClusterSecurityGroupName"));
        for item_1091 in var_1090 {
            #[allow(unused_mut)]
            let mut entry_1093 = list_1092.entry();
            entry_1093.string(item_1091);
        }
        list_1092.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1095) = &input.vpc_security_group_ids {
        let mut list_1097 = scope_1094.start_list(false, Some("VpcSecurityGroupId"));
        for item_1096 in var_1095 {
            #[allow(unused_mut)]
            let mut entry_1098 = list_1097.entry();
            entry_1098.string(item_1096);
        }
        list_1097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1100) = &input.preferred_maintenance_window {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_1102) = &input.automated_snapshot_retention_period {
        scope_1101.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1102).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_1104) = &input.manual_snapshot_retention_period {
        scope_1103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("KmsKeyId");
    if let Some(var_1106) = &input.kms_key_id {
        scope_1105.string(var_1106);
    }
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("NodeType");
    if let Some(var_1108) = &input.node_type {
        scope_1107.string(var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_1110) = &input.enhanced_vpc_routing {
        scope_1109.boolean(*var_1110);
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("AdditionalInfo");
    if let Some(var_1112) = &input.additional_info {
        scope_1111.string(var_1112);
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("IamRoles");
    if let Some(var_1114) = &input.iam_roles {
        let mut list_1116 = scope_1113.start_list(false, Some("IamRoleArn"));
        for item_1115 in var_1114 {
            #[allow(unused_mut)]
            let mut entry_1117 = list_1116.entry();
            entry_1117.string(item_1115);
        }
        list_1116.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("MaintenanceTrackName");
    if let Some(var_1119) = &input.maintenance_track_name {
        scope_1118.string(var_1119);
    }
    #[allow(unused_mut)]
    let mut scope_1120 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_1121) = &input.snapshot_schedule_identifier {
        scope_1120.string(var_1121);
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("NumberOfNodes");
    if let Some(var_1123) = &input.number_of_nodes {
        scope_1122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_1125) = &input.availability_zone_relocation {
        scope_1124.boolean(*var_1125);
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_1127) = &input.aqua_configuration_status {
        scope_1126.string(var_1127.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_1129) = &input.default_iam_role_arn {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("ReservedNodeId");
    if let Some(var_1131) = &input.reserved_node_id {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_1133) = &input.target_reserved_node_offering_id {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("Encrypted");
    if let Some(var_1135) = &input.encrypted {
        scope_1134.boolean(*var_1135);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_table_from_cluster_snapshot(
    input: &crate::input::RestoreTableFromClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreTableFromClusterSnapshot",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("ClusterIdentifier");
    if let Some(var_1137) = &input.cluster_identifier {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1139) = &input.snapshot_identifier {
        scope_1138.string(var_1139);
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("SourceDatabaseName");
    if let Some(var_1141) = &input.source_database_name {
        scope_1140.string(var_1141);
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("SourceSchemaName");
    if let Some(var_1143) = &input.source_schema_name {
        scope_1142.string(var_1143);
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("SourceTableName");
    if let Some(var_1145) = &input.source_table_name {
        scope_1144.string(var_1145);
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("TargetDatabaseName");
    if let Some(var_1147) = &input.target_database_name {
        scope_1146.string(var_1147);
    }
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("TargetSchemaName");
    if let Some(var_1149) = &input.target_schema_name {
        scope_1148.string(var_1149);
    }
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("NewTableName");
    if let Some(var_1151) = &input.new_table_name {
        scope_1150.string(var_1151);
    }
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("EnableCaseSensitiveIdentifier");
    if let Some(var_1153) = &input.enable_case_sensitive_identifier {
        scope_1152.boolean(*var_1153);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resume_cluster(
    input: &crate::input::ResumeClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResumeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("ClusterIdentifier");
    if let Some(var_1155) = &input.cluster_identifier {
        scope_1154.string(var_1155);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_cluster_security_group_ingress(
    input: &crate::input::RevokeClusterSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RevokeClusterSecurityGroupIngress",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_1157) = &input.cluster_security_group_name {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("CIDRIP");
    if let Some(var_1159) = &input.cidrip {
        scope_1158.string(var_1159);
    }
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_1161) = &input.ec2_security_group_name {
        scope_1160.string(var_1161);
    }
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_1163) = &input.ec2_security_group_owner_id {
        scope_1162.string(var_1163);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_endpoint_access(
    input: &crate::input::RevokeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("ClusterIdentifier");
    if let Some(var_1165) = &input.cluster_identifier {
        scope_1164.string(var_1165);
    }
    #[allow(unused_mut)]
    let mut scope_1166 = writer.prefix("Account");
    if let Some(var_1167) = &input.account {
        scope_1166.string(var_1167);
    }
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("VpcIds");
    if let Some(var_1169) = &input.vpc_ids {
        let mut list_1171 = scope_1168.start_list(false, Some("VpcIdentifier"));
        for item_1170 in var_1169 {
            #[allow(unused_mut)]
            let mut entry_1172 = list_1171.entry();
            entry_1172.string(item_1170);
        }
        list_1171.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("Force");
    if input.force {
        scope_1173.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_snapshot_access(
    input: &crate::input::RevokeSnapshotAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1175) = &input.snapshot_identifier {
        scope_1174.string(var_1175);
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_1177) = &input.snapshot_cluster_identifier {
        scope_1176.string(var_1177);
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_1179) = &input.account_with_restore_access {
        scope_1178.string(var_1179);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rotate_encryption_key(
    input: &crate::input::RotateEncryptionKeyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RotateEncryptionKey", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("ClusterIdentifier");
    if let Some(var_1181) = &input.cluster_identifier {
        scope_1180.string(var_1181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_partner_status(
    input: &crate::input::UpdatePartnerStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdatePartnerStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("AccountId");
    if let Some(var_1183) = &input.account_id {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("ClusterIdentifier");
    if let Some(var_1185) = &input.cluster_identifier {
        scope_1184.string(var_1185);
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("DatabaseName");
    if let Some(var_1187) = &input.database_name {
        scope_1186.string(var_1187);
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("PartnerName");
    if let Some(var_1189) = &input.partner_name {
        scope_1188.string(var_1189);
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("Status");
    if let Some(var_1191) = &input.status {
        scope_1190.string(var_1191.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("StatusMessage");
    if let Some(var_1193) = &input.status_message {
        scope_1192.string(var_1193);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
