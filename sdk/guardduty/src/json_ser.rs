// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_administrator_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptAdministratorInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.administrator_id {
        object.key("administratorId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("invitationId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_accept_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.invitation_id {
        object.key("invitationId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.master_id {
        object.key("masterId").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_archive_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ArchiveFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.finding_ids {
        let mut array_6 = object.key("findingIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.client_token {
        object.key("clientToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.data_sources {
        let mut object_10 = object.key("dataSources").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configurations(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    {
        object.key("enable").boolean(input.enable);
    }
    if let Some(var_11) = &input.finding_publishing_frequency {
        object
            .key("findingPublishingFrequency")
            .string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.action {
        object.key("action").string(var_16.as_str());
    }
    if let Some(var_17) = &input.client_token {
        object.key("clientToken").string(var_17.as_str());
    }
    if let Some(var_18) = &input.description {
        object.key("description").string(var_18.as_str());
    }
    if let Some(var_19) = &input.finding_criteria {
        let mut object_20 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.name {
        object.key("name").string(var_21.as_str());
    }
    if input.rank != 0 {
        object.key("rank").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rank).into()),
        );
    }
    if let Some(var_22) = &input.tags {
        let mut object_23 = object.key("tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("activate").boolean(input.activate);
    }
    if let Some(var_26) = &input.client_token {
        object.key("clientToken").string(var_26.as_str());
    }
    if let Some(var_27) = &input.format {
        object.key("format").string(var_27.as_str());
    }
    if let Some(var_28) = &input.location {
        object.key("location").string(var_28.as_str());
    }
    if let Some(var_29) = &input.name {
        object.key("name").string(var_29.as_str());
    }
    if let Some(var_30) = &input.tags {
        let mut object_31 = object.key("tags").start_object();
        for (key_32, value_33) in var_30 {
            {
                object_31.key(key_32).string(value_33.as_str());
            }
        }
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.account_details {
        let mut array_35 = object.key("accountDetails").start_array();
        for item_36 in var_34 {
            {
                let mut object_37 = array_35.value().start_object();
                crate::json_ser::serialize_structure_crate_model_account_detail(
                    &mut object_37,
                    item_36,
                )?;
                object_37.finish();
            }
        }
        array_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_publishing_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePublishingDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.client_token {
        object.key("clientToken").string(var_38.as_str());
    }
    if let Some(var_39) = &input.destination_properties {
        let mut object_40 = object.key("destinationProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_destination_properties(
            &mut object_40,
            var_39,
        )?;
        object_40.finish();
    }
    if let Some(var_41) = &input.destination_type {
        object.key("destinationType").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_sample_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSampleFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.finding_types {
        let mut array_43 = object.key("findingTypes").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_threat_intel_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThreatIntelSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("activate").boolean(input.activate);
    }
    if let Some(var_45) = &input.client_token {
        object.key("clientToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.format {
        object.key("format").string(var_46.as_str());
    }
    if let Some(var_47) = &input.location {
        object.key("location").string(var_47.as_str());
    }
    if let Some(var_48) = &input.name {
        object.key("name").string(var_48.as_str());
    }
    if let Some(var_49) = &input.tags {
        let mut object_50 = object.key("tags").start_object();
        for (key_51, value_52) in var_49 {
            {
                object_50.key(key_51).string(value_52.as_str());
            }
        }
        object_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decline_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeclineInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.account_ids {
        let mut array_54 = object.key("accountIds").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55.as_str());
            }
        }
        array_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.account_ids {
        let mut array_57 = object.key("accountIds").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.account_ids {
        let mut array_60 = object.key("accountIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.admin_account_id {
        object.key("adminAccountId").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.account_ids {
        let mut array_64 = object.key("accountIds").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.admin_account_id {
        object.key("adminAccountId").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.finding_ids {
        let mut array_68 = object.key("findingIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    if let Some(var_70) = &input.sort_criteria {
        let mut object_71 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_71, var_70)?;
        object_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.finding_criteria {
        let mut object_73 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_73, var_72)?;
        object_73.finish();
    }
    if let Some(var_74) = &input.finding_statistic_types {
        let mut array_75 = object.key("findingStatisticTypes").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76.as_str());
            }
        }
        array_75.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_member_detectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMemberDetectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.account_ids {
        let mut array_78 = object.key("accountIds").start_array();
        for item_79 in var_77 {
            {
                array_78.value().string(item_79.as_str());
            }
        }
        array_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.account_ids {
        let mut array_81 = object.key("accountIds").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_remaining_free_trial_days_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRemainingFreeTrialDaysInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.account_ids {
        let mut array_84 = object.key("accountIds").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85.as_str());
            }
        }
        array_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_usage_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUsageStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_86) = &input.next_token {
        object.key("nextToken").string(var_86.as_str());
    }
    if let Some(var_87) = &input.unit {
        object.key("unit").string(var_87.as_str());
    }
    if let Some(var_88) = &input.usage_criteria {
        let mut object_89 = object.key("usageCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_usage_criteria(&mut object_89, var_88)?;
        object_89.finish();
    }
    if let Some(var_90) = &input.usage_statistic_type {
        object.key("usageStatisticsType").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_invite_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InviteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.account_ids {
        let mut array_92 = object.key("accountIds").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    if input.disable_email_notification {
        object
            .key("disableEmailNotification")
            .boolean(input.disable_email_notification);
    }
    if let Some(var_94) = &input.message {
        object.key("message").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.finding_criteria {
        let mut object_96 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_96, var_95)?;
        object_96.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_97) = &input.next_token {
        object.key("nextToken").string(var_97.as_str());
    }
    if let Some(var_98) = &input.sort_criteria {
        let mut object_99 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_99, var_98)?;
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_monitoring_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.account_ids {
        let mut array_101 = object.key("accountIds").start_array();
        for item_102 in var_100 {
            {
                array_101.value().string(item_102.as_str());
            }
        }
        array_101.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_monitoring_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.account_ids {
        let mut array_104 = object.key("accountIds").start_array();
        for item_105 in var_103 {
            {
                array_104.value().string(item_105.as_str());
            }
        }
        array_104.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.tags {
        let mut object_107 = object.key("tags").start_object();
        for (key_108, value_109) in var_106 {
            {
                object_107.key(key_108).string(value_109.as_str());
            }
        }
        object_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_unarchive_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UnarchiveFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.finding_ids {
        let mut array_111 = object.key("findingIds").start_array();
        for item_112 in var_110 {
            {
                array_111.value().string(item_112.as_str());
            }
        }
        array_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.data_sources {
        let mut object_114 = object.key("dataSources").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configurations(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if input.enable {
        object.key("enable").boolean(input.enable);
    }
    if let Some(var_115) = &input.finding_publishing_frequency {
        object
            .key("findingPublishingFrequency")
            .string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.action {
        object.key("action").string(var_116.as_str());
    }
    if let Some(var_117) = &input.description {
        object.key("description").string(var_117.as_str());
    }
    if let Some(var_118) = &input.finding_criteria {
        let mut object_119 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(
            &mut object_119,
            var_118,
        )?;
        object_119.finish();
    }
    if input.rank != 0 {
        object.key("rank").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rank).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_findings_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingsFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.comments {
        object.key("comments").string(var_120.as_str());
    }
    if let Some(var_121) = &input.feedback {
        object.key("feedback").string(var_121.as_str());
    }
    if let Some(var_122) = &input.finding_ids {
        let mut array_123 = object.key("findingIds").start_array();
        for item_124 in var_122 {
            {
                array_123.value().string(item_124.as_str());
            }
        }
        array_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ip_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.activate {
        object.key("activate").boolean(input.activate);
    }
    if let Some(var_125) = &input.location {
        object.key("location").string(var_125.as_str());
    }
    if let Some(var_126) = &input.name {
        object.key("name").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_member_detectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMemberDetectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.account_ids {
        let mut array_128 = object.key("accountIds").start_array();
        for item_129 in var_127 {
            {
                array_128.value().string(item_129.as_str());
            }
        }
        array_128.finish();
    }
    if let Some(var_130) = &input.data_sources {
        let mut object_131 = object.key("dataSources").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configurations(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("autoEnable").boolean(input.auto_enable);
    }
    if let Some(var_132) = &input.data_sources {
        let mut object_133 = object.key("dataSources").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_data_source_configurations(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_publishing_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePublishingDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.destination_properties {
        let mut object_135 = object.key("destinationProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_destination_properties(
            &mut object_135,
            var_134,
        )?;
        object_135.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_threat_intel_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThreatIntelSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.activate {
        object.key("activate").boolean(input.activate);
    }
    if let Some(var_136) = &input.location {
        object.key("location").string(var_136.as_str());
    }
    if let Some(var_137) = &input.name {
        object.key("name").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.s3_logs {
        let mut object_139 = object.key("s3Logs").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_logs_configuration(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    if let Some(var_140) = &input.kubernetes {
        let mut object_141 = object.key("kubernetes").start_object();
        crate::json_ser::serialize_structure_crate_model_kubernetes_configuration(
            &mut object_141,
            var_140,
        )?;
        object_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.criterion {
        let mut object_143 = object.key("criterion").start_object();
        for (key_144, value_145) in var_142 {
            {
                let mut object_146 = object_143.key(key_144).start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_146,
                    value_145,
                )?;
                object_146.finish();
            }
        }
        object_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.account_id {
        object.key("accountId").string(var_147.as_str());
    }
    if let Some(var_148) = &input.email {
        object.key("email").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DestinationProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.destination_arn {
        object.key("destinationArn").string(var_149.as_str());
    }
    if let Some(var_150) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.attribute_name {
        object.key("attributeName").string(var_151.as_str());
    }
    if let Some(var_152) = &input.order_by {
        object.key("orderBy").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usage_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UsageCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.account_ids {
        let mut array_154 = object.key("accountIds").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155.as_str());
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.data_sources {
        let mut array_157 = object.key("dataSources").start_array();
        for item_158 in var_156 {
            {
                array_157.value().string(item_158.as_str());
            }
        }
        array_157.finish();
    }
    if let Some(var_159) = &input.resources {
        let mut array_160 = object.key("resources").start_array();
        for item_161 in var_159 {
            {
                array_160.value().string(item_161.as_str());
            }
        }
        array_160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_data_source_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationDataSourceConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.s3_logs {
        let mut object_163 = object.key("s3Logs").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_s3_logs_configuration(
            &mut object_163,
            var_162,
        )?;
        object_163.finish();
    }
    if let Some(var_164) = &input.kubernetes {
        let mut object_165 = object.key("kubernetes").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_kubernetes_configuration(
            &mut object_165,
            var_164,
        )?;
        object_165.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_logs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3LogsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enable").boolean(input.enable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kubernetes_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KubernetesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.audit_logs {
        let mut object_167 = object.key("auditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_kubernetes_audit_logs_configuration(
            &mut object_167,
            var_166,
        )?;
        object_167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.eq {
        let mut array_169 = object.key("eq").start_array();
        for item_170 in var_168 {
            {
                array_169.value().string(item_170.as_str());
            }
        }
        array_169.finish();
    }
    if let Some(var_171) = &input.neq {
        let mut array_172 = object.key("neq").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173.as_str());
            }
        }
        array_172.finish();
    }
    if input.gt != 0 {
        object.key("gt").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gt).into()),
        );
    }
    if input.gte != 0 {
        object.key("gte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gte).into()),
        );
    }
    if input.lt != 0 {
        object.key("lt").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.lt).into()),
        );
    }
    if input.lte != 0 {
        object.key("lte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.lte).into()),
        );
    }
    if let Some(var_174) = &input.equals {
        let mut array_175 = object.key("equals").start_array();
        for item_176 in var_174 {
            {
                array_175.value().string(item_176.as_str());
            }
        }
        array_175.finish();
    }
    if let Some(var_177) = &input.not_equals {
        let mut array_178 = object.key("notEquals").start_array();
        for item_179 in var_177 {
            {
                array_178.value().string(item_179.as_str());
            }
        }
        array_178.finish();
    }
    if input.greater_than != 0 {
        object.key("greaterThan").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.greater_than).into()),
        );
    }
    if input.greater_than_or_equal != 0 {
        object.key("greaterThanOrEqual").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.greater_than_or_equal).into()),
        );
    }
    if input.less_than != 0 {
        object.key("lessThan").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.less_than).into()),
        );
    }
    if input.less_than_or_equal != 0 {
        object.key("lessThanOrEqual").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.less_than_or_equal).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_s3_logs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationS3LogsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("autoEnable").boolean(input.auto_enable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_kubernetes_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationKubernetesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.audit_logs {
        let mut object_181 = object.key("auditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_kubernetes_audit_logs_configuration(&mut object_181, var_180)?;
        object_181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kubernetes_audit_logs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KubernetesAuditLogsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enable").boolean(input.enable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_kubernetes_audit_logs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationKubernetesAuditLogsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("autoEnable").boolean(input.auto_enable);
    }
    Ok(())
}
