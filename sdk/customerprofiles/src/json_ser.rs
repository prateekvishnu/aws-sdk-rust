// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_profile_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddProfileKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.key_name {
        object.key("KeyName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.profile_id {
        object.key("ProfileId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.values {
        let mut array_4 = object.key("Values").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.dead_letter_queue_url {
        object.key("DeadLetterQueueUrl").string(var_6.as_str());
    }
    if let Some(var_7) = &input.default_encryption_key {
        object.key("DefaultEncryptionKey").string(var_7.as_str());
    }
    if let Some(var_8) = &input.default_expiration_days {
        object.key("DefaultExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.matching {
        let mut object_10 = object.key("Matching").start_object();
        crate::json_ser::serialize_structure_crate_model_matching_request(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut object_12 = object.key("Tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_integration_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntegrationWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.integration_config {
        let mut object_16 = object.key("IntegrationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_integration_config(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.role_arn {
        object.key("RoleArn").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut object_20 = object.key("Tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.workflow_type {
        object.key("WorkflowType").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.account_number {
        object.key("AccountNumber").string(var_24.as_str());
    }
    if let Some(var_25) = &input.additional_information {
        object.key("AdditionalInformation").string(var_25.as_str());
    }
    if let Some(var_26) = &input.address {
        let mut object_27 = object.key("Address").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.attributes {
        let mut object_29 = object.key("Attributes").start_object();
        for (key_30, value_31) in var_28 {
            {
                object_29.key(key_30).string(value_31.as_str());
            }
        }
        object_29.finish();
    }
    if let Some(var_32) = &input.billing_address {
        let mut object_33 = object.key("BillingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.birth_date {
        object.key("BirthDate").string(var_34.as_str());
    }
    if let Some(var_35) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_35.as_str());
    }
    if let Some(var_36) = &input.business_name {
        object.key("BusinessName").string(var_36.as_str());
    }
    if let Some(var_37) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_37.as_str());
    }
    if let Some(var_38) = &input.email_address {
        object.key("EmailAddress").string(var_38.as_str());
    }
    if let Some(var_39) = &input.first_name {
        object.key("FirstName").string(var_39.as_str());
    }
    if let Some(var_40) = &input.gender {
        object.key("Gender").string(var_40.as_str());
    }
    if let Some(var_41) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_41.as_str());
    }
    if let Some(var_42) = &input.last_name {
        object.key("LastName").string(var_42.as_str());
    }
    if let Some(var_43) = &input.mailing_address {
        let mut object_44 = object.key("MailingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_44, var_43)?;
        object_44.finish();
    }
    if let Some(var_45) = &input.middle_name {
        object.key("MiddleName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_46.as_str());
    }
    if let Some(var_47) = &input.party_type {
        object.key("PartyType").string(var_47.as_str());
    }
    if let Some(var_48) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_48.as_str());
    }
    if let Some(var_49) = &input.phone_number {
        object.key("PhoneNumber").string(var_49.as_str());
    }
    if let Some(var_50) = &input.shipping_address {
        let mut object_51 = object.key("ShippingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_51, var_50)?;
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_integration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIntegrationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.uri {
        object.key("Uri").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.profile_id {
        object.key("ProfileId").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_profile_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.key_name {
        object.key("KeyName").string(var_54.as_str());
    }
    if let Some(var_55) = &input.profile_id {
        object.key("ProfileId").string(var_55.as_str());
    }
    if let Some(var_56) = &input.values {
        let mut array_57 = object.key("Values").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_profile_object_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileObjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.profile_id {
        object.key("ProfileId").string(var_60.as_str());
    }
    if let Some(var_61) = &input.profile_object_unique_key {
        object.key("ProfileObjectUniqueKey").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_auto_merging_preview_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutoMergingPreviewInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.conflict_resolution {
        let mut object_63 = object.key("ConflictResolution").start_object();
        crate::json_ser::serialize_structure_crate_model_conflict_resolution(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.consolidation {
        let mut object_65 = object.key("Consolidation").start_object();
        crate::json_ser::serialize_structure_crate_model_consolidation(&mut object_65, var_64)?;
        object_65.finish();
    }
    if let Some(var_66) = &input.min_allowed_confidence_score_for_merging {
        object.key("MinAllowedConfidenceScoreForMerging").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_66).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_integration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIntegrationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.uri {
        object.key("Uri").string(var_67.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_integrations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountIntegrationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.uri {
        object.key("Uri").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_profile_objects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProfileObjectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.object_filter {
        let mut object_70 = object.key("ObjectFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_object_filter(&mut object_70, var_69)?;
        object_70.finish();
    }
    if let Some(var_71) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_71.as_str());
    }
    if let Some(var_72) = &input.profile_id {
        object.key("ProfileId").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.query_end_date {
        object
            .key("QueryEndDate")
            .date_time(var_73, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_74) = &input.query_start_date {
        object
            .key("QueryStartDate")
            .date_time(var_74, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_75) = &input.status {
        object.key("Status").string(var_75.as_str());
    }
    if let Some(var_76) = &input.workflow_type {
        object.key("WorkflowType").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_merge_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MergeProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.field_source_profile_ids {
        let mut object_78 = object.key("FieldSourceProfileIds").start_object();
        crate::json_ser::serialize_structure_crate_model_field_source_profile_ids(
            &mut object_78,
            var_77,
        )?;
        object_78.finish();
    }
    if let Some(var_79) = &input.main_profile_id {
        object.key("MainProfileId").string(var_79.as_str());
    }
    if let Some(var_80) = &input.profile_ids_to_be_merged {
        let mut array_81 = object.key("ProfileIdsToBeMerged").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_integration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutIntegrationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.flow_definition {
        let mut object_84 = object.key("FlowDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition(&mut object_84, var_83)?;
        object_84.finish();
    }
    if let Some(var_85) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_85.as_str());
    }
    if let Some(var_86) = &input.object_type_names {
        let mut object_87 = object.key("ObjectTypeNames").start_object();
        for (key_88, value_89) in var_86 {
            {
                object_87.key(key_88).string(value_89.as_str());
            }
        }
        object_87.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut object_91 = object.key("Tags").start_object();
        for (key_92, value_93) in var_90 {
            {
                object_91.key(key_92).string(value_93.as_str());
            }
        }
        object_91.finish();
    }
    if let Some(var_94) = &input.uri {
        object.key("Uri").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_profile_object_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProfileObjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.object {
        object.key("Object").string(var_95.as_str());
    }
    if let Some(var_96) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_profile_object_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProfileObjectTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_profile_creation {
        object
            .key("AllowProfileCreation")
            .boolean(input.allow_profile_creation);
    }
    if let Some(var_97) = &input.description {
        object.key("Description").string(var_97.as_str());
    }
    if let Some(var_98) = &input.encryption_key {
        object.key("EncryptionKey").string(var_98.as_str());
    }
    if let Some(var_99) = &input.expiration_days {
        object.key("ExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_99).into()),
        );
    }
    if let Some(var_100) = &input.fields {
        let mut object_101 = object.key("Fields").start_object();
        for (key_102, value_103) in var_100 {
            {
                let mut object_104 = object_101.key(key_102).start_object();
                crate::json_ser::serialize_structure_crate_model_object_type_field(
                    &mut object_104,
                    value_103,
                )?;
                object_104.finish();
            }
        }
        object_101.finish();
    }
    if let Some(var_105) = &input.keys {
        let mut object_106 = object.key("Keys").start_object();
        for (key_107, value_108) in var_105 {
            {
                let mut array_109 = object_106.key(key_107).start_array();
                for item_110 in value_108 {
                    {
                        let mut object_111 = array_109.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_object_type_key(
                            &mut object_111,
                            item_110,
                        )?;
                        object_111.finish();
                    }
                }
                array_109.finish();
            }
        }
        object_106.finish();
    }
    if let Some(var_112) = &input.source_last_updated_timestamp_format {
        object
            .key("SourceLastUpdatedTimestampFormat")
            .string(var_112.as_str());
    }
    if let Some(var_113) = &input.tags {
        let mut object_114 = object.key("Tags").start_object();
        for (key_115, value_116) in var_113 {
            {
                object_114.key(key_115).string(value_116.as_str());
            }
        }
        object_114.finish();
    }
    if let Some(var_117) = &input.template_id {
        object.key("TemplateId").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.key_name {
        object.key("KeyName").string(var_118.as_str());
    }
    if let Some(var_119) = &input.values {
        let mut array_120 = object.key("Values").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121.as_str());
            }
        }
        array_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("tags").start_object();
        for (key_124, value_125) in var_122 {
            {
                object_123.key(key_124).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.dead_letter_queue_url {
        object.key("DeadLetterQueueUrl").string(var_126.as_str());
    }
    if let Some(var_127) = &input.default_encryption_key {
        object.key("DefaultEncryptionKey").string(var_127.as_str());
    }
    if let Some(var_128) = &input.default_expiration_days {
        object.key("DefaultExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_128).into()),
        );
    }
    if let Some(var_129) = &input.matching {
        let mut object_130 = object.key("Matching").start_object();
        crate::json_ser::serialize_structure_crate_model_matching_request(
            &mut object_130,
            var_129,
        )?;
        object_130.finish();
    }
    if let Some(var_131) = &input.tags {
        let mut object_132 = object.key("Tags").start_object();
        for (key_133, value_134) in var_131 {
            {
                object_132.key(key_133).string(value_134.as_str());
            }
        }
        object_132.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.account_number {
        object.key("AccountNumber").string(var_135.as_str());
    }
    if let Some(var_136) = &input.additional_information {
        object.key("AdditionalInformation").string(var_136.as_str());
    }
    if let Some(var_137) = &input.address {
        let mut object_138 = object.key("Address").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_138, var_137)?;
        object_138.finish();
    }
    if let Some(var_139) = &input.attributes {
        let mut object_140 = object.key("Attributes").start_object();
        for (key_141, value_142) in var_139 {
            {
                object_140.key(key_141).string(value_142.as_str());
            }
        }
        object_140.finish();
    }
    if let Some(var_143) = &input.billing_address {
        let mut object_144 = object.key("BillingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_144, var_143)?;
        object_144.finish();
    }
    if let Some(var_145) = &input.birth_date {
        object.key("BirthDate").string(var_145.as_str());
    }
    if let Some(var_146) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_146.as_str());
    }
    if let Some(var_147) = &input.business_name {
        object.key("BusinessName").string(var_147.as_str());
    }
    if let Some(var_148) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_148.as_str());
    }
    if let Some(var_149) = &input.email_address {
        object.key("EmailAddress").string(var_149.as_str());
    }
    if let Some(var_150) = &input.first_name {
        object.key("FirstName").string(var_150.as_str());
    }
    if let Some(var_151) = &input.gender {
        object.key("Gender").string(var_151.as_str());
    }
    if let Some(var_152) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_152.as_str());
    }
    if let Some(var_153) = &input.last_name {
        object.key("LastName").string(var_153.as_str());
    }
    if let Some(var_154) = &input.mailing_address {
        let mut object_155 = object.key("MailingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_155, var_154)?;
        object_155.finish();
    }
    if let Some(var_156) = &input.middle_name {
        object.key("MiddleName").string(var_156.as_str());
    }
    if let Some(var_157) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_157.as_str());
    }
    if let Some(var_158) = &input.party_type {
        object.key("PartyType").string(var_158.as_str());
    }
    if let Some(var_159) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_159.as_str());
    }
    if let Some(var_160) = &input.phone_number {
        object.key("PhoneNumber").string(var_160.as_str());
    }
    if let Some(var_161) = &input.profile_id {
        object.key("ProfileId").string(var_161.as_str());
    }
    if let Some(var_162) = &input.shipping_address {
        let mut object_163 = object.key("ShippingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_163, var_162)?;
        object_163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_matching_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MatchingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.enabled {
        object.key("Enabled").boolean(*var_164);
    }
    if let Some(var_165) = &input.job_schedule {
        let mut object_166 = object.key("JobSchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_job_schedule(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.auto_merging {
        let mut object_168 = object.key("AutoMerging").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_merging(&mut object_168, var_167)?;
        object_168.finish();
    }
    if let Some(var_169) = &input.exporting_config {
        let mut object_170 = object.key("ExportingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_exporting_config(
            &mut object_170,
            var_169,
        )?;
        object_170.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integration_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegrationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.appflow_integration {
        let mut object_172 = object.key("AppflowIntegration").start_object();
        crate::json_ser::serialize_structure_crate_model_appflow_integration(
            &mut object_172,
            var_171,
        )?;
        object_172.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_address(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.address1 {
        object.key("Address1").string(var_173.as_str());
    }
    if let Some(var_174) = &input.address2 {
        object.key("Address2").string(var_174.as_str());
    }
    if let Some(var_175) = &input.address3 {
        object.key("Address3").string(var_175.as_str());
    }
    if let Some(var_176) = &input.address4 {
        object.key("Address4").string(var_176.as_str());
    }
    if let Some(var_177) = &input.city {
        object.key("City").string(var_177.as_str());
    }
    if let Some(var_178) = &input.county {
        object.key("County").string(var_178.as_str());
    }
    if let Some(var_179) = &input.state {
        object.key("State").string(var_179.as_str());
    }
    if let Some(var_180) = &input.province {
        object.key("Province").string(var_180.as_str());
    }
    if let Some(var_181) = &input.country {
        object.key("Country").string(var_181.as_str());
    }
    if let Some(var_182) = &input.postal_code {
        object.key("PostalCode").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conflict_resolution(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConflictResolution,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.conflict_resolving_model {
        object
            .key("ConflictResolvingModel")
            .string(var_183.as_str());
    }
    if let Some(var_184) = &input.source_name {
        object.key("SourceName").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_consolidation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Consolidation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.matching_attributes_list {
        let mut array_186 = object.key("MatchingAttributesList").start_array();
        for item_187 in var_185 {
            {
                let mut array_188 = array_186.value().start_array();
                for item_189 in item_187 {
                    {
                        array_188.value().string(item_189.as_str());
                    }
                }
                array_188.finish();
            }
        }
        array_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_object_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.key_name {
        object.key("KeyName").string(var_190.as_str());
    }
    if let Some(var_191) = &input.values {
        let mut array_192 = object.key("Values").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193.as_str());
            }
        }
        array_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field_source_profile_ids(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldSourceProfileIds,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.account_number {
        object.key("AccountNumber").string(var_194.as_str());
    }
    if let Some(var_195) = &input.additional_information {
        object.key("AdditionalInformation").string(var_195.as_str());
    }
    if let Some(var_196) = &input.party_type {
        object.key("PartyType").string(var_196.as_str());
    }
    if let Some(var_197) = &input.business_name {
        object.key("BusinessName").string(var_197.as_str());
    }
    if let Some(var_198) = &input.first_name {
        object.key("FirstName").string(var_198.as_str());
    }
    if let Some(var_199) = &input.middle_name {
        object.key("MiddleName").string(var_199.as_str());
    }
    if let Some(var_200) = &input.last_name {
        object.key("LastName").string(var_200.as_str());
    }
    if let Some(var_201) = &input.birth_date {
        object.key("BirthDate").string(var_201.as_str());
    }
    if let Some(var_202) = &input.gender {
        object.key("Gender").string(var_202.as_str());
    }
    if let Some(var_203) = &input.phone_number {
        object.key("PhoneNumber").string(var_203.as_str());
    }
    if let Some(var_204) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_204.as_str());
    }
    if let Some(var_205) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_205.as_str());
    }
    if let Some(var_206) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_206.as_str());
    }
    if let Some(var_207) = &input.email_address {
        object.key("EmailAddress").string(var_207.as_str());
    }
    if let Some(var_208) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_208.as_str());
    }
    if let Some(var_209) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_209.as_str());
    }
    if let Some(var_210) = &input.address {
        object.key("Address").string(var_210.as_str());
    }
    if let Some(var_211) = &input.shipping_address {
        object.key("ShippingAddress").string(var_211.as_str());
    }
    if let Some(var_212) = &input.mailing_address {
        object.key("MailingAddress").string(var_212.as_str());
    }
    if let Some(var_213) = &input.billing_address {
        object.key("BillingAddress").string(var_213.as_str());
    }
    if let Some(var_214) = &input.attributes {
        let mut object_215 = object.key("Attributes").start_object();
        for (key_216, value_217) in var_214 {
            {
                object_215.key(key_216).string(value_217.as_str());
            }
        }
        object_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_flow_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.description {
        object.key("Description").string(var_218.as_str());
    }
    if let Some(var_219) = &input.flow_name {
        object.key("FlowName").string(var_219.as_str());
    }
    if let Some(var_220) = &input.kms_arn {
        object.key("KmsArn").string(var_220.as_str());
    }
    if let Some(var_221) = &input.source_flow_config {
        let mut object_222 = object.key("SourceFlowConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_flow_config(
            &mut object_222,
            var_221,
        )?;
        object_222.finish();
    }
    if let Some(var_223) = &input.tasks {
        let mut array_224 = object.key("Tasks").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task(&mut object_226, item_225)?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    if let Some(var_227) = &input.trigger_config {
        let mut object_228 = object.key("TriggerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_config(&mut object_228, var_227)?;
        object_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_object_type_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectTypeField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.source {
        object.key("Source").string(var_229.as_str());
    }
    if let Some(var_230) = &input.target {
        object.key("Target").string(var_230.as_str());
    }
    if let Some(var_231) = &input.content_type {
        object.key("ContentType").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_object_type_key(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectTypeKey,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.standard_identifiers {
        let mut array_233 = object.key("StandardIdentifiers").start_array();
        for item_234 in var_232 {
            {
                array_233.value().string(item_234.as_str());
            }
        }
        array_233.finish();
    }
    if let Some(var_235) = &input.field_names {
        let mut array_236 = object.key("FieldNames").start_array();
        for item_237 in var_235 {
            {
                array_236.value().string(item_237.as_str());
            }
        }
        array_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_address(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAddress,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.address1 {
        object.key("Address1").string(var_238.as_str());
    }
    if let Some(var_239) = &input.address2 {
        object.key("Address2").string(var_239.as_str());
    }
    if let Some(var_240) = &input.address3 {
        object.key("Address3").string(var_240.as_str());
    }
    if let Some(var_241) = &input.address4 {
        object.key("Address4").string(var_241.as_str());
    }
    if let Some(var_242) = &input.city {
        object.key("City").string(var_242.as_str());
    }
    if let Some(var_243) = &input.county {
        object.key("County").string(var_243.as_str());
    }
    if let Some(var_244) = &input.state {
        object.key("State").string(var_244.as_str());
    }
    if let Some(var_245) = &input.province {
        object.key("Province").string(var_245.as_str());
    }
    if let Some(var_246) = &input.country {
        object.key("Country").string(var_246.as_str());
    }
    if let Some(var_247) = &input.postal_code {
        object.key("PostalCode").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_schedule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobSchedule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.day_of_the_week {
        object.key("DayOfTheWeek").string(var_248.as_str());
    }
    if let Some(var_249) = &input.time {
        object.key("Time").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_merging(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMerging,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.enabled {
        object.key("Enabled").boolean(*var_250);
    }
    if let Some(var_251) = &input.consolidation {
        let mut object_252 = object.key("Consolidation").start_object();
        crate::json_ser::serialize_structure_crate_model_consolidation(&mut object_252, var_251)?;
        object_252.finish();
    }
    if let Some(var_253) = &input.conflict_resolution {
        let mut object_254 = object.key("ConflictResolution").start_object();
        crate::json_ser::serialize_structure_crate_model_conflict_resolution(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.min_allowed_confidence_score_for_merging {
        object.key("MinAllowedConfidenceScoreForMerging").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_255).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_exporting_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.s3_exporting {
        let mut object_257 = object.key("S3Exporting").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_exporting_config(
            &mut object_257,
            var_256,
        )?;
        object_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_appflow_integration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppflowIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.flow_definition {
        let mut object_259 = object.key("FlowDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition(&mut object_259, var_258)?;
        object_259.finish();
    }
    if let Some(var_260) = &input.batches {
        let mut array_261 = object.key("Batches").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch(&mut object_263, item_262)?;
                object_263.finish();
            }
        }
        array_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_flow_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceFlowConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.connector_profile_name {
        object.key("ConnectorProfileName").string(var_264.as_str());
    }
    if let Some(var_265) = &input.connector_type {
        object.key("ConnectorType").string(var_265.as_str());
    }
    if let Some(var_266) = &input.incremental_pull_config {
        let mut object_267 = object.key("IncrementalPullConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_incremental_pull_config(
            &mut object_267,
            var_266,
        )?;
        object_267.finish();
    }
    if let Some(var_268) = &input.source_connector_properties {
        let mut object_269 = object.key("SourceConnectorProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_source_connector_properties(
            &mut object_269,
            var_268,
        )?;
        object_269.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Task,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_270) = &input.connector_operator {
        let mut object_271 = object.key("ConnectorOperator").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_operator(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    if let Some(var_272) = &input.destination_field {
        object.key("DestinationField").string(var_272.as_str());
    }
    if let Some(var_273) = &input.source_fields {
        let mut array_274 = object.key("SourceFields").start_array();
        for item_275 in var_273 {
            {
                array_274.value().string(item_275.as_str());
            }
        }
        array_274.finish();
    }
    if let Some(var_276) = &input.task_properties {
        let mut object_277 = object.key("TaskProperties").start_object();
        for (key_278, value_279) in var_276 {
            {
                object_277.key(key_278.as_str()).string(value_279.as_str());
            }
        }
        object_277.finish();
    }
    if let Some(var_280) = &input.task_type {
        object.key("TaskType").string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.trigger_type {
        object.key("TriggerType").string(var_281.as_str());
    }
    if let Some(var_282) = &input.trigger_properties {
        let mut object_283 = object.key("TriggerProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_properties(
            &mut object_283,
            var_282,
        )?;
        object_283.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_exporting_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ExportingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_284.as_str());
    }
    if let Some(var_285) = &input.s3_key_name {
        object.key("S3KeyName").string(var_285.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Batch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_286, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_287) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_287, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_incremental_pull_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IncrementalPullConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.datetime_type_field_name {
        object.key("DatetimeTypeFieldName").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_connector_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceConnectorProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.marketo {
        let mut object_290 = object.key("Marketo").start_object();
        crate::json_ser::serialize_structure_crate_model_marketo_source_properties(
            &mut object_290,
            var_289,
        )?;
        object_290.finish();
    }
    if let Some(var_291) = &input.s3 {
        let mut object_292 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_properties(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    if let Some(var_293) = &input.salesforce {
        let mut object_294 = object.key("Salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_source_properties(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    if let Some(var_295) = &input.service_now {
        let mut object_296 = object.key("ServiceNow").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_source_properties(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    if let Some(var_297) = &input.zendesk {
        let mut object_298 = object.key("Zendesk").start_object();
        crate::json_ser::serialize_structure_crate_model_zendesk_source_properties(
            &mut object_298,
            var_297,
        )?;
        object_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_operator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorOperator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.marketo {
        object.key("Marketo").string(var_299.as_str());
    }
    if let Some(var_300) = &input.s3 {
        object.key("S3").string(var_300.as_str());
    }
    if let Some(var_301) = &input.salesforce {
        object.key("Salesforce").string(var_301.as_str());
    }
    if let Some(var_302) = &input.service_now {
        object.key("ServiceNow").string(var_302.as_str());
    }
    if let Some(var_303) = &input.zendesk {
        object.key("Zendesk").string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.scheduled {
        let mut object_305 = object.key("Scheduled").start_object();
        crate::json_ser::serialize_structure_crate_model_scheduled_trigger_properties(
            &mut object_305,
            var_304,
        )?;
        object_305.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_marketo_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarketoSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.object {
        object.key("Object").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.bucket_name {
        object.key("BucketName").string(var_307.as_str());
    }
    if let Some(var_308) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.object {
        object.key("Object").string(var_309.as_str());
    }
    if input.enable_dynamic_field_update {
        object
            .key("EnableDynamicFieldUpdate")
            .boolean(input.enable_dynamic_field_update);
    }
    if input.include_deleted_records {
        object
            .key("IncludeDeletedRecords")
            .boolean(input.include_deleted_records);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.object {
        object.key("Object").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_zendesk_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZendeskSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.object {
        object.key("Object").string(var_311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scheduled_trigger_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduledTriggerProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_312.as_str());
    }
    if let Some(var_313) = &input.data_pull_mode {
        object.key("DataPullMode").string(var_313.as_str());
    }
    if let Some(var_314) = &input.schedule_start_time {
        object
            .key("ScheduleStartTime")
            .date_time(var_314, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_315) = &input.schedule_end_time {
        object
            .key("ScheduleEndTime")
            .date_time(var_315, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_316) = &input.timezone {
        object.key("Timezone").string(var_316.as_str());
    }
    if let Some(var_317) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_317).into()),
        );
    }
    if let Some(var_318) = &input.first_execution_from {
        object
            .key("FirstExecutionFrom")
            .date_time(var_318, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
