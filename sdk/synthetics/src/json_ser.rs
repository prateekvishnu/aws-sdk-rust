// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.resource_arn {
        object.key("ResourceArn").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_canary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCanaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.artifact_config {
        let mut object_3 = object.key("ArtifactConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_config_input(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.artifact_s3_location {
        object.key("ArtifactS3Location").string(var_4.as_str());
    }
    if let Some(var_5) = &input.code {
        let mut object_6 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_code_input(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.failure_retention_period_in_days {
        object.key("FailureRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.name {
        object.key("Name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.run_config {
        let mut object_11 = object.key("RunConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_run_config_input(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.runtime_version {
        object.key("RuntimeVersion").string(var_12.as_str());
    }
    if let Some(var_13) = &input.schedule {
        let mut object_14 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_schedule_input(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.success_retention_period_in_days {
        object.key("SuccessRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.tags {
        let mut object_17 = object.key("Tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.vpc_config {
        let mut object_21 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config_input(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.name {
        object.key("Name").string(var_22.as_str());
    }
    if let Some(var_23) = &input.tags {
        let mut object_24 = object.key("Tags").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25).string(value_26.as_str());
            }
        }
        object_24.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_canaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCanariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    if let Some(var_28) = &input.names {
        let mut array_29 = object.key("Names").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.next_token {
        object.key("NextToken").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_canaries_last_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCanariesLastRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    if let Some(var_33) = &input.names {
        let mut array_34 = object.key("Names").start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35.as_str());
            }
        }
        array_34.finish();
    }
    if let Some(var_36) = &input.next_token {
        object.key("NextToken").string(var_36.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_runtime_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRuntimeVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.next_token {
        object.key("NextToken").string(var_38.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.resource_arn {
        object.key("ResourceArn").string(var_39.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_canary_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCanaryRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_40).into()),
        );
    }
    if let Some(var_41) = &input.next_token {
        object.key("NextToken").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associated_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociatedGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_42).into()),
        );
    }
    if let Some(var_43) = &input.next_token {
        object.key("NextToken").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_group_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_44).into()),
        );
    }
    if let Some(var_45) = &input.next_token {
        object.key("NextToken").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_46).into()),
        );
    }
    if let Some(var_47) = &input.next_token {
        object.key("NextToken").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.tags {
        let mut object_49 = object.key("Tags").start_object();
        for (key_50, value_51) in var_48 {
            {
                object_49.key(key_50).string(value_51.as_str());
            }
        }
        object_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_canary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCanaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.artifact_config {
        let mut object_53 = object.key("ArtifactConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_config_input(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.artifact_s3_location {
        object.key("ArtifactS3Location").string(var_54.as_str());
    }
    if let Some(var_55) = &input.code {
        let mut object_56 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_code_input(&mut object_56, var_55)?;
        object_56.finish();
    }
    if let Some(var_57) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_57.as_str());
    }
    if let Some(var_58) = &input.failure_retention_period_in_days {
        object.key("FailureRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.run_config {
        let mut object_60 = object.key("RunConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_run_config_input(
            &mut object_60,
            var_59,
        )?;
        object_60.finish();
    }
    if let Some(var_61) = &input.runtime_version {
        object.key("RuntimeVersion").string(var_61.as_str());
    }
    if let Some(var_62) = &input.schedule {
        let mut object_63 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_canary_schedule_input(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.success_retention_period_in_days {
        object.key("SuccessRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_64).into()),
        );
    }
    if let Some(var_65) = &input.visual_reference {
        let mut object_66 = object.key("VisualReference").start_object();
        crate::json_ser::serialize_structure_crate_model_visual_reference_input(
            &mut object_66,
            var_65,
        )?;
        object_66.finish();
    }
    if let Some(var_67) = &input.vpc_config {
        let mut object_68 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config_input(&mut object_68, var_67)?;
        object_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.s3_encryption {
        let mut object_70 = object.key("S3Encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_encryption_config(
            &mut object_70,
            var_69,
        )?;
        object_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_canary_code_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CanaryCodeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.s3_bucket {
        object.key("S3Bucket").string(var_71.as_str());
    }
    if let Some(var_72) = &input.s3_key {
        object.key("S3Key").string(var_72.as_str());
    }
    if let Some(var_73) = &input.s3_version {
        object.key("S3Version").string(var_73.as_str());
    }
    if let Some(var_74) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&aws_smithy_types::base64::encode(var_74));
    }
    if let Some(var_75) = &input.handler {
        object.key("Handler").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_canary_run_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CanaryRunConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_76).into()),
        );
    }
    if let Some(var_77) = &input.memory_in_mb {
        object.key("MemoryInMB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    if let Some(var_78) = &input.active_tracing {
        object.key("ActiveTracing").boolean(*var_78);
    }
    if let Some(var_79) = &input.environment_variables {
        let mut object_80 = object.key("EnvironmentVariables").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82.as_str());
            }
        }
        object_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_canary_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CanaryScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.expression {
        object.key("Expression").string(var_83.as_str());
    }
    if let Some(var_84) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.subnet_ids {
        let mut array_86 = object.key("SubnetIds").start_array();
        for item_87 in var_85 {
            {
                array_86.value().string(item_87.as_str());
            }
        }
        array_86.finish();
    }
    if let Some(var_88) = &input.security_group_ids {
        let mut array_89 = object.key("SecurityGroupIds").start_array();
        for item_90 in var_88 {
            {
                array_89.value().string(item_90.as_str());
            }
        }
        array_89.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_visual_reference_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VisualReferenceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.base_screenshots {
        let mut array_92 = object.key("BaseScreenshots").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_crate_model_base_screenshot(
                    &mut object_94,
                    item_93,
                )?;
                object_94.finish();
            }
        }
        array_92.finish();
    }
    if let Some(var_95) = &input.base_canary_run_id {
        object.key("BaseCanaryRunId").string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3EncryptionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_96.as_str());
    }
    if let Some(var_97) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_base_screenshot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaseScreenshot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.screenshot_name {
        object.key("ScreenshotName").string(var_98.as_str());
    }
    if let Some(var_99) = &input.ignore_coordinates {
        let mut array_100 = object.key("IgnoreCoordinates").start_array();
        for item_101 in var_99 {
            {
                array_100.value().string(item_101.as_str());
            }
        }
        array_100.finish();
    }
    Ok(())
}
