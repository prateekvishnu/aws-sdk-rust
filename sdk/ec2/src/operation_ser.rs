// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("OutpostArn");
    if let Some(var_86) = &input.outpost_arn {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("DryRun");
    if let Some(var_88) = &input.dry_run {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("IpamPoolId");
    if let Some(var_90) = &input.ipam_pool_id {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Cidr");
    if let Some(var_92) = &input.cidr {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NetmaskLength");
    if let Some(var_94) = &input.netmask_length {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClientToken");
    if let Some(var_96) = &input.client_token {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Description");
    if let Some(var_98) = &input.description {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreviewNextCidr");
    if let Some(var_100) = &input.preview_next_cidr {
        scope_99.boolean(*var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("DisallowedCidr");
    if let Some(var_102) = &input.disallowed_cidrs {
        let mut list_104 = scope_101.start_list(true, Some("item"));
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            entry_105.string(item_103);
        }
        list_104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_107) = &input.client_vpn_endpoint_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("VpcId");
    if let Some(var_109) = &input.vpc_id {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SecurityGroupId");
    if let Some(var_111) = &input.security_group_ids {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("DryRun");
    if let Some(var_116) = &input.dry_run {
        scope_115.boolean(*var_116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6AddressCount");
    if let Some(var_118) = &input.ipv6_address_count {
        scope_117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Ipv6Addresses");
    if let Some(var_120) = &input.ipv6_addresses {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_125) = &input.ipv6_prefix_count {
        scope_124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Ipv6Prefix");
    if let Some(var_127) = &input.ipv6_prefixes {
        let mut list_129 = scope_126.start_list(true, Some("item"));
        for item_128 in var_127 {
            #[allow(unused_mut)]
            let mut entry_130 = list_129.entry();
            entry_130.string(item_128);
        }
        list_129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_132) = &input.network_interface_id {
        scope_131.string(var_132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("AllowReassignment");
    if let Some(var_134) = &input.allow_reassignment {
        scope_133.boolean(*var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("NetworkInterfaceId");
    if let Some(var_136) = &input.network_interface_id {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("PrivateIpAddress");
    if let Some(var_138) = &input.private_ip_addresses {
        let mut list_140 = scope_137.start_list(true, Some("PrivateIpAddress"));
        for item_139 in var_138 {
            #[allow(unused_mut)]
            let mut entry_141 = list_140.entry();
            entry_141.string(item_139);
        }
        list_140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_143) = &input.secondary_private_ip_address_count {
        scope_142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Ipv4Prefix");
    if let Some(var_145) = &input.ipv4_prefixes {
        let mut list_147 = scope_144.start_list(true, Some("item"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_150) = &input.ipv4_prefix_count {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("AllocationId");
    if let Some(var_152) = &input.allocation_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("InstanceId");
    if let Some(var_154) = &input.instance_id {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PublicIp");
    if let Some(var_156) = &input.public_ip {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("AllowReassociation");
    if let Some(var_158) = &input.allow_reassociation {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("DryRun");
    if let Some(var_160) = &input.dry_run {
        scope_159.boolean(*var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_162) = &input.network_interface_id {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("PrivateIpAddress");
    if let Some(var_164) = &input.private_ip_address {
        scope_163.string(var_164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_166) = &input.client_vpn_endpoint_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("SubnetId");
    if let Some(var_168) = &input.subnet_id {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ClientToken");
    if let Some(var_170) = &input.client_token {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DryRun");
    if let Some(var_172) = &input.dry_run {
        scope_171.boolean(*var_172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("DhcpOptionsId");
    if let Some(var_174) = &input.dhcp_options_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("VpcId");
    if let Some(var_176) = &input.vpc_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("DryRun");
    if let Some(var_178) = &input.dry_run {
        scope_177.boolean(*var_178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("CertificateArn");
    if let Some(var_180) = &input.certificate_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RoleArn");
    if let Some(var_182) = &input.role_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("DryRun");
    if let Some(var_184) = &input.dry_run {
        scope_183.boolean(*var_184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("IamInstanceProfile");
    if let Some(var_186) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_185, var_186,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("InstanceId");
    if let Some(var_188) = &input.instance_id {
        scope_187.string(var_188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("DryRun");
    if let Some(var_190) = &input.dry_run {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("InstanceEventWindowId");
    if let Some(var_192) = &input.instance_event_window_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AssociationTarget");
    if let Some(var_194) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_193, var_194)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("RouteTableId");
    if let Some(var_198) = &input.route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("SubnetId");
    if let Some(var_200) = &input.subnet_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("GatewayId");
    if let Some(var_202) = &input.gateway_id {
        scope_201.string(var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_204) = &input.ipv6_cidr_block {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("SubnetId");
    if let Some(var_206) = &input.subnet_id {
        scope_205.string(var_206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_208) = &input.transit_gateway_multicast_domain_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_210) = &input.transit_gateway_attachment_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SubnetIds");
    if let Some(var_212) = &input.subnet_ids {
        let mut list_214 = scope_211.start_list(true, Some("item"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            entry_215.string(item_213);
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("DryRun");
    if let Some(var_217) = &input.dry_run {
        scope_216.boolean(*var_217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_policy_table(
    input: &crate::input::AssociateTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_219) = &input.transit_gateway_policy_table_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_221) = &input.transit_gateway_attachment_id {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("DryRun");
    if let Some(var_223) = &input.dry_run {
        scope_222.boolean(*var_223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_225) = &input.transit_gateway_route_table_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_227) = &input.transit_gateway_attachment_id {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("DryRun");
    if let Some(var_229) = &input.dry_run {
        scope_228.boolean(*var_229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("BranchInterfaceId");
    if let Some(var_231) = &input.branch_interface_id {
        scope_230.string(var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("TrunkInterfaceId");
    if let Some(var_233) = &input.trunk_interface_id {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("VlanId");
    if let Some(var_235) = &input.vlan_id {
        scope_234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("GreKey");
    if let Some(var_237) = &input.gre_key {
        scope_236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("ClientToken");
    if let Some(var_239) = &input.client_token {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("DryRun");
    if let Some(var_241) = &input.dry_run {
        scope_240.boolean(*var_241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_243) = &input.amazon_provided_ipv6_cidr_block {
        scope_242.boolean(*var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("CidrBlock");
    if let Some(var_245) = &input.cidr_block {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("VpcId");
    if let Some(var_247) = &input.vpc_id {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_249) = &input.ipv6_cidr_block_network_border_group {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv6Pool");
    if let Some(var_251) = &input.ipv6_pool {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_253) = &input.ipv6_cidr_block {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_255) = &input.ipv4_ipam_pool_id {
        scope_254.string(var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_257) = &input.ipv4_netmask_length {
        scope_256.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_259) = &input.ipv6_ipam_pool_id {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_261) = &input.ipv6_netmask_length {
        scope_260.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_261).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("DryRun");
    if let Some(var_263) = &input.dry_run {
        scope_262.boolean(*var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("SecurityGroupId");
    if let Some(var_265) = &input.groups {
        let mut list_267 = scope_264.start_list(true, Some("groupId"));
        for item_266 in var_265 {
            #[allow(unused_mut)]
            let mut entry_268 = list_267.entry();
            entry_268.string(item_266);
        }
        list_267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("InstanceId");
    if let Some(var_270) = &input.instance_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("VpcId");
    if let Some(var_272) = &input.vpc_id {
        scope_271.string(var_272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DryRun");
    if let Some(var_274) = &input.dry_run {
        scope_273.boolean(*var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("InternetGatewayId");
    if let Some(var_276) = &input.internet_gateway_id {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("VpcId");
    if let Some(var_278) = &input.vpc_id {
        scope_277.string(var_278);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("DeviceIndex");
    if let Some(var_280) = &input.device_index {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("DryRun");
    if let Some(var_282) = &input.dry_run {
        scope_281.boolean(*var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("InstanceId");
    if let Some(var_284) = &input.instance_id {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("NetworkInterfaceId");
    if let Some(var_286) = &input.network_interface_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("NetworkCardIndex");
    if let Some(var_288) = &input.network_card_index {
        scope_287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("Device");
    if let Some(var_290) = &input.device {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("InstanceId");
    if let Some(var_292) = &input.instance_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("VolumeId");
    if let Some(var_294) = &input.volume_id {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("DryRun");
    if let Some(var_296) = &input.dry_run {
        scope_295.boolean(*var_296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("VpcId");
    if let Some(var_298) = &input.vpc_id {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("VpnGatewayId");
    if let Some(var_300) = &input.vpn_gateway_id {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("DryRun");
    if let Some(var_302) = &input.dry_run {
        scope_301.boolean(*var_302);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_304) = &input.client_vpn_endpoint_id {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("TargetNetworkCidr");
    if let Some(var_306) = &input.target_network_cidr {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("AccessGroupId");
    if let Some(var_308) = &input.access_group_id {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_310) = &input.authorize_all_groups {
        scope_309.boolean(*var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("Description");
    if let Some(var_312) = &input.description {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("ClientToken");
    if let Some(var_314) = &input.client_token {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("DryRun");
    if let Some(var_316) = &input.dry_run {
        scope_315.boolean(*var_316);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("DryRun");
    if let Some(var_318) = &input.dry_run {
        scope_317.boolean(*var_318);
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("GroupId");
    if let Some(var_320) = &input.group_id {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("IpPermissions");
    if let Some(var_322) = &input.ip_permissions {
        let mut list_324 = scope_321.start_list(true, Some("item"));
        for item_323 in var_322 {
            #[allow(unused_mut)]
            let mut entry_325 = list_324.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_325, item_323)?;
        }
        list_324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("TagSpecification");
    if let Some(var_327) = &input.tag_specifications {
        let mut list_329 = scope_326.start_list(true, Some("item"));
        for item_328 in var_327 {
            #[allow(unused_mut)]
            let mut entry_330 = list_329.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_330, item_328,
            )?;
        }
        list_329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("CidrIp");
    if let Some(var_332) = &input.cidr_ip {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("FromPort");
    if let Some(var_334) = &input.from_port {
        scope_333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("IpProtocol");
    if let Some(var_336) = &input.ip_protocol {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("ToPort");
    if let Some(var_338) = &input.to_port {
        scope_337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_340) = &input.source_security_group_name {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_342) = &input.source_security_group_owner_id {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("CidrIp");
    if let Some(var_344) = &input.cidr_ip {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("FromPort");
    if let Some(var_346) = &input.from_port {
        scope_345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("GroupId");
    if let Some(var_348) = &input.group_id {
        scope_347.string(var_348);
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("GroupName");
    if let Some(var_350) = &input.group_name {
        scope_349.string(var_350);
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("IpPermissions");
    if let Some(var_352) = &input.ip_permissions {
        let mut list_354 = scope_351.start_list(true, Some("item"));
        for item_353 in var_352 {
            #[allow(unused_mut)]
            let mut entry_355 = list_354.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_355, item_353)?;
        }
        list_354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("IpProtocol");
    if let Some(var_357) = &input.ip_protocol {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_359) = &input.source_security_group_name {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_361) = &input.source_security_group_owner_id {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("ToPort");
    if let Some(var_363) = &input.to_port {
        scope_362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("DryRun");
    if let Some(var_365) = &input.dry_run {
        scope_364.boolean(*var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("TagSpecification");
    if let Some(var_367) = &input.tag_specifications {
        let mut list_369 = scope_366.start_list(true, Some("item"));
        for item_368 in var_367 {
            #[allow(unused_mut)]
            let mut entry_370 = list_369.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_370, item_368,
            )?;
        }
        list_369.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("InstanceId");
    if let Some(var_372) = &input.instance_id {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("Storage");
    if let Some(var_374) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_373, var_374)?;
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("BundleId");
    if let Some(var_378) = &input.bundle_id {
        scope_377.string(var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("DryRun");
    if let Some(var_380) = &input.dry_run {
        scope_379.boolean(*var_380);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("CapacityReservationId");
    if let Some(var_382) = &input.capacity_reservation_id {
        scope_381.string(var_382);
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("DryRun");
    if let Some(var_384) = &input.dry_run {
        scope_383.boolean(*var_384);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("DryRun");
    if let Some(var_386) = &input.dry_run {
        scope_385.boolean(*var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_388) = &input.capacity_reservation_fleet_ids {
        let mut list_390 = scope_387.start_list(true, Some("item"));
        for item_389 in var_388 {
            #[allow(unused_mut)]
            let mut entry_391 = list_390.entry();
            entry_391.string(item_389);
        }
        list_390.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("ConversionTaskId");
    if let Some(var_393) = &input.conversion_task_id {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("ReasonMessage");
    if let Some(var_397) = &input.reason_message {
        scope_396.string(var_397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ExportTaskId");
    if let Some(var_399) = &input.export_task_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("CancelReason");
    if let Some(var_401) = &input.cancel_reason {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("DryRun");
    if let Some(var_403) = &input.dry_run {
        scope_402.boolean(*var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("ImportTaskId");
    if let Some(var_405) = &input.import_task_id {
        scope_404.string(var_405);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_407) = &input.reserved_instances_listing_id {
        scope_406.string(var_407);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("DryRun");
    if let Some(var_409) = &input.dry_run {
        scope_408.boolean(*var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("SpotFleetRequestId");
    if let Some(var_411) = &input.spot_fleet_request_ids {
        let mut list_413 = scope_410.start_list(true, Some("item"));
        for item_412 in var_411 {
            #[allow(unused_mut)]
            let mut entry_414 = list_413.entry();
            entry_414.string(item_412);
        }
        list_413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("TerminateInstances");
    if let Some(var_416) = &input.terminate_instances {
        scope_415.boolean(*var_416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("DryRun");
    if let Some(var_418) = &input.dry_run {
        scope_417.boolean(*var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_420) = &input.spot_instance_request_ids {
        let mut list_422 = scope_419.start_list(true, Some("SpotInstanceRequestId"));
        for item_421 in var_420 {
            #[allow(unused_mut)]
            let mut entry_423 = list_422.entry();
            entry_423.string(item_421);
        }
        list_422.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("InstanceId");
    if let Some(var_425) = &input.instance_id {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("ProductCode");
    if let Some(var_427) = &input.product_code {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("DryRun");
    if let Some(var_429) = &input.dry_run {
        scope_428.boolean(*var_429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("DryRun");
    if let Some(var_431) = &input.dry_run {
        scope_430.boolean(*var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceFpgaImageId");
    if let Some(var_433) = &input.source_fpga_image_id {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("Description");
    if let Some(var_435) = &input.description {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Name");
    if let Some(var_437) = &input.name {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("SourceRegion");
    if let Some(var_439) = &input.source_region {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("ClientToken");
    if let Some(var_441) = &input.client_token {
        scope_440.string(var_441);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("ClientToken");
    if let Some(var_443) = &input.client_token {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Description");
    if let Some(var_445) = &input.description {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("Encrypted");
    if let Some(var_447) = &input.encrypted {
        scope_446.boolean(*var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("KmsKeyId");
    if let Some(var_449) = &input.kms_key_id {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("Name");
    if let Some(var_451) = &input.name {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("SourceImageId");
    if let Some(var_453) = &input.source_image_id {
        scope_452.string(var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("SourceRegion");
    if let Some(var_455) = &input.source_region {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationOutpostArn");
    if let Some(var_457) = &input.destination_outpost_arn {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("DryRun");
    if let Some(var_459) = &input.dry_run {
        scope_458.boolean(*var_459);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Description");
    if let Some(var_461) = &input.description {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("DestinationOutpostArn");
    if let Some(var_463) = &input.destination_outpost_arn {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("DestinationRegion");
    if let Some(var_465) = &input.destination_region {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("Encrypted");
    if let Some(var_467) = &input.encrypted {
        scope_466.boolean(*var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("KmsKeyId");
    if let Some(var_469) = &input.kms_key_id {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("PresignedUrl");
    if let Some(var_471) = &input.presigned_url {
        scope_470.string(var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("SourceRegion");
    if let Some(var_473) = &input.source_region {
        scope_472.string(var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("SourceSnapshotId");
    if let Some(var_475) = &input.source_snapshot_id {
        scope_474.string(var_475);
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("TagSpecification");
    if let Some(var_477) = &input.tag_specifications {
        let mut list_479 = scope_476.start_list(true, Some("item"));
        for item_478 in var_477 {
            #[allow(unused_mut)]
            let mut entry_480 = list_479.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_480, item_478,
            )?;
        }
        list_479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("DryRun");
    if let Some(var_482) = &input.dry_run {
        scope_481.boolean(*var_482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("ClientToken");
    if let Some(var_484) = &input.client_token {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("InstanceType");
    if let Some(var_486) = &input.instance_type {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("InstancePlatform");
    if let Some(var_488) = &input.instance_platform {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("AvailabilityZone");
    if let Some(var_490) = &input.availability_zone {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("AvailabilityZoneId");
    if let Some(var_492) = &input.availability_zone_id {
        scope_491.string(var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("Tenancy");
    if let Some(var_494) = &input.tenancy {
        scope_493.string(var_494.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("InstanceCount");
    if let Some(var_496) = &input.instance_count {
        scope_495.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_496).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("EbsOptimized");
    if let Some(var_498) = &input.ebs_optimized {
        scope_497.boolean(*var_498);
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("EphemeralStorage");
    if let Some(var_500) = &input.ephemeral_storage {
        scope_499.boolean(*var_500);
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("EndDate");
    if let Some(var_502) = &input.end_date {
        scope_501.date_time(var_502, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("EndDateType");
    if let Some(var_504) = &input.end_date_type {
        scope_503.string(var_504.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_506) = &input.instance_match_criteria {
        scope_505.string(var_506.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("TagSpecifications");
    if let Some(var_508) = &input.tag_specifications {
        let mut list_510 = scope_507.start_list(true, Some("item"));
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_511, item_509,
            )?;
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("DryRun");
    if let Some(var_513) = &input.dry_run {
        scope_512.boolean(*var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("OutpostArn");
    if let Some(var_515) = &input.outpost_arn {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("PlacementGroupArn");
    if let Some(var_517) = &input.placement_group_arn {
        scope_516.string(var_517);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("AllocationStrategy");
    if let Some(var_519) = &input.allocation_strategy {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("ClientToken");
    if let Some(var_521) = &input.client_token {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_523) = &input.instance_type_specifications {
        let mut list_525 = scope_522.start_list(true, None);
        for item_524 in var_523 {
            #[allow(unused_mut)]
            let mut entry_526 = list_525.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_526, item_524)?;
        }
        list_525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("Tenancy");
    if let Some(var_528) = &input.tenancy {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("TotalTargetCapacity");
    if let Some(var_530) = &input.total_target_capacity {
        scope_529.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_530).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("EndDate");
    if let Some(var_532) = &input.end_date {
        scope_531.date_time(var_532, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_534) = &input.instance_match_criteria {
        scope_533.string(var_534.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("TagSpecification");
    if let Some(var_536) = &input.tag_specifications {
        let mut list_538 = scope_535.start_list(true, Some("item"));
        for item_537 in var_536 {
            #[allow(unused_mut)]
            let mut entry_539 = list_538.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_539, item_537,
            )?;
        }
        list_538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("DryRun");
    if let Some(var_541) = &input.dry_run {
        scope_540.boolean(*var_541);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("VpcId");
    if let Some(var_543) = &input.vpc_id {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("TagSpecification");
    if let Some(var_545) = &input.tag_specifications {
        let mut list_547 = scope_544.start_list(true, Some("item"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_548, item_546,
            )?;
        }
        list_547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("DryRun");
    if let Some(var_550) = &input.dry_run {
        scope_549.boolean(*var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("ClientToken");
    if let Some(var_552) = &input.client_token {
        scope_551.string(var_552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("ClientCidrBlock");
    if let Some(var_554) = &input.client_cidr_block {
        scope_553.string(var_554);
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("ServerCertificateArn");
    if let Some(var_556) = &input.server_certificate_arn {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("Authentication");
    if let Some(var_558) = &input.authentication_options {
        let mut list_560 = scope_557.start_list(true, None);
        for item_559 in var_558 {
            #[allow(unused_mut)]
            let mut entry_561 = list_560.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_561, item_559,
            )?;
        }
        list_560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("ConnectionLogOptions");
    if let Some(var_563) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_562, var_563,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("DnsServers");
    if let Some(var_565) = &input.dns_servers {
        let mut list_567 = scope_564.start_list(true, Some("item"));
        for item_566 in var_565 {
            #[allow(unused_mut)]
            let mut entry_568 = list_567.entry();
            entry_568.string(item_566);
        }
        list_567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("TransportProtocol");
    if let Some(var_570) = &input.transport_protocol {
        scope_569.string(var_570.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("VpnPort");
    if let Some(var_572) = &input.vpn_port {
        scope_571.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_572).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("Description");
    if let Some(var_574) = &input.description {
        scope_573.string(var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("SplitTunnel");
    if let Some(var_576) = &input.split_tunnel {
        scope_575.boolean(*var_576);
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("DryRun");
    if let Some(var_578) = &input.dry_run {
        scope_577.boolean(*var_578);
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("ClientToken");
    if let Some(var_580) = &input.client_token {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("TagSpecification");
    if let Some(var_582) = &input.tag_specifications {
        let mut list_584 = scope_581.start_list(true, Some("item"));
        for item_583 in var_582 {
            #[allow(unused_mut)]
            let mut entry_585 = list_584.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_585, item_583,
            )?;
        }
        list_584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("SecurityGroupId");
    if let Some(var_587) = &input.security_group_ids {
        let mut list_589 = scope_586.start_list(true, Some("item"));
        for item_588 in var_587 {
            #[allow(unused_mut)]
            let mut entry_590 = list_589.entry();
            entry_590.string(item_588);
        }
        list_589.finish();
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("VpcId");
    if let Some(var_592) = &input.vpc_id {
        scope_591.string(var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("SelfServicePortal");
    if let Some(var_594) = &input.self_service_portal {
        scope_593.string(var_594.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ClientConnectOptions");
    if let Some(var_596) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_595, var_596,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("SessionTimeoutHours");
    if let Some(var_598) = &input.session_timeout_hours {
        scope_597.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_598).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_600) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_599, var_600,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_602) = &input.client_vpn_endpoint_id {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DestinationCidrBlock");
    if let Some(var_604) = &input.destination_cidr_block {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_606) = &input.target_vpc_subnet_id {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("Description");
    if let Some(var_608) = &input.description {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("ClientToken");
    if let Some(var_610) = &input.client_token {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("DryRun");
    if let Some(var_612) = &input.dry_run {
        scope_611.boolean(*var_612);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("BgpAsn");
    if let Some(var_614) = &input.bgp_asn {
        scope_613.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_614).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("PublicIp");
    if let Some(var_616) = &input.public_ip {
        scope_615.string(var_616);
    }
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("CertificateArn");
    if let Some(var_618) = &input.certificate_arn {
        scope_617.string(var_618);
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("Type");
    if let Some(var_620) = &input.r#type {
        scope_619.string(var_620.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("TagSpecification");
    if let Some(var_622) = &input.tag_specifications {
        let mut list_624 = scope_621.start_list(true, Some("item"));
        for item_623 in var_622 {
            #[allow(unused_mut)]
            let mut entry_625 = list_624.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_625, item_623,
            )?;
        }
        list_624.finish();
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("DeviceName");
    if let Some(var_627) = &input.device_name {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("IpAddress");
    if let Some(var_629) = &input.ip_address {
        scope_628.string(var_629);
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("DryRun");
    if let Some(var_631) = &input.dry_run {
        scope_630.boolean(*var_631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("AvailabilityZone");
    if let Some(var_633) = &input.availability_zone {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("DryRun");
    if let Some(var_635) = &input.dry_run {
        scope_634.boolean(*var_635);
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("Ipv6Native");
    if let Some(var_637) = &input.ipv6_native {
        scope_636.boolean(*var_637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("DryRun");
    if let Some(var_639) = &input.dry_run {
        scope_638.boolean(*var_639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("DhcpConfiguration");
    if let Some(var_641) = &input.dhcp_configurations {
        let mut list_643 = scope_640.start_list(true, Some("item"));
        for item_642 in var_641 {
            #[allow(unused_mut)]
            let mut entry_644 = list_643.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_644, item_642,
            )?;
        }
        list_643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("TagSpecification");
    if let Some(var_646) = &input.tag_specifications {
        let mut list_648 = scope_645.start_list(true, Some("item"));
        for item_647 in var_646 {
            #[allow(unused_mut)]
            let mut entry_649 = list_648.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_649, item_647,
            )?;
        }
        list_648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("DryRun");
    if let Some(var_651) = &input.dry_run {
        scope_650.boolean(*var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("ClientToken");
    if let Some(var_653) = &input.client_token {
        scope_652.string(var_653);
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("DryRun");
    if let Some(var_655) = &input.dry_run {
        scope_654.boolean(*var_655);
    }
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("VpcId");
    if let Some(var_657) = &input.vpc_id {
        scope_656.string(var_657);
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("TagSpecification");
    if let Some(var_659) = &input.tag_specifications {
        let mut list_661 = scope_658.start_list(true, Some("item"));
        for item_660 in var_659 {
            #[allow(unused_mut)]
            let mut entry_662 = list_661.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_662, item_660,
            )?;
        }
        list_661.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("DryRun");
    if let Some(var_664) = &input.dry_run {
        scope_663.boolean(*var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ClientToken");
    if let Some(var_666) = &input.client_token {
        scope_665.string(var_666);
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("SpotOptions");
    if let Some(var_668) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_667, var_668)?;
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("OnDemandOptions");
    if let Some(var_670) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_669, var_670,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_672) = &input.excess_capacity_termination_policy {
        scope_671.string(var_672.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_674) = &input.launch_template_configs {
        let mut list_676 = scope_673.start_list(true, Some("item"));
        for item_675 in var_674 {
            #[allow(unused_mut)]
            let mut entry_677 = list_676.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_677, item_675,
            )?;
        }
        list_676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_679) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_678, var_679,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_681) = &input.terminate_instances_with_expiration {
        scope_680.boolean(*var_681);
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("Type");
    if let Some(var_683) = &input.r#type {
        scope_682.string(var_683.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("ValidFrom");
    if let Some(var_685) = &input.valid_from {
        scope_684.date_time(var_685, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("ValidUntil");
    if let Some(var_687) = &input.valid_until {
        scope_686.date_time(var_687, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_689) = &input.replace_unhealthy_instances {
        scope_688.boolean(*var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("TagSpecification");
    if let Some(var_691) = &input.tag_specifications {
        let mut list_693 = scope_690.start_list(true, Some("item"));
        for item_692 in var_691 {
            #[allow(unused_mut)]
            let mut entry_694 = list_693.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_694, item_692,
            )?;
        }
        list_693.finish();
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("Context");
    if let Some(var_696) = &input.context {
        scope_695.string(var_696);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("DryRun");
    if let Some(var_698) = &input.dry_run {
        scope_697.boolean(*var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("ClientToken");
    if let Some(var_700) = &input.client_token {
        scope_699.string(var_700);
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_702) = &input.deliver_logs_permission_arn {
        scope_701.string(var_702);
    }
    #[allow(unused_mut)]
    let mut scope_703 = writer.prefix("LogGroupName");
    if let Some(var_704) = &input.log_group_name {
        scope_703.string(var_704);
    }
    #[allow(unused_mut)]
    let mut scope_705 = writer.prefix("ResourceId");
    if let Some(var_706) = &input.resource_ids {
        let mut list_708 = scope_705.start_list(true, Some("item"));
        for item_707 in var_706 {
            #[allow(unused_mut)]
            let mut entry_709 = list_708.entry();
            entry_709.string(item_707);
        }
        list_708.finish();
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("ResourceType");
    if let Some(var_711) = &input.resource_type {
        scope_710.string(var_711.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("TrafficType");
    if let Some(var_713) = &input.traffic_type {
        scope_712.string(var_713.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("LogDestinationType");
    if let Some(var_715) = &input.log_destination_type {
        scope_714.string(var_715.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("LogDestination");
    if let Some(var_717) = &input.log_destination {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("LogFormat");
    if let Some(var_719) = &input.log_format {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("TagSpecification");
    if let Some(var_721) = &input.tag_specifications {
        let mut list_723 = scope_720.start_list(true, Some("item"));
        for item_722 in var_721 {
            #[allow(unused_mut)]
            let mut entry_724 = list_723.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_724, item_722,
            )?;
        }
        list_723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("MaxAggregationInterval");
    if let Some(var_726) = &input.max_aggregation_interval {
        scope_725.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_726).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("DestinationOptions");
    if let Some(var_728) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_727, var_728,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("DryRun");
    if let Some(var_730) = &input.dry_run {
        scope_729.boolean(*var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("InputStorageLocation");
    if let Some(var_732) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_731, var_732)?;
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("LogsStorageLocation");
    if let Some(var_734) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_733, var_734)?;
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("Description");
    if let Some(var_736) = &input.description {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("Name");
    if let Some(var_738) = &input.name {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("ClientToken");
    if let Some(var_740) = &input.client_token {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("TagSpecification");
    if let Some(var_742) = &input.tag_specifications {
        let mut list_744 = scope_741.start_list(true, Some("item"));
        for item_743 in var_742 {
            #[allow(unused_mut)]
            let mut entry_745 = list_744.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_745, item_743,
            )?;
        }
        list_744.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("BlockDeviceMapping");
    if let Some(var_747) = &input.block_device_mappings {
        let mut list_749 = scope_746.start_list(true, Some("BlockDeviceMapping"));
        for item_748 in var_747 {
            #[allow(unused_mut)]
            let mut entry_750 = list_749.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_750, item_748,
            )?;
        }
        list_749.finish();
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("Description");
    if let Some(var_752) = &input.description {
        scope_751.string(var_752);
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("DryRun");
    if let Some(var_754) = &input.dry_run {
        scope_753.boolean(*var_754);
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("InstanceId");
    if let Some(var_756) = &input.instance_id {
        scope_755.string(var_756);
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("Name");
    if let Some(var_758) = &input.name {
        scope_757.string(var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("NoReboot");
    if let Some(var_760) = &input.no_reboot {
        scope_759.boolean(*var_760);
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("TagSpecification");
    if let Some(var_762) = &input.tag_specifications {
        let mut list_764 = scope_761.start_list(true, Some("item"));
        for item_763 in var_762 {
            #[allow(unused_mut)]
            let mut entry_765 = list_764.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_765, item_763,
            )?;
        }
        list_764.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("DryRun");
    if let Some(var_767) = &input.dry_run {
        scope_766.boolean(*var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("Name");
    if let Some(var_769) = &input.name {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("TimeRange");
    if let Some(var_771) = &input.time_ranges {
        let mut list_773 = scope_770.start_list(true, None);
        for item_772 in var_771 {
            #[allow(unused_mut)]
            let mut entry_774 = list_773.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_774, item_772)?;
        }
        list_773.finish();
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("CronExpression");
    if let Some(var_776) = &input.cron_expression {
        scope_775.string(var_776);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("TagSpecification");
    if let Some(var_778) = &input.tag_specifications {
        let mut list_780 = scope_777.start_list(true, Some("item"));
        for item_779 in var_778 {
            #[allow(unused_mut)]
            let mut entry_781 = list_780.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_781, item_779,
            )?;
        }
        list_780.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("Description");
    if let Some(var_783) = &input.description {
        scope_782.string(var_783);
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("ExportToS3");
    if let Some(var_785) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_784, var_785,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("InstanceId");
    if let Some(var_787) = &input.instance_id {
        scope_786.string(var_787);
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("TargetEnvironment");
    if let Some(var_789) = &input.target_environment {
        scope_788.string(var_789.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("TagSpecification");
    if let Some(var_791) = &input.tag_specifications {
        let mut list_793 = scope_790.start_list(true, Some("item"));
        for item_792 in var_791 {
            #[allow(unused_mut)]
            let mut entry_794 = list_793.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_794, item_792,
            )?;
        }
        list_793.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("TagSpecification");
    if let Some(var_796) = &input.tag_specifications {
        let mut list_798 = scope_795.start_list(true, Some("item"));
        for item_797 in var_796 {
            #[allow(unused_mut)]
            let mut entry_799 = list_798.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_799, item_797,
            )?;
        }
        list_798.finish();
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("DryRun");
    if let Some(var_801) = &input.dry_run {
        scope_800.boolean(*var_801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("DryRun");
    if let Some(var_803) = &input.dry_run {
        scope_802.boolean(*var_803);
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("Description");
    if let Some(var_805) = &input.description {
        scope_804.string(var_805);
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("OperatingRegion");
    if let Some(var_807) = &input.operating_regions {
        let mut list_809 = scope_806.start_list(true, None);
        for item_808 in var_807 {
            #[allow(unused_mut)]
            let mut entry_810 = list_809.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_810, item_808,
            )?;
        }
        list_809.finish();
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("TagSpecification");
    if let Some(var_812) = &input.tag_specifications {
        let mut list_814 = scope_811.start_list(true, Some("item"));
        for item_813 in var_812 {
            #[allow(unused_mut)]
            let mut entry_815 = list_814.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_815, item_813,
            )?;
        }
        list_814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("ClientToken");
    if let Some(var_817) = &input.client_token {
        scope_816.string(var_817);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("DryRun");
    if let Some(var_819) = &input.dry_run {
        scope_818.boolean(*var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("IpamScopeId");
    if let Some(var_821) = &input.ipam_scope_id {
        scope_820.string(var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("Locale");
    if let Some(var_823) = &input.locale {
        scope_822.string(var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("SourceIpamPoolId");
    if let Some(var_825) = &input.source_ipam_pool_id {
        scope_824.string(var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("Description");
    if let Some(var_827) = &input.description {
        scope_826.string(var_827);
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AddressFamily");
    if let Some(var_829) = &input.address_family {
        scope_828.string(var_829.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AutoImport");
    if let Some(var_831) = &input.auto_import {
        scope_830.boolean(*var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_833) = &input.publicly_advertisable {
        scope_832.boolean(*var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_835) = &input.allocation_min_netmask_length {
        scope_834.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_835).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_837) = &input.allocation_max_netmask_length {
        scope_836.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_837).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_839) = &input.allocation_default_netmask_length {
        scope_838.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_839).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("AllocationResourceTag");
    if let Some(var_841) = &input.allocation_resource_tags {
        let mut list_843 = scope_840.start_list(true, Some("item"));
        for item_842 in var_841 {
            #[allow(unused_mut)]
            let mut entry_844 = list_843.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_844, item_842,
            )?;
        }
        list_843.finish();
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("TagSpecification");
    if let Some(var_846) = &input.tag_specifications {
        let mut list_848 = scope_845.start_list(true, Some("item"));
        for item_847 in var_846 {
            #[allow(unused_mut)]
            let mut entry_849 = list_848.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_849, item_847,
            )?;
        }
        list_848.finish();
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("ClientToken");
    if let Some(var_851) = &input.client_token {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("AwsService");
    if let Some(var_853) = &input.aws_service {
        scope_852.string(var_853.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("DryRun");
    if let Some(var_855) = &input.dry_run {
        scope_854.boolean(*var_855);
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("IpamId");
    if let Some(var_857) = &input.ipam_id {
        scope_856.string(var_857);
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("Description");
    if let Some(var_859) = &input.description {
        scope_858.string(var_859);
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("TagSpecification");
    if let Some(var_861) = &input.tag_specifications {
        let mut list_863 = scope_860.start_list(true, Some("item"));
        for item_862 in var_861 {
            #[allow(unused_mut)]
            let mut entry_864 = list_863.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_864, item_862,
            )?;
        }
        list_863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("ClientToken");
    if let Some(var_866) = &input.client_token {
        scope_865.string(var_866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("KeyName");
    if let Some(var_868) = &input.key_name {
        scope_867.string(var_868);
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("DryRun");
    if let Some(var_870) = &input.dry_run {
        scope_869.boolean(*var_870);
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("KeyType");
    if let Some(var_872) = &input.key_type {
        scope_871.string(var_872.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("TagSpecification");
    if let Some(var_874) = &input.tag_specifications {
        let mut list_876 = scope_873.start_list(true, Some("item"));
        for item_875 in var_874 {
            #[allow(unused_mut)]
            let mut entry_877 = list_876.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_877, item_875,
            )?;
        }
        list_876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("KeyFormat");
    if let Some(var_879) = &input.key_format {
        scope_878.string(var_879.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("DryRun");
    if let Some(var_881) = &input.dry_run {
        scope_880.boolean(*var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("ClientToken");
    if let Some(var_883) = &input.client_token {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("LaunchTemplateName");
    if let Some(var_885) = &input.launch_template_name {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("VersionDescription");
    if let Some(var_887) = &input.version_description {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("LaunchTemplateData");
    if let Some(var_889) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_888, var_889,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("TagSpecification");
    if let Some(var_891) = &input.tag_specifications {
        let mut list_893 = scope_890.start_list(true, Some("item"));
        for item_892 in var_891 {
            #[allow(unused_mut)]
            let mut entry_894 = list_893.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_894, item_892,
            )?;
        }
        list_893.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("DryRun");
    if let Some(var_896) = &input.dry_run {
        scope_895.boolean(*var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("ClientToken");
    if let Some(var_898) = &input.client_token {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("LaunchTemplateId");
    if let Some(var_900) = &input.launch_template_id {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("LaunchTemplateName");
    if let Some(var_902) = &input.launch_template_name {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("SourceVersion");
    if let Some(var_904) = &input.source_version {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("VersionDescription");
    if let Some(var_906) = &input.version_description {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("LaunchTemplateData");
    if let Some(var_908) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_907, var_908,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("DestinationCidrBlock");
    if let Some(var_910) = &input.destination_cidr_block {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_912) = &input.local_gateway_route_table_id {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_914) = &input.local_gateway_virtual_interface_group_id {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("DryRun");
    if let Some(var_916) = &input.dry_run {
        scope_915.boolean(*var_916);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_918) = &input.local_gateway_route_table_id {
        scope_917.string(var_918);
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("VpcId");
    if let Some(var_920) = &input.vpc_id {
        scope_919.string(var_920);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("TagSpecification");
    if let Some(var_922) = &input.tag_specifications {
        let mut list_924 = scope_921.start_list(true, Some("item"));
        for item_923 in var_922 {
            #[allow(unused_mut)]
            let mut entry_925 = list_924.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_925, item_923,
            )?;
        }
        list_924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("DryRun");
    if let Some(var_927) = &input.dry_run {
        scope_926.boolean(*var_927);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("DryRun");
    if let Some(var_929) = &input.dry_run {
        scope_928.boolean(*var_929);
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("PrefixListName");
    if let Some(var_931) = &input.prefix_list_name {
        scope_930.string(var_931);
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("Entry");
    if let Some(var_933) = &input.entries {
        let mut list_935 = scope_932.start_list(true, None);
        for item_934 in var_933 {
            #[allow(unused_mut)]
            let mut entry_936 = list_935.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_936, item_934,
            )?;
        }
        list_935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("MaxEntries");
    if let Some(var_938) = &input.max_entries {
        scope_937.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_938).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("TagSpecification");
    if let Some(var_940) = &input.tag_specifications {
        let mut list_942 = scope_939.start_list(true, Some("item"));
        for item_941 in var_940 {
            #[allow(unused_mut)]
            let mut entry_943 = list_942.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_943, item_941,
            )?;
        }
        list_942.finish();
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("AddressFamily");
    if let Some(var_945) = &input.address_family {
        scope_944.string(var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("ClientToken");
    if let Some(var_947) = &input.client_token {
        scope_946.string(var_947);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("AllocationId");
    if let Some(var_949) = &input.allocation_id {
        scope_948.string(var_949);
    }
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("ClientToken");
    if let Some(var_951) = &input.client_token {
        scope_950.string(var_951);
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("DryRun");
    if let Some(var_953) = &input.dry_run {
        scope_952.boolean(*var_953);
    }
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("SubnetId");
    if let Some(var_955) = &input.subnet_id {
        scope_954.string(var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("TagSpecification");
    if let Some(var_957) = &input.tag_specifications {
        let mut list_959 = scope_956.start_list(true, Some("item"));
        for item_958 in var_957 {
            #[allow(unused_mut)]
            let mut entry_960 = list_959.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_960, item_958,
            )?;
        }
        list_959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("ConnectivityType");
    if let Some(var_962) = &input.connectivity_type {
        scope_961.string(var_962.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("DryRun");
    if let Some(var_964) = &input.dry_run {
        scope_963.boolean(*var_964);
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("VpcId");
    if let Some(var_966) = &input.vpc_id {
        scope_965.string(var_966);
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("TagSpecification");
    if let Some(var_968) = &input.tag_specifications {
        let mut list_970 = scope_967.start_list(true, Some("item"));
        for item_969 in var_968 {
            #[allow(unused_mut)]
            let mut entry_971 = list_970.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_971, item_969,
            )?;
        }
        list_970.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("CidrBlock");
    if let Some(var_973) = &input.cidr_block {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("DryRun");
    if let Some(var_975) = &input.dry_run {
        scope_974.boolean(*var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("Egress");
    if let Some(var_977) = &input.egress {
        scope_976.boolean(*var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("Icmp");
    if let Some(var_979) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_978, var_979)?;
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_981) = &input.ipv6_cidr_block {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("NetworkAclId");
    if let Some(var_983) = &input.network_acl_id {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("PortRange");
    if let Some(var_985) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_984, var_985)?;
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("Protocol");
    if let Some(var_987) = &input.protocol {
        scope_986.string(var_987);
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("RuleAction");
    if let Some(var_989) = &input.rule_action {
        scope_988.string(var_989.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("RuleNumber");
    if let Some(var_991) = &input.rule_number {
        scope_990.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_991).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("MatchPath");
    if let Some(var_993) = &input.match_paths {
        let mut list_995 = scope_992.start_list(true, Some("item"));
        for item_994 in var_993 {
            #[allow(unused_mut)]
            let mut entry_996 = list_995.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_996, item_994,
            )?;
        }
        list_995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("ExcludePath");
    if let Some(var_998) = &input.exclude_paths {
        let mut list_1000 = scope_997.start_list(true, Some("item"));
        for item_999 in var_998 {
            #[allow(unused_mut)]
            let mut entry_1001 = list_1000.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_1001, item_999,
            )?;
        }
        list_1000.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("ClientToken");
    if let Some(var_1003) = &input.client_token {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("TagSpecification");
    if let Some(var_1005) = &input.tag_specifications {
        let mut list_1007 = scope_1004.start_list(true, Some("item"));
        for item_1006 in var_1005 {
            #[allow(unused_mut)]
            let mut entry_1008 = list_1007.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1008, item_1006,
            )?;
        }
        list_1007.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("DryRun");
    if let Some(var_1010) = &input.dry_run {
        scope_1009.boolean(*var_1010);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("SourceIp");
    if let Some(var_1012) = &input.source_ip {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("DestinationIp");
    if let Some(var_1014) = &input.destination_ip {
        scope_1013.string(var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("Source");
    if let Some(var_1016) = &input.source {
        scope_1015.string(var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("Destination");
    if let Some(var_1018) = &input.destination {
        scope_1017.string(var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("Protocol");
    if let Some(var_1020) = &input.protocol {
        scope_1019.string(var_1020.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("DestinationPort");
    if let Some(var_1022) = &input.destination_port {
        scope_1021.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1022).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("TagSpecification");
    if let Some(var_1024) = &input.tag_specifications {
        let mut list_1026 = scope_1023.start_list(true, Some("item"));
        for item_1025 in var_1024 {
            #[allow(unused_mut)]
            let mut entry_1027 = list_1026.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1027, item_1025,
            )?;
        }
        list_1026.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("DryRun");
    if let Some(var_1029) = &input.dry_run {
        scope_1028.boolean(*var_1029);
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("ClientToken");
    if let Some(var_1031) = &input.client_token {
        scope_1030.string(var_1031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("Description");
    if let Some(var_1033) = &input.description {
        scope_1032.string(var_1033);
    }
    #[allow(unused_mut)]
    let mut scope_1034 = writer.prefix("DryRun");
    if let Some(var_1035) = &input.dry_run {
        scope_1034.boolean(*var_1035);
    }
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("SecurityGroupId");
    if let Some(var_1037) = &input.groups {
        let mut list_1039 = scope_1036.start_list(true, Some("SecurityGroupId"));
        for item_1038 in var_1037 {
            #[allow(unused_mut)]
            let mut entry_1040 = list_1039.entry();
            entry_1040.string(item_1038);
        }
        list_1039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1042) = &input.ipv6_address_count {
        scope_1041.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1042).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("Ipv6Addresses");
    if let Some(var_1044) = &input.ipv6_addresses {
        let mut list_1046 = scope_1043.start_list(true, Some("item"));
        for item_1045 in var_1044 {
            #[allow(unused_mut)]
            let mut entry_1047 = list_1046.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1047, item_1045,
            )?;
        }
        list_1046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("PrivateIpAddress");
    if let Some(var_1049) = &input.private_ip_address {
        scope_1048.string(var_1049);
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1051) = &input.private_ip_addresses {
        let mut list_1053 = scope_1050.start_list(true, Some("item"));
        for item_1052 in var_1051 {
            #[allow(unused_mut)]
            let mut entry_1054 = list_1053.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1054, item_1052,
            )?;
        }
        list_1053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1056) = &input.secondary_private_ip_address_count {
        scope_1055.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1056).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("Ipv4Prefix");
    if let Some(var_1058) = &input.ipv4_prefixes {
        let mut list_1060 = scope_1057.start_list(true, Some("item"));
        for item_1059 in var_1058 {
            #[allow(unused_mut)]
            let mut entry_1061 = list_1060.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1061, item_1059,
            )?;
        }
        list_1060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1063) = &input.ipv4_prefix_count {
        scope_1062.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1063).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("Ipv6Prefix");
    if let Some(var_1065) = &input.ipv6_prefixes {
        let mut list_1067 = scope_1064.start_list(true, Some("item"));
        for item_1066 in var_1065 {
            #[allow(unused_mut)]
            let mut entry_1068 = list_1067.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1068, item_1066,
            )?;
        }
        list_1067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1070) = &input.ipv6_prefix_count {
        scope_1069.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1070).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("InterfaceType");
    if let Some(var_1072) = &input.interface_type {
        scope_1071.string(var_1072.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("SubnetId");
    if let Some(var_1074) = &input.subnet_id {
        scope_1073.string(var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("TagSpecification");
    if let Some(var_1076) = &input.tag_specifications {
        let mut list_1078 = scope_1075.start_list(true, Some("item"));
        for item_1077 in var_1076 {
            #[allow(unused_mut)]
            let mut entry_1079 = list_1078.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1079, item_1077,
            )?;
        }
        list_1078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("ClientToken");
    if let Some(var_1081) = &input.client_token {
        scope_1080.string(var_1081);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1083) = &input.network_interface_id {
        scope_1082.string(var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("AwsAccountId");
    if let Some(var_1085) = &input.aws_account_id {
        scope_1084.string(var_1085);
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("AwsService");
    if let Some(var_1087) = &input.aws_service {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("Permission");
    if let Some(var_1089) = &input.permission {
        scope_1088.string(var_1089.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("DryRun");
    if let Some(var_1091) = &input.dry_run {
        scope_1090.boolean(*var_1091);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("DryRun");
    if let Some(var_1093) = &input.dry_run {
        scope_1092.boolean(*var_1093);
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("GroupName");
    if let Some(var_1095) = &input.group_name {
        scope_1094.string(var_1095);
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("Strategy");
    if let Some(var_1097) = &input.strategy {
        scope_1096.string(var_1097.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("PartitionCount");
    if let Some(var_1099) = &input.partition_count {
        scope_1098.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1099).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("TagSpecification");
    if let Some(var_1101) = &input.tag_specifications {
        let mut list_1103 = scope_1100.start_list(true, Some("item"));
        for item_1102 in var_1101 {
            #[allow(unused_mut)]
            let mut entry_1104 = list_1103.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1104, item_1102,
            )?;
        }
        list_1103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("SpreadLevel");
    if let Some(var_1106) = &input.spread_level {
        scope_1105.string(var_1106.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("DryRun");
    if let Some(var_1108) = &input.dry_run {
        scope_1107.boolean(*var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("TagSpecification");
    if let Some(var_1110) = &input.tag_specifications {
        let mut list_1112 = scope_1109.start_list(true, Some("item"));
        for item_1111 in var_1110 {
            #[allow(unused_mut)]
            let mut entry_1113 = list_1112.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1113, item_1111,
            )?;
        }
        list_1112.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("InstanceId");
    if let Some(var_1115) = &input.instance_id {
        scope_1114.string(var_1115);
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("SnapshotId");
    if let Some(var_1117) = &input.snapshot_id {
        scope_1116.string(var_1117);
    }
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("ClientToken");
    if let Some(var_1119) = &input.client_token {
        scope_1118.string(var_1119);
    }
    #[allow(unused_mut)]
    let mut scope_1120 = writer.prefix("DryRun");
    if let Some(var_1121) = &input.dry_run {
        scope_1120.boolean(*var_1121);
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("TagSpecification");
    if let Some(var_1123) = &input.tag_specifications {
        let mut list_1125 = scope_1122.start_list(true, Some("item"));
        for item_1124 in var_1123 {
            #[allow(unused_mut)]
            let mut entry_1126 = list_1125.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1126, item_1124,
            )?;
        }
        list_1125.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("ClientToken");
    if let Some(var_1128) = &input.client_token {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("InstanceCount");
    if let Some(var_1130) = &input.instance_count {
        scope_1129.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1130).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("PriceSchedules");
    if let Some(var_1132) = &input.price_schedules {
        let mut list_1134 = scope_1131.start_list(true, Some("item"));
        for item_1133 in var_1132 {
            #[allow(unused_mut)]
            let mut entry_1135 = list_1134.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1135, item_1133,
            )?;
        }
        list_1134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("ReservedInstancesId");
    if let Some(var_1137) = &input.reserved_instances_id {
        scope_1136.string(var_1137);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("Bucket");
    if let Some(var_1139) = &input.bucket {
        scope_1138.string(var_1139);
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("ObjectKey");
    if let Some(var_1141) = &input.object_key {
        scope_1140.string(var_1141);
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("Name");
    if let Some(var_1143) = &input.name {
        scope_1142.string(var_1143);
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("TagSpecification");
    if let Some(var_1145) = &input.tag_specifications {
        let mut list_1147 = scope_1144.start_list(true, Some("item"));
        for item_1146 in var_1145 {
            #[allow(unused_mut)]
            let mut entry_1148 = list_1147.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1148, item_1146,
            )?;
        }
        list_1147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("DryRun");
    if let Some(var_1150) = &input.dry_run {
        scope_1149.boolean(*var_1150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1152) = &input.destination_cidr_block {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1154) = &input.destination_ipv6_cidr_block {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1156) = &input.destination_prefix_list_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("DryRun");
    if let Some(var_1158) = &input.dry_run {
        scope_1157.boolean(*var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("VpcEndpointId");
    if let Some(var_1160) = &input.vpc_endpoint_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1162) = &input.egress_only_internet_gateway_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("GatewayId");
    if let Some(var_1164) = &input.gateway_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("InstanceId");
    if let Some(var_1166) = &input.instance_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("NatGatewayId");
    if let Some(var_1168) = &input.nat_gateway_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("TransitGatewayId");
    if let Some(var_1170) = &input.transit_gateway_id {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("LocalGatewayId");
    if let Some(var_1172) = &input.local_gateway_id {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("CarrierGatewayId");
    if let Some(var_1174) = &input.carrier_gateway_id {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1176) = &input.network_interface_id {
        scope_1175.string(var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("RouteTableId");
    if let Some(var_1178) = &input.route_table_id {
        scope_1177.string(var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1180) = &input.vpc_peering_connection_id {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("CoreNetworkArn");
    if let Some(var_1182) = &input.core_network_arn {
        scope_1181.string(var_1182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("DryRun");
    if let Some(var_1184) = &input.dry_run {
        scope_1183.boolean(*var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("VpcId");
    if let Some(var_1186) = &input.vpc_id {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("TagSpecification");
    if let Some(var_1188) = &input.tag_specifications {
        let mut list_1190 = scope_1187.start_list(true, Some("item"));
        for item_1189 in var_1188 {
            #[allow(unused_mut)]
            let mut entry_1191 = list_1190.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1191, item_1189,
            )?;
        }
        list_1190.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("GroupDescription");
    if let Some(var_1193) = &input.description {
        scope_1192.string(var_1193);
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("GroupName");
    if let Some(var_1195) = &input.group_name {
        scope_1194.string(var_1195);
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("VpcId");
    if let Some(var_1197) = &input.vpc_id {
        scope_1196.string(var_1197);
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("TagSpecification");
    if let Some(var_1199) = &input.tag_specifications {
        let mut list_1201 = scope_1198.start_list(true, Some("item"));
        for item_1200 in var_1199 {
            #[allow(unused_mut)]
            let mut entry_1202 = list_1201.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1202, item_1200,
            )?;
        }
        list_1201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("DryRun");
    if let Some(var_1204) = &input.dry_run {
        scope_1203.boolean(*var_1204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("Description");
    if let Some(var_1206) = &input.description {
        scope_1205.string(var_1206);
    }
    #[allow(unused_mut)]
    let mut scope_1207 = writer.prefix("OutpostArn");
    if let Some(var_1208) = &input.outpost_arn {
        scope_1207.string(var_1208);
    }
    #[allow(unused_mut)]
    let mut scope_1209 = writer.prefix("VolumeId");
    if let Some(var_1210) = &input.volume_id {
        scope_1209.string(var_1210);
    }
    #[allow(unused_mut)]
    let mut scope_1211 = writer.prefix("TagSpecification");
    if let Some(var_1212) = &input.tag_specifications {
        let mut list_1214 = scope_1211.start_list(true, Some("item"));
        for item_1213 in var_1212 {
            #[allow(unused_mut)]
            let mut entry_1215 = list_1214.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1215, item_1213,
            )?;
        }
        list_1214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("DryRun");
    if let Some(var_1217) = &input.dry_run {
        scope_1216.boolean(*var_1217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("Description");
    if let Some(var_1219) = &input.description {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("InstanceSpecification");
    if let Some(var_1221) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1220, var_1221,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("OutpostArn");
    if let Some(var_1223) = &input.outpost_arn {
        scope_1222.string(var_1223);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("TagSpecification");
    if let Some(var_1225) = &input.tag_specifications {
        let mut list_1227 = scope_1224.start_list(true, Some("item"));
        for item_1226 in var_1225 {
            #[allow(unused_mut)]
            let mut entry_1228 = list_1227.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1228, item_1226,
            )?;
        }
        list_1227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("DryRun");
    if let Some(var_1230) = &input.dry_run {
        scope_1229.boolean(*var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1232) = &input.copy_tags_from_source {
        scope_1231.string(var_1232.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("Bucket");
    if let Some(var_1234) = &input.bucket {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("DryRun");
    if let Some(var_1236) = &input.dry_run {
        scope_1235.boolean(*var_1236);
    }
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("Prefix");
    if let Some(var_1238) = &input.prefix {
        scope_1237.string(var_1238);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("ImageId");
    if let Some(var_1240) = &input.image_id {
        scope_1239.string(var_1240);
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("Bucket");
    if let Some(var_1242) = &input.bucket {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("S3ObjectTag");
    if let Some(var_1244) = &input.s3_object_tags {
        let mut list_1246 = scope_1243.start_list(true, Some("item"));
        for item_1245 in var_1244 {
            #[allow(unused_mut)]
            let mut entry_1247 = list_1246.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1247, item_1245)?;
        }
        list_1246.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1248 = writer.prefix("DryRun");
    if let Some(var_1249) = &input.dry_run {
        scope_1248.boolean(*var_1249);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1250 = writer.prefix("TagSpecification");
    if let Some(var_1251) = &input.tag_specifications {
        let mut list_1253 = scope_1250.start_list(true, Some("item"));
        for item_1252 in var_1251 {
            #[allow(unused_mut)]
            let mut entry_1254 = list_1253.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1254, item_1252,
            )?;
        }
        list_1253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("AvailabilityZone");
    if let Some(var_1256) = &input.availability_zone {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1258) = &input.availability_zone_id {
        scope_1257.string(var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("CidrBlock");
    if let Some(var_1260) = &input.cidr_block {
        scope_1259.string(var_1260);
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1262) = &input.ipv6_cidr_block {
        scope_1261.string(var_1262);
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("OutpostArn");
    if let Some(var_1264) = &input.outpost_arn {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("VpcId");
    if let Some(var_1266) = &input.vpc_id {
        scope_1265.string(var_1266);
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("DryRun");
    if let Some(var_1268) = &input.dry_run {
        scope_1267.boolean(*var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("Ipv6Native");
    if let Some(var_1270) = &input.ipv6_native {
        scope_1269.boolean(*var_1270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("SubnetId");
    if let Some(var_1272) = &input.subnet_id {
        scope_1271.string(var_1272);
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("Cidr");
    if let Some(var_1274) = &input.cidr {
        scope_1273.string(var_1274);
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("ReservationType");
    if let Some(var_1276) = &input.reservation_type {
        scope_1275.string(var_1276.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("Description");
    if let Some(var_1278) = &input.description {
        scope_1277.string(var_1278);
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("DryRun");
    if let Some(var_1280) = &input.dry_run {
        scope_1279.boolean(*var_1280);
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("TagSpecification");
    if let Some(var_1282) = &input.tag_specifications {
        let mut list_1284 = scope_1281.start_list(true, Some("item"));
        for item_1283 in var_1282 {
            #[allow(unused_mut)]
            let mut entry_1285 = list_1284.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1285, item_1283,
            )?;
        }
        list_1284.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("DryRun");
    if let Some(var_1287) = &input.dry_run {
        scope_1286.boolean(*var_1287);
    }
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("ResourceId");
    if let Some(var_1289) = &input.resources {
        let mut list_1291 = scope_1288.start_list(true, None);
        for item_1290 in var_1289 {
            #[allow(unused_mut)]
            let mut entry_1292 = list_1291.entry();
            entry_1292.string(item_1290);
        }
        list_1291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("Tag");
    if let Some(var_1294) = &input.tags {
        let mut list_1296 = scope_1293.start_list(true, Some("item"));
        for item_1295 in var_1294 {
            #[allow(unused_mut)]
            let mut entry_1297 = list_1296.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1297, item_1295)?;
        }
        list_1296.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1298 = writer.prefix("Description");
    if let Some(var_1299) = &input.description {
        scope_1298.string(var_1299);
    }
    #[allow(unused_mut)]
    let mut scope_1300 = writer.prefix("TagSpecification");
    if let Some(var_1301) = &input.tag_specifications {
        let mut list_1303 = scope_1300.start_list(true, Some("item"));
        for item_1302 in var_1301 {
            #[allow(unused_mut)]
            let mut entry_1304 = list_1303.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1304, item_1302,
            )?;
        }
        list_1303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("DryRun");
    if let Some(var_1306) = &input.dry_run {
        scope_1305.boolean(*var_1306);
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("ClientToken");
    if let Some(var_1308) = &input.client_token {
        scope_1307.string(var_1308);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1310) = &input.traffic_mirror_filter_id {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("TrafficDirection");
    if let Some(var_1312) = &input.traffic_direction {
        scope_1311.string(var_1312.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("RuleNumber");
    if let Some(var_1314) = &input.rule_number {
        scope_1313.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1314).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("RuleAction");
    if let Some(var_1316) = &input.rule_action {
        scope_1315.string(var_1316.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("DestinationPortRange");
    if let Some(var_1318) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1317, var_1318,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("SourcePortRange");
    if let Some(var_1320) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1319, var_1320,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("Protocol");
    if let Some(var_1322) = &input.protocol {
        scope_1321.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1322).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1324) = &input.destination_cidr_block {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("SourceCidrBlock");
    if let Some(var_1326) = &input.source_cidr_block {
        scope_1325.string(var_1326);
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("Description");
    if let Some(var_1328) = &input.description {
        scope_1327.string(var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("DryRun");
    if let Some(var_1330) = &input.dry_run {
        scope_1329.boolean(*var_1330);
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("ClientToken");
    if let Some(var_1332) = &input.client_token {
        scope_1331.string(var_1332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1334) = &input.network_interface_id {
        scope_1333.string(var_1334);
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1336) = &input.traffic_mirror_target_id {
        scope_1335.string(var_1336);
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1338) = &input.traffic_mirror_filter_id {
        scope_1337.string(var_1338);
    }
    #[allow(unused_mut)]
    let mut scope_1339 = writer.prefix("PacketLength");
    if let Some(var_1340) = &input.packet_length {
        scope_1339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("SessionNumber");
    if let Some(var_1342) = &input.session_number {
        scope_1341.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1342).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1343 = writer.prefix("VirtualNetworkId");
    if let Some(var_1344) = &input.virtual_network_id {
        scope_1343.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1344).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1345 = writer.prefix("Description");
    if let Some(var_1346) = &input.description {
        scope_1345.string(var_1346);
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("TagSpecification");
    if let Some(var_1348) = &input.tag_specifications {
        let mut list_1350 = scope_1347.start_list(true, Some("item"));
        for item_1349 in var_1348 {
            #[allow(unused_mut)]
            let mut entry_1351 = list_1350.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1351, item_1349,
            )?;
        }
        list_1350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("DryRun");
    if let Some(var_1353) = &input.dry_run {
        scope_1352.boolean(*var_1353);
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("ClientToken");
    if let Some(var_1355) = &input.client_token {
        scope_1354.string(var_1355);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1357) = &input.network_interface_id {
        scope_1356.string(var_1357);
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1359) = &input.network_load_balancer_arn {
        scope_1358.string(var_1359);
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("Description");
    if let Some(var_1361) = &input.description {
        scope_1360.string(var_1361);
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("TagSpecification");
    if let Some(var_1363) = &input.tag_specifications {
        let mut list_1365 = scope_1362.start_list(true, Some("item"));
        for item_1364 in var_1363 {
            #[allow(unused_mut)]
            let mut entry_1366 = list_1365.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1366, item_1364,
            )?;
        }
        list_1365.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("DryRun");
    if let Some(var_1368) = &input.dry_run {
        scope_1367.boolean(*var_1368);
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("ClientToken");
    if let Some(var_1370) = &input.client_token {
        scope_1369.string(var_1370);
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("GatewayLoadBalancerEndpointId");
    if let Some(var_1372) = &input.gateway_load_balancer_endpoint_id {
        scope_1371.string(var_1372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("Description");
    if let Some(var_1374) = &input.description {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("Options");
    if let Some(var_1376) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1375, var_1376,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("TagSpecification");
    if let Some(var_1378) = &input.tag_specifications {
        let mut list_1380 = scope_1377.start_list(true, Some("item"));
        for item_1379 in var_1378 {
            #[allow(unused_mut)]
            let mut entry_1381 = list_1380.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1381, item_1379,
            )?;
        }
        list_1380.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("DryRun");
    if let Some(var_1383) = &input.dry_run {
        scope_1382.boolean(*var_1383);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1385) = &input.transport_transit_gateway_attachment_id {
        scope_1384.string(var_1385);
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("Options");
    if let Some(var_1387) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1386, var_1387)?;
    }
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("TagSpecification");
    if let Some(var_1389) = &input.tag_specifications {
        let mut list_1391 = scope_1388.start_list(true, Some("item"));
        for item_1390 in var_1389 {
            #[allow(unused_mut)]
            let mut entry_1392 = list_1391.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1392, item_1390,
            )?;
        }
        list_1391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("DryRun");
    if let Some(var_1394) = &input.dry_run {
        scope_1393.boolean(*var_1394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1396) = &input.transit_gateway_attachment_id {
        scope_1395.string(var_1396);
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1398) = &input.transit_gateway_address {
        scope_1397.string(var_1398);
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("PeerAddress");
    if let Some(var_1400) = &input.peer_address {
        scope_1399.string(var_1400);
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("BgpOptions");
    if let Some(var_1402) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1401, var_1402)?;
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1404) = &input.inside_cidr_blocks {
        let mut list_1406 = scope_1403.start_list(true, Some("item"));
        for item_1405 in var_1404 {
            #[allow(unused_mut)]
            let mut entry_1407 = list_1406.entry();
            entry_1407.string(item_1405);
        }
        list_1406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("TagSpecification");
    if let Some(var_1409) = &input.tag_specifications {
        let mut list_1411 = scope_1408.start_list(true, Some("item"));
        for item_1410 in var_1409 {
            #[allow(unused_mut)]
            let mut entry_1412 = list_1411.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1412, item_1410,
            )?;
        }
        list_1411.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("DryRun");
    if let Some(var_1414) = &input.dry_run {
        scope_1413.boolean(*var_1414);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("TransitGatewayId");
    if let Some(var_1416) = &input.transit_gateway_id {
        scope_1415.string(var_1416);
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("Options");
    if let Some(var_1418) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1417, var_1418)?;
    }
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("TagSpecification");
    if let Some(var_1420) = &input.tag_specifications {
        let mut list_1422 = scope_1419.start_list(true, Some("item"));
        for item_1421 in var_1420 {
            #[allow(unused_mut)]
            let mut entry_1423 = list_1422.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1423, item_1421,
            )?;
        }
        list_1422.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("DryRun");
    if let Some(var_1425) = &input.dry_run {
        scope_1424.boolean(*var_1425);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("TransitGatewayId");
    if let Some(var_1427) = &input.transit_gateway_id {
        scope_1426.string(var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1429) = &input.peer_transit_gateway_id {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("PeerAccountId");
    if let Some(var_1431) = &input.peer_account_id {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("PeerRegion");
    if let Some(var_1433) = &input.peer_region {
        scope_1432.string(var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("Options");
    if let Some(var_1435) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_peering_attachment_request_options(scope_1434, var_1435)?;
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("TagSpecification");
    if let Some(var_1437) = &input.tag_specifications {
        let mut list_1439 = scope_1436.start_list(true, Some("item"));
        for item_1438 in var_1437 {
            #[allow(unused_mut)]
            let mut entry_1440 = list_1439.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1440, item_1438,
            )?;
        }
        list_1439.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("DryRun");
    if let Some(var_1442) = &input.dry_run {
        scope_1441.boolean(*var_1442);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_policy_table(
    input: &crate::input::CreateTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("TransitGatewayId");
    if let Some(var_1444) = &input.transit_gateway_id {
        scope_1443.string(var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("TagSpecifications");
    if let Some(var_1446) = &input.tag_specifications {
        let mut list_1448 = scope_1445.start_list(true, Some("item"));
        for item_1447 in var_1446 {
            #[allow(unused_mut)]
            let mut entry_1449 = list_1448.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1449, item_1447,
            )?;
        }
        list_1448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("DryRun");
    if let Some(var_1451) = &input.dry_run {
        scope_1450.boolean(*var_1451);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1453) = &input.transit_gateway_route_table_id {
        scope_1452.string(var_1453);
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("PrefixListId");
    if let Some(var_1455) = &input.prefix_list_id {
        scope_1454.string(var_1455);
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1457) = &input.transit_gateway_attachment_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Blackhole");
    if let Some(var_1459) = &input.blackhole {
        scope_1458.boolean(*var_1459);
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("DryRun");
    if let Some(var_1461) = &input.dry_run {
        scope_1460.boolean(*var_1461);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1463) = &input.destination_cidr_block {
        scope_1462.string(var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1465) = &input.transit_gateway_route_table_id {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1467) = &input.transit_gateway_attachment_id {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("Blackhole");
    if let Some(var_1469) = &input.blackhole {
        scope_1468.boolean(*var_1469);
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("DryRun");
    if let Some(var_1471) = &input.dry_run {
        scope_1470.boolean(*var_1471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("TransitGatewayId");
    if let Some(var_1473) = &input.transit_gateway_id {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("TagSpecifications");
    if let Some(var_1475) = &input.tag_specifications {
        let mut list_1477 = scope_1474.start_list(true, Some("item"));
        for item_1476 in var_1475 {
            #[allow(unused_mut)]
            let mut entry_1478 = list_1477.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1478, item_1476,
            )?;
        }
        list_1477.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1479 = writer.prefix("DryRun");
    if let Some(var_1480) = &input.dry_run {
        scope_1479.boolean(*var_1480);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table_announcement(
    input: &crate::input::CreateTransitGatewayRouteTableAnnouncementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTableAnnouncement",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1481 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1482) = &input.transit_gateway_route_table_id {
        scope_1481.string(var_1482);
    }
    #[allow(unused_mut)]
    let mut scope_1483 = writer.prefix("PeeringAttachmentId");
    if let Some(var_1484) = &input.peering_attachment_id {
        scope_1483.string(var_1484);
    }
    #[allow(unused_mut)]
    let mut scope_1485 = writer.prefix("TagSpecification");
    if let Some(var_1486) = &input.tag_specifications {
        let mut list_1488 = scope_1485.start_list(true, Some("item"));
        for item_1487 in var_1486 {
            #[allow(unused_mut)]
            let mut entry_1489 = list_1488.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1489, item_1487,
            )?;
        }
        list_1488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("DryRun");
    if let Some(var_1491) = &input.dry_run {
        scope_1490.boolean(*var_1491);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("TransitGatewayId");
    if let Some(var_1493) = &input.transit_gateway_id {
        scope_1492.string(var_1493);
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("VpcId");
    if let Some(var_1495) = &input.vpc_id {
        scope_1494.string(var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("SubnetIds");
    if let Some(var_1497) = &input.subnet_ids {
        let mut list_1499 = scope_1496.start_list(true, Some("item"));
        for item_1498 in var_1497 {
            #[allow(unused_mut)]
            let mut entry_1500 = list_1499.entry();
            entry_1500.string(item_1498);
        }
        list_1499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("Options");
    if let Some(var_1502) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1501, var_1502)?;
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("TagSpecifications");
    if let Some(var_1504) = &input.tag_specifications {
        let mut list_1506 = scope_1503.start_list(true, Some("item"));
        for item_1505 in var_1504 {
            #[allow(unused_mut)]
            let mut entry_1507 = list_1506.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1507, item_1505,
            )?;
        }
        list_1506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("DryRun");
    if let Some(var_1509) = &input.dry_run {
        scope_1508.boolean(*var_1509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("AvailabilityZone");
    if let Some(var_1511) = &input.availability_zone {
        scope_1510.string(var_1511);
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("Encrypted");
    if let Some(var_1513) = &input.encrypted {
        scope_1512.boolean(*var_1513);
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("Iops");
    if let Some(var_1515) = &input.iops {
        scope_1514.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1515).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("KmsKeyId");
    if let Some(var_1517) = &input.kms_key_id {
        scope_1516.string(var_1517);
    }
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("OutpostArn");
    if let Some(var_1519) = &input.outpost_arn {
        scope_1518.string(var_1519);
    }
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("Size");
    if let Some(var_1521) = &input.size {
        scope_1520.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1521).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("SnapshotId");
    if let Some(var_1523) = &input.snapshot_id {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("VolumeType");
    if let Some(var_1525) = &input.volume_type {
        scope_1524.string(var_1525.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("DryRun");
    if let Some(var_1527) = &input.dry_run {
        scope_1526.boolean(*var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("TagSpecification");
    if let Some(var_1529) = &input.tag_specifications {
        let mut list_1531 = scope_1528.start_list(true, Some("item"));
        for item_1530 in var_1529 {
            #[allow(unused_mut)]
            let mut entry_1532 = list_1531.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1532, item_1530,
            )?;
        }
        list_1531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1534) = &input.multi_attach_enabled {
        scope_1533.boolean(*var_1534);
    }
    #[allow(unused_mut)]
    let mut scope_1535 = writer.prefix("Throughput");
    if let Some(var_1536) = &input.throughput {
        scope_1535.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1536).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("ClientToken");
    if let Some(var_1538) = &input.client_token {
        scope_1537.string(var_1538);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1539 = writer.prefix("CidrBlock");
    if let Some(var_1540) = &input.cidr_block {
        scope_1539.string(var_1540);
    }
    #[allow(unused_mut)]
    let mut scope_1541 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1542) = &input.amazon_provided_ipv6_cidr_block {
        scope_1541.boolean(*var_1542);
    }
    #[allow(unused_mut)]
    let mut scope_1543 = writer.prefix("Ipv6Pool");
    if let Some(var_1544) = &input.ipv6_pool {
        scope_1543.string(var_1544);
    }
    #[allow(unused_mut)]
    let mut scope_1545 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1546) = &input.ipv6_cidr_block {
        scope_1545.string(var_1546);
    }
    #[allow(unused_mut)]
    let mut scope_1547 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1548) = &input.ipv4_ipam_pool_id {
        scope_1547.string(var_1548);
    }
    #[allow(unused_mut)]
    let mut scope_1549 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1550) = &input.ipv4_netmask_length {
        scope_1549.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1550).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1551 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1552) = &input.ipv6_ipam_pool_id {
        scope_1551.string(var_1552);
    }
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1554) = &input.ipv6_netmask_length {
        scope_1553.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1554).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("DryRun");
    if let Some(var_1556) = &input.dry_run {
        scope_1555.boolean(*var_1556);
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("InstanceTenancy");
    if let Some(var_1558) = &input.instance_tenancy {
        scope_1557.string(var_1558.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1560) = &input.ipv6_cidr_block_network_border_group {
        scope_1559.string(var_1560);
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("TagSpecification");
    if let Some(var_1562) = &input.tag_specifications {
        let mut list_1564 = scope_1561.start_list(true, Some("item"));
        for item_1563 in var_1562 {
            #[allow(unused_mut)]
            let mut entry_1565 = list_1564.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1565, item_1563,
            )?;
        }
        list_1564.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("DryRun");
    if let Some(var_1567) = &input.dry_run {
        scope_1566.boolean(*var_1567);
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("VpcEndpointType");
    if let Some(var_1569) = &input.vpc_endpoint_type {
        scope_1568.string(var_1569.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("VpcId");
    if let Some(var_1571) = &input.vpc_id {
        scope_1570.string(var_1571);
    }
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("ServiceName");
    if let Some(var_1573) = &input.service_name {
        scope_1572.string(var_1573);
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("PolicyDocument");
    if let Some(var_1575) = &input.policy_document {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("RouteTableId");
    if let Some(var_1577) = &input.route_table_ids {
        let mut list_1579 = scope_1576.start_list(true, Some("item"));
        for item_1578 in var_1577 {
            #[allow(unused_mut)]
            let mut entry_1580 = list_1579.entry();
            entry_1580.string(item_1578);
        }
        list_1579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("SubnetId");
    if let Some(var_1582) = &input.subnet_ids {
        let mut list_1584 = scope_1581.start_list(true, Some("item"));
        for item_1583 in var_1582 {
            #[allow(unused_mut)]
            let mut entry_1585 = list_1584.entry();
            entry_1585.string(item_1583);
        }
        list_1584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1586 = writer.prefix("SecurityGroupId");
    if let Some(var_1587) = &input.security_group_ids {
        let mut list_1589 = scope_1586.start_list(true, Some("item"));
        for item_1588 in var_1587 {
            #[allow(unused_mut)]
            let mut entry_1590 = list_1589.entry();
            entry_1590.string(item_1588);
        }
        list_1589.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("IpAddressType");
    if let Some(var_1592) = &input.ip_address_type {
        scope_1591.string(var_1592.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("DnsOptions");
    if let Some(var_1594) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_1593, var_1594,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("ClientToken");
    if let Some(var_1596) = &input.client_token {
        scope_1595.string(var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1598) = &input.private_dns_enabled {
        scope_1597.boolean(*var_1598);
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("TagSpecification");
    if let Some(var_1600) = &input.tag_specifications {
        let mut list_1602 = scope_1599.start_list(true, Some("item"));
        for item_1601 in var_1600 {
            #[allow(unused_mut)]
            let mut entry_1603 = list_1602.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1603, item_1601,
            )?;
        }
        list_1602.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("DryRun");
    if let Some(var_1605) = &input.dry_run {
        scope_1604.boolean(*var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("ServiceId");
    if let Some(var_1607) = &input.service_id {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("VpcEndpointId");
    if let Some(var_1609) = &input.vpc_endpoint_id {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1611) = &input.connection_notification_arn {
        scope_1610.string(var_1611);
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("ConnectionEvents");
    if let Some(var_1613) = &input.connection_events {
        let mut list_1615 = scope_1612.start_list(true, Some("item"));
        for item_1614 in var_1613 {
            #[allow(unused_mut)]
            let mut entry_1616 = list_1615.entry();
            entry_1616.string(item_1614);
        }
        list_1615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("ClientToken");
    if let Some(var_1618) = &input.client_token {
        scope_1617.string(var_1618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("DryRun");
    if let Some(var_1620) = &input.dry_run {
        scope_1619.boolean(*var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("AcceptanceRequired");
    if let Some(var_1622) = &input.acceptance_required {
        scope_1621.boolean(*var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("PrivateDnsName");
    if let Some(var_1624) = &input.private_dns_name {
        scope_1623.string(var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1626) = &input.network_load_balancer_arns {
        let mut list_1628 = scope_1625.start_list(true, Some("item"));
        for item_1627 in var_1626 {
            #[allow(unused_mut)]
            let mut entry_1629 = list_1628.entry();
            entry_1629.string(item_1627);
        }
        list_1628.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1631) = &input.gateway_load_balancer_arns {
        let mut list_1633 = scope_1630.start_list(true, Some("item"));
        for item_1632 in var_1631 {
            #[allow(unused_mut)]
            let mut entry_1634 = list_1633.entry();
            entry_1634.string(item_1632);
        }
        list_1633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1635 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1636) = &input.supported_ip_address_types {
        let mut list_1638 = scope_1635.start_list(true, Some("item"));
        for item_1637 in var_1636 {
            #[allow(unused_mut)]
            let mut entry_1639 = list_1638.entry();
            entry_1639.string(item_1637);
        }
        list_1638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("ClientToken");
    if let Some(var_1641) = &input.client_token {
        scope_1640.string(var_1641);
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("TagSpecification");
    if let Some(var_1643) = &input.tag_specifications {
        let mut list_1645 = scope_1642.start_list(true, Some("item"));
        for item_1644 in var_1643 {
            #[allow(unused_mut)]
            let mut entry_1646 = list_1645.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1646, item_1644,
            )?;
        }
        list_1645.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("DryRun");
    if let Some(var_1648) = &input.dry_run {
        scope_1647.boolean(*var_1648);
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("PeerOwnerId");
    if let Some(var_1650) = &input.peer_owner_id {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("PeerVpcId");
    if let Some(var_1652) = &input.peer_vpc_id {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("VpcId");
    if let Some(var_1654) = &input.vpc_id {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("PeerRegion");
    if let Some(var_1656) = &input.peer_region {
        scope_1655.string(var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("TagSpecification");
    if let Some(var_1658) = &input.tag_specifications {
        let mut list_1660 = scope_1657.start_list(true, Some("item"));
        for item_1659 in var_1658 {
            #[allow(unused_mut)]
            let mut entry_1661 = list_1660.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1661, item_1659,
            )?;
        }
        list_1660.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("CustomerGatewayId");
    if let Some(var_1663) = &input.customer_gateway_id {
        scope_1662.string(var_1663);
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("Type");
    if let Some(var_1665) = &input.r#type {
        scope_1664.string(var_1665);
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("VpnGatewayId");
    if let Some(var_1667) = &input.vpn_gateway_id {
        scope_1666.string(var_1667);
    }
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("TransitGatewayId");
    if let Some(var_1669) = &input.transit_gateway_id {
        scope_1668.string(var_1669);
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("DryRun");
    if let Some(var_1671) = &input.dry_run {
        scope_1670.boolean(*var_1671);
    }
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("Options");
    if let Some(var_1673) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1672, var_1673,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("TagSpecification");
    if let Some(var_1675) = &input.tag_specifications {
        let mut list_1677 = scope_1674.start_list(true, Some("item"));
        for item_1676 in var_1675 {
            #[allow(unused_mut)]
            let mut entry_1678 = list_1677.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1678, item_1676,
            )?;
        }
        list_1677.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1680) = &input.destination_cidr_block {
        scope_1679.string(var_1680);
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("VpnConnectionId");
    if let Some(var_1682) = &input.vpn_connection_id {
        scope_1681.string(var_1682);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("AvailabilityZone");
    if let Some(var_1684) = &input.availability_zone {
        scope_1683.string(var_1684);
    }
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("Type");
    if let Some(var_1686) = &input.r#type {
        scope_1685.string(var_1686.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("TagSpecification");
    if let Some(var_1688) = &input.tag_specifications {
        let mut list_1690 = scope_1687.start_list(true, Some("item"));
        for item_1689 in var_1688 {
            #[allow(unused_mut)]
            let mut entry_1691 = list_1690.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1691, item_1689,
            )?;
        }
        list_1690.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("AmazonSideAsn");
    if let Some(var_1693) = &input.amazon_side_asn {
        scope_1692.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1693).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("DryRun");
    if let Some(var_1695) = &input.dry_run {
        scope_1694.boolean(*var_1695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("CarrierGatewayId");
    if let Some(var_1697) = &input.carrier_gateway_id {
        scope_1696.string(var_1697);
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("DryRun");
    if let Some(var_1699) = &input.dry_run {
        scope_1698.boolean(*var_1699);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1700 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1701) = &input.client_vpn_endpoint_id {
        scope_1700.string(var_1701);
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("DryRun");
    if let Some(var_1703) = &input.dry_run {
        scope_1702.boolean(*var_1703);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1705) = &input.client_vpn_endpoint_id {
        scope_1704.string(var_1705);
    }
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1707) = &input.target_vpc_subnet_id {
        scope_1706.string(var_1707);
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1709) = &input.destination_cidr_block {
        scope_1708.string(var_1709);
    }
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("DryRun");
    if let Some(var_1711) = &input.dry_run {
        scope_1710.boolean(*var_1711);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("CustomerGatewayId");
    if let Some(var_1713) = &input.customer_gateway_id {
        scope_1712.string(var_1713);
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("DryRun");
    if let Some(var_1715) = &input.dry_run {
        scope_1714.boolean(*var_1715);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("DhcpOptionsId");
    if let Some(var_1717) = &input.dhcp_options_id {
        scope_1716.string(var_1717);
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("DryRun");
    if let Some(var_1719) = &input.dry_run {
        scope_1718.boolean(*var_1719);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("DryRun");
    if let Some(var_1721) = &input.dry_run {
        scope_1720.boolean(*var_1721);
    }
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1723) = &input.egress_only_internet_gateway_id {
        scope_1722.string(var_1723);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("DryRun");
    if let Some(var_1725) = &input.dry_run {
        scope_1724.boolean(*var_1725);
    }
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("FleetId");
    if let Some(var_1727) = &input.fleet_ids {
        let mut list_1729 = scope_1726.start_list(true, None);
        for item_1728 in var_1727 {
            #[allow(unused_mut)]
            let mut entry_1730 = list_1729.entry();
            entry_1730.string(item_1728);
        }
        list_1729.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("TerminateInstances");
    if let Some(var_1732) = &input.terminate_instances {
        scope_1731.boolean(*var_1732);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("DryRun");
    if let Some(var_1734) = &input.dry_run {
        scope_1733.boolean(*var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("FlowLogId");
    if let Some(var_1736) = &input.flow_log_ids {
        let mut list_1738 = scope_1735.start_list(true, Some("item"));
        for item_1737 in var_1736 {
            #[allow(unused_mut)]
            let mut entry_1739 = list_1738.entry();
            entry_1739.string(item_1737);
        }
        list_1738.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("DryRun");
    if let Some(var_1741) = &input.dry_run {
        scope_1740.boolean(*var_1741);
    }
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("FpgaImageId");
    if let Some(var_1743) = &input.fpga_image_id {
        scope_1742.string(var_1743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("DryRun");
    if let Some(var_1745) = &input.dry_run {
        scope_1744.boolean(*var_1745);
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("ForceDelete");
    if let Some(var_1747) = &input.force_delete {
        scope_1746.boolean(*var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1749) = &input.instance_event_window_id {
        scope_1748.string(var_1749);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("DryRun");
    if let Some(var_1751) = &input.dry_run {
        scope_1750.boolean(*var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("InternetGatewayId");
    if let Some(var_1753) = &input.internet_gateway_id {
        scope_1752.string(var_1753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("DryRun");
    if let Some(var_1755) = &input.dry_run {
        scope_1754.boolean(*var_1755);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("IpamId");
    if let Some(var_1757) = &input.ipam_id {
        scope_1756.string(var_1757);
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("Cascade");
    if let Some(var_1759) = &input.cascade {
        scope_1758.boolean(*var_1759);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("DryRun");
    if let Some(var_1761) = &input.dry_run {
        scope_1760.boolean(*var_1761);
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("IpamPoolId");
    if let Some(var_1763) = &input.ipam_pool_id {
        scope_1762.string(var_1763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("DryRun");
    if let Some(var_1765) = &input.dry_run {
        scope_1764.boolean(*var_1765);
    }
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("IpamScopeId");
    if let Some(var_1767) = &input.ipam_scope_id {
        scope_1766.string(var_1767);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("KeyName");
    if let Some(var_1769) = &input.key_name {
        scope_1768.string(var_1769);
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("KeyPairId");
    if let Some(var_1771) = &input.key_pair_id {
        scope_1770.string(var_1771);
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("DryRun");
    if let Some(var_1773) = &input.dry_run {
        scope_1772.boolean(*var_1773);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("DryRun");
    if let Some(var_1775) = &input.dry_run {
        scope_1774.boolean(*var_1775);
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("LaunchTemplateId");
    if let Some(var_1777) = &input.launch_template_id {
        scope_1776.string(var_1777);
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("LaunchTemplateName");
    if let Some(var_1779) = &input.launch_template_name {
        scope_1778.string(var_1779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("DryRun");
    if let Some(var_1781) = &input.dry_run {
        scope_1780.boolean(*var_1781);
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("LaunchTemplateId");
    if let Some(var_1783) = &input.launch_template_id {
        scope_1782.string(var_1783);
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("LaunchTemplateName");
    if let Some(var_1785) = &input.launch_template_name {
        scope_1784.string(var_1785);
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1787) = &input.versions {
        let mut list_1789 = scope_1786.start_list(true, Some("item"));
        for item_1788 in var_1787 {
            #[allow(unused_mut)]
            let mut entry_1790 = list_1789.entry();
            entry_1790.string(item_1788);
        }
        list_1789.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1792) = &input.destination_cidr_block {
        scope_1791.string(var_1792);
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1794) = &input.local_gateway_route_table_id {
        scope_1793.string(var_1794);
    }
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("DryRun");
    if let Some(var_1796) = &input.dry_run {
        scope_1795.boolean(*var_1796);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1798) = &input.local_gateway_route_table_vpc_association_id {
        scope_1797.string(var_1798);
    }
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("DryRun");
    if let Some(var_1800) = &input.dry_run {
        scope_1799.boolean(*var_1800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("DryRun");
    if let Some(var_1802) = &input.dry_run {
        scope_1801.boolean(*var_1802);
    }
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("PrefixListId");
    if let Some(var_1804) = &input.prefix_list_id {
        scope_1803.string(var_1804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("DryRun");
    if let Some(var_1806) = &input.dry_run {
        scope_1805.boolean(*var_1806);
    }
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("NatGatewayId");
    if let Some(var_1808) = &input.nat_gateway_id {
        scope_1807.string(var_1808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("DryRun");
    if let Some(var_1810) = &input.dry_run {
        scope_1809.boolean(*var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("NetworkAclId");
    if let Some(var_1812) = &input.network_acl_id {
        scope_1811.string(var_1812);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("DryRun");
    if let Some(var_1814) = &input.dry_run {
        scope_1813.boolean(*var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("Egress");
    if let Some(var_1816) = &input.egress {
        scope_1815.boolean(*var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("NetworkAclId");
    if let Some(var_1818) = &input.network_acl_id {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("RuleNumber");
    if let Some(var_1820) = &input.rule_number {
        scope_1819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1820).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("DryRun");
    if let Some(var_1822) = &input.dry_run {
        scope_1821.boolean(*var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1824) = &input.network_insights_access_scope_id {
        scope_1823.string(var_1824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1826) = &input.network_insights_access_scope_analysis_id {
        scope_1825.string(var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("DryRun");
    if let Some(var_1828) = &input.dry_run {
        scope_1827.boolean(*var_1828);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("DryRun");
    if let Some(var_1830) = &input.dry_run {
        scope_1829.boolean(*var_1830);
    }
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1832) = &input.network_insights_analysis_id {
        scope_1831.string(var_1832);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("DryRun");
    if let Some(var_1834) = &input.dry_run {
        scope_1833.boolean(*var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1836) = &input.network_insights_path_id {
        scope_1835.string(var_1836);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("DryRun");
    if let Some(var_1838) = &input.dry_run {
        scope_1837.boolean(*var_1838);
    }
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1840) = &input.network_interface_id {
        scope_1839.string(var_1840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1842) = &input.network_interface_permission_id {
        scope_1841.string(var_1842);
    }
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("Force");
    if let Some(var_1844) = &input.force {
        scope_1843.boolean(*var_1844);
    }
    #[allow(unused_mut)]
    let mut scope_1845 = writer.prefix("DryRun");
    if let Some(var_1846) = &input.dry_run {
        scope_1845.boolean(*var_1846);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("DryRun");
    if let Some(var_1848) = &input.dry_run {
        scope_1847.boolean(*var_1848);
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("GroupName");
    if let Some(var_1850) = &input.group_name {
        scope_1849.string(var_1850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("DryRun");
    if let Some(var_1852) = &input.dry_run {
        scope_1851.boolean(*var_1852);
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("PoolId");
    if let Some(var_1854) = &input.pool_id {
        scope_1853.string(var_1854);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("DryRun");
    if let Some(var_1856) = &input.dry_run {
        scope_1855.boolean(*var_1856);
    }
    #[allow(unused_mut)]
    let mut scope_1857 = writer.prefix("ReservedInstancesId");
    if let Some(var_1858) = &input.reserved_instances_ids {
        let mut list_1860 = scope_1857.start_list(true, Some("item"));
        for item_1859 in var_1858 {
            #[allow(unused_mut)]
            let mut entry_1861 = list_1860.entry();
            entry_1861.string(item_1859);
        }
        list_1860.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1863) = &input.destination_cidr_block {
        scope_1862.string(var_1863);
    }
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1865) = &input.destination_ipv6_cidr_block {
        scope_1864.string(var_1865);
    }
    #[allow(unused_mut)]
    let mut scope_1866 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1867) = &input.destination_prefix_list_id {
        scope_1866.string(var_1867);
    }
    #[allow(unused_mut)]
    let mut scope_1868 = writer.prefix("DryRun");
    if let Some(var_1869) = &input.dry_run {
        scope_1868.boolean(*var_1869);
    }
    #[allow(unused_mut)]
    let mut scope_1870 = writer.prefix("RouteTableId");
    if let Some(var_1871) = &input.route_table_id {
        scope_1870.string(var_1871);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1872 = writer.prefix("DryRun");
    if let Some(var_1873) = &input.dry_run {
        scope_1872.boolean(*var_1873);
    }
    #[allow(unused_mut)]
    let mut scope_1874 = writer.prefix("RouteTableId");
    if let Some(var_1875) = &input.route_table_id {
        scope_1874.string(var_1875);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1876 = writer.prefix("GroupId");
    if let Some(var_1877) = &input.group_id {
        scope_1876.string(var_1877);
    }
    #[allow(unused_mut)]
    let mut scope_1878 = writer.prefix("GroupName");
    if let Some(var_1879) = &input.group_name {
        scope_1878.string(var_1879);
    }
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("DryRun");
    if let Some(var_1881) = &input.dry_run {
        scope_1880.boolean(*var_1881);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("SnapshotId");
    if let Some(var_1883) = &input.snapshot_id {
        scope_1882.string(var_1883);
    }
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("DryRun");
    if let Some(var_1885) = &input.dry_run {
        scope_1884.boolean(*var_1885);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("DryRun");
    if let Some(var_1887) = &input.dry_run {
        scope_1886.boolean(*var_1887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("SubnetId");
    if let Some(var_1889) = &input.subnet_id {
        scope_1888.string(var_1889);
    }
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("DryRun");
    if let Some(var_1891) = &input.dry_run {
        scope_1890.boolean(*var_1891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1892 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1893) = &input.subnet_cidr_reservation_id {
        scope_1892.string(var_1893);
    }
    #[allow(unused_mut)]
    let mut scope_1894 = writer.prefix("DryRun");
    if let Some(var_1895) = &input.dry_run {
        scope_1894.boolean(*var_1895);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("DryRun");
    if let Some(var_1897) = &input.dry_run {
        scope_1896.boolean(*var_1897);
    }
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("ResourceId");
    if let Some(var_1899) = &input.resources {
        let mut list_1901 = scope_1898.start_list(true, None);
        for item_1900 in var_1899 {
            #[allow(unused_mut)]
            let mut entry_1902 = list_1901.entry();
            entry_1902.string(item_1900);
        }
        list_1901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("Tag");
    if let Some(var_1904) = &input.tags {
        let mut list_1906 = scope_1903.start_list(true, Some("item"));
        for item_1905 in var_1904 {
            #[allow(unused_mut)]
            let mut entry_1907 = list_1906.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1907, item_1905)?;
        }
        list_1906.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1909) = &input.traffic_mirror_filter_id {
        scope_1908.string(var_1909);
    }
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("DryRun");
    if let Some(var_1911) = &input.dry_run {
        scope_1910.boolean(*var_1911);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1913) = &input.traffic_mirror_filter_rule_id {
        scope_1912.string(var_1913);
    }
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("DryRun");
    if let Some(var_1915) = &input.dry_run {
        scope_1914.boolean(*var_1915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1916 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1917) = &input.traffic_mirror_session_id {
        scope_1916.string(var_1917);
    }
    #[allow(unused_mut)]
    let mut scope_1918 = writer.prefix("DryRun");
    if let Some(var_1919) = &input.dry_run {
        scope_1918.boolean(*var_1919);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1920 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1921) = &input.traffic_mirror_target_id {
        scope_1920.string(var_1921);
    }
    #[allow(unused_mut)]
    let mut scope_1922 = writer.prefix("DryRun");
    if let Some(var_1923) = &input.dry_run {
        scope_1922.boolean(*var_1923);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("TransitGatewayId");
    if let Some(var_1925) = &input.transit_gateway_id {
        scope_1924.string(var_1925);
    }
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("DryRun");
    if let Some(var_1927) = &input.dry_run {
        scope_1926.boolean(*var_1927);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1928 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1929) = &input.transit_gateway_attachment_id {
        scope_1928.string(var_1929);
    }
    #[allow(unused_mut)]
    let mut scope_1930 = writer.prefix("DryRun");
    if let Some(var_1931) = &input.dry_run {
        scope_1930.boolean(*var_1931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1933) = &input.transit_gateway_connect_peer_id {
        scope_1932.string(var_1933);
    }
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("DryRun");
    if let Some(var_1935) = &input.dry_run {
        scope_1934.boolean(*var_1935);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1937) = &input.transit_gateway_multicast_domain_id {
        scope_1936.string(var_1937);
    }
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("DryRun");
    if let Some(var_1939) = &input.dry_run {
        scope_1938.boolean(*var_1939);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1941) = &input.transit_gateway_attachment_id {
        scope_1940.string(var_1941);
    }
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("DryRun");
    if let Some(var_1943) = &input.dry_run {
        scope_1942.boolean(*var_1943);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_policy_table(
    input: &crate::input::DeleteTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_1945) = &input.transit_gateway_policy_table_id {
        scope_1944.string(var_1945);
    }
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("DryRun");
    if let Some(var_1947) = &input.dry_run {
        scope_1946.boolean(*var_1947);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1949) = &input.transit_gateway_route_table_id {
        scope_1948.string(var_1949);
    }
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("PrefixListId");
    if let Some(var_1951) = &input.prefix_list_id {
        scope_1950.string(var_1951);
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("DryRun");
    if let Some(var_1953) = &input.dry_run {
        scope_1952.boolean(*var_1953);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1955) = &input.transit_gateway_route_table_id {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1957) = &input.destination_cidr_block {
        scope_1956.string(var_1957);
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("DryRun");
    if let Some(var_1959) = &input.dry_run {
        scope_1958.boolean(*var_1959);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1961) = &input.transit_gateway_route_table_id {
        scope_1960.string(var_1961);
    }
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("DryRun");
    if let Some(var_1963) = &input.dry_run {
        scope_1962.boolean(*var_1963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table_announcement(
    input: &crate::input::DeleteTransitGatewayRouteTableAnnouncementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTableAnnouncement",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_1965) = &input.transit_gateway_route_table_announcement_id {
        scope_1964.string(var_1965);
    }
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("DryRun");
    if let Some(var_1967) = &input.dry_run {
        scope_1966.boolean(*var_1967);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1969) = &input.transit_gateway_attachment_id {
        scope_1968.string(var_1969);
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("DryRun");
    if let Some(var_1971) = &input.dry_run {
        scope_1970.boolean(*var_1971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("VolumeId");
    if let Some(var_1973) = &input.volume_id {
        scope_1972.string(var_1973);
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("DryRun");
    if let Some(var_1975) = &input.dry_run {
        scope_1974.boolean(*var_1975);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("VpcId");
    if let Some(var_1977) = &input.vpc_id {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("DryRun");
    if let Some(var_1979) = &input.dry_run {
        scope_1978.boolean(*var_1979);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("DryRun");
    if let Some(var_1981) = &input.dry_run {
        scope_1980.boolean(*var_1981);
    }
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1983) = &input.connection_notification_ids {
        let mut list_1985 = scope_1982.start_list(true, Some("item"));
        for item_1984 in var_1983 {
            #[allow(unused_mut)]
            let mut entry_1986 = list_1985.entry();
            entry_1986.string(item_1984);
        }
        list_1985.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("DryRun");
    if let Some(var_1988) = &input.dry_run {
        scope_1987.boolean(*var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("VpcEndpointId");
    if let Some(var_1990) = &input.vpc_endpoint_ids {
        let mut list_1992 = scope_1989.start_list(true, Some("item"));
        for item_1991 in var_1990 {
            #[allow(unused_mut)]
            let mut entry_1993 = list_1992.entry();
            entry_1993.string(item_1991);
        }
        list_1992.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("DryRun");
    if let Some(var_1995) = &input.dry_run {
        scope_1994.boolean(*var_1995);
    }
    #[allow(unused_mut)]
    let mut scope_1996 = writer.prefix("ServiceId");
    if let Some(var_1997) = &input.service_ids {
        let mut list_1999 = scope_1996.start_list(true, Some("item"));
        for item_1998 in var_1997 {
            #[allow(unused_mut)]
            let mut entry_2000 = list_1999.entry();
            entry_2000.string(item_1998);
        }
        list_1999.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("DryRun");
    if let Some(var_2002) = &input.dry_run {
        scope_2001.boolean(*var_2002);
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_2004) = &input.vpc_peering_connection_id {
        scope_2003.string(var_2004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("VpnConnectionId");
    if let Some(var_2006) = &input.vpn_connection_id {
        scope_2005.string(var_2006);
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("DryRun");
    if let Some(var_2008) = &input.dry_run {
        scope_2007.boolean(*var_2008);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2009 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2010) = &input.destination_cidr_block {
        scope_2009.string(var_2010);
    }
    #[allow(unused_mut)]
    let mut scope_2011 = writer.prefix("VpnConnectionId");
    if let Some(var_2012) = &input.vpn_connection_id {
        scope_2011.string(var_2012);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2013 = writer.prefix("VpnGatewayId");
    if let Some(var_2014) = &input.vpn_gateway_id {
        scope_2013.string(var_2014);
    }
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("DryRun");
    if let Some(var_2016) = &input.dry_run {
        scope_2015.boolean(*var_2016);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("Cidr");
    if let Some(var_2018) = &input.cidr {
        scope_2017.string(var_2018);
    }
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("DryRun");
    if let Some(var_2020) = &input.dry_run {
        scope_2019.boolean(*var_2020);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("DryRun");
    if let Some(var_2022) = &input.dry_run {
        scope_2021.boolean(*var_2022);
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("IpamPoolId");
    if let Some(var_2024) = &input.ipam_pool_id {
        scope_2023.string(var_2024);
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("Cidr");
    if let Some(var_2026) = &input.cidr {
        scope_2025.string(var_2026);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("DryRun");
    if let Some(var_2028) = &input.dry_run {
        scope_2027.boolean(*var_2028);
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("PoolId");
    if let Some(var_2030) = &input.pool_id {
        scope_2029.string(var_2030);
    }
    #[allow(unused_mut)]
    let mut scope_2031 = writer.prefix("Cidr");
    if let Some(var_2032) = &input.cidr {
        scope_2031.string(var_2032);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2033 = writer.prefix("ImageId");
    if let Some(var_2034) = &input.image_id {
        scope_2033.string(var_2034);
    }
    #[allow(unused_mut)]
    let mut scope_2035 = writer.prefix("DryRun");
    if let Some(var_2036) = &input.dry_run {
        scope_2035.boolean(*var_2036);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("DryRun");
    if let Some(var_2038) = &input.dry_run {
        scope_2037.boolean(*var_2038);
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("InstanceTagAttribute");
    if let Some(var_2040) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_2039, var_2040)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2042) = &input.transit_gateway_multicast_domain_id {
        scope_2041.string(var_2042);
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("GroupIpAddress");
    if let Some(var_2044) = &input.group_ip_address {
        scope_2043.string(var_2044);
    }
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2046) = &input.network_interface_ids {
        let mut list_2048 = scope_2045.start_list(true, Some("item"));
        for item_2047 in var_2046 {
            #[allow(unused_mut)]
            let mut entry_2049 = list_2048.entry();
            entry_2049.string(item_2047);
        }
        list_2048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2050 = writer.prefix("DryRun");
    if let Some(var_2051) = &input.dry_run {
        scope_2050.boolean(*var_2051);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2052 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2053) = &input.transit_gateway_multicast_domain_id {
        scope_2052.string(var_2053);
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("GroupIpAddress");
    if let Some(var_2055) = &input.group_ip_address {
        scope_2054.string(var_2055);
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2057) = &input.network_interface_ids {
        let mut list_2059 = scope_2056.start_list(true, Some("item"));
        for item_2058 in var_2057 {
            #[allow(unused_mut)]
            let mut entry_2060 = list_2059.entry();
            entry_2060.string(item_2058);
        }
        list_2059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("DryRun");
    if let Some(var_2062) = &input.dry_run {
        scope_2061.boolean(*var_2062);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("AttributeName");
    if let Some(var_2064) = &input.attribute_names {
        let mut list_2066 = scope_2063.start_list(true, Some("attributeName"));
        for item_2065 in var_2064 {
            #[allow(unused_mut)]
            let mut entry_2067 = list_2066.entry();
            entry_2067.string(item_2065.as_str());
        }
        list_2066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("DryRun");
    if let Some(var_2069) = &input.dry_run {
        scope_2068.boolean(*var_2069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2070 = writer.prefix("Filter");
    if let Some(var_2071) = &input.filters {
        let mut list_2073 = scope_2070.start_list(true, Some("Filter"));
        for item_2072 in var_2071 {
            #[allow(unused_mut)]
            let mut entry_2074 = list_2073.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2074, item_2072)?;
        }
        list_2073.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("PublicIp");
    if let Some(var_2076) = &input.public_ips {
        let mut list_2078 = scope_2075.start_list(true, Some("PublicIp"));
        for item_2077 in var_2076 {
            #[allow(unused_mut)]
            let mut entry_2079 = list_2078.entry();
            entry_2079.string(item_2077);
        }
        list_2078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2080 = writer.prefix("AllocationId");
    if let Some(var_2081) = &input.allocation_ids {
        let mut list_2083 = scope_2080.start_list(true, Some("AllocationId"));
        for item_2082 in var_2081 {
            #[allow(unused_mut)]
            let mut entry_2084 = list_2083.entry();
            entry_2084.string(item_2082);
        }
        list_2083.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("DryRun");
    if let Some(var_2086) = &input.dry_run {
        scope_2085.boolean(*var_2086);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2087 = writer.prefix("AllocationId");
    if let Some(var_2088) = &input.allocation_ids {
        let mut list_2090 = scope_2087.start_list(true, Some("item"));
        for item_2089 in var_2088 {
            #[allow(unused_mut)]
            let mut entry_2091 = list_2090.entry();
            entry_2091.string(item_2089);
        }
        list_2090.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2092 = writer.prefix("Attribute");
    if let Some(var_2093) = &input.attribute {
        scope_2092.string(var_2093.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2094 = writer.prefix("NextToken");
    if let Some(var_2095) = &input.next_token {
        scope_2094.string(var_2095);
    }
    #[allow(unused_mut)]
    let mut scope_2096 = writer.prefix("MaxResults");
    if let Some(var_2097) = &input.max_results {
        scope_2096.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2097).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2098 = writer.prefix("DryRun");
    if let Some(var_2099) = &input.dry_run {
        scope_2098.boolean(*var_2099);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2100 = writer.prefix("DryRun");
    if let Some(var_2101) = &input.dry_run {
        scope_2100.boolean(*var_2101);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2102 = writer.prefix("Filter");
    if let Some(var_2103) = &input.filters {
        let mut list_2105 = scope_2102.start_list(true, Some("Filter"));
        for item_2104 in var_2103 {
            #[allow(unused_mut)]
            let mut entry_2106 = list_2105.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2106, item_2104)?;
        }
        list_2105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("ZoneName");
    if let Some(var_2108) = &input.zone_names {
        let mut list_2110 = scope_2107.start_list(true, Some("ZoneName"));
        for item_2109 in var_2108 {
            #[allow(unused_mut)]
            let mut entry_2111 = list_2110.entry();
            entry_2111.string(item_2109);
        }
        list_2110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("ZoneId");
    if let Some(var_2113) = &input.zone_ids {
        let mut list_2115 = scope_2112.start_list(true, Some("ZoneId"));
        for item_2114 in var_2113 {
            #[allow(unused_mut)]
            let mut entry_2116 = list_2115.entry();
            entry_2116.string(item_2114);
        }
        list_2115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2118) = &input.all_availability_zones {
        scope_2117.boolean(*var_2118);
    }
    #[allow(unused_mut)]
    let mut scope_2119 = writer.prefix("DryRun");
    if let Some(var_2120) = &input.dry_run {
        scope_2119.boolean(*var_2120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2121 = writer.prefix("BundleId");
    if let Some(var_2122) = &input.bundle_ids {
        let mut list_2124 = scope_2121.start_list(true, Some("BundleId"));
        for item_2123 in var_2122 {
            #[allow(unused_mut)]
            let mut entry_2125 = list_2124.entry();
            entry_2125.string(item_2123);
        }
        list_2124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("Filter");
    if let Some(var_2127) = &input.filters {
        let mut list_2129 = scope_2126.start_list(true, Some("Filter"));
        for item_2128 in var_2127 {
            #[allow(unused_mut)]
            let mut entry_2130 = list_2129.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2130, item_2128)?;
        }
        list_2129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2131 = writer.prefix("DryRun");
    if let Some(var_2132) = &input.dry_run {
        scope_2131.boolean(*var_2132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2133 = writer.prefix("DryRun");
    if let Some(var_2134) = &input.dry_run {
        scope_2133.boolean(*var_2134);
    }
    #[allow(unused_mut)]
    let mut scope_2135 = writer.prefix("MaxResults");
    if let Some(var_2136) = &input.max_results {
        scope_2135.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2136).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2137 = writer.prefix("NextToken");
    if let Some(var_2138) = &input.next_token {
        scope_2137.string(var_2138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2139 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2140) = &input.capacity_reservation_fleet_ids {
        let mut list_2142 = scope_2139.start_list(true, Some("item"));
        for item_2141 in var_2140 {
            #[allow(unused_mut)]
            let mut entry_2143 = list_2142.entry();
            entry_2143.string(item_2141);
        }
        list_2142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("NextToken");
    if let Some(var_2145) = &input.next_token {
        scope_2144.string(var_2145);
    }
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("MaxResults");
    if let Some(var_2147) = &input.max_results {
        scope_2146.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2147).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2148 = writer.prefix("Filter");
    if let Some(var_2149) = &input.filters {
        let mut list_2151 = scope_2148.start_list(true, Some("Filter"));
        for item_2150 in var_2149 {
            #[allow(unused_mut)]
            let mut entry_2152 = list_2151.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2152, item_2150)?;
        }
        list_2151.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2153 = writer.prefix("DryRun");
    if let Some(var_2154) = &input.dry_run {
        scope_2153.boolean(*var_2154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2155 = writer.prefix("CapacityReservationId");
    if let Some(var_2156) = &input.capacity_reservation_ids {
        let mut list_2158 = scope_2155.start_list(true, Some("item"));
        for item_2157 in var_2156 {
            #[allow(unused_mut)]
            let mut entry_2159 = list_2158.entry();
            entry_2159.string(item_2157);
        }
        list_2158.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2160 = writer.prefix("NextToken");
    if let Some(var_2161) = &input.next_token {
        scope_2160.string(var_2161);
    }
    #[allow(unused_mut)]
    let mut scope_2162 = writer.prefix("MaxResults");
    if let Some(var_2163) = &input.max_results {
        scope_2162.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2164 = writer.prefix("Filter");
    if let Some(var_2165) = &input.filters {
        let mut list_2167 = scope_2164.start_list(true, Some("Filter"));
        for item_2166 in var_2165 {
            #[allow(unused_mut)]
            let mut entry_2168 = list_2167.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2168, item_2166)?;
        }
        list_2167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("DryRun");
    if let Some(var_2170) = &input.dry_run {
        scope_2169.boolean(*var_2170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("CarrierGatewayId");
    if let Some(var_2172) = &input.carrier_gateway_ids {
        let mut list_2174 = scope_2171.start_list(true, None);
        for item_2173 in var_2172 {
            #[allow(unused_mut)]
            let mut entry_2175 = list_2174.entry();
            entry_2175.string(item_2173);
        }
        list_2174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2176 = writer.prefix("Filter");
    if let Some(var_2177) = &input.filters {
        let mut list_2179 = scope_2176.start_list(true, Some("Filter"));
        for item_2178 in var_2177 {
            #[allow(unused_mut)]
            let mut entry_2180 = list_2179.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2180, item_2178)?;
        }
        list_2179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("MaxResults");
    if let Some(var_2182) = &input.max_results {
        scope_2181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("NextToken");
    if let Some(var_2184) = &input.next_token {
        scope_2183.string(var_2184);
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("DryRun");
    if let Some(var_2186) = &input.dry_run {
        scope_2185.boolean(*var_2186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2187 = writer.prefix("Filter");
    if let Some(var_2188) = &input.filters {
        let mut list_2190 = scope_2187.start_list(true, Some("Filter"));
        for item_2189 in var_2188 {
            #[allow(unused_mut)]
            let mut entry_2191 = list_2190.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2191, item_2189)?;
        }
        list_2190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("DryRun");
    if let Some(var_2193) = &input.dry_run {
        scope_2192.boolean(*var_2193);
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("InstanceId");
    if let Some(var_2195) = &input.instance_ids {
        let mut list_2197 = scope_2194.start_list(true, Some("InstanceId"));
        for item_2196 in var_2195 {
            #[allow(unused_mut)]
            let mut entry_2198 = list_2197.entry();
            entry_2198.string(item_2196);
        }
        list_2197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2199 = writer.prefix("MaxResults");
    if let Some(var_2200) = &input.max_results {
        scope_2199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2201 = writer.prefix("NextToken");
    if let Some(var_2202) = &input.next_token {
        scope_2201.string(var_2202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2204) = &input.client_vpn_endpoint_id {
        scope_2203.string(var_2204);
    }
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("DryRun");
    if let Some(var_2206) = &input.dry_run {
        scope_2205.boolean(*var_2206);
    }
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("NextToken");
    if let Some(var_2208) = &input.next_token {
        scope_2207.string(var_2208);
    }
    #[allow(unused_mut)]
    let mut scope_2209 = writer.prefix("Filter");
    if let Some(var_2210) = &input.filters {
        let mut list_2212 = scope_2209.start_list(true, Some("Filter"));
        for item_2211 in var_2210 {
            #[allow(unused_mut)]
            let mut entry_2213 = list_2212.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2213, item_2211)?;
        }
        list_2212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("MaxResults");
    if let Some(var_2215) = &input.max_results {
        scope_2214.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2215).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2217) = &input.client_vpn_endpoint_id {
        scope_2216.string(var_2217);
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("Filter");
    if let Some(var_2219) = &input.filters {
        let mut list_2221 = scope_2218.start_list(true, Some("Filter"));
        for item_2220 in var_2219 {
            #[allow(unused_mut)]
            let mut entry_2222 = list_2221.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2222, item_2220)?;
        }
        list_2221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2223 = writer.prefix("NextToken");
    if let Some(var_2224) = &input.next_token {
        scope_2223.string(var_2224);
    }
    #[allow(unused_mut)]
    let mut scope_2225 = writer.prefix("MaxResults");
    if let Some(var_2226) = &input.max_results {
        scope_2225.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2226).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2227 = writer.prefix("DryRun");
    if let Some(var_2228) = &input.dry_run {
        scope_2227.boolean(*var_2228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2229 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2230) = &input.client_vpn_endpoint_ids {
        let mut list_2232 = scope_2229.start_list(true, Some("item"));
        for item_2231 in var_2230 {
            #[allow(unused_mut)]
            let mut entry_2233 = list_2232.entry();
            entry_2233.string(item_2231);
        }
        list_2232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2234 = writer.prefix("MaxResults");
    if let Some(var_2235) = &input.max_results {
        scope_2234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2236 = writer.prefix("NextToken");
    if let Some(var_2237) = &input.next_token {
        scope_2236.string(var_2237);
    }
    #[allow(unused_mut)]
    let mut scope_2238 = writer.prefix("Filter");
    if let Some(var_2239) = &input.filters {
        let mut list_2241 = scope_2238.start_list(true, Some("Filter"));
        for item_2240 in var_2239 {
            #[allow(unused_mut)]
            let mut entry_2242 = list_2241.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2242, item_2240)?;
        }
        list_2241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2243 = writer.prefix("DryRun");
    if let Some(var_2244) = &input.dry_run {
        scope_2243.boolean(*var_2244);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2245 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2246) = &input.client_vpn_endpoint_id {
        scope_2245.string(var_2246);
    }
    #[allow(unused_mut)]
    let mut scope_2247 = writer.prefix("Filter");
    if let Some(var_2248) = &input.filters {
        let mut list_2250 = scope_2247.start_list(true, Some("Filter"));
        for item_2249 in var_2248 {
            #[allow(unused_mut)]
            let mut entry_2251 = list_2250.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2251, item_2249)?;
        }
        list_2250.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2252 = writer.prefix("MaxResults");
    if let Some(var_2253) = &input.max_results {
        scope_2252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2253).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("NextToken");
    if let Some(var_2255) = &input.next_token {
        scope_2254.string(var_2255);
    }
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("DryRun");
    if let Some(var_2257) = &input.dry_run {
        scope_2256.boolean(*var_2257);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2259) = &input.client_vpn_endpoint_id {
        scope_2258.string(var_2259);
    }
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("AssociationIds");
    if let Some(var_2261) = &input.association_ids {
        let mut list_2263 = scope_2260.start_list(true, Some("item"));
        for item_2262 in var_2261 {
            #[allow(unused_mut)]
            let mut entry_2264 = list_2263.entry();
            entry_2264.string(item_2262);
        }
        list_2263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2265 = writer.prefix("MaxResults");
    if let Some(var_2266) = &input.max_results {
        scope_2265.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2266).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2267 = writer.prefix("NextToken");
    if let Some(var_2268) = &input.next_token {
        scope_2267.string(var_2268);
    }
    #[allow(unused_mut)]
    let mut scope_2269 = writer.prefix("Filter");
    if let Some(var_2270) = &input.filters {
        let mut list_2272 = scope_2269.start_list(true, Some("Filter"));
        for item_2271 in var_2270 {
            #[allow(unused_mut)]
            let mut entry_2273 = list_2272.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2273, item_2271)?;
        }
        list_2272.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("DryRun");
    if let Some(var_2275) = &input.dry_run {
        scope_2274.boolean(*var_2275);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2276 = writer.prefix("PoolId");
    if let Some(var_2277) = &input.pool_ids {
        let mut list_2279 = scope_2276.start_list(true, Some("item"));
        for item_2278 in var_2277 {
            #[allow(unused_mut)]
            let mut entry_2280 = list_2279.entry();
            entry_2280.string(item_2278);
        }
        list_2279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2281 = writer.prefix("Filter");
    if let Some(var_2282) = &input.filters {
        let mut list_2284 = scope_2281.start_list(true, Some("Filter"));
        for item_2283 in var_2282 {
            #[allow(unused_mut)]
            let mut entry_2285 = list_2284.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2285, item_2283)?;
        }
        list_2284.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2286 = writer.prefix("MaxResults");
    if let Some(var_2287) = &input.max_results {
        scope_2286.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2287).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2288 = writer.prefix("NextToken");
    if let Some(var_2289) = &input.next_token {
        scope_2288.string(var_2289);
    }
    #[allow(unused_mut)]
    let mut scope_2290 = writer.prefix("DryRun");
    if let Some(var_2291) = &input.dry_run {
        scope_2290.boolean(*var_2291);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2292 = writer.prefix("ConversionTaskId");
    if let Some(var_2293) = &input.conversion_task_ids {
        let mut list_2295 = scope_2292.start_list(true, Some("item"));
        for item_2294 in var_2293 {
            #[allow(unused_mut)]
            let mut entry_2296 = list_2295.entry();
            entry_2296.string(item_2294);
        }
        list_2295.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2297 = writer.prefix("DryRun");
    if let Some(var_2298) = &input.dry_run {
        scope_2297.boolean(*var_2298);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2299 = writer.prefix("CustomerGatewayId");
    if let Some(var_2300) = &input.customer_gateway_ids {
        let mut list_2302 = scope_2299.start_list(true, Some("CustomerGatewayId"));
        for item_2301 in var_2300 {
            #[allow(unused_mut)]
            let mut entry_2303 = list_2302.entry();
            entry_2303.string(item_2301);
        }
        list_2302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("Filter");
    if let Some(var_2305) = &input.filters {
        let mut list_2307 = scope_2304.start_list(true, Some("Filter"));
        for item_2306 in var_2305 {
            #[allow(unused_mut)]
            let mut entry_2308 = list_2307.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2308, item_2306)?;
        }
        list_2307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2309 = writer.prefix("DryRun");
    if let Some(var_2310) = &input.dry_run {
        scope_2309.boolean(*var_2310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2311 = writer.prefix("DhcpOptionsId");
    if let Some(var_2312) = &input.dhcp_options_ids {
        let mut list_2314 = scope_2311.start_list(true, Some("DhcpOptionsId"));
        for item_2313 in var_2312 {
            #[allow(unused_mut)]
            let mut entry_2315 = list_2314.entry();
            entry_2315.string(item_2313);
        }
        list_2314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2316 = writer.prefix("Filter");
    if let Some(var_2317) = &input.filters {
        let mut list_2319 = scope_2316.start_list(true, Some("Filter"));
        for item_2318 in var_2317 {
            #[allow(unused_mut)]
            let mut entry_2320 = list_2319.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2320, item_2318)?;
        }
        list_2319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("DryRun");
    if let Some(var_2322) = &input.dry_run {
        scope_2321.boolean(*var_2322);
    }
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("NextToken");
    if let Some(var_2324) = &input.next_token {
        scope_2323.string(var_2324);
    }
    #[allow(unused_mut)]
    let mut scope_2325 = writer.prefix("MaxResults");
    if let Some(var_2326) = &input.max_results {
        scope_2325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2326).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2327 = writer.prefix("DryRun");
    if let Some(var_2328) = &input.dry_run {
        scope_2327.boolean(*var_2328);
    }
    #[allow(unused_mut)]
    let mut scope_2329 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2330) = &input.egress_only_internet_gateway_ids {
        let mut list_2332 = scope_2329.start_list(true, Some("item"));
        for item_2331 in var_2330 {
            #[allow(unused_mut)]
            let mut entry_2333 = list_2332.entry();
            entry_2333.string(item_2331);
        }
        list_2332.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2334 = writer.prefix("MaxResults");
    if let Some(var_2335) = &input.max_results {
        scope_2334.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2335).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2336 = writer.prefix("NextToken");
    if let Some(var_2337) = &input.next_token {
        scope_2336.string(var_2337);
    }
    #[allow(unused_mut)]
    let mut scope_2338 = writer.prefix("Filter");
    if let Some(var_2339) = &input.filters {
        let mut list_2341 = scope_2338.start_list(true, Some("Filter"));
        for item_2340 in var_2339 {
            #[allow(unused_mut)]
            let mut entry_2342 = list_2341.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2342, item_2340)?;
        }
        list_2341.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2343 = writer.prefix("ElasticGpuId");
    if let Some(var_2344) = &input.elastic_gpu_ids {
        let mut list_2346 = scope_2343.start_list(true, Some("item"));
        for item_2345 in var_2344 {
            #[allow(unused_mut)]
            let mut entry_2347 = list_2346.entry();
            entry_2347.string(item_2345);
        }
        list_2346.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2348 = writer.prefix("DryRun");
    if let Some(var_2349) = &input.dry_run {
        scope_2348.boolean(*var_2349);
    }
    #[allow(unused_mut)]
    let mut scope_2350 = writer.prefix("Filter");
    if let Some(var_2351) = &input.filters {
        let mut list_2353 = scope_2350.start_list(true, Some("Filter"));
        for item_2352 in var_2351 {
            #[allow(unused_mut)]
            let mut entry_2354 = list_2353.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2354, item_2352)?;
        }
        list_2353.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2355 = writer.prefix("MaxResults");
    if let Some(var_2356) = &input.max_results {
        scope_2355.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2356).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2357 = writer.prefix("NextToken");
    if let Some(var_2358) = &input.next_token {
        scope_2357.string(var_2358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("DryRun");
    if let Some(var_2360) = &input.dry_run {
        scope_2359.boolean(*var_2360);
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("Filter");
    if let Some(var_2362) = &input.filters {
        let mut list_2364 = scope_2361.start_list(true, Some("Filter"));
        for item_2363 in var_2362 {
            #[allow(unused_mut)]
            let mut entry_2365 = list_2364.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2365, item_2363)?;
        }
        list_2364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2366 = writer.prefix("ExportImageTaskId");
    if let Some(var_2367) = &input.export_image_task_ids {
        let mut list_2369 = scope_2366.start_list(true, Some("ExportImageTaskId"));
        for item_2368 in var_2367 {
            #[allow(unused_mut)]
            let mut entry_2370 = list_2369.entry();
            entry_2370.string(item_2368);
        }
        list_2369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2371 = writer.prefix("MaxResults");
    if let Some(var_2372) = &input.max_results {
        scope_2371.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2372).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2373 = writer.prefix("NextToken");
    if let Some(var_2374) = &input.next_token {
        scope_2373.string(var_2374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("ExportTaskId");
    if let Some(var_2376) = &input.export_task_ids {
        let mut list_2378 = scope_2375.start_list(true, Some("ExportTaskId"));
        for item_2377 in var_2376 {
            #[allow(unused_mut)]
            let mut entry_2379 = list_2378.entry();
            entry_2379.string(item_2377);
        }
        list_2378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("Filter");
    if let Some(var_2381) = &input.filters {
        let mut list_2383 = scope_2380.start_list(true, Some("Filter"));
        for item_2382 in var_2381 {
            #[allow(unused_mut)]
            let mut entry_2384 = list_2383.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2384, item_2382)?;
        }
        list_2383.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2385 = writer.prefix("ImageId");
    if let Some(var_2386) = &input.image_ids {
        let mut list_2388 = scope_2385.start_list(true, Some("ImageId"));
        for item_2387 in var_2386 {
            #[allow(unused_mut)]
            let mut entry_2389 = list_2388.entry();
            entry_2389.string(item_2387);
        }
        list_2388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("Filter");
    if let Some(var_2391) = &input.filters {
        let mut list_2393 = scope_2390.start_list(true, Some("Filter"));
        for item_2392 in var_2391 {
            #[allow(unused_mut)]
            let mut entry_2394 = list_2393.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2394, item_2392)?;
        }
        list_2393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2395 = writer.prefix("MaxResults");
    if let Some(var_2396) = &input.max_results {
        scope_2395.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2396).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2397 = writer.prefix("NextToken");
    if let Some(var_2398) = &input.next_token {
        scope_2397.string(var_2398);
    }
    #[allow(unused_mut)]
    let mut scope_2399 = writer.prefix("DryRun");
    if let Some(var_2400) = &input.dry_run {
        scope_2399.boolean(*var_2400);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("Filter");
    if let Some(var_2402) = &input.filters {
        let mut list_2404 = scope_2401.start_list(true, Some("Filter"));
        for item_2403 in var_2402 {
            #[allow(unused_mut)]
            let mut entry_2405 = list_2404.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2405, item_2403)?;
        }
        list_2404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2406 = writer.prefix("MaxResults");
    if let Some(var_2407) = &input.max_results {
        scope_2406.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2407).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2408 = writer.prefix("NextToken");
    if let Some(var_2409) = &input.next_token {
        scope_2408.string(var_2409);
    }
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("DryRun");
    if let Some(var_2411) = &input.dry_run {
        scope_2410.boolean(*var_2411);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("DryRun");
    if let Some(var_2413) = &input.dry_run {
        scope_2412.boolean(*var_2413);
    }
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("EventType");
    if let Some(var_2415) = &input.event_type {
        scope_2414.string(var_2415.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2416 = writer.prefix("MaxResults");
    if let Some(var_2417) = &input.max_results {
        scope_2416.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2417).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2418 = writer.prefix("NextToken");
    if let Some(var_2419) = &input.next_token {
        scope_2418.string(var_2419);
    }
    #[allow(unused_mut)]
    let mut scope_2420 = writer.prefix("FleetId");
    if let Some(var_2421) = &input.fleet_id {
        scope_2420.string(var_2421);
    }
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("StartTime");
    if let Some(var_2423) = &input.start_time {
        scope_2422.date_time(var_2423, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("DryRun");
    if let Some(var_2425) = &input.dry_run {
        scope_2424.boolean(*var_2425);
    }
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("MaxResults");
    if let Some(var_2427) = &input.max_results {
        scope_2426.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2427).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2428 = writer.prefix("NextToken");
    if let Some(var_2429) = &input.next_token {
        scope_2428.string(var_2429);
    }
    #[allow(unused_mut)]
    let mut scope_2430 = writer.prefix("FleetId");
    if let Some(var_2431) = &input.fleet_id {
        scope_2430.string(var_2431);
    }
    #[allow(unused_mut)]
    let mut scope_2432 = writer.prefix("Filter");
    if let Some(var_2433) = &input.filters {
        let mut list_2435 = scope_2432.start_list(true, Some("Filter"));
        for item_2434 in var_2433 {
            #[allow(unused_mut)]
            let mut entry_2436 = list_2435.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2436, item_2434)?;
        }
        list_2435.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("DryRun");
    if let Some(var_2438) = &input.dry_run {
        scope_2437.boolean(*var_2438);
    }
    #[allow(unused_mut)]
    let mut scope_2439 = writer.prefix("MaxResults");
    if let Some(var_2440) = &input.max_results {
        scope_2439.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2440).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2441 = writer.prefix("NextToken");
    if let Some(var_2442) = &input.next_token {
        scope_2441.string(var_2442);
    }
    #[allow(unused_mut)]
    let mut scope_2443 = writer.prefix("FleetId");
    if let Some(var_2444) = &input.fleet_ids {
        let mut list_2446 = scope_2443.start_list(true, None);
        for item_2445 in var_2444 {
            #[allow(unused_mut)]
            let mut entry_2447 = list_2446.entry();
            entry_2447.string(item_2445);
        }
        list_2446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("Filter");
    if let Some(var_2449) = &input.filters {
        let mut list_2451 = scope_2448.start_list(true, Some("Filter"));
        for item_2450 in var_2449 {
            #[allow(unused_mut)]
            let mut entry_2452 = list_2451.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2452, item_2450)?;
        }
        list_2451.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2453 = writer.prefix("DryRun");
    if let Some(var_2454) = &input.dry_run {
        scope_2453.boolean(*var_2454);
    }
    #[allow(unused_mut)]
    let mut scope_2455 = writer.prefix("Filter");
    if let Some(var_2456) = &input.filter {
        let mut list_2458 = scope_2455.start_list(true, Some("Filter"));
        for item_2457 in var_2456 {
            #[allow(unused_mut)]
            let mut entry_2459 = list_2458.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2459, item_2457)?;
        }
        list_2458.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2460 = writer.prefix("FlowLogId");
    if let Some(var_2461) = &input.flow_log_ids {
        let mut list_2463 = scope_2460.start_list(true, Some("item"));
        for item_2462 in var_2461 {
            #[allow(unused_mut)]
            let mut entry_2464 = list_2463.entry();
            entry_2464.string(item_2462);
        }
        list_2463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("MaxResults");
    if let Some(var_2466) = &input.max_results {
        scope_2465.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2467 = writer.prefix("NextToken");
    if let Some(var_2468) = &input.next_token {
        scope_2467.string(var_2468);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2469 = writer.prefix("DryRun");
    if let Some(var_2470) = &input.dry_run {
        scope_2469.boolean(*var_2470);
    }
    #[allow(unused_mut)]
    let mut scope_2471 = writer.prefix("FpgaImageId");
    if let Some(var_2472) = &input.fpga_image_id {
        scope_2471.string(var_2472);
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("Attribute");
    if let Some(var_2474) = &input.attribute {
        scope_2473.string(var_2474.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("DryRun");
    if let Some(var_2476) = &input.dry_run {
        scope_2475.boolean(*var_2476);
    }
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("FpgaImageId");
    if let Some(var_2478) = &input.fpga_image_ids {
        let mut list_2480 = scope_2477.start_list(true, Some("item"));
        for item_2479 in var_2478 {
            #[allow(unused_mut)]
            let mut entry_2481 = list_2480.entry();
            entry_2481.string(item_2479);
        }
        list_2480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("Owner");
    if let Some(var_2483) = &input.owners {
        let mut list_2485 = scope_2482.start_list(true, Some("Owner"));
        for item_2484 in var_2483 {
            #[allow(unused_mut)]
            let mut entry_2486 = list_2485.entry();
            entry_2486.string(item_2484);
        }
        list_2485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2487 = writer.prefix("Filter");
    if let Some(var_2488) = &input.filters {
        let mut list_2490 = scope_2487.start_list(true, Some("Filter"));
        for item_2489 in var_2488 {
            #[allow(unused_mut)]
            let mut entry_2491 = list_2490.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2491, item_2489)?;
        }
        list_2490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2492 = writer.prefix("NextToken");
    if let Some(var_2493) = &input.next_token {
        scope_2492.string(var_2493);
    }
    #[allow(unused_mut)]
    let mut scope_2494 = writer.prefix("MaxResults");
    if let Some(var_2495) = &input.max_results {
        scope_2494.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2495).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("Filter");
    if let Some(var_2497) = &input.filter {
        let mut list_2499 = scope_2496.start_list(true, Some("Filter"));
        for item_2498 in var_2497 {
            #[allow(unused_mut)]
            let mut entry_2500 = list_2499.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2500, item_2498)?;
        }
        list_2499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2501 = writer.prefix("MaxDuration");
    if let Some(var_2502) = &input.max_duration {
        scope_2501.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2502).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2503 = writer.prefix("MaxResults");
    if let Some(var_2504) = &input.max_results {
        scope_2503.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2505 = writer.prefix("MinDuration");
    if let Some(var_2506) = &input.min_duration {
        scope_2505.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2507 = writer.prefix("NextToken");
    if let Some(var_2508) = &input.next_token {
        scope_2507.string(var_2508);
    }
    #[allow(unused_mut)]
    let mut scope_2509 = writer.prefix("OfferingId");
    if let Some(var_2510) = &input.offering_id {
        scope_2509.string(var_2510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("Filter");
    if let Some(var_2512) = &input.filter {
        let mut list_2514 = scope_2511.start_list(true, Some("Filter"));
        for item_2513 in var_2512 {
            #[allow(unused_mut)]
            let mut entry_2515 = list_2514.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2515, item_2513)?;
        }
        list_2514.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2516 = writer.prefix("HostReservationIdSet");
    if let Some(var_2517) = &input.host_reservation_id_set {
        let mut list_2519 = scope_2516.start_list(true, Some("item"));
        for item_2518 in var_2517 {
            #[allow(unused_mut)]
            let mut entry_2520 = list_2519.entry();
            entry_2520.string(item_2518);
        }
        list_2519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2521 = writer.prefix("MaxResults");
    if let Some(var_2522) = &input.max_results {
        scope_2521.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2522).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2523 = writer.prefix("NextToken");
    if let Some(var_2524) = &input.next_token {
        scope_2523.string(var_2524);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2525 = writer.prefix("Filter");
    if let Some(var_2526) = &input.filter {
        let mut list_2528 = scope_2525.start_list(true, Some("Filter"));
        for item_2527 in var_2526 {
            #[allow(unused_mut)]
            let mut entry_2529 = list_2528.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2529, item_2527)?;
        }
        list_2528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("HostId");
    if let Some(var_2531) = &input.host_ids {
        let mut list_2533 = scope_2530.start_list(true, Some("item"));
        for item_2532 in var_2531 {
            #[allow(unused_mut)]
            let mut entry_2534 = list_2533.entry();
            entry_2534.string(item_2532);
        }
        list_2533.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2535 = writer.prefix("MaxResults");
    if let Some(var_2536) = &input.max_results {
        scope_2535.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2536).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2537 = writer.prefix("NextToken");
    if let Some(var_2538) = &input.next_token {
        scope_2537.string(var_2538);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2539 = writer.prefix("AssociationId");
    if let Some(var_2540) = &input.association_ids {
        let mut list_2542 = scope_2539.start_list(true, Some("AssociationId"));
        for item_2541 in var_2540 {
            #[allow(unused_mut)]
            let mut entry_2543 = list_2542.entry();
            entry_2543.string(item_2541);
        }
        list_2542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2544 = writer.prefix("Filter");
    if let Some(var_2545) = &input.filters {
        let mut list_2547 = scope_2544.start_list(true, Some("Filter"));
        for item_2546 in var_2545 {
            #[allow(unused_mut)]
            let mut entry_2548 = list_2547.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2548, item_2546)?;
        }
        list_2547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("MaxResults");
    if let Some(var_2550) = &input.max_results {
        scope_2549.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2550).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("NextToken");
    if let Some(var_2552) = &input.next_token {
        scope_2551.string(var_2552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2553 = writer.prefix("PrincipalArn");
    if let Some(var_2554) = &input.principal_arn {
        scope_2553.string(var_2554);
    }
    #[allow(unused_mut)]
    let mut scope_2555 = writer.prefix("Resource");
    if let Some(var_2556) = &input.resource {
        scope_2555.string(var_2556);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2557 = writer.prefix("Resource");
    if let Some(var_2558) = &input.resource {
        scope_2557.string(var_2558);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2559 = writer.prefix("Attribute");
    if let Some(var_2560) = &input.attribute {
        scope_2559.string(var_2560.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2561 = writer.prefix("ImageId");
    if let Some(var_2562) = &input.image_id {
        scope_2561.string(var_2562);
    }
    #[allow(unused_mut)]
    let mut scope_2563 = writer.prefix("DryRun");
    if let Some(var_2564) = &input.dry_run {
        scope_2563.boolean(*var_2564);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2565 = writer.prefix("ExecutableBy");
    if let Some(var_2566) = &input.executable_users {
        let mut list_2568 = scope_2565.start_list(true, Some("ExecutableBy"));
        for item_2567 in var_2566 {
            #[allow(unused_mut)]
            let mut entry_2569 = list_2568.entry();
            entry_2569.string(item_2567);
        }
        list_2568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("Filter");
    if let Some(var_2571) = &input.filters {
        let mut list_2573 = scope_2570.start_list(true, Some("Filter"));
        for item_2572 in var_2571 {
            #[allow(unused_mut)]
            let mut entry_2574 = list_2573.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2574, item_2572)?;
        }
        list_2573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2575 = writer.prefix("ImageId");
    if let Some(var_2576) = &input.image_ids {
        let mut list_2578 = scope_2575.start_list(true, Some("ImageId"));
        for item_2577 in var_2576 {
            #[allow(unused_mut)]
            let mut entry_2579 = list_2578.entry();
            entry_2579.string(item_2577);
        }
        list_2578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2580 = writer.prefix("Owner");
    if let Some(var_2581) = &input.owners {
        let mut list_2583 = scope_2580.start_list(true, Some("Owner"));
        for item_2582 in var_2581 {
            #[allow(unused_mut)]
            let mut entry_2584 = list_2583.entry();
            entry_2584.string(item_2582);
        }
        list_2583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("IncludeDeprecated");
    if let Some(var_2586) = &input.include_deprecated {
        scope_2585.boolean(*var_2586);
    }
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("DryRun");
    if let Some(var_2588) = &input.dry_run {
        scope_2587.boolean(*var_2588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2589 = writer.prefix("DryRun");
    if let Some(var_2590) = &input.dry_run {
        scope_2589.boolean(*var_2590);
    }
    #[allow(unused_mut)]
    let mut scope_2591 = writer.prefix("Filters");
    if let Some(var_2592) = &input.filters {
        let mut list_2594 = scope_2591.start_list(true, Some("Filter"));
        for item_2593 in var_2592 {
            #[allow(unused_mut)]
            let mut entry_2595 = list_2594.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2595, item_2593)?;
        }
        list_2594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2596 = writer.prefix("ImportTaskId");
    if let Some(var_2597) = &input.import_task_ids {
        let mut list_2599 = scope_2596.start_list(true, Some("ImportTaskId"));
        for item_2598 in var_2597 {
            #[allow(unused_mut)]
            let mut entry_2600 = list_2599.entry();
            entry_2600.string(item_2598);
        }
        list_2599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("MaxResults");
    if let Some(var_2602) = &input.max_results {
        scope_2601.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2602).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("NextToken");
    if let Some(var_2604) = &input.next_token {
        scope_2603.string(var_2604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("DryRun");
    if let Some(var_2606) = &input.dry_run {
        scope_2605.boolean(*var_2606);
    }
    #[allow(unused_mut)]
    let mut scope_2607 = writer.prefix("Filters");
    if let Some(var_2608) = &input.filters {
        let mut list_2610 = scope_2607.start_list(true, Some("Filter"));
        for item_2609 in var_2608 {
            #[allow(unused_mut)]
            let mut entry_2611 = list_2610.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2611, item_2609)?;
        }
        list_2610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2612 = writer.prefix("ImportTaskId");
    if let Some(var_2613) = &input.import_task_ids {
        let mut list_2615 = scope_2612.start_list(true, Some("ImportTaskId"));
        for item_2614 in var_2613 {
            #[allow(unused_mut)]
            let mut entry_2616 = list_2615.entry();
            entry_2616.string(item_2614);
        }
        list_2615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2617 = writer.prefix("MaxResults");
    if let Some(var_2618) = &input.max_results {
        scope_2617.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2618).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2619 = writer.prefix("NextToken");
    if let Some(var_2620) = &input.next_token {
        scope_2619.string(var_2620);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2621 = writer.prefix("Attribute");
    if let Some(var_2622) = &input.attribute {
        scope_2621.string(var_2622.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2623 = writer.prefix("DryRun");
    if let Some(var_2624) = &input.dry_run {
        scope_2623.boolean(*var_2624);
    }
    #[allow(unused_mut)]
    let mut scope_2625 = writer.prefix("InstanceId");
    if let Some(var_2626) = &input.instance_id {
        scope_2625.string(var_2626);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2627 = writer.prefix("DryRun");
    if let Some(var_2628) = &input.dry_run {
        scope_2627.boolean(*var_2628);
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("Filter");
    if let Some(var_2630) = &input.filters {
        let mut list_2632 = scope_2629.start_list(true, Some("Filter"));
        for item_2631 in var_2630 {
            #[allow(unused_mut)]
            let mut entry_2633 = list_2632.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2633, item_2631)?;
        }
        list_2632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2634 = writer.prefix("InstanceId");
    if let Some(var_2635) = &input.instance_ids {
        let mut list_2637 = scope_2634.start_list(true, Some("InstanceId"));
        for item_2636 in var_2635 {
            #[allow(unused_mut)]
            let mut entry_2638 = list_2637.entry();
            entry_2638.string(item_2636);
        }
        list_2637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2639 = writer.prefix("MaxResults");
    if let Some(var_2640) = &input.max_results {
        scope_2639.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2640).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2641 = writer.prefix("NextToken");
    if let Some(var_2642) = &input.next_token {
        scope_2641.string(var_2642);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2643 = writer.prefix("DryRun");
    if let Some(var_2644) = &input.dry_run {
        scope_2643.boolean(*var_2644);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2645 = writer.prefix("DryRun");
    if let Some(var_2646) = &input.dry_run {
        scope_2645.boolean(*var_2646);
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2648) = &input.instance_event_window_ids {
        let mut list_2650 = scope_2647.start_list(true, Some("InstanceEventWindowId"));
        for item_2649 in var_2648 {
            #[allow(unused_mut)]
            let mut entry_2651 = list_2650.entry();
            entry_2651.string(item_2649);
        }
        list_2650.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2652 = writer.prefix("Filter");
    if let Some(var_2653) = &input.filters {
        let mut list_2655 = scope_2652.start_list(true, Some("Filter"));
        for item_2654 in var_2653 {
            #[allow(unused_mut)]
            let mut entry_2656 = list_2655.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2656, item_2654)?;
        }
        list_2655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("MaxResults");
    if let Some(var_2658) = &input.max_results {
        scope_2657.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2658).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("NextToken");
    if let Some(var_2660) = &input.next_token {
        scope_2659.string(var_2660);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2661 = writer.prefix("Filter");
    if let Some(var_2662) = &input.filters {
        let mut list_2664 = scope_2661.start_list(true, Some("Filter"));
        for item_2663 in var_2662 {
            #[allow(unused_mut)]
            let mut entry_2665 = list_2664.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2665, item_2663)?;
        }
        list_2664.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2666 = writer.prefix("InstanceId");
    if let Some(var_2667) = &input.instance_ids {
        let mut list_2669 = scope_2666.start_list(true, Some("InstanceId"));
        for item_2668 in var_2667 {
            #[allow(unused_mut)]
            let mut entry_2670 = list_2669.entry();
            entry_2670.string(item_2668);
        }
        list_2669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2671 = writer.prefix("DryRun");
    if let Some(var_2672) = &input.dry_run {
        scope_2671.boolean(*var_2672);
    }
    #[allow(unused_mut)]
    let mut scope_2673 = writer.prefix("MaxResults");
    if let Some(var_2674) = &input.max_results {
        scope_2673.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2674).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2675 = writer.prefix("NextToken");
    if let Some(var_2676) = &input.next_token {
        scope_2675.string(var_2676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2677 = writer.prefix("Filter");
    if let Some(var_2678) = &input.filters {
        let mut list_2680 = scope_2677.start_list(true, Some("Filter"));
        for item_2679 in var_2678 {
            #[allow(unused_mut)]
            let mut entry_2681 = list_2680.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2681, item_2679)?;
        }
        list_2680.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2682 = writer.prefix("InstanceId");
    if let Some(var_2683) = &input.instance_ids {
        let mut list_2685 = scope_2682.start_list(true, Some("InstanceId"));
        for item_2684 in var_2683 {
            #[allow(unused_mut)]
            let mut entry_2686 = list_2685.entry();
            entry_2686.string(item_2684);
        }
        list_2685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2687 = writer.prefix("MaxResults");
    if let Some(var_2688) = &input.max_results {
        scope_2687.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2688).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2689 = writer.prefix("NextToken");
    if let Some(var_2690) = &input.next_token {
        scope_2689.string(var_2690);
    }
    #[allow(unused_mut)]
    let mut scope_2691 = writer.prefix("DryRun");
    if let Some(var_2692) = &input.dry_run {
        scope_2691.boolean(*var_2692);
    }
    #[allow(unused_mut)]
    let mut scope_2693 = writer.prefix("IncludeAllInstances");
    if let Some(var_2694) = &input.include_all_instances {
        scope_2693.boolean(*var_2694);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2695 = writer.prefix("DryRun");
    if let Some(var_2696) = &input.dry_run {
        scope_2695.boolean(*var_2696);
    }
    #[allow(unused_mut)]
    let mut scope_2697 = writer.prefix("LocationType");
    if let Some(var_2698) = &input.location_type {
        scope_2697.string(var_2698.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2699 = writer.prefix("Filter");
    if let Some(var_2700) = &input.filters {
        let mut list_2702 = scope_2699.start_list(true, Some("Filter"));
        for item_2701 in var_2700 {
            #[allow(unused_mut)]
            let mut entry_2703 = list_2702.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2703, item_2701)?;
        }
        list_2702.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2704 = writer.prefix("MaxResults");
    if let Some(var_2705) = &input.max_results {
        scope_2704.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2705).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2706 = writer.prefix("NextToken");
    if let Some(var_2707) = &input.next_token {
        scope_2706.string(var_2707);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2708 = writer.prefix("DryRun");
    if let Some(var_2709) = &input.dry_run {
        scope_2708.boolean(*var_2709);
    }
    #[allow(unused_mut)]
    let mut scope_2710 = writer.prefix("InstanceType");
    if let Some(var_2711) = &input.instance_types {
        let mut list_2713 = scope_2710.start_list(true, None);
        for item_2712 in var_2711 {
            #[allow(unused_mut)]
            let mut entry_2714 = list_2713.entry();
            entry_2714.string(item_2712.as_str());
        }
        list_2713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2715 = writer.prefix("Filter");
    if let Some(var_2716) = &input.filters {
        let mut list_2718 = scope_2715.start_list(true, Some("Filter"));
        for item_2717 in var_2716 {
            #[allow(unused_mut)]
            let mut entry_2719 = list_2718.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2719, item_2717)?;
        }
        list_2718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("MaxResults");
    if let Some(var_2721) = &input.max_results {
        scope_2720.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2721).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("NextToken");
    if let Some(var_2723) = &input.next_token {
        scope_2722.string(var_2723);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2724 = writer.prefix("Filter");
    if let Some(var_2725) = &input.filters {
        let mut list_2727 = scope_2724.start_list(true, Some("Filter"));
        for item_2726 in var_2725 {
            #[allow(unused_mut)]
            let mut entry_2728 = list_2727.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2728, item_2726)?;
        }
        list_2727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2729 = writer.prefix("DryRun");
    if let Some(var_2730) = &input.dry_run {
        scope_2729.boolean(*var_2730);
    }
    #[allow(unused_mut)]
    let mut scope_2731 = writer.prefix("InternetGatewayId");
    if let Some(var_2732) = &input.internet_gateway_ids {
        let mut list_2734 = scope_2731.start_list(true, Some("item"));
        for item_2733 in var_2732 {
            #[allow(unused_mut)]
            let mut entry_2735 = list_2734.entry();
            entry_2735.string(item_2733);
        }
        list_2734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("NextToken");
    if let Some(var_2737) = &input.next_token {
        scope_2736.string(var_2737);
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("MaxResults");
    if let Some(var_2739) = &input.max_results {
        scope_2738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2739).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("DryRun");
    if let Some(var_2741) = &input.dry_run {
        scope_2740.boolean(*var_2741);
    }
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("Filter");
    if let Some(var_2743) = &input.filters {
        let mut list_2745 = scope_2742.start_list(true, Some("Filter"));
        for item_2744 in var_2743 {
            #[allow(unused_mut)]
            let mut entry_2746 = list_2745.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2746, item_2744)?;
        }
        list_2745.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2747 = writer.prefix("MaxResults");
    if let Some(var_2748) = &input.max_results {
        scope_2747.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2748).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2749 = writer.prefix("NextToken");
    if let Some(var_2750) = &input.next_token {
        scope_2749.string(var_2750);
    }
    #[allow(unused_mut)]
    let mut scope_2751 = writer.prefix("IpamPoolId");
    if let Some(var_2752) = &input.ipam_pool_ids {
        let mut list_2754 = scope_2751.start_list(true, Some("item"));
        for item_2753 in var_2752 {
            #[allow(unused_mut)]
            let mut entry_2755 = list_2754.entry();
            entry_2755.string(item_2753);
        }
        list_2754.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2756 = writer.prefix("DryRun");
    if let Some(var_2757) = &input.dry_run {
        scope_2756.boolean(*var_2757);
    }
    #[allow(unused_mut)]
    let mut scope_2758 = writer.prefix("Filter");
    if let Some(var_2759) = &input.filters {
        let mut list_2761 = scope_2758.start_list(true, Some("Filter"));
        for item_2760 in var_2759 {
            #[allow(unused_mut)]
            let mut entry_2762 = list_2761.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2762, item_2760)?;
        }
        list_2761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("MaxResults");
    if let Some(var_2764) = &input.max_results {
        scope_2763.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2764).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2765 = writer.prefix("NextToken");
    if let Some(var_2766) = &input.next_token {
        scope_2765.string(var_2766);
    }
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("IpamId");
    if let Some(var_2768) = &input.ipam_ids {
        let mut list_2770 = scope_2767.start_list(true, Some("item"));
        for item_2769 in var_2768 {
            #[allow(unused_mut)]
            let mut entry_2771 = list_2770.entry();
            entry_2771.string(item_2769);
        }
        list_2770.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2772 = writer.prefix("DryRun");
    if let Some(var_2773) = &input.dry_run {
        scope_2772.boolean(*var_2773);
    }
    #[allow(unused_mut)]
    let mut scope_2774 = writer.prefix("Filter");
    if let Some(var_2775) = &input.filters {
        let mut list_2777 = scope_2774.start_list(true, Some("Filter"));
        for item_2776 in var_2775 {
            #[allow(unused_mut)]
            let mut entry_2778 = list_2777.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2778, item_2776)?;
        }
        list_2777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2779 = writer.prefix("MaxResults");
    if let Some(var_2780) = &input.max_results {
        scope_2779.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2780).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2781 = writer.prefix("NextToken");
    if let Some(var_2782) = &input.next_token {
        scope_2781.string(var_2782);
    }
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("IpamScopeId");
    if let Some(var_2784) = &input.ipam_scope_ids {
        let mut list_2786 = scope_2783.start_list(true, Some("item"));
        for item_2785 in var_2784 {
            #[allow(unused_mut)]
            let mut entry_2787 = list_2786.entry();
            entry_2787.string(item_2785);
        }
        list_2786.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2788 = writer.prefix("PoolId");
    if let Some(var_2789) = &input.pool_ids {
        let mut list_2791 = scope_2788.start_list(true, Some("item"));
        for item_2790 in var_2789 {
            #[allow(unused_mut)]
            let mut entry_2792 = list_2791.entry();
            entry_2792.string(item_2790);
        }
        list_2791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2793 = writer.prefix("NextToken");
    if let Some(var_2794) = &input.next_token {
        scope_2793.string(var_2794);
    }
    #[allow(unused_mut)]
    let mut scope_2795 = writer.prefix("MaxResults");
    if let Some(var_2796) = &input.max_results {
        scope_2795.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2796).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2797 = writer.prefix("DryRun");
    if let Some(var_2798) = &input.dry_run {
        scope_2797.boolean(*var_2798);
    }
    #[allow(unused_mut)]
    let mut scope_2799 = writer.prefix("Filter");
    if let Some(var_2800) = &input.filters {
        let mut list_2802 = scope_2799.start_list(true, Some("Filter"));
        for item_2801 in var_2800 {
            #[allow(unused_mut)]
            let mut entry_2803 = list_2802.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2803, item_2801)?;
        }
        list_2802.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("Filter");
    if let Some(var_2805) = &input.filters {
        let mut list_2807 = scope_2804.start_list(true, Some("Filter"));
        for item_2806 in var_2805 {
            #[allow(unused_mut)]
            let mut entry_2808 = list_2807.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2808, item_2806)?;
        }
        list_2807.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2809 = writer.prefix("KeyName");
    if let Some(var_2810) = &input.key_names {
        let mut list_2812 = scope_2809.start_list(true, Some("KeyName"));
        for item_2811 in var_2810 {
            #[allow(unused_mut)]
            let mut entry_2813 = list_2812.entry();
            entry_2813.string(item_2811);
        }
        list_2812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2814 = writer.prefix("KeyPairId");
    if let Some(var_2815) = &input.key_pair_ids {
        let mut list_2817 = scope_2814.start_list(true, Some("KeyPairId"));
        for item_2816 in var_2815 {
            #[allow(unused_mut)]
            let mut entry_2818 = list_2817.entry();
            entry_2818.string(item_2816);
        }
        list_2817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("DryRun");
    if let Some(var_2820) = &input.dry_run {
        scope_2819.boolean(*var_2820);
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("IncludePublicKey");
    if let Some(var_2822) = &input.include_public_key {
        scope_2821.boolean(*var_2822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2823 = writer.prefix("DryRun");
    if let Some(var_2824) = &input.dry_run {
        scope_2823.boolean(*var_2824);
    }
    #[allow(unused_mut)]
    let mut scope_2825 = writer.prefix("LaunchTemplateId");
    if let Some(var_2826) = &input.launch_template_ids {
        let mut list_2828 = scope_2825.start_list(true, Some("item"));
        for item_2827 in var_2826 {
            #[allow(unused_mut)]
            let mut entry_2829 = list_2828.entry();
            entry_2829.string(item_2827);
        }
        list_2828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2830 = writer.prefix("LaunchTemplateName");
    if let Some(var_2831) = &input.launch_template_names {
        let mut list_2833 = scope_2830.start_list(true, Some("item"));
        for item_2832 in var_2831 {
            #[allow(unused_mut)]
            let mut entry_2834 = list_2833.entry();
            entry_2834.string(item_2832);
        }
        list_2833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2835 = writer.prefix("Filter");
    if let Some(var_2836) = &input.filters {
        let mut list_2838 = scope_2835.start_list(true, Some("Filter"));
        for item_2837 in var_2836 {
            #[allow(unused_mut)]
            let mut entry_2839 = list_2838.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2839, item_2837)?;
        }
        list_2838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("NextToken");
    if let Some(var_2841) = &input.next_token {
        scope_2840.string(var_2841);
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("MaxResults");
    if let Some(var_2843) = &input.max_results {
        scope_2842.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2843).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2844 = writer.prefix("DryRun");
    if let Some(var_2845) = &input.dry_run {
        scope_2844.boolean(*var_2845);
    }
    #[allow(unused_mut)]
    let mut scope_2846 = writer.prefix("LaunchTemplateId");
    if let Some(var_2847) = &input.launch_template_id {
        scope_2846.string(var_2847);
    }
    #[allow(unused_mut)]
    let mut scope_2848 = writer.prefix("LaunchTemplateName");
    if let Some(var_2849) = &input.launch_template_name {
        scope_2848.string(var_2849);
    }
    #[allow(unused_mut)]
    let mut scope_2850 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2851) = &input.versions {
        let mut list_2853 = scope_2850.start_list(true, Some("item"));
        for item_2852 in var_2851 {
            #[allow(unused_mut)]
            let mut entry_2854 = list_2853.entry();
            entry_2854.string(item_2852);
        }
        list_2853.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2855 = writer.prefix("MinVersion");
    if let Some(var_2856) = &input.min_version {
        scope_2855.string(var_2856);
    }
    #[allow(unused_mut)]
    let mut scope_2857 = writer.prefix("MaxVersion");
    if let Some(var_2858) = &input.max_version {
        scope_2857.string(var_2858);
    }
    #[allow(unused_mut)]
    let mut scope_2859 = writer.prefix("NextToken");
    if let Some(var_2860) = &input.next_token {
        scope_2859.string(var_2860);
    }
    #[allow(unused_mut)]
    let mut scope_2861 = writer.prefix("MaxResults");
    if let Some(var_2862) = &input.max_results {
        scope_2861.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2862).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2863 = writer.prefix("Filter");
    if let Some(var_2864) = &input.filters {
        let mut list_2866 = scope_2863.start_list(true, Some("Filter"));
        for item_2865 in var_2864 {
            #[allow(unused_mut)]
            let mut entry_2867 = list_2866.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2867, item_2865)?;
        }
        list_2866.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2868 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2869) = &input.local_gateway_route_table_ids {
        let mut list_2871 = scope_2868.start_list(true, Some("item"));
        for item_2870 in var_2869 {
            #[allow(unused_mut)]
            let mut entry_2872 = list_2871.entry();
            entry_2872.string(item_2870);
        }
        list_2871.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("Filter");
    if let Some(var_2874) = &input.filters {
        let mut list_2876 = scope_2873.start_list(true, Some("Filter"));
        for item_2875 in var_2874 {
            #[allow(unused_mut)]
            let mut entry_2877 = list_2876.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2877, item_2875)?;
        }
        list_2876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2878 = writer.prefix("MaxResults");
    if let Some(var_2879) = &input.max_results {
        scope_2878.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2879).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2880 = writer.prefix("NextToken");
    if let Some(var_2881) = &input.next_token {
        scope_2880.string(var_2881);
    }
    #[allow(unused_mut)]
    let mut scope_2882 = writer.prefix("DryRun");
    if let Some(var_2883) = &input.dry_run {
        scope_2882.boolean(*var_2883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2884 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2885) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2887 = scope_2884.start_list(true, Some("item"));
        for item_2886 in var_2885 {
            #[allow(unused_mut)]
            let mut entry_2888 = list_2887.entry();
            entry_2888.string(item_2886);
        }
        list_2887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("Filter");
    if let Some(var_2890) = &input.filters {
        let mut list_2892 = scope_2889.start_list(true, Some("Filter"));
        for item_2891 in var_2890 {
            #[allow(unused_mut)]
            let mut entry_2893 = list_2892.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2893, item_2891)?;
        }
        list_2892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("MaxResults");
    if let Some(var_2895) = &input.max_results {
        scope_2894.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2895).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2896 = writer.prefix("NextToken");
    if let Some(var_2897) = &input.next_token {
        scope_2896.string(var_2897);
    }
    #[allow(unused_mut)]
    let mut scope_2898 = writer.prefix("DryRun");
    if let Some(var_2899) = &input.dry_run {
        scope_2898.boolean(*var_2899);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2901) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2903 = scope_2900.start_list(true, Some("item"));
        for item_2902 in var_2901 {
            #[allow(unused_mut)]
            let mut entry_2904 = list_2903.entry();
            entry_2904.string(item_2902);
        }
        list_2903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("Filter");
    if let Some(var_2906) = &input.filters {
        let mut list_2908 = scope_2905.start_list(true, Some("Filter"));
        for item_2907 in var_2906 {
            #[allow(unused_mut)]
            let mut entry_2909 = list_2908.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2909, item_2907)?;
        }
        list_2908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2910 = writer.prefix("MaxResults");
    if let Some(var_2911) = &input.max_results {
        scope_2910.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2911).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2912 = writer.prefix("NextToken");
    if let Some(var_2913) = &input.next_token {
        scope_2912.string(var_2913);
    }
    #[allow(unused_mut)]
    let mut scope_2914 = writer.prefix("DryRun");
    if let Some(var_2915) = &input.dry_run {
        scope_2914.boolean(*var_2915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("LocalGatewayId");
    if let Some(var_2917) = &input.local_gateway_ids {
        let mut list_2919 = scope_2916.start_list(true, Some("item"));
        for item_2918 in var_2917 {
            #[allow(unused_mut)]
            let mut entry_2920 = list_2919.entry();
            entry_2920.string(item_2918);
        }
        list_2919.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2921 = writer.prefix("Filter");
    if let Some(var_2922) = &input.filters {
        let mut list_2924 = scope_2921.start_list(true, Some("Filter"));
        for item_2923 in var_2922 {
            #[allow(unused_mut)]
            let mut entry_2925 = list_2924.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2925, item_2923)?;
        }
        list_2924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2926 = writer.prefix("MaxResults");
    if let Some(var_2927) = &input.max_results {
        scope_2926.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2927).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2928 = writer.prefix("NextToken");
    if let Some(var_2929) = &input.next_token {
        scope_2928.string(var_2929);
    }
    #[allow(unused_mut)]
    let mut scope_2930 = writer.prefix("DryRun");
    if let Some(var_2931) = &input.dry_run {
        scope_2930.boolean(*var_2931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2932 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2933) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2935 = scope_2932.start_list(true, Some("item"));
        for item_2934 in var_2933 {
            #[allow(unused_mut)]
            let mut entry_2936 = list_2935.entry();
            entry_2936.string(item_2934);
        }
        list_2935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("Filter");
    if let Some(var_2938) = &input.filters {
        let mut list_2940 = scope_2937.start_list(true, Some("Filter"));
        for item_2939 in var_2938 {
            #[allow(unused_mut)]
            let mut entry_2941 = list_2940.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2941, item_2939)?;
        }
        list_2940.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2942 = writer.prefix("MaxResults");
    if let Some(var_2943) = &input.max_results {
        scope_2942.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2943).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2944 = writer.prefix("NextToken");
    if let Some(var_2945) = &input.next_token {
        scope_2944.string(var_2945);
    }
    #[allow(unused_mut)]
    let mut scope_2946 = writer.prefix("DryRun");
    if let Some(var_2947) = &input.dry_run {
        scope_2946.boolean(*var_2947);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2948 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2949) = &input.local_gateway_virtual_interface_ids {
        let mut list_2951 = scope_2948.start_list(true, Some("item"));
        for item_2950 in var_2949 {
            #[allow(unused_mut)]
            let mut entry_2952 = list_2951.entry();
            entry_2952.string(item_2950);
        }
        list_2951.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2953 = writer.prefix("Filter");
    if let Some(var_2954) = &input.filters {
        let mut list_2956 = scope_2953.start_list(true, Some("Filter"));
        for item_2955 in var_2954 {
            #[allow(unused_mut)]
            let mut entry_2957 = list_2956.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2957, item_2955)?;
        }
        list_2956.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("MaxResults");
    if let Some(var_2959) = &input.max_results {
        scope_2958.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2959).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("NextToken");
    if let Some(var_2961) = &input.next_token {
        scope_2960.string(var_2961);
    }
    #[allow(unused_mut)]
    let mut scope_2962 = writer.prefix("DryRun");
    if let Some(var_2963) = &input.dry_run {
        scope_2962.boolean(*var_2963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2964 = writer.prefix("DryRun");
    if let Some(var_2965) = &input.dry_run {
        scope_2964.boolean(*var_2965);
    }
    #[allow(unused_mut)]
    let mut scope_2966 = writer.prefix("Filter");
    if let Some(var_2967) = &input.filters {
        let mut list_2969 = scope_2966.start_list(true, Some("Filter"));
        for item_2968 in var_2967 {
            #[allow(unused_mut)]
            let mut entry_2970 = list_2969.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2970, item_2968)?;
        }
        list_2969.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2971 = writer.prefix("MaxResults");
    if let Some(var_2972) = &input.max_results {
        scope_2971.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2972).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2973 = writer.prefix("NextToken");
    if let Some(var_2974) = &input.next_token {
        scope_2973.string(var_2974);
    }
    #[allow(unused_mut)]
    let mut scope_2975 = writer.prefix("PrefixListId");
    if let Some(var_2976) = &input.prefix_list_ids {
        let mut list_2978 = scope_2975.start_list(true, Some("item"));
        for item_2977 in var_2976 {
            #[allow(unused_mut)]
            let mut entry_2979 = list_2978.entry();
            entry_2979.string(item_2977);
        }
        list_2978.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("Filter");
    if let Some(var_2981) = &input.filters {
        let mut list_2983 = scope_2980.start_list(true, Some("Filter"));
        for item_2982 in var_2981 {
            #[allow(unused_mut)]
            let mut entry_2984 = list_2983.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2984, item_2982)?;
        }
        list_2983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2985 = writer.prefix("DryRun");
    if let Some(var_2986) = &input.dry_run {
        scope_2985.boolean(*var_2986);
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("MaxResults");
    if let Some(var_2988) = &input.max_results {
        scope_2987.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2988).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("NextToken");
    if let Some(var_2990) = &input.next_token {
        scope_2989.string(var_2990);
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("PublicIp");
    if let Some(var_2992) = &input.public_ips {
        let mut list_2994 = scope_2991.start_list(true, Some("item"));
        for item_2993 in var_2992 {
            #[allow(unused_mut)]
            let mut entry_2995 = list_2994.entry();
            entry_2995.string(item_2993);
        }
        list_2994.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2996 = writer.prefix("DryRun");
    if let Some(var_2997) = &input.dry_run {
        scope_2996.boolean(*var_2997);
    }
    #[allow(unused_mut)]
    let mut scope_2998 = writer.prefix("Filter");
    if let Some(var_2999) = &input.filter {
        let mut list_3001 = scope_2998.start_list(true, Some("Filter"));
        for item_3000 in var_2999 {
            #[allow(unused_mut)]
            let mut entry_3002 = list_3001.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3002, item_3000)?;
        }
        list_3001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("MaxResults");
    if let Some(var_3004) = &input.max_results {
        scope_3003.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3004).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3005 = writer.prefix("NatGatewayId");
    if let Some(var_3006) = &input.nat_gateway_ids {
        let mut list_3008 = scope_3005.start_list(true, Some("item"));
        for item_3007 in var_3006 {
            #[allow(unused_mut)]
            let mut entry_3009 = list_3008.entry();
            entry_3009.string(item_3007);
        }
        list_3008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("NextToken");
    if let Some(var_3011) = &input.next_token {
        scope_3010.string(var_3011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("Filter");
    if let Some(var_3013) = &input.filters {
        let mut list_3015 = scope_3012.start_list(true, Some("Filter"));
        for item_3014 in var_3013 {
            #[allow(unused_mut)]
            let mut entry_3016 = list_3015.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3016, item_3014)?;
        }
        list_3015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3017 = writer.prefix("DryRun");
    if let Some(var_3018) = &input.dry_run {
        scope_3017.boolean(*var_3018);
    }
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("NetworkAclId");
    if let Some(var_3020) = &input.network_acl_ids {
        let mut list_3022 = scope_3019.start_list(true, Some("item"));
        for item_3021 in var_3020 {
            #[allow(unused_mut)]
            let mut entry_3023 = list_3022.entry();
            entry_3023.string(item_3021);
        }
        list_3022.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3024 = writer.prefix("NextToken");
    if let Some(var_3025) = &input.next_token {
        scope_3024.string(var_3025);
    }
    #[allow(unused_mut)]
    let mut scope_3026 = writer.prefix("MaxResults");
    if let Some(var_3027) = &input.max_results {
        scope_3026.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3027).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3028 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_3029) = &input.network_insights_access_scope_analysis_ids {
        let mut list_3031 = scope_3028.start_list(true, Some("item"));
        for item_3030 in var_3029 {
            #[allow(unused_mut)]
            let mut entry_3032 = list_3031.entry();
            entry_3032.string(item_3030);
        }
        list_3031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3033 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3034) = &input.network_insights_access_scope_id {
        scope_3033.string(var_3034);
    }
    #[allow(unused_mut)]
    let mut scope_3035 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_3036) = &input.analysis_start_time_begin {
        scope_3035.date_time(var_3036, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3037 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_3038) = &input.analysis_start_time_end {
        scope_3037.date_time(var_3038, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3039 = writer.prefix("Filter");
    if let Some(var_3040) = &input.filters {
        let mut list_3042 = scope_3039.start_list(true, Some("Filter"));
        for item_3041 in var_3040 {
            #[allow(unused_mut)]
            let mut entry_3043 = list_3042.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3043, item_3041)?;
        }
        list_3042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("MaxResults");
    if let Some(var_3045) = &input.max_results {
        scope_3044.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3045).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("DryRun");
    if let Some(var_3047) = &input.dry_run {
        scope_3046.boolean(*var_3047);
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("NextToken");
    if let Some(var_3049) = &input.next_token {
        scope_3048.string(var_3049);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3051) = &input.network_insights_access_scope_ids {
        let mut list_3053 = scope_3050.start_list(true, Some("item"));
        for item_3052 in var_3051 {
            #[allow(unused_mut)]
            let mut entry_3054 = list_3053.entry();
            entry_3054.string(item_3052);
        }
        list_3053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3055 = writer.prefix("Filter");
    if let Some(var_3056) = &input.filters {
        let mut list_3058 = scope_3055.start_list(true, Some("Filter"));
        for item_3057 in var_3056 {
            #[allow(unused_mut)]
            let mut entry_3059 = list_3058.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3059, item_3057)?;
        }
        list_3058.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3060 = writer.prefix("MaxResults");
    if let Some(var_3061) = &input.max_results {
        scope_3060.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3061).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("DryRun");
    if let Some(var_3063) = &input.dry_run {
        scope_3062.boolean(*var_3063);
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("NextToken");
    if let Some(var_3065) = &input.next_token {
        scope_3064.string(var_3065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3067) = &input.network_insights_analysis_ids {
        let mut list_3069 = scope_3066.start_list(true, Some("item"));
        for item_3068 in var_3067 {
            #[allow(unused_mut)]
            let mut entry_3070 = list_3069.entry();
            entry_3070.string(item_3068);
        }
        list_3069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3071 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3072) = &input.network_insights_path_id {
        scope_3071.string(var_3072);
    }
    #[allow(unused_mut)]
    let mut scope_3073 = writer.prefix("AnalysisStartTime");
    if let Some(var_3074) = &input.analysis_start_time {
        scope_3073.date_time(var_3074, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3075 = writer.prefix("AnalysisEndTime");
    if let Some(var_3076) = &input.analysis_end_time {
        scope_3075.date_time(var_3076, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3077 = writer.prefix("Filter");
    if let Some(var_3078) = &input.filters {
        let mut list_3080 = scope_3077.start_list(true, Some("Filter"));
        for item_3079 in var_3078 {
            #[allow(unused_mut)]
            let mut entry_3081 = list_3080.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3081, item_3079)?;
        }
        list_3080.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3082 = writer.prefix("MaxResults");
    if let Some(var_3083) = &input.max_results {
        scope_3082.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3083).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("DryRun");
    if let Some(var_3085) = &input.dry_run {
        scope_3084.boolean(*var_3085);
    }
    #[allow(unused_mut)]
    let mut scope_3086 = writer.prefix("NextToken");
    if let Some(var_3087) = &input.next_token {
        scope_3086.string(var_3087);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3088 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3089) = &input.network_insights_path_ids {
        let mut list_3091 = scope_3088.start_list(true, Some("item"));
        for item_3090 in var_3089 {
            #[allow(unused_mut)]
            let mut entry_3092 = list_3091.entry();
            entry_3092.string(item_3090);
        }
        list_3091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("Filter");
    if let Some(var_3094) = &input.filters {
        let mut list_3096 = scope_3093.start_list(true, Some("Filter"));
        for item_3095 in var_3094 {
            #[allow(unused_mut)]
            let mut entry_3097 = list_3096.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3097, item_3095)?;
        }
        list_3096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("MaxResults");
    if let Some(var_3099) = &input.max_results {
        scope_3098.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3099).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("DryRun");
    if let Some(var_3101) = &input.dry_run {
        scope_3100.boolean(*var_3101);
    }
    #[allow(unused_mut)]
    let mut scope_3102 = writer.prefix("NextToken");
    if let Some(var_3103) = &input.next_token {
        scope_3102.string(var_3103);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3104 = writer.prefix("Attribute");
    if let Some(var_3105) = &input.attribute {
        scope_3104.string(var_3105.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3106 = writer.prefix("DryRun");
    if let Some(var_3107) = &input.dry_run {
        scope_3106.boolean(*var_3107);
    }
    #[allow(unused_mut)]
    let mut scope_3108 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3109) = &input.network_interface_id {
        scope_3108.string(var_3109);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3110 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3111) = &input.network_interface_permission_ids {
        let mut list_3113 = scope_3110.start_list(true, None);
        for item_3112 in var_3111 {
            #[allow(unused_mut)]
            let mut entry_3114 = list_3113.entry();
            entry_3114.string(item_3112);
        }
        list_3113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3115 = writer.prefix("Filter");
    if let Some(var_3116) = &input.filters {
        let mut list_3118 = scope_3115.start_list(true, Some("Filter"));
        for item_3117 in var_3116 {
            #[allow(unused_mut)]
            let mut entry_3119 = list_3118.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3119, item_3117)?;
        }
        list_3118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3120 = writer.prefix("NextToken");
    if let Some(var_3121) = &input.next_token {
        scope_3120.string(var_3121);
    }
    #[allow(unused_mut)]
    let mut scope_3122 = writer.prefix("MaxResults");
    if let Some(var_3123) = &input.max_results {
        scope_3122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3123).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3124 = writer.prefix("Filter");
    if let Some(var_3125) = &input.filters {
        let mut list_3127 = scope_3124.start_list(true, Some("Filter"));
        for item_3126 in var_3125 {
            #[allow(unused_mut)]
            let mut entry_3128 = list_3127.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3128, item_3126)?;
        }
        list_3127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3129 = writer.prefix("DryRun");
    if let Some(var_3130) = &input.dry_run {
        scope_3129.boolean(*var_3130);
    }
    #[allow(unused_mut)]
    let mut scope_3131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3132) = &input.network_interface_ids {
        let mut list_3134 = scope_3131.start_list(true, Some("item"));
        for item_3133 in var_3132 {
            #[allow(unused_mut)]
            let mut entry_3135 = list_3134.entry();
            entry_3135.string(item_3133);
        }
        list_3134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3136 = writer.prefix("NextToken");
    if let Some(var_3137) = &input.next_token {
        scope_3136.string(var_3137);
    }
    #[allow(unused_mut)]
    let mut scope_3138 = writer.prefix("MaxResults");
    if let Some(var_3139) = &input.max_results {
        scope_3138.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3139).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3140 = writer.prefix("Filter");
    if let Some(var_3141) = &input.filters {
        let mut list_3143 = scope_3140.start_list(true, Some("Filter"));
        for item_3142 in var_3141 {
            #[allow(unused_mut)]
            let mut entry_3144 = list_3143.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3144, item_3142)?;
        }
        list_3143.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3145 = writer.prefix("DryRun");
    if let Some(var_3146) = &input.dry_run {
        scope_3145.boolean(*var_3146);
    }
    #[allow(unused_mut)]
    let mut scope_3147 = writer.prefix("GroupName");
    if let Some(var_3148) = &input.group_names {
        let mut list_3150 = scope_3147.start_list(true, None);
        for item_3149 in var_3148 {
            #[allow(unused_mut)]
            let mut entry_3151 = list_3150.entry();
            entry_3151.string(item_3149);
        }
        list_3150.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3152 = writer.prefix("GroupId");
    if let Some(var_3153) = &input.group_ids {
        let mut list_3155 = scope_3152.start_list(true, Some("GroupId"));
        for item_3154 in var_3153 {
            #[allow(unused_mut)]
            let mut entry_3156 = list_3155.entry();
            entry_3156.string(item_3154);
        }
        list_3155.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3157 = writer.prefix("DryRun");
    if let Some(var_3158) = &input.dry_run {
        scope_3157.boolean(*var_3158);
    }
    #[allow(unused_mut)]
    let mut scope_3159 = writer.prefix("Filter");
    if let Some(var_3160) = &input.filters {
        let mut list_3162 = scope_3159.start_list(true, Some("Filter"));
        for item_3161 in var_3160 {
            #[allow(unused_mut)]
            let mut entry_3163 = list_3162.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3163, item_3161)?;
        }
        list_3162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3164 = writer.prefix("MaxResults");
    if let Some(var_3165) = &input.max_results {
        scope_3164.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3165).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3166 = writer.prefix("NextToken");
    if let Some(var_3167) = &input.next_token {
        scope_3166.string(var_3167);
    }
    #[allow(unused_mut)]
    let mut scope_3168 = writer.prefix("PrefixListId");
    if let Some(var_3169) = &input.prefix_list_ids {
        let mut list_3171 = scope_3168.start_list(true, Some("item"));
        for item_3170 in var_3169 {
            #[allow(unused_mut)]
            let mut entry_3172 = list_3171.entry();
            entry_3172.string(item_3170);
        }
        list_3171.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3173 = writer.prefix("DryRun");
    if let Some(var_3174) = &input.dry_run {
        scope_3173.boolean(*var_3174);
    }
    #[allow(unused_mut)]
    let mut scope_3175 = writer.prefix("Resource");
    if let Some(var_3176) = &input.resources {
        let mut list_3178 = scope_3175.start_list(true, Some("item"));
        for item_3177 in var_3176 {
            #[allow(unused_mut)]
            let mut entry_3179 = list_3178.entry();
            entry_3179.string(item_3177);
        }
        list_3178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3180 = writer.prefix("MaxResults");
    if let Some(var_3181) = &input.max_results {
        scope_3180.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3181).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3182 = writer.prefix("NextToken");
    if let Some(var_3183) = &input.next_token {
        scope_3182.string(var_3183);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3184 = writer.prefix("PoolId");
    if let Some(var_3185) = &input.pool_ids {
        let mut list_3187 = scope_3184.start_list(true, Some("item"));
        for item_3186 in var_3185 {
            #[allow(unused_mut)]
            let mut entry_3188 = list_3187.entry();
            entry_3188.string(item_3186);
        }
        list_3187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3189 = writer.prefix("NextToken");
    if let Some(var_3190) = &input.next_token {
        scope_3189.string(var_3190);
    }
    #[allow(unused_mut)]
    let mut scope_3191 = writer.prefix("MaxResults");
    if let Some(var_3192) = &input.max_results {
        scope_3191.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3192).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3193 = writer.prefix("Filter");
    if let Some(var_3194) = &input.filters {
        let mut list_3196 = scope_3193.start_list(true, Some("Filter"));
        for item_3195 in var_3194 {
            #[allow(unused_mut)]
            let mut entry_3197 = list_3196.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3197, item_3195)?;
        }
        list_3196.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3198 = writer.prefix("Filter");
    if let Some(var_3199) = &input.filters {
        let mut list_3201 = scope_3198.start_list(true, Some("Filter"));
        for item_3200 in var_3199 {
            #[allow(unused_mut)]
            let mut entry_3202 = list_3201.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3202, item_3200)?;
        }
        list_3201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3203 = writer.prefix("RegionName");
    if let Some(var_3204) = &input.region_names {
        let mut list_3206 = scope_3203.start_list(true, Some("RegionName"));
        for item_3205 in var_3204 {
            #[allow(unused_mut)]
            let mut entry_3207 = list_3206.entry();
            entry_3207.string(item_3205);
        }
        list_3206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3208 = writer.prefix("DryRun");
    if let Some(var_3209) = &input.dry_run {
        scope_3208.boolean(*var_3209);
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("AllRegions");
    if let Some(var_3211) = &input.all_regions {
        scope_3210.boolean(*var_3211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3212 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3213) = &input.replace_root_volume_task_ids {
        let mut list_3215 = scope_3212.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3214 in var_3213 {
            #[allow(unused_mut)]
            let mut entry_3216 = list_3215.entry();
            entry_3216.string(item_3214);
        }
        list_3215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3217 = writer.prefix("Filter");
    if let Some(var_3218) = &input.filters {
        let mut list_3220 = scope_3217.start_list(true, Some("Filter"));
        for item_3219 in var_3218 {
            #[allow(unused_mut)]
            let mut entry_3221 = list_3220.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3221, item_3219)?;
        }
        list_3220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3222 = writer.prefix("MaxResults");
    if let Some(var_3223) = &input.max_results {
        scope_3222.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3223).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3224 = writer.prefix("NextToken");
    if let Some(var_3225) = &input.next_token {
        scope_3224.string(var_3225);
    }
    #[allow(unused_mut)]
    let mut scope_3226 = writer.prefix("DryRun");
    if let Some(var_3227) = &input.dry_run {
        scope_3226.boolean(*var_3227);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3228 = writer.prefix("Filter");
    if let Some(var_3229) = &input.filters {
        let mut list_3231 = scope_3228.start_list(true, Some("Filter"));
        for item_3230 in var_3229 {
            #[allow(unused_mut)]
            let mut entry_3232 = list_3231.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3232, item_3230)?;
        }
        list_3231.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3233 = writer.prefix("OfferingClass");
    if let Some(var_3234) = &input.offering_class {
        scope_3233.string(var_3234.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3235 = writer.prefix("ReservedInstancesId");
    if let Some(var_3236) = &input.reserved_instances_ids {
        let mut list_3238 = scope_3235.start_list(true, Some("ReservedInstancesId"));
        for item_3237 in var_3236 {
            #[allow(unused_mut)]
            let mut entry_3239 = list_3238.entry();
            entry_3239.string(item_3237);
        }
        list_3238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("DryRun");
    if let Some(var_3241) = &input.dry_run {
        scope_3240.boolean(*var_3241);
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("OfferingType");
    if let Some(var_3243) = &input.offering_type {
        scope_3242.string(var_3243.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3244 = writer.prefix("Filter");
    if let Some(var_3245) = &input.filters {
        let mut list_3247 = scope_3244.start_list(true, Some("Filter"));
        for item_3246 in var_3245 {
            #[allow(unused_mut)]
            let mut entry_3248 = list_3247.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3248, item_3246)?;
        }
        list_3247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("ReservedInstancesId");
    if let Some(var_3250) = &input.reserved_instances_id {
        scope_3249.string(var_3250);
    }
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3252) = &input.reserved_instances_listing_id {
        scope_3251.string(var_3252);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3253 = writer.prefix("Filter");
    if let Some(var_3254) = &input.filters {
        let mut list_3256 = scope_3253.start_list(true, Some("Filter"));
        for item_3255 in var_3254 {
            #[allow(unused_mut)]
            let mut entry_3257 = list_3256.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3257, item_3255)?;
        }
        list_3256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3258 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3259) = &input.reserved_instances_modification_ids {
        let mut list_3261 = scope_3258.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3260 in var_3259 {
            #[allow(unused_mut)]
            let mut entry_3262 = list_3261.entry();
            entry_3262.string(item_3260);
        }
        list_3261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3263 = writer.prefix("NextToken");
    if let Some(var_3264) = &input.next_token {
        scope_3263.string(var_3264);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3265 = writer.prefix("AvailabilityZone");
    if let Some(var_3266) = &input.availability_zone {
        scope_3265.string(var_3266);
    }
    #[allow(unused_mut)]
    let mut scope_3267 = writer.prefix("Filter");
    if let Some(var_3268) = &input.filters {
        let mut list_3270 = scope_3267.start_list(true, Some("Filter"));
        for item_3269 in var_3268 {
            #[allow(unused_mut)]
            let mut entry_3271 = list_3270.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3271, item_3269)?;
        }
        list_3270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3272 = writer.prefix("IncludeMarketplace");
    if let Some(var_3273) = &input.include_marketplace {
        scope_3272.boolean(*var_3273);
    }
    #[allow(unused_mut)]
    let mut scope_3274 = writer.prefix("InstanceType");
    if let Some(var_3275) = &input.instance_type {
        scope_3274.string(var_3275.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3276 = writer.prefix("MaxDuration");
    if let Some(var_3277) = &input.max_duration {
        scope_3276.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3277).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3278 = writer.prefix("MaxInstanceCount");
    if let Some(var_3279) = &input.max_instance_count {
        scope_3278.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3279).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3280 = writer.prefix("MinDuration");
    if let Some(var_3281) = &input.min_duration {
        scope_3280.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3281).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3282 = writer.prefix("OfferingClass");
    if let Some(var_3283) = &input.offering_class {
        scope_3282.string(var_3283.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("ProductDescription");
    if let Some(var_3285) = &input.product_description {
        scope_3284.string(var_3285.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3287) = &input.reserved_instances_offering_ids {
        let mut list_3289 = scope_3286.start_list(true, None);
        for item_3288 in var_3287 {
            #[allow(unused_mut)]
            let mut entry_3290 = list_3289.entry();
            entry_3290.string(item_3288);
        }
        list_3289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3291 = writer.prefix("DryRun");
    if let Some(var_3292) = &input.dry_run {
        scope_3291.boolean(*var_3292);
    }
    #[allow(unused_mut)]
    let mut scope_3293 = writer.prefix("InstanceTenancy");
    if let Some(var_3294) = &input.instance_tenancy {
        scope_3293.string(var_3294.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3295 = writer.prefix("MaxResults");
    if let Some(var_3296) = &input.max_results {
        scope_3295.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3296).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3297 = writer.prefix("NextToken");
    if let Some(var_3298) = &input.next_token {
        scope_3297.string(var_3298);
    }
    #[allow(unused_mut)]
    let mut scope_3299 = writer.prefix("OfferingType");
    if let Some(var_3300) = &input.offering_type {
        scope_3299.string(var_3300.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3301 = writer.prefix("Filter");
    if let Some(var_3302) = &input.filters {
        let mut list_3304 = scope_3301.start_list(true, Some("Filter"));
        for item_3303 in var_3302 {
            #[allow(unused_mut)]
            let mut entry_3305 = list_3304.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3305, item_3303)?;
        }
        list_3304.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3306 = writer.prefix("DryRun");
    if let Some(var_3307) = &input.dry_run {
        scope_3306.boolean(*var_3307);
    }
    #[allow(unused_mut)]
    let mut scope_3308 = writer.prefix("RouteTableId");
    if let Some(var_3309) = &input.route_table_ids {
        let mut list_3311 = scope_3308.start_list(true, Some("item"));
        for item_3310 in var_3309 {
            #[allow(unused_mut)]
            let mut entry_3312 = list_3311.entry();
            entry_3312.string(item_3310);
        }
        list_3311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3313 = writer.prefix("NextToken");
    if let Some(var_3314) = &input.next_token {
        scope_3313.string(var_3314);
    }
    #[allow(unused_mut)]
    let mut scope_3315 = writer.prefix("MaxResults");
    if let Some(var_3316) = &input.max_results {
        scope_3315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3316).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3317 = writer.prefix("DryRun");
    if let Some(var_3318) = &input.dry_run {
        scope_3317.boolean(*var_3318);
    }
    #[allow(unused_mut)]
    let mut scope_3319 = writer.prefix("Filter");
    if let Some(var_3320) = &input.filters {
        let mut list_3322 = scope_3319.start_list(true, Some("Filter"));
        for item_3321 in var_3320 {
            #[allow(unused_mut)]
            let mut entry_3323 = list_3322.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3323, item_3321)?;
        }
        list_3322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3324 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3325) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3324, var_3325,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3326 = writer.prefix("MaxResults");
    if let Some(var_3327) = &input.max_results {
        scope_3326.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3328 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3329) = &input.max_slot_duration_in_hours {
        scope_3328.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3329).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3330 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3331) = &input.min_slot_duration_in_hours {
        scope_3330.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3331).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3332 = writer.prefix("NextToken");
    if let Some(var_3333) = &input.next_token {
        scope_3332.string(var_3333);
    }
    #[allow(unused_mut)]
    let mut scope_3334 = writer.prefix("Recurrence");
    if let Some(var_3335) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3334, var_3335,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3336 = writer.prefix("DryRun");
    if let Some(var_3337) = &input.dry_run {
        scope_3336.boolean(*var_3337);
    }
    #[allow(unused_mut)]
    let mut scope_3338 = writer.prefix("Filter");
    if let Some(var_3339) = &input.filters {
        let mut list_3341 = scope_3338.start_list(true, Some("Filter"));
        for item_3340 in var_3339 {
            #[allow(unused_mut)]
            let mut entry_3342 = list_3341.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3342, item_3340)?;
        }
        list_3341.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("MaxResults");
    if let Some(var_3344) = &input.max_results {
        scope_3343.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3344).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("NextToken");
    if let Some(var_3346) = &input.next_token {
        scope_3345.string(var_3346);
    }
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3348) = &input.scheduled_instance_ids {
        let mut list_3350 = scope_3347.start_list(true, Some("ScheduledInstanceId"));
        for item_3349 in var_3348 {
            #[allow(unused_mut)]
            let mut entry_3351 = list_3350.entry();
            entry_3351.string(item_3349);
        }
        list_3350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3353) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3352, var_3353,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("DryRun");
    if let Some(var_3355) = &input.dry_run {
        scope_3354.boolean(*var_3355);
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("GroupId");
    if let Some(var_3357) = &input.group_id {
        let mut list_3359 = scope_3356.start_list(true, Some("item"));
        for item_3358 in var_3357 {
            #[allow(unused_mut)]
            let mut entry_3360 = list_3359.entry();
            entry_3360.string(item_3358);
        }
        list_3359.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3361 = writer.prefix("Filter");
    if let Some(var_3362) = &input.filters {
        let mut list_3364 = scope_3361.start_list(true, Some("Filter"));
        for item_3363 in var_3362 {
            #[allow(unused_mut)]
            let mut entry_3365 = list_3364.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3365, item_3363)?;
        }
        list_3364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3366 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3367) = &input.security_group_rule_ids {
        let mut list_3369 = scope_3366.start_list(true, Some("item"));
        for item_3368 in var_3367 {
            #[allow(unused_mut)]
            let mut entry_3370 = list_3369.entry();
            entry_3370.string(item_3368);
        }
        list_3369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("DryRun");
    if let Some(var_3372) = &input.dry_run {
        scope_3371.boolean(*var_3372);
    }
    #[allow(unused_mut)]
    let mut scope_3373 = writer.prefix("NextToken");
    if let Some(var_3374) = &input.next_token {
        scope_3373.string(var_3374);
    }
    #[allow(unused_mut)]
    let mut scope_3375 = writer.prefix("MaxResults");
    if let Some(var_3376) = &input.max_results {
        scope_3375.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3376).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3377 = writer.prefix("Filter");
    if let Some(var_3378) = &input.filters {
        let mut list_3380 = scope_3377.start_list(true, Some("Filter"));
        for item_3379 in var_3378 {
            #[allow(unused_mut)]
            let mut entry_3381 = list_3380.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3381, item_3379)?;
        }
        list_3380.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("GroupId");
    if let Some(var_3383) = &input.group_ids {
        let mut list_3385 = scope_3382.start_list(true, Some("groupId"));
        for item_3384 in var_3383 {
            #[allow(unused_mut)]
            let mut entry_3386 = list_3385.entry();
            entry_3386.string(item_3384);
        }
        list_3385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3387 = writer.prefix("GroupName");
    if let Some(var_3388) = &input.group_names {
        let mut list_3390 = scope_3387.start_list(true, Some("GroupName"));
        for item_3389 in var_3388 {
            #[allow(unused_mut)]
            let mut entry_3391 = list_3390.entry();
            entry_3391.string(item_3389);
        }
        list_3390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("DryRun");
    if let Some(var_3393) = &input.dry_run {
        scope_3392.boolean(*var_3393);
    }
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("NextToken");
    if let Some(var_3395) = &input.next_token {
        scope_3394.string(var_3395);
    }
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("MaxResults");
    if let Some(var_3397) = &input.max_results {
        scope_3396.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3397).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("Attribute");
    if let Some(var_3399) = &input.attribute {
        scope_3398.string(var_3399.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3400 = writer.prefix("SnapshotId");
    if let Some(var_3401) = &input.snapshot_id {
        scope_3400.string(var_3401);
    }
    #[allow(unused_mut)]
    let mut scope_3402 = writer.prefix("DryRun");
    if let Some(var_3403) = &input.dry_run {
        scope_3402.boolean(*var_3403);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3404 = writer.prefix("Filter");
    if let Some(var_3405) = &input.filters {
        let mut list_3407 = scope_3404.start_list(true, Some("Filter"));
        for item_3406 in var_3405 {
            #[allow(unused_mut)]
            let mut entry_3408 = list_3407.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3408, item_3406)?;
        }
        list_3407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3409 = writer.prefix("MaxResults");
    if let Some(var_3410) = &input.max_results {
        scope_3409.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3410).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3411 = writer.prefix("NextToken");
    if let Some(var_3412) = &input.next_token {
        scope_3411.string(var_3412);
    }
    #[allow(unused_mut)]
    let mut scope_3413 = writer.prefix("Owner");
    if let Some(var_3414) = &input.owner_ids {
        let mut list_3416 = scope_3413.start_list(true, Some("Owner"));
        for item_3415 in var_3414 {
            #[allow(unused_mut)]
            let mut entry_3417 = list_3416.entry();
            entry_3417.string(item_3415);
        }
        list_3416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3418 = writer.prefix("RestorableBy");
    if let Some(var_3419) = &input.restorable_by_user_ids {
        let mut list_3421 = scope_3418.start_list(true, None);
        for item_3420 in var_3419 {
            #[allow(unused_mut)]
            let mut entry_3422 = list_3421.entry();
            entry_3422.string(item_3420);
        }
        list_3421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("SnapshotId");
    if let Some(var_3424) = &input.snapshot_ids {
        let mut list_3426 = scope_3423.start_list(true, Some("SnapshotId"));
        for item_3425 in var_3424 {
            #[allow(unused_mut)]
            let mut entry_3427 = list_3426.entry();
            entry_3427.string(item_3425);
        }
        list_3426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3428 = writer.prefix("DryRun");
    if let Some(var_3429) = &input.dry_run {
        scope_3428.boolean(*var_3429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3430 = writer.prefix("Filter");
    if let Some(var_3431) = &input.filters {
        let mut list_3433 = scope_3430.start_list(true, Some("Filter"));
        for item_3432 in var_3431 {
            #[allow(unused_mut)]
            let mut entry_3434 = list_3433.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3434, item_3432)?;
        }
        list_3433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3435 = writer.prefix("DryRun");
    if let Some(var_3436) = &input.dry_run {
        scope_3435.boolean(*var_3436);
    }
    #[allow(unused_mut)]
    let mut scope_3437 = writer.prefix("NextToken");
    if let Some(var_3438) = &input.next_token {
        scope_3437.string(var_3438);
    }
    #[allow(unused_mut)]
    let mut scope_3439 = writer.prefix("MaxResults");
    if let Some(var_3440) = &input.max_results {
        scope_3439.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3440).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3441 = writer.prefix("DryRun");
    if let Some(var_3442) = &input.dry_run {
        scope_3441.boolean(*var_3442);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3443 = writer.prefix("DryRun");
    if let Some(var_3444) = &input.dry_run {
        scope_3443.boolean(*var_3444);
    }
    #[allow(unused_mut)]
    let mut scope_3445 = writer.prefix("MaxResults");
    if let Some(var_3446) = &input.max_results {
        scope_3445.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3446).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3447 = writer.prefix("NextToken");
    if let Some(var_3448) = &input.next_token {
        scope_3447.string(var_3448);
    }
    #[allow(unused_mut)]
    let mut scope_3449 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3450) = &input.spot_fleet_request_id {
        scope_3449.string(var_3450);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3451 = writer.prefix("DryRun");
    if let Some(var_3452) = &input.dry_run {
        scope_3451.boolean(*var_3452);
    }
    #[allow(unused_mut)]
    let mut scope_3453 = writer.prefix("EventType");
    if let Some(var_3454) = &input.event_type {
        scope_3453.string(var_3454.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("MaxResults");
    if let Some(var_3456) = &input.max_results {
        scope_3455.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3456).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("NextToken");
    if let Some(var_3458) = &input.next_token {
        scope_3457.string(var_3458);
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3460) = &input.spot_fleet_request_id {
        scope_3459.string(var_3460);
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("StartTime");
    if let Some(var_3462) = &input.start_time {
        scope_3461.date_time(var_3462, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3463 = writer.prefix("DryRun");
    if let Some(var_3464) = &input.dry_run {
        scope_3463.boolean(*var_3464);
    }
    #[allow(unused_mut)]
    let mut scope_3465 = writer.prefix("MaxResults");
    if let Some(var_3466) = &input.max_results {
        scope_3465.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3467 = writer.prefix("NextToken");
    if let Some(var_3468) = &input.next_token {
        scope_3467.string(var_3468);
    }
    #[allow(unused_mut)]
    let mut scope_3469 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3470) = &input.spot_fleet_request_ids {
        let mut list_3472 = scope_3469.start_list(true, Some("item"));
        for item_3471 in var_3470 {
            #[allow(unused_mut)]
            let mut entry_3473 = list_3472.entry();
            entry_3473.string(item_3471);
        }
        list_3472.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3474 = writer.prefix("Filter");
    if let Some(var_3475) = &input.filters {
        let mut list_3477 = scope_3474.start_list(true, Some("Filter"));
        for item_3476 in var_3475 {
            #[allow(unused_mut)]
            let mut entry_3478 = list_3477.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3478, item_3476)?;
        }
        list_3477.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("DryRun");
    if let Some(var_3480) = &input.dry_run {
        scope_3479.boolean(*var_3480);
    }
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3482) = &input.spot_instance_request_ids {
        let mut list_3484 = scope_3481.start_list(true, Some("SpotInstanceRequestId"));
        for item_3483 in var_3482 {
            #[allow(unused_mut)]
            let mut entry_3485 = list_3484.entry();
            entry_3485.string(item_3483);
        }
        list_3484.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("NextToken");
    if let Some(var_3487) = &input.next_token {
        scope_3486.string(var_3487);
    }
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("MaxResults");
    if let Some(var_3489) = &input.max_results {
        scope_3488.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3489).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3490 = writer.prefix("Filter");
    if let Some(var_3491) = &input.filters {
        let mut list_3493 = scope_3490.start_list(true, Some("Filter"));
        for item_3492 in var_3491 {
            #[allow(unused_mut)]
            let mut entry_3494 = list_3493.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3494, item_3492)?;
        }
        list_3493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3495 = writer.prefix("AvailabilityZone");
    if let Some(var_3496) = &input.availability_zone {
        scope_3495.string(var_3496);
    }
    #[allow(unused_mut)]
    let mut scope_3497 = writer.prefix("DryRun");
    if let Some(var_3498) = &input.dry_run {
        scope_3497.boolean(*var_3498);
    }
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("EndTime");
    if let Some(var_3500) = &input.end_time {
        scope_3499.date_time(var_3500, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3501 = writer.prefix("InstanceType");
    if let Some(var_3502) = &input.instance_types {
        let mut list_3504 = scope_3501.start_list(true, None);
        for item_3503 in var_3502 {
            #[allow(unused_mut)]
            let mut entry_3505 = list_3504.entry();
            entry_3505.string(item_3503.as_str());
        }
        list_3504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("MaxResults");
    if let Some(var_3507) = &input.max_results {
        scope_3506.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3507).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("NextToken");
    if let Some(var_3509) = &input.next_token {
        scope_3508.string(var_3509);
    }
    #[allow(unused_mut)]
    let mut scope_3510 = writer.prefix("ProductDescription");
    if let Some(var_3511) = &input.product_descriptions {
        let mut list_3513 = scope_3510.start_list(true, None);
        for item_3512 in var_3511 {
            #[allow(unused_mut)]
            let mut entry_3514 = list_3513.entry();
            entry_3514.string(item_3512);
        }
        list_3513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("StartTime");
    if let Some(var_3516) = &input.start_time {
        scope_3515.date_time(var_3516, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("DryRun");
    if let Some(var_3518) = &input.dry_run {
        scope_3517.boolean(*var_3518);
    }
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("MaxResults");
    if let Some(var_3520) = &input.max_results {
        scope_3519.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3520).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3521 = writer.prefix("NextToken");
    if let Some(var_3522) = &input.next_token {
        scope_3521.string(var_3522);
    }
    #[allow(unused_mut)]
    let mut scope_3523 = writer.prefix("VpcId");
    if let Some(var_3524) = &input.vpc_id {
        scope_3523.string(var_3524);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3525 = writer.prefix("ImageId");
    if let Some(var_3526) = &input.image_ids {
        let mut list_3528 = scope_3525.start_list(true, Some("item"));
        for item_3527 in var_3526 {
            #[allow(unused_mut)]
            let mut entry_3529 = list_3528.entry();
            entry_3529.string(item_3527);
        }
        list_3528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3530 = writer.prefix("DryRun");
    if let Some(var_3531) = &input.dry_run {
        scope_3530.boolean(*var_3531);
    }
    #[allow(unused_mut)]
    let mut scope_3532 = writer.prefix("Filter");
    if let Some(var_3533) = &input.filters {
        let mut list_3535 = scope_3532.start_list(true, Some("Filter"));
        for item_3534 in var_3533 {
            #[allow(unused_mut)]
            let mut entry_3536 = list_3535.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3536, item_3534)?;
        }
        list_3535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3537 = writer.prefix("NextToken");
    if let Some(var_3538) = &input.next_token {
        scope_3537.string(var_3538);
    }
    #[allow(unused_mut)]
    let mut scope_3539 = writer.prefix("MaxResults");
    if let Some(var_3540) = &input.max_results {
        scope_3539.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3540).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3541 = writer.prefix("Filter");
    if let Some(var_3542) = &input.filters {
        let mut list_3544 = scope_3541.start_list(true, Some("Filter"));
        for item_3543 in var_3542 {
            #[allow(unused_mut)]
            let mut entry_3545 = list_3544.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3545, item_3543)?;
        }
        list_3544.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3546 = writer.prefix("SubnetId");
    if let Some(var_3547) = &input.subnet_ids {
        let mut list_3549 = scope_3546.start_list(true, Some("SubnetId"));
        for item_3548 in var_3547 {
            #[allow(unused_mut)]
            let mut entry_3550 = list_3549.entry();
            entry_3550.string(item_3548);
        }
        list_3549.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("DryRun");
    if let Some(var_3552) = &input.dry_run {
        scope_3551.boolean(*var_3552);
    }
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("NextToken");
    if let Some(var_3554) = &input.next_token {
        scope_3553.string(var_3554);
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("MaxResults");
    if let Some(var_3556) = &input.max_results {
        scope_3555.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3556).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3557 = writer.prefix("DryRun");
    if let Some(var_3558) = &input.dry_run {
        scope_3557.boolean(*var_3558);
    }
    #[allow(unused_mut)]
    let mut scope_3559 = writer.prefix("Filter");
    if let Some(var_3560) = &input.filters {
        let mut list_3562 = scope_3559.start_list(true, Some("Filter"));
        for item_3561 in var_3560 {
            #[allow(unused_mut)]
            let mut entry_3563 = list_3562.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3563, item_3561)?;
        }
        list_3562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3564 = writer.prefix("MaxResults");
    if let Some(var_3565) = &input.max_results {
        scope_3564.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3565).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3566 = writer.prefix("NextToken");
    if let Some(var_3567) = &input.next_token {
        scope_3566.string(var_3567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3568 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3569) = &input.traffic_mirror_filter_ids {
        let mut list_3571 = scope_3568.start_list(true, Some("item"));
        for item_3570 in var_3569 {
            #[allow(unused_mut)]
            let mut entry_3572 = list_3571.entry();
            entry_3572.string(item_3570);
        }
        list_3571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("DryRun");
    if let Some(var_3574) = &input.dry_run {
        scope_3573.boolean(*var_3574);
    }
    #[allow(unused_mut)]
    let mut scope_3575 = writer.prefix("Filter");
    if let Some(var_3576) = &input.filters {
        let mut list_3578 = scope_3575.start_list(true, Some("Filter"));
        for item_3577 in var_3576 {
            #[allow(unused_mut)]
            let mut entry_3579 = list_3578.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3579, item_3577)?;
        }
        list_3578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3580 = writer.prefix("MaxResults");
    if let Some(var_3581) = &input.max_results {
        scope_3580.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3581).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3582 = writer.prefix("NextToken");
    if let Some(var_3583) = &input.next_token {
        scope_3582.string(var_3583);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3584 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3585) = &input.traffic_mirror_session_ids {
        let mut list_3587 = scope_3584.start_list(true, Some("item"));
        for item_3586 in var_3585 {
            #[allow(unused_mut)]
            let mut entry_3588 = list_3587.entry();
            entry_3588.string(item_3586);
        }
        list_3587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("DryRun");
    if let Some(var_3590) = &input.dry_run {
        scope_3589.boolean(*var_3590);
    }
    #[allow(unused_mut)]
    let mut scope_3591 = writer.prefix("Filter");
    if let Some(var_3592) = &input.filters {
        let mut list_3594 = scope_3591.start_list(true, Some("Filter"));
        for item_3593 in var_3592 {
            #[allow(unused_mut)]
            let mut entry_3595 = list_3594.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3595, item_3593)?;
        }
        list_3594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3596 = writer.prefix("MaxResults");
    if let Some(var_3597) = &input.max_results {
        scope_3596.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3597).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3598 = writer.prefix("NextToken");
    if let Some(var_3599) = &input.next_token {
        scope_3598.string(var_3599);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3600 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3601) = &input.traffic_mirror_target_ids {
        let mut list_3603 = scope_3600.start_list(true, Some("item"));
        for item_3602 in var_3601 {
            #[allow(unused_mut)]
            let mut entry_3604 = list_3603.entry();
            entry_3604.string(item_3602);
        }
        list_3603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("DryRun");
    if let Some(var_3606) = &input.dry_run {
        scope_3605.boolean(*var_3606);
    }
    #[allow(unused_mut)]
    let mut scope_3607 = writer.prefix("Filter");
    if let Some(var_3608) = &input.filters {
        let mut list_3610 = scope_3607.start_list(true, Some("Filter"));
        for item_3609 in var_3608 {
            #[allow(unused_mut)]
            let mut entry_3611 = list_3610.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3611, item_3609)?;
        }
        list_3610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3612 = writer.prefix("MaxResults");
    if let Some(var_3613) = &input.max_results {
        scope_3612.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3613).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3614 = writer.prefix("NextToken");
    if let Some(var_3615) = &input.next_token {
        scope_3614.string(var_3615);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3616 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3617) = &input.transit_gateway_attachment_ids {
        let mut list_3619 = scope_3616.start_list(true, None);
        for item_3618 in var_3617 {
            #[allow(unused_mut)]
            let mut entry_3620 = list_3619.entry();
            entry_3620.string(item_3618);
        }
        list_3619.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("Filter");
    if let Some(var_3622) = &input.filters {
        let mut list_3624 = scope_3621.start_list(true, Some("Filter"));
        for item_3623 in var_3622 {
            #[allow(unused_mut)]
            let mut entry_3625 = list_3624.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3625, item_3623)?;
        }
        list_3624.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3626 = writer.prefix("MaxResults");
    if let Some(var_3627) = &input.max_results {
        scope_3626.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3627).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3628 = writer.prefix("NextToken");
    if let Some(var_3629) = &input.next_token {
        scope_3628.string(var_3629);
    }
    #[allow(unused_mut)]
    let mut scope_3630 = writer.prefix("DryRun");
    if let Some(var_3631) = &input.dry_run {
        scope_3630.boolean(*var_3631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3632 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3633) = &input.transit_gateway_connect_peer_ids {
        let mut list_3635 = scope_3632.start_list(true, Some("item"));
        for item_3634 in var_3633 {
            #[allow(unused_mut)]
            let mut entry_3636 = list_3635.entry();
            entry_3636.string(item_3634);
        }
        list_3635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3637 = writer.prefix("Filter");
    if let Some(var_3638) = &input.filters {
        let mut list_3640 = scope_3637.start_list(true, Some("Filter"));
        for item_3639 in var_3638 {
            #[allow(unused_mut)]
            let mut entry_3641 = list_3640.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3641, item_3639)?;
        }
        list_3640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3642 = writer.prefix("MaxResults");
    if let Some(var_3643) = &input.max_results {
        scope_3642.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3643).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3644 = writer.prefix("NextToken");
    if let Some(var_3645) = &input.next_token {
        scope_3644.string(var_3645);
    }
    #[allow(unused_mut)]
    let mut scope_3646 = writer.prefix("DryRun");
    if let Some(var_3647) = &input.dry_run {
        scope_3646.boolean(*var_3647);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3648 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3649) = &input.transit_gateway_attachment_ids {
        let mut list_3651 = scope_3648.start_list(true, None);
        for item_3650 in var_3649 {
            #[allow(unused_mut)]
            let mut entry_3652 = list_3651.entry();
            entry_3652.string(item_3650);
        }
        list_3651.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3653 = writer.prefix("Filter");
    if let Some(var_3654) = &input.filters {
        let mut list_3656 = scope_3653.start_list(true, Some("Filter"));
        for item_3655 in var_3654 {
            #[allow(unused_mut)]
            let mut entry_3657 = list_3656.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3657, item_3655)?;
        }
        list_3656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("MaxResults");
    if let Some(var_3659) = &input.max_results {
        scope_3658.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3659).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("NextToken");
    if let Some(var_3661) = &input.next_token {
        scope_3660.string(var_3661);
    }
    #[allow(unused_mut)]
    let mut scope_3662 = writer.prefix("DryRun");
    if let Some(var_3663) = &input.dry_run {
        scope_3662.boolean(*var_3663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3665) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3667 = scope_3664.start_list(true, Some("item"));
        for item_3666 in var_3665 {
            #[allow(unused_mut)]
            let mut entry_3668 = list_3667.entry();
            entry_3668.string(item_3666);
        }
        list_3667.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3669 = writer.prefix("Filter");
    if let Some(var_3670) = &input.filters {
        let mut list_3672 = scope_3669.start_list(true, Some("Filter"));
        for item_3671 in var_3670 {
            #[allow(unused_mut)]
            let mut entry_3673 = list_3672.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3673, item_3671)?;
        }
        list_3672.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3674 = writer.prefix("MaxResults");
    if let Some(var_3675) = &input.max_results {
        scope_3674.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3675).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3676 = writer.prefix("NextToken");
    if let Some(var_3677) = &input.next_token {
        scope_3676.string(var_3677);
    }
    #[allow(unused_mut)]
    let mut scope_3678 = writer.prefix("DryRun");
    if let Some(var_3679) = &input.dry_run {
        scope_3678.boolean(*var_3679);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3680 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3681) = &input.transit_gateway_attachment_ids {
        let mut list_3683 = scope_3680.start_list(true, None);
        for item_3682 in var_3681 {
            #[allow(unused_mut)]
            let mut entry_3684 = list_3683.entry();
            entry_3684.string(item_3682);
        }
        list_3683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("Filter");
    if let Some(var_3686) = &input.filters {
        let mut list_3688 = scope_3685.start_list(true, Some("Filter"));
        for item_3687 in var_3686 {
            #[allow(unused_mut)]
            let mut entry_3689 = list_3688.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3689, item_3687)?;
        }
        list_3688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("MaxResults");
    if let Some(var_3691) = &input.max_results {
        scope_3690.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3691).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("NextToken");
    if let Some(var_3693) = &input.next_token {
        scope_3692.string(var_3693);
    }
    #[allow(unused_mut)]
    let mut scope_3694 = writer.prefix("DryRun");
    if let Some(var_3695) = &input.dry_run {
        scope_3694.boolean(*var_3695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_policy_tables(
    input: &crate::input::DescribeTransitGatewayPolicyTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPolicyTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3696 = writer.prefix("TransitGatewayPolicyTableIds");
    if let Some(var_3697) = &input.transit_gateway_policy_table_ids {
        let mut list_3699 = scope_3696.start_list(true, Some("item"));
        for item_3698 in var_3697 {
            #[allow(unused_mut)]
            let mut entry_3700 = list_3699.entry();
            entry_3700.string(item_3698);
        }
        list_3699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3701 = writer.prefix("Filter");
    if let Some(var_3702) = &input.filters {
        let mut list_3704 = scope_3701.start_list(true, Some("Filter"));
        for item_3703 in var_3702 {
            #[allow(unused_mut)]
            let mut entry_3705 = list_3704.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3705, item_3703)?;
        }
        list_3704.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("MaxResults");
    if let Some(var_3707) = &input.max_results {
        scope_3706.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3707).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("NextToken");
    if let Some(var_3709) = &input.next_token {
        scope_3708.string(var_3709);
    }
    #[allow(unused_mut)]
    let mut scope_3710 = writer.prefix("DryRun");
    if let Some(var_3711) = &input.dry_run {
        scope_3710.boolean(*var_3711);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_table_announcements(
    input: &crate::input::DescribeTransitGatewayRouteTableAnnouncementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTableAnnouncements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("TransitGatewayRouteTableAnnouncementIds");
    if let Some(var_3713) = &input.transit_gateway_route_table_announcement_ids {
        let mut list_3715 = scope_3712.start_list(true, Some("item"));
        for item_3714 in var_3713 {
            #[allow(unused_mut)]
            let mut entry_3716 = list_3715.entry();
            entry_3716.string(item_3714);
        }
        list_3715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3717 = writer.prefix("Filter");
    if let Some(var_3718) = &input.filters {
        let mut list_3720 = scope_3717.start_list(true, Some("Filter"));
        for item_3719 in var_3718 {
            #[allow(unused_mut)]
            let mut entry_3721 = list_3720.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3721, item_3719)?;
        }
        list_3720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("MaxResults");
    if let Some(var_3723) = &input.max_results {
        scope_3722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3723).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("NextToken");
    if let Some(var_3725) = &input.next_token {
        scope_3724.string(var_3725);
    }
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("DryRun");
    if let Some(var_3727) = &input.dry_run {
        scope_3726.boolean(*var_3727);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3729) = &input.transit_gateway_route_table_ids {
        let mut list_3731 = scope_3728.start_list(true, Some("item"));
        for item_3730 in var_3729 {
            #[allow(unused_mut)]
            let mut entry_3732 = list_3731.entry();
            entry_3732.string(item_3730);
        }
        list_3731.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3733 = writer.prefix("Filter");
    if let Some(var_3734) = &input.filters {
        let mut list_3736 = scope_3733.start_list(true, Some("Filter"));
        for item_3735 in var_3734 {
            #[allow(unused_mut)]
            let mut entry_3737 = list_3736.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3737, item_3735)?;
        }
        list_3736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("MaxResults");
    if let Some(var_3739) = &input.max_results {
        scope_3738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3739).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("NextToken");
    if let Some(var_3741) = &input.next_token {
        scope_3740.string(var_3741);
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("DryRun");
    if let Some(var_3743) = &input.dry_run {
        scope_3742.boolean(*var_3743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("TransitGatewayIds");
    if let Some(var_3745) = &input.transit_gateway_ids {
        let mut list_3747 = scope_3744.start_list(true, Some("item"));
        for item_3746 in var_3745 {
            #[allow(unused_mut)]
            let mut entry_3748 = list_3747.entry();
            entry_3748.string(item_3746);
        }
        list_3747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3749 = writer.prefix("Filter");
    if let Some(var_3750) = &input.filters {
        let mut list_3752 = scope_3749.start_list(true, Some("Filter"));
        for item_3751 in var_3750 {
            #[allow(unused_mut)]
            let mut entry_3753 = list_3752.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3753, item_3751)?;
        }
        list_3752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3754 = writer.prefix("MaxResults");
    if let Some(var_3755) = &input.max_results {
        scope_3754.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3755).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3756 = writer.prefix("NextToken");
    if let Some(var_3757) = &input.next_token {
        scope_3756.string(var_3757);
    }
    #[allow(unused_mut)]
    let mut scope_3758 = writer.prefix("DryRun");
    if let Some(var_3759) = &input.dry_run {
        scope_3758.boolean(*var_3759);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3761) = &input.transit_gateway_attachment_ids {
        let mut list_3763 = scope_3760.start_list(true, None);
        for item_3762 in var_3761 {
            #[allow(unused_mut)]
            let mut entry_3764 = list_3763.entry();
            entry_3764.string(item_3762);
        }
        list_3763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("Filter");
    if let Some(var_3766) = &input.filters {
        let mut list_3768 = scope_3765.start_list(true, Some("Filter"));
        for item_3767 in var_3766 {
            #[allow(unused_mut)]
            let mut entry_3769 = list_3768.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3769, item_3767)?;
        }
        list_3768.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3770 = writer.prefix("MaxResults");
    if let Some(var_3771) = &input.max_results {
        scope_3770.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3771).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("NextToken");
    if let Some(var_3773) = &input.next_token {
        scope_3772.string(var_3773);
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("DryRun");
    if let Some(var_3775) = &input.dry_run {
        scope_3774.boolean(*var_3775);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("AssociationId");
    if let Some(var_3777) = &input.association_ids {
        let mut list_3779 = scope_3776.start_list(true, Some("item"));
        for item_3778 in var_3777 {
            #[allow(unused_mut)]
            let mut entry_3780 = list_3779.entry();
            entry_3780.string(item_3778);
        }
        list_3779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3781 = writer.prefix("DryRun");
    if let Some(var_3782) = &input.dry_run {
        scope_3781.boolean(*var_3782);
    }
    #[allow(unused_mut)]
    let mut scope_3783 = writer.prefix("Filter");
    if let Some(var_3784) = &input.filters {
        let mut list_3786 = scope_3783.start_list(true, Some("Filter"));
        for item_3785 in var_3784 {
            #[allow(unused_mut)]
            let mut entry_3787 = list_3786.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3787, item_3785)?;
        }
        list_3786.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3788 = writer.prefix("NextToken");
    if let Some(var_3789) = &input.next_token {
        scope_3788.string(var_3789);
    }
    #[allow(unused_mut)]
    let mut scope_3790 = writer.prefix("MaxResults");
    if let Some(var_3791) = &input.max_results {
        scope_3790.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3791).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3792 = writer.prefix("Attribute");
    if let Some(var_3793) = &input.attribute {
        scope_3792.string(var_3793.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3794 = writer.prefix("VolumeId");
    if let Some(var_3795) = &input.volume_id {
        scope_3794.string(var_3795);
    }
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("DryRun");
    if let Some(var_3797) = &input.dry_run {
        scope_3796.boolean(*var_3797);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("Filter");
    if let Some(var_3799) = &input.filters {
        let mut list_3801 = scope_3798.start_list(true, Some("Filter"));
        for item_3800 in var_3799 {
            #[allow(unused_mut)]
            let mut entry_3802 = list_3801.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3802, item_3800)?;
        }
        list_3801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("VolumeId");
    if let Some(var_3804) = &input.volume_ids {
        let mut list_3806 = scope_3803.start_list(true, Some("VolumeId"));
        for item_3805 in var_3804 {
            #[allow(unused_mut)]
            let mut entry_3807 = list_3806.entry();
            entry_3807.string(item_3805);
        }
        list_3806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("DryRun");
    if let Some(var_3809) = &input.dry_run {
        scope_3808.boolean(*var_3809);
    }
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("MaxResults");
    if let Some(var_3811) = &input.max_results {
        scope_3810.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("NextToken");
    if let Some(var_3813) = &input.next_token {
        scope_3812.string(var_3813);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("DryRun");
    if let Some(var_3815) = &input.dry_run {
        scope_3814.boolean(*var_3815);
    }
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("VolumeId");
    if let Some(var_3817) = &input.volume_ids {
        let mut list_3819 = scope_3816.start_list(true, Some("VolumeId"));
        for item_3818 in var_3817 {
            #[allow(unused_mut)]
            let mut entry_3820 = list_3819.entry();
            entry_3820.string(item_3818);
        }
        list_3819.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3821 = writer.prefix("Filter");
    if let Some(var_3822) = &input.filters {
        let mut list_3824 = scope_3821.start_list(true, Some("Filter"));
        for item_3823 in var_3822 {
            #[allow(unused_mut)]
            let mut entry_3825 = list_3824.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3825, item_3823)?;
        }
        list_3824.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3826 = writer.prefix("NextToken");
    if let Some(var_3827) = &input.next_token {
        scope_3826.string(var_3827);
    }
    #[allow(unused_mut)]
    let mut scope_3828 = writer.prefix("MaxResults");
    if let Some(var_3829) = &input.max_results {
        scope_3828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3829).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3830 = writer.prefix("Filter");
    if let Some(var_3831) = &input.filters {
        let mut list_3833 = scope_3830.start_list(true, Some("Filter"));
        for item_3832 in var_3831 {
            #[allow(unused_mut)]
            let mut entry_3834 = list_3833.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3834, item_3832)?;
        }
        list_3833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("MaxResults");
    if let Some(var_3836) = &input.max_results {
        scope_3835.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3836).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3837 = writer.prefix("NextToken");
    if let Some(var_3838) = &input.next_token {
        scope_3837.string(var_3838);
    }
    #[allow(unused_mut)]
    let mut scope_3839 = writer.prefix("VolumeId");
    if let Some(var_3840) = &input.volume_ids {
        let mut list_3842 = scope_3839.start_list(true, Some("VolumeId"));
        for item_3841 in var_3840 {
            #[allow(unused_mut)]
            let mut entry_3843 = list_3842.entry();
            entry_3843.string(item_3841);
        }
        list_3842.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3844 = writer.prefix("DryRun");
    if let Some(var_3845) = &input.dry_run {
        scope_3844.boolean(*var_3845);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3846 = writer.prefix("Attribute");
    if let Some(var_3847) = &input.attribute {
        scope_3846.string(var_3847.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3848 = writer.prefix("VpcId");
    if let Some(var_3849) = &input.vpc_id {
        scope_3848.string(var_3849);
    }
    #[allow(unused_mut)]
    let mut scope_3850 = writer.prefix("DryRun");
    if let Some(var_3851) = &input.dry_run {
        scope_3850.boolean(*var_3851);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3852 = writer.prefix("Filter");
    if let Some(var_3853) = &input.filters {
        let mut list_3855 = scope_3852.start_list(true, Some("Filter"));
        for item_3854 in var_3853 {
            #[allow(unused_mut)]
            let mut entry_3856 = list_3855.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3856, item_3854)?;
        }
        list_3855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("DryRun");
    if let Some(var_3858) = &input.dry_run {
        scope_3857.boolean(*var_3858);
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("VpcId");
    if let Some(var_3860) = &input.vpc_ids {
        let mut list_3862 = scope_3859.start_list(true, Some("VpcId"));
        for item_3861 in var_3860 {
            #[allow(unused_mut)]
            let mut entry_3863 = list_3862.entry();
            entry_3863.string(item_3861);
        }
        list_3862.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3864 = writer.prefix("MaxResults");
    if let Some(var_3865) = &input.max_results {
        scope_3864.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3865).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3866 = writer.prefix("NextToken");
    if let Some(var_3867) = &input.next_token {
        scope_3866.string(var_3867);
    }
    #[allow(unused_mut)]
    let mut scope_3868 = writer.prefix("VpcIds");
    if let Some(var_3869) = &input.vpc_ids {
        let mut list_3871 = scope_3868.start_list(true, Some("VpcId"));
        for item_3870 in var_3869 {
            #[allow(unused_mut)]
            let mut entry_3872 = list_3871.entry();
            entry_3872.string(item_3870);
        }
        list_3871.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3873 = writer.prefix("DryRun");
    if let Some(var_3874) = &input.dry_run {
        scope_3873.boolean(*var_3874);
    }
    #[allow(unused_mut)]
    let mut scope_3875 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3876) = &input.connection_notification_id {
        scope_3875.string(var_3876);
    }
    #[allow(unused_mut)]
    let mut scope_3877 = writer.prefix("Filter");
    if let Some(var_3878) = &input.filters {
        let mut list_3880 = scope_3877.start_list(true, Some("Filter"));
        for item_3879 in var_3878 {
            #[allow(unused_mut)]
            let mut entry_3881 = list_3880.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3881, item_3879)?;
        }
        list_3880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("MaxResults");
    if let Some(var_3883) = &input.max_results {
        scope_3882.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3883).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("NextToken");
    if let Some(var_3885) = &input.next_token {
        scope_3884.string(var_3885);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("DryRun");
    if let Some(var_3887) = &input.dry_run {
        scope_3886.boolean(*var_3887);
    }
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("Filter");
    if let Some(var_3889) = &input.filters {
        let mut list_3891 = scope_3888.start_list(true, Some("Filter"));
        for item_3890 in var_3889 {
            #[allow(unused_mut)]
            let mut entry_3892 = list_3891.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3892, item_3890)?;
        }
        list_3891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3893 = writer.prefix("MaxResults");
    if let Some(var_3894) = &input.max_results {
        scope_3893.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3894).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3895 = writer.prefix("NextToken");
    if let Some(var_3896) = &input.next_token {
        scope_3895.string(var_3896);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3897 = writer.prefix("DryRun");
    if let Some(var_3898) = &input.dry_run {
        scope_3897.boolean(*var_3898);
    }
    #[allow(unused_mut)]
    let mut scope_3899 = writer.prefix("VpcEndpointId");
    if let Some(var_3900) = &input.vpc_endpoint_ids {
        let mut list_3902 = scope_3899.start_list(true, Some("item"));
        for item_3901 in var_3900 {
            #[allow(unused_mut)]
            let mut entry_3903 = list_3902.entry();
            entry_3903.string(item_3901);
        }
        list_3902.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("Filter");
    if let Some(var_3905) = &input.filters {
        let mut list_3907 = scope_3904.start_list(true, Some("Filter"));
        for item_3906 in var_3905 {
            #[allow(unused_mut)]
            let mut entry_3908 = list_3907.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3908, item_3906)?;
        }
        list_3907.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3909 = writer.prefix("MaxResults");
    if let Some(var_3910) = &input.max_results {
        scope_3909.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3910).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3911 = writer.prefix("NextToken");
    if let Some(var_3912) = &input.next_token {
        scope_3911.string(var_3912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3913 = writer.prefix("DryRun");
    if let Some(var_3914) = &input.dry_run {
        scope_3913.boolean(*var_3914);
    }
    #[allow(unused_mut)]
    let mut scope_3915 = writer.prefix("ServiceId");
    if let Some(var_3916) = &input.service_ids {
        let mut list_3918 = scope_3915.start_list(true, Some("item"));
        for item_3917 in var_3916 {
            #[allow(unused_mut)]
            let mut entry_3919 = list_3918.entry();
            entry_3919.string(item_3917);
        }
        list_3918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3920 = writer.prefix("Filter");
    if let Some(var_3921) = &input.filters {
        let mut list_3923 = scope_3920.start_list(true, Some("Filter"));
        for item_3922 in var_3921 {
            #[allow(unused_mut)]
            let mut entry_3924 = list_3923.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3924, item_3922)?;
        }
        list_3923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("MaxResults");
    if let Some(var_3926) = &input.max_results {
        scope_3925.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3926).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("NextToken");
    if let Some(var_3928) = &input.next_token {
        scope_3927.string(var_3928);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("DryRun");
    if let Some(var_3930) = &input.dry_run {
        scope_3929.boolean(*var_3930);
    }
    #[allow(unused_mut)]
    let mut scope_3931 = writer.prefix("ServiceId");
    if let Some(var_3932) = &input.service_id {
        scope_3931.string(var_3932);
    }
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("Filter");
    if let Some(var_3934) = &input.filters {
        let mut list_3936 = scope_3933.start_list(true, Some("Filter"));
        for item_3935 in var_3934 {
            #[allow(unused_mut)]
            let mut entry_3937 = list_3936.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3937, item_3935)?;
        }
        list_3936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3938 = writer.prefix("MaxResults");
    if let Some(var_3939) = &input.max_results {
        scope_3938.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3939).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3940 = writer.prefix("NextToken");
    if let Some(var_3941) = &input.next_token {
        scope_3940.string(var_3941);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3942 = writer.prefix("DryRun");
    if let Some(var_3943) = &input.dry_run {
        scope_3942.boolean(*var_3943);
    }
    #[allow(unused_mut)]
    let mut scope_3944 = writer.prefix("ServiceName");
    if let Some(var_3945) = &input.service_names {
        let mut list_3947 = scope_3944.start_list(true, Some("item"));
        for item_3946 in var_3945 {
            #[allow(unused_mut)]
            let mut entry_3948 = list_3947.entry();
            entry_3948.string(item_3946);
        }
        list_3947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("Filter");
    if let Some(var_3950) = &input.filters {
        let mut list_3952 = scope_3949.start_list(true, Some("Filter"));
        for item_3951 in var_3950 {
            #[allow(unused_mut)]
            let mut entry_3953 = list_3952.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3953, item_3951)?;
        }
        list_3952.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3954 = writer.prefix("MaxResults");
    if let Some(var_3955) = &input.max_results {
        scope_3954.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3955).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3956 = writer.prefix("NextToken");
    if let Some(var_3957) = &input.next_token {
        scope_3956.string(var_3957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3958 = writer.prefix("Filter");
    if let Some(var_3959) = &input.filters {
        let mut list_3961 = scope_3958.start_list(true, Some("Filter"));
        for item_3960 in var_3959 {
            #[allow(unused_mut)]
            let mut entry_3962 = list_3961.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3962, item_3960)?;
        }
        list_3961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("DryRun");
    if let Some(var_3964) = &input.dry_run {
        scope_3963.boolean(*var_3964);
    }
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3966) = &input.vpc_peering_connection_ids {
        let mut list_3968 = scope_3965.start_list(true, Some("item"));
        for item_3967 in var_3966 {
            #[allow(unused_mut)]
            let mut entry_3969 = list_3968.entry();
            entry_3969.string(item_3967);
        }
        list_3968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("NextToken");
    if let Some(var_3971) = &input.next_token {
        scope_3970.string(var_3971);
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("MaxResults");
    if let Some(var_3973) = &input.max_results {
        scope_3972.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3973).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("Filter");
    if let Some(var_3975) = &input.filters {
        let mut list_3977 = scope_3974.start_list(true, Some("Filter"));
        for item_3976 in var_3975 {
            #[allow(unused_mut)]
            let mut entry_3978 = list_3977.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3978, item_3976)?;
        }
        list_3977.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("VpcId");
    if let Some(var_3980) = &input.vpc_ids {
        let mut list_3982 = scope_3979.start_list(true, Some("VpcId"));
        for item_3981 in var_3980 {
            #[allow(unused_mut)]
            let mut entry_3983 = list_3982.entry();
            entry_3983.string(item_3981);
        }
        list_3982.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3984 = writer.prefix("DryRun");
    if let Some(var_3985) = &input.dry_run {
        scope_3984.boolean(*var_3985);
    }
    #[allow(unused_mut)]
    let mut scope_3986 = writer.prefix("NextToken");
    if let Some(var_3987) = &input.next_token {
        scope_3986.string(var_3987);
    }
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("MaxResults");
    if let Some(var_3989) = &input.max_results {
        scope_3988.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3989).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3990 = writer.prefix("Filter");
    if let Some(var_3991) = &input.filters {
        let mut list_3993 = scope_3990.start_list(true, Some("Filter"));
        for item_3992 in var_3991 {
            #[allow(unused_mut)]
            let mut entry_3994 = list_3993.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3994, item_3992)?;
        }
        list_3993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3995 = writer.prefix("VpnConnectionId");
    if let Some(var_3996) = &input.vpn_connection_ids {
        let mut list_3998 = scope_3995.start_list(true, Some("VpnConnectionId"));
        for item_3997 in var_3996 {
            #[allow(unused_mut)]
            let mut entry_3999 = list_3998.entry();
            entry_3999.string(item_3997);
        }
        list_3998.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("DryRun");
    if let Some(var_4001) = &input.dry_run {
        scope_4000.boolean(*var_4001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("Filter");
    if let Some(var_4003) = &input.filters {
        let mut list_4005 = scope_4002.start_list(true, Some("Filter"));
        for item_4004 in var_4003 {
            #[allow(unused_mut)]
            let mut entry_4006 = list_4005.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4006, item_4004)?;
        }
        list_4005.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("VpnGatewayId");
    if let Some(var_4008) = &input.vpn_gateway_ids {
        let mut list_4010 = scope_4007.start_list(true, Some("VpnGatewayId"));
        for item_4009 in var_4008 {
            #[allow(unused_mut)]
            let mut entry_4011 = list_4010.entry();
            entry_4011.string(item_4009);
        }
        list_4010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("DryRun");
    if let Some(var_4013) = &input.dry_run {
        scope_4012.boolean(*var_4013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("DryRun");
    if let Some(var_4015) = &input.dry_run {
        scope_4014.boolean(*var_4015);
    }
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("InstanceId");
    if let Some(var_4017) = &input.instance_id {
        scope_4016.string(var_4017);
    }
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("VpcId");
    if let Some(var_4019) = &input.vpc_id {
        scope_4018.string(var_4019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("DryRun");
    if let Some(var_4021) = &input.dry_run {
        scope_4020.boolean(*var_4021);
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("InternetGatewayId");
    if let Some(var_4023) = &input.internet_gateway_id {
        scope_4022.string(var_4023);
    }
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("VpcId");
    if let Some(var_4025) = &input.vpc_id {
        scope_4024.string(var_4025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("AttachmentId");
    if let Some(var_4027) = &input.attachment_id {
        scope_4026.string(var_4027);
    }
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("DryRun");
    if let Some(var_4029) = &input.dry_run {
        scope_4028.boolean(*var_4029);
    }
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("Force");
    if let Some(var_4031) = &input.force {
        scope_4030.boolean(*var_4031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4032 = writer.prefix("Device");
    if let Some(var_4033) = &input.device {
        scope_4032.string(var_4033);
    }
    #[allow(unused_mut)]
    let mut scope_4034 = writer.prefix("Force");
    if let Some(var_4035) = &input.force {
        scope_4034.boolean(*var_4035);
    }
    #[allow(unused_mut)]
    let mut scope_4036 = writer.prefix("InstanceId");
    if let Some(var_4037) = &input.instance_id {
        scope_4036.string(var_4037);
    }
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("VolumeId");
    if let Some(var_4039) = &input.volume_id {
        scope_4038.string(var_4039);
    }
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("DryRun");
    if let Some(var_4041) = &input.dry_run {
        scope_4040.boolean(*var_4041);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("VpcId");
    if let Some(var_4043) = &input.vpc_id {
        scope_4042.string(var_4043);
    }
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("VpnGatewayId");
    if let Some(var_4045) = &input.vpn_gateway_id {
        scope_4044.string(var_4045);
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("DryRun");
    if let Some(var_4047) = &input.dry_run {
        scope_4046.boolean(*var_4047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("DryRun");
    if let Some(var_4049) = &input.dry_run {
        scope_4048.boolean(*var_4049);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("ImageId");
    if let Some(var_4051) = &input.image_id {
        scope_4050.string(var_4051);
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("Force");
    if let Some(var_4053) = &input.force {
        scope_4052.boolean(*var_4053);
    }
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("DryRun");
    if let Some(var_4055) = &input.dry_run {
        scope_4054.boolean(*var_4055);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("AvailabilityZone");
    if let Some(var_4057) = &input.availability_zones {
        let mut list_4059 = scope_4056.start_list(true, Some("AvailabilityZone"));
        for item_4058 in var_4057 {
            #[allow(unused_mut)]
            let mut entry_4060 = list_4059.entry();
            entry_4060.string(item_4058);
        }
        list_4059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4061 = writer.prefix("SourceSnapshotId");
    if let Some(var_4062) = &input.source_snapshot_ids {
        let mut list_4064 = scope_4061.start_list(true, Some("SnapshotId"));
        for item_4063 in var_4062 {
            #[allow(unused_mut)]
            let mut entry_4065 = list_4064.entry();
            entry_4065.string(item_4063);
        }
        list_4064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("DryRun");
    if let Some(var_4067) = &input.dry_run {
        scope_4066.boolean(*var_4067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("ImageId");
    if let Some(var_4069) = &input.image_id {
        scope_4068.string(var_4069);
    }
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("DryRun");
    if let Some(var_4071) = &input.dry_run {
        scope_4070.boolean(*var_4071);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("DryRun");
    if let Some(var_4073) = &input.dry_run {
        scope_4072.boolean(*var_4073);
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4075) = &input.delegated_admin_account_id {
        scope_4074.string(var_4075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4076 = writer.prefix("DryRun");
    if let Some(var_4077) = &input.dry_run {
        scope_4076.boolean(*var_4077);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4078 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4079) = &input.transit_gateway_route_table_id {
        scope_4078.string(var_4079);
    }
    #[allow(unused_mut)]
    let mut scope_4080 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4081) = &input.transit_gateway_attachment_id {
        scope_4080.string(var_4081);
    }
    #[allow(unused_mut)]
    let mut scope_4082 = writer.prefix("DryRun");
    if let Some(var_4083) = &input.dry_run {
        scope_4082.boolean(*var_4083);
    }
    #[allow(unused_mut)]
    let mut scope_4084 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4085) = &input.transit_gateway_route_table_announcement_id {
        scope_4084.string(var_4085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4086 = writer.prefix("GatewayId");
    if let Some(var_4087) = &input.gateway_id {
        scope_4086.string(var_4087);
    }
    #[allow(unused_mut)]
    let mut scope_4088 = writer.prefix("RouteTableId");
    if let Some(var_4089) = &input.route_table_id {
        scope_4088.string(var_4089);
    }
    #[allow(unused_mut)]
    let mut scope_4090 = writer.prefix("DryRun");
    if let Some(var_4091) = &input.dry_run {
        scope_4090.boolean(*var_4091);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("DryRun");
    if let Some(var_4093) = &input.dry_run {
        scope_4092.boolean(*var_4093);
    }
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("VpcId");
    if let Some(var_4095) = &input.vpc_id {
        scope_4094.string(var_4095);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("VpcId");
    if let Some(var_4097) = &input.vpc_id {
        scope_4096.string(var_4097);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("AssociationId");
    if let Some(var_4099) = &input.association_id {
        scope_4098.string(var_4099);
    }
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("PublicIp");
    if let Some(var_4101) = &input.public_ip {
        scope_4100.string(var_4101);
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("DryRun");
    if let Some(var_4103) = &input.dry_run {
        scope_4102.boolean(*var_4103);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4105) = &input.client_vpn_endpoint_id {
        scope_4104.string(var_4105);
    }
    #[allow(unused_mut)]
    let mut scope_4106 = writer.prefix("AssociationId");
    if let Some(var_4107) = &input.association_id {
        scope_4106.string(var_4107);
    }
    #[allow(unused_mut)]
    let mut scope_4108 = writer.prefix("DryRun");
    if let Some(var_4109) = &input.dry_run {
        scope_4108.boolean(*var_4109);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4110 = writer.prefix("CertificateArn");
    if let Some(var_4111) = &input.certificate_arn {
        scope_4110.string(var_4111);
    }
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("RoleArn");
    if let Some(var_4113) = &input.role_arn {
        scope_4112.string(var_4113);
    }
    #[allow(unused_mut)]
    let mut scope_4114 = writer.prefix("DryRun");
    if let Some(var_4115) = &input.dry_run {
        scope_4114.boolean(*var_4115);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("AssociationId");
    if let Some(var_4117) = &input.association_id {
        scope_4116.string(var_4117);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("DryRun");
    if let Some(var_4119) = &input.dry_run {
        scope_4118.boolean(*var_4119);
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4121) = &input.instance_event_window_id {
        scope_4120.string(var_4121);
    }
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("AssociationTarget");
    if let Some(var_4123) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4122, var_4123)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("AssociationId");
    if let Some(var_4125) = &input.association_id {
        scope_4124.string(var_4125);
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("DryRun");
    if let Some(var_4127) = &input.dry_run {
        scope_4126.boolean(*var_4127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("AssociationId");
    if let Some(var_4129) = &input.association_id {
        scope_4128.string(var_4129);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4131) = &input.transit_gateway_multicast_domain_id {
        scope_4130.string(var_4131);
    }
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4133) = &input.transit_gateway_attachment_id {
        scope_4132.string(var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("SubnetIds");
    if let Some(var_4135) = &input.subnet_ids {
        let mut list_4137 = scope_4134.start_list(true, Some("item"));
        for item_4136 in var_4135 {
            #[allow(unused_mut)]
            let mut entry_4138 = list_4137.entry();
            entry_4138.string(item_4136);
        }
        list_4137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("DryRun");
    if let Some(var_4140) = &input.dry_run {
        scope_4139.boolean(*var_4140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_policy_table(
    input: &crate::input::DisassociateTransitGatewayPolicyTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayPolicyTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4142) = &input.transit_gateway_policy_table_id {
        scope_4141.string(var_4142);
    }
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4144) = &input.transit_gateway_attachment_id {
        scope_4143.string(var_4144);
    }
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("DryRun");
    if let Some(var_4146) = &input.dry_run {
        scope_4145.boolean(*var_4146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4148) = &input.transit_gateway_route_table_id {
        scope_4147.string(var_4148);
    }
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4150) = &input.transit_gateway_attachment_id {
        scope_4149.string(var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("DryRun");
    if let Some(var_4152) = &input.dry_run {
        scope_4151.boolean(*var_4152);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("AssociationId");
    if let Some(var_4154) = &input.association_id {
        scope_4153.string(var_4154);
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("ClientToken");
    if let Some(var_4156) = &input.client_token {
        scope_4155.string(var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("DryRun");
    if let Some(var_4158) = &input.dry_run {
        scope_4157.boolean(*var_4158);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("AssociationId");
    if let Some(var_4160) = &input.association_id {
        scope_4159.string(var_4160);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("DryRun");
    if let Some(var_4162) = &input.dry_run {
        scope_4161.boolean(*var_4162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("ImageId");
    if let Some(var_4164) = &input.image_id {
        scope_4163.string(var_4164);
    }
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("ResourceType");
    if let Some(var_4166) = &input.resource_type {
        scope_4165.string(var_4166);
    }
    #[allow(unused_mut)]
    let mut scope_4167 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4168) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4167, var_4168)?;
    }
    #[allow(unused_mut)]
    let mut scope_4169 = writer.prefix("LaunchTemplate");
    if let Some(var_4170) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4169, var_4170)?;
    }
    #[allow(unused_mut)]
    let mut scope_4171 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4172) = &input.max_parallel_launches {
        scope_4171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4172).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4173 = writer.prefix("DryRun");
    if let Some(var_4174) = &input.dry_run {
        scope_4173.boolean(*var_4174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4175 = writer.prefix("AvailabilityZone");
    if let Some(var_4176) = &input.availability_zones {
        let mut list_4178 = scope_4175.start_list(true, Some("AvailabilityZone"));
        for item_4177 in var_4176 {
            #[allow(unused_mut)]
            let mut entry_4179 = list_4178.entry();
            entry_4179.string(item_4177);
        }
        list_4178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4180 = writer.prefix("SourceSnapshotId");
    if let Some(var_4181) = &input.source_snapshot_ids {
        let mut list_4183 = scope_4180.start_list(true, Some("SnapshotId"));
        for item_4182 in var_4181 {
            #[allow(unused_mut)]
            let mut entry_4184 = list_4183.entry();
            entry_4184.string(item_4182);
        }
        list_4183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("DryRun");
    if let Some(var_4186) = &input.dry_run {
        scope_4185.boolean(*var_4186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("ImageId");
    if let Some(var_4188) = &input.image_id {
        scope_4187.string(var_4188);
    }
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("DeprecateAt");
    if let Some(var_4190) = &input.deprecate_at {
        scope_4189.date_time(var_4190, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("DryRun");
    if let Some(var_4192) = &input.dry_run {
        scope_4191.boolean(*var_4192);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("DryRun");
    if let Some(var_4194) = &input.dry_run {
        scope_4193.boolean(*var_4194);
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4196) = &input.delegated_admin_account_id {
        scope_4195.string(var_4196);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("DryRun");
    if let Some(var_4198) = &input.dry_run {
        scope_4197.boolean(*var_4198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4200) = &input.transit_gateway_route_table_id {
        scope_4199.string(var_4200);
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4202) = &input.transit_gateway_attachment_id {
        scope_4201.string(var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("DryRun");
    if let Some(var_4204) = &input.dry_run {
        scope_4203.boolean(*var_4204);
    }
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4206) = &input.transit_gateway_route_table_announcement_id {
        scope_4205.string(var_4206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4207 = writer.prefix("GatewayId");
    if let Some(var_4208) = &input.gateway_id {
        scope_4207.string(var_4208);
    }
    #[allow(unused_mut)]
    let mut scope_4209 = writer.prefix("RouteTableId");
    if let Some(var_4210) = &input.route_table_id {
        scope_4209.string(var_4210);
    }
    #[allow(unused_mut)]
    let mut scope_4211 = writer.prefix("DryRun");
    if let Some(var_4212) = &input.dry_run {
        scope_4211.boolean(*var_4212);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4213 = writer.prefix("DryRun");
    if let Some(var_4214) = &input.dry_run {
        scope_4213.boolean(*var_4214);
    }
    #[allow(unused_mut)]
    let mut scope_4215 = writer.prefix("VolumeId");
    if let Some(var_4216) = &input.volume_id {
        scope_4215.string(var_4216);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4217 = writer.prefix("DryRun");
    if let Some(var_4218) = &input.dry_run {
        scope_4217.boolean(*var_4218);
    }
    #[allow(unused_mut)]
    let mut scope_4219 = writer.prefix("VpcId");
    if let Some(var_4220) = &input.vpc_id {
        scope_4219.string(var_4220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4221 = writer.prefix("VpcId");
    if let Some(var_4222) = &input.vpc_id {
        scope_4221.string(var_4222);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4223 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4224) = &input.client_vpn_endpoint_id {
        scope_4223.string(var_4224);
    }
    #[allow(unused_mut)]
    let mut scope_4225 = writer.prefix("DryRun");
    if let Some(var_4226) = &input.dry_run {
        scope_4225.boolean(*var_4226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4227 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4228) = &input.client_vpn_endpoint_id {
        scope_4227.string(var_4228);
    }
    #[allow(unused_mut)]
    let mut scope_4229 = writer.prefix("DryRun");
    if let Some(var_4230) = &input.dry_run {
        scope_4229.boolean(*var_4230);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4231 = writer.prefix("ClientToken");
    if let Some(var_4232) = &input.client_token {
        scope_4231.string(var_4232);
    }
    #[allow(unused_mut)]
    let mut scope_4233 = writer.prefix("Description");
    if let Some(var_4234) = &input.description {
        scope_4233.string(var_4234);
    }
    #[allow(unused_mut)]
    let mut scope_4235 = writer.prefix("DiskImageFormat");
    if let Some(var_4236) = &input.disk_image_format {
        scope_4235.string(var_4236.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4237 = writer.prefix("DryRun");
    if let Some(var_4238) = &input.dry_run {
        scope_4237.boolean(*var_4238);
    }
    #[allow(unused_mut)]
    let mut scope_4239 = writer.prefix("ImageId");
    if let Some(var_4240) = &input.image_id {
        scope_4239.string(var_4240);
    }
    #[allow(unused_mut)]
    let mut scope_4241 = writer.prefix("S3ExportLocation");
    if let Some(var_4242) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4241, var_4242,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4243 = writer.prefix("RoleName");
    if let Some(var_4244) = &input.role_name {
        scope_4243.string(var_4244);
    }
    #[allow(unused_mut)]
    let mut scope_4245 = writer.prefix("TagSpecification");
    if let Some(var_4246) = &input.tag_specifications {
        let mut list_4248 = scope_4245.start_list(true, Some("item"));
        for item_4247 in var_4246 {
            #[allow(unused_mut)]
            let mut entry_4249 = list_4248.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4249, item_4247,
            )?;
        }
        list_4248.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4250 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4251) = &input.transit_gateway_route_table_id {
        scope_4250.string(var_4251);
    }
    #[allow(unused_mut)]
    let mut scope_4252 = writer.prefix("Filter");
    if let Some(var_4253) = &input.filters {
        let mut list_4255 = scope_4252.start_list(true, Some("Filter"));
        for item_4254 in var_4253 {
            #[allow(unused_mut)]
            let mut entry_4256 = list_4255.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4256, item_4254)?;
        }
        list_4255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4257 = writer.prefix("S3Bucket");
    if let Some(var_4258) = &input.s3_bucket {
        scope_4257.string(var_4258);
    }
    #[allow(unused_mut)]
    let mut scope_4259 = writer.prefix("DryRun");
    if let Some(var_4260) = &input.dry_run {
        scope_4259.boolean(*var_4260);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4261 = writer.prefix("CertificateArn");
    if let Some(var_4262) = &input.certificate_arn {
        scope_4261.string(var_4262);
    }
    #[allow(unused_mut)]
    let mut scope_4263 = writer.prefix("DryRun");
    if let Some(var_4264) = &input.dry_run {
        scope_4263.boolean(*var_4264);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4265 = writer.prefix("PoolId");
    if let Some(var_4266) = &input.pool_id {
        scope_4265.string(var_4266);
    }
    #[allow(unused_mut)]
    let mut scope_4267 = writer.prefix("NextToken");
    if let Some(var_4268) = &input.next_token {
        scope_4267.string(var_4268);
    }
    #[allow(unused_mut)]
    let mut scope_4269 = writer.prefix("MaxResults");
    if let Some(var_4270) = &input.max_results {
        scope_4269.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4271 = writer.prefix("DryRun");
    if let Some(var_4272) = &input.dry_run {
        scope_4271.boolean(*var_4272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("CapacityReservationId");
    if let Some(var_4274) = &input.capacity_reservation_id {
        scope_4273.string(var_4274);
    }
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("NextToken");
    if let Some(var_4276) = &input.next_token {
        scope_4275.string(var_4276);
    }
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("MaxResults");
    if let Some(var_4278) = &input.max_results {
        scope_4277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("DryRun");
    if let Some(var_4280) = &input.dry_run {
        scope_4279.boolean(*var_4280);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("PoolId");
    if let Some(var_4282) = &input.pool_id {
        scope_4281.string(var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("Filter");
    if let Some(var_4284) = &input.filters {
        let mut list_4286 = scope_4283.start_list(true, Some("Filter"));
        for item_4285 in var_4284 {
            #[allow(unused_mut)]
            let mut entry_4287 = list_4286.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4287, item_4285)?;
        }
        list_4286.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4288 = writer.prefix("MaxResults");
    if let Some(var_4289) = &input.max_results {
        scope_4288.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4290 = writer.prefix("NextToken");
    if let Some(var_4291) = &input.next_token {
        scope_4290.string(var_4291);
    }
    #[allow(unused_mut)]
    let mut scope_4292 = writer.prefix("DryRun");
    if let Some(var_4293) = &input.dry_run {
        scope_4292.boolean(*var_4293);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4294 = writer.prefix("InstanceId");
    if let Some(var_4295) = &input.instance_id {
        scope_4294.string(var_4295);
    }
    #[allow(unused_mut)]
    let mut scope_4296 = writer.prefix("DryRun");
    if let Some(var_4297) = &input.dry_run {
        scope_4296.boolean(*var_4297);
    }
    #[allow(unused_mut)]
    let mut scope_4298 = writer.prefix("Latest");
    if let Some(var_4299) = &input.latest {
        scope_4298.boolean(*var_4299);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("DryRun");
    if let Some(var_4301) = &input.dry_run {
        scope_4300.boolean(*var_4301);
    }
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("InstanceId");
    if let Some(var_4303) = &input.instance_id {
        scope_4302.string(var_4303);
    }
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("WakeUp");
    if let Some(var_4305) = &input.wake_up {
        scope_4304.boolean(*var_4305);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("DryRun");
    if let Some(var_4307) = &input.dry_run {
        scope_4306.boolean(*var_4307);
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("InstanceFamily");
    if let Some(var_4309) = &input.instance_family {
        scope_4308.string(var_4309.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("DryRun");
    if let Some(var_4311) = &input.dry_run {
        scope_4310.boolean(*var_4311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("DryRun");
    if let Some(var_4313) = &input.dry_run {
        scope_4312.boolean(*var_4313);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4314 = writer.prefix("DryRun");
    if let Some(var_4315) = &input.dry_run {
        scope_4314.boolean(*var_4315);
    }
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("FlowLogId");
    if let Some(var_4317) = &input.flow_log_id {
        scope_4316.string(var_4317);
    }
    #[allow(unused_mut)]
    let mut scope_4318 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4319) = &input.config_delivery_s3_destination_arn {
        scope_4318.string(var_4319);
    }
    #[allow(unused_mut)]
    let mut scope_4320 = writer.prefix("IntegrateService");
    if let Some(var_4321) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4320, var_4321)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4322 = writer.prefix("CapacityReservationId");
    if let Some(var_4323) = &input.capacity_reservation_id {
        scope_4322.string(var_4323);
    }
    #[allow(unused_mut)]
    let mut scope_4324 = writer.prefix("NextToken");
    if let Some(var_4325) = &input.next_token {
        scope_4324.string(var_4325);
    }
    #[allow(unused_mut)]
    let mut scope_4326 = writer.prefix("MaxResults");
    if let Some(var_4327) = &input.max_results {
        scope_4326.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4328 = writer.prefix("DryRun");
    if let Some(var_4329) = &input.dry_run {
        scope_4328.boolean(*var_4329);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4330 = writer.prefix("HostIdSet");
    if let Some(var_4331) = &input.host_id_set {
        let mut list_4333 = scope_4330.start_list(true, Some("item"));
        for item_4332 in var_4331 {
            #[allow(unused_mut)]
            let mut entry_4334 = list_4333.entry();
            entry_4334.string(item_4332);
        }
        list_4333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("OfferingId");
    if let Some(var_4336) = &input.offering_id {
        scope_4335.string(var_4336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("DryRun");
    if let Some(var_4338) = &input.dry_run {
        scope_4337.boolean(*var_4338);
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("ArchitectureType");
    if let Some(var_4340) = &input.architecture_types {
        let mut list_4342 = scope_4339.start_list(true, Some("item"));
        for item_4341 in var_4340 {
            #[allow(unused_mut)]
            let mut entry_4343 = list_4342.entry();
            entry_4343.string(item_4341.as_str());
        }
        list_4342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("VirtualizationType");
    if let Some(var_4345) = &input.virtualization_types {
        let mut list_4347 = scope_4344.start_list(true, Some("item"));
        for item_4346 in var_4345 {
            #[allow(unused_mut)]
            let mut entry_4348 = list_4347.entry();
            entry_4348.string(item_4346.as_str());
        }
        list_4347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("InstanceRequirements");
    if let Some(var_4350) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4349, var_4350,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("MaxResults");
    if let Some(var_4352) = &input.max_results {
        scope_4351.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4352).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("NextToken");
    if let Some(var_4354) = &input.next_token {
        scope_4353.string(var_4354);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(
    input: &crate::input::GetInstanceUefiDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("InstanceId");
    if let Some(var_4356) = &input.instance_id {
        scope_4355.string(var_4356);
    }
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("DryRun");
    if let Some(var_4358) = &input.dry_run {
        scope_4357.boolean(*var_4358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("DryRun");
    if let Some(var_4360) = &input.dry_run {
        scope_4359.boolean(*var_4360);
    }
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("Cidr");
    if let Some(var_4362) = &input.cidr {
        scope_4361.string(var_4362);
    }
    #[allow(unused_mut)]
    let mut scope_4363 = writer.prefix("IpamScopeId");
    if let Some(var_4364) = &input.ipam_scope_id {
        scope_4363.string(var_4364);
    }
    #[allow(unused_mut)]
    let mut scope_4365 = writer.prefix("VpcId");
    if let Some(var_4366) = &input.vpc_id {
        scope_4365.string(var_4366);
    }
    #[allow(unused_mut)]
    let mut scope_4367 = writer.prefix("StartTime");
    if let Some(var_4368) = &input.start_time {
        scope_4367.date_time(var_4368, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4369 = writer.prefix("EndTime");
    if let Some(var_4370) = &input.end_time {
        scope_4369.date_time(var_4370, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4371 = writer.prefix("MaxResults");
    if let Some(var_4372) = &input.max_results {
        scope_4371.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4372).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4373 = writer.prefix("NextToken");
    if let Some(var_4374) = &input.next_token {
        scope_4373.string(var_4374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("DryRun");
    if let Some(var_4376) = &input.dry_run {
        scope_4375.boolean(*var_4376);
    }
    #[allow(unused_mut)]
    let mut scope_4377 = writer.prefix("IpamPoolId");
    if let Some(var_4378) = &input.ipam_pool_id {
        scope_4377.string(var_4378);
    }
    #[allow(unused_mut)]
    let mut scope_4379 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4380) = &input.ipam_pool_allocation_id {
        scope_4379.string(var_4380);
    }
    #[allow(unused_mut)]
    let mut scope_4381 = writer.prefix("Filter");
    if let Some(var_4382) = &input.filters {
        let mut list_4384 = scope_4381.start_list(true, Some("Filter"));
        for item_4383 in var_4382 {
            #[allow(unused_mut)]
            let mut entry_4385 = list_4384.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4385, item_4383)?;
        }
        list_4384.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4386 = writer.prefix("MaxResults");
    if let Some(var_4387) = &input.max_results {
        scope_4386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4388 = writer.prefix("NextToken");
    if let Some(var_4389) = &input.next_token {
        scope_4388.string(var_4389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4390 = writer.prefix("DryRun");
    if let Some(var_4391) = &input.dry_run {
        scope_4390.boolean(*var_4391);
    }
    #[allow(unused_mut)]
    let mut scope_4392 = writer.prefix("IpamPoolId");
    if let Some(var_4393) = &input.ipam_pool_id {
        scope_4392.string(var_4393);
    }
    #[allow(unused_mut)]
    let mut scope_4394 = writer.prefix("Filter");
    if let Some(var_4395) = &input.filters {
        let mut list_4397 = scope_4394.start_list(true, Some("Filter"));
        for item_4396 in var_4395 {
            #[allow(unused_mut)]
            let mut entry_4398 = list_4397.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4398, item_4396)?;
        }
        list_4397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4399 = writer.prefix("MaxResults");
    if let Some(var_4400) = &input.max_results {
        scope_4399.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4400).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4401 = writer.prefix("NextToken");
    if let Some(var_4402) = &input.next_token {
        scope_4401.string(var_4402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("DryRun");
    if let Some(var_4404) = &input.dry_run {
        scope_4403.boolean(*var_4404);
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("Filter");
    if let Some(var_4406) = &input.filters {
        let mut list_4408 = scope_4405.start_list(true, Some("Filter"));
        for item_4407 in var_4406 {
            #[allow(unused_mut)]
            let mut entry_4409 = list_4408.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4409, item_4407)?;
        }
        list_4408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("MaxResults");
    if let Some(var_4411) = &input.max_results {
        scope_4410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("NextToken");
    if let Some(var_4413) = &input.next_token {
        scope_4412.string(var_4413);
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("IpamScopeId");
    if let Some(var_4415) = &input.ipam_scope_id {
        scope_4414.string(var_4415);
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("IpamPoolId");
    if let Some(var_4417) = &input.ipam_pool_id {
        scope_4416.string(var_4417);
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("ResourceId");
    if let Some(var_4419) = &input.resource_id {
        scope_4418.string(var_4419);
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("ResourceType");
    if let Some(var_4421) = &input.resource_type {
        scope_4420.string(var_4421.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("ResourceTag");
    if let Some(var_4423) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4422, var_4423,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4424 = writer.prefix("ResourceOwner");
    if let Some(var_4425) = &input.resource_owner {
        scope_4424.string(var_4425);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4426 = writer.prefix("DryRun");
    if let Some(var_4427) = &input.dry_run {
        scope_4426.boolean(*var_4427);
    }
    #[allow(unused_mut)]
    let mut scope_4428 = writer.prefix("InstanceId");
    if let Some(var_4429) = &input.instance_id {
        scope_4428.string(var_4429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4430 = writer.prefix("DryRun");
    if let Some(var_4431) = &input.dry_run {
        scope_4430.boolean(*var_4431);
    }
    #[allow(unused_mut)]
    let mut scope_4432 = writer.prefix("PrefixListId");
    if let Some(var_4433) = &input.prefix_list_id {
        scope_4432.string(var_4433);
    }
    #[allow(unused_mut)]
    let mut scope_4434 = writer.prefix("MaxResults");
    if let Some(var_4435) = &input.max_results {
        scope_4434.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4435).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4436 = writer.prefix("NextToken");
    if let Some(var_4437) = &input.next_token {
        scope_4436.string(var_4437);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("DryRun");
    if let Some(var_4439) = &input.dry_run {
        scope_4438.boolean(*var_4439);
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("PrefixListId");
    if let Some(var_4441) = &input.prefix_list_id {
        scope_4440.string(var_4441);
    }
    #[allow(unused_mut)]
    let mut scope_4442 = writer.prefix("TargetVersion");
    if let Some(var_4443) = &input.target_version {
        scope_4442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("MaxResults");
    if let Some(var_4445) = &input.max_results {
        scope_4444.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4445).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4446 = writer.prefix("NextToken");
    if let Some(var_4447) = &input.next_token {
        scope_4446.string(var_4447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4448 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4449) = &input.network_insights_access_scope_analysis_id {
        scope_4448.string(var_4449);
    }
    #[allow(unused_mut)]
    let mut scope_4450 = writer.prefix("MaxResults");
    if let Some(var_4451) = &input.max_results {
        scope_4450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("NextToken");
    if let Some(var_4453) = &input.next_token {
        scope_4452.string(var_4453);
    }
    #[allow(unused_mut)]
    let mut scope_4454 = writer.prefix("DryRun");
    if let Some(var_4455) = &input.dry_run {
        scope_4454.boolean(*var_4455);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4456 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4457) = &input.network_insights_access_scope_id {
        scope_4456.string(var_4457);
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("DryRun");
    if let Some(var_4459) = &input.dry_run {
        scope_4458.boolean(*var_4459);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4460 = writer.prefix("InstanceId");
    if let Some(var_4461) = &input.instance_id {
        scope_4460.string(var_4461);
    }
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("DryRun");
    if let Some(var_4463) = &input.dry_run {
        scope_4462.boolean(*var_4463);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("DryRun");
    if let Some(var_4465) = &input.dry_run {
        scope_4464.boolean(*var_4465);
    }
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("ReservedInstanceId");
    if let Some(var_4467) = &input.reserved_instance_ids {
        let mut list_4469 = scope_4466.start_list(true, Some("ReservedInstanceId"));
        for item_4468 in var_4467 {
            #[allow(unused_mut)]
            let mut entry_4470 = list_4469.entry();
            entry_4470.string(item_4468);
        }
        list_4469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4471 = writer.prefix("TargetConfiguration");
    if let Some(var_4472) = &input.target_configurations {
        let mut list_4474 = scope_4471.start_list(true, Some("TargetConfigurationRequest"));
        for item_4473 in var_4472 {
            #[allow(unused_mut)]
            let mut entry_4475 = list_4474.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4475, item_4473,
            )?;
        }
        list_4474.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("DryRun");
    if let Some(var_4477) = &input.dry_run {
        scope_4476.boolean(*var_4477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("InstanceType");
    if let Some(var_4479) = &input.instance_types {
        let mut list_4481 = scope_4478.start_list(true, None);
        for item_4480 in var_4479 {
            #[allow(unused_mut)]
            let mut entry_4482 = list_4481.entry();
            entry_4482.string(item_4480);
        }
        list_4481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("TargetCapacity");
    if let Some(var_4484) = &input.target_capacity {
        scope_4483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4486) = &input.target_capacity_unit_type {
        scope_4485.string(var_4486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4488) = &input.single_availability_zone {
        scope_4487.boolean(*var_4488);
    }
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("RegionName");
    if let Some(var_4490) = &input.region_names {
        let mut list_4492 = scope_4489.start_list(true, None);
        for item_4491 in var_4490 {
            #[allow(unused_mut)]
            let mut entry_4493 = list_4492.entry();
            entry_4493.string(item_4491);
        }
        list_4492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4495) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4494, var_4495)?;
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("DryRun");
    if let Some(var_4497) = &input.dry_run {
        scope_4496.boolean(*var_4497);
    }
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("MaxResults");
    if let Some(var_4499) = &input.max_results {
        scope_4498.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4499).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4500 = writer.prefix("NextToken");
    if let Some(var_4501) = &input.next_token {
        scope_4500.string(var_4501);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4502 = writer.prefix("Filter");
    if let Some(var_4503) = &input.filters {
        let mut list_4505 = scope_4502.start_list(true, Some("Filter"));
        for item_4504 in var_4503 {
            #[allow(unused_mut)]
            let mut entry_4506 = list_4505.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4506, item_4504)?;
        }
        list_4505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4507 = writer.prefix("SubnetId");
    if let Some(var_4508) = &input.subnet_id {
        scope_4507.string(var_4508);
    }
    #[allow(unused_mut)]
    let mut scope_4509 = writer.prefix("DryRun");
    if let Some(var_4510) = &input.dry_run {
        scope_4509.boolean(*var_4510);
    }
    #[allow(unused_mut)]
    let mut scope_4511 = writer.prefix("NextToken");
    if let Some(var_4512) = &input.next_token {
        scope_4511.string(var_4512);
    }
    #[allow(unused_mut)]
    let mut scope_4513 = writer.prefix("MaxResults");
    if let Some(var_4514) = &input.max_results {
        scope_4513.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4514).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4515 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4516) = &input.transit_gateway_attachment_id {
        scope_4515.string(var_4516);
    }
    #[allow(unused_mut)]
    let mut scope_4517 = writer.prefix("Filter");
    if let Some(var_4518) = &input.filters {
        let mut list_4520 = scope_4517.start_list(true, Some("Filter"));
        for item_4519 in var_4518 {
            #[allow(unused_mut)]
            let mut entry_4521 = list_4520.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4521, item_4519)?;
        }
        list_4520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("MaxResults");
    if let Some(var_4523) = &input.max_results {
        scope_4522.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4523).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("NextToken");
    if let Some(var_4525) = &input.next_token {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("DryRun");
    if let Some(var_4527) = &input.dry_run {
        scope_4526.boolean(*var_4527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4529) = &input.transit_gateway_multicast_domain_id {
        scope_4528.string(var_4529);
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("Filter");
    if let Some(var_4531) = &input.filters {
        let mut list_4533 = scope_4530.start_list(true, Some("Filter"));
        for item_4532 in var_4531 {
            #[allow(unused_mut)]
            let mut entry_4534 = list_4533.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4534, item_4532)?;
        }
        list_4533.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("MaxResults");
    if let Some(var_4536) = &input.max_results {
        scope_4535.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4536).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("NextToken");
    if let Some(var_4538) = &input.next_token {
        scope_4537.string(var_4538);
    }
    #[allow(unused_mut)]
    let mut scope_4539 = writer.prefix("DryRun");
    if let Some(var_4540) = &input.dry_run {
        scope_4539.boolean(*var_4540);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_associations(
    input: &crate::input::GetTransitGatewayPolicyTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPolicyTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4541 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4542) = &input.transit_gateway_policy_table_id {
        scope_4541.string(var_4542);
    }
    #[allow(unused_mut)]
    let mut scope_4543 = writer.prefix("Filter");
    if let Some(var_4544) = &input.filters {
        let mut list_4546 = scope_4543.start_list(true, Some("Filter"));
        for item_4545 in var_4544 {
            #[allow(unused_mut)]
            let mut entry_4547 = list_4546.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4547, item_4545)?;
        }
        list_4546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4548 = writer.prefix("MaxResults");
    if let Some(var_4549) = &input.max_results {
        scope_4548.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4549).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4550 = writer.prefix("NextToken");
    if let Some(var_4551) = &input.next_token {
        scope_4550.string(var_4551);
    }
    #[allow(unused_mut)]
    let mut scope_4552 = writer.prefix("DryRun");
    if let Some(var_4553) = &input.dry_run {
        scope_4552.boolean(*var_4553);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_entries(
    input: &crate::input::GetTransitGatewayPolicyTableEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPolicyTableEntries",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4554 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4555) = &input.transit_gateway_policy_table_id {
        scope_4554.string(var_4555);
    }
    #[allow(unused_mut)]
    let mut scope_4556 = writer.prefix("Filter");
    if let Some(var_4557) = &input.filters {
        let mut list_4559 = scope_4556.start_list(true, Some("Filter"));
        for item_4558 in var_4557 {
            #[allow(unused_mut)]
            let mut entry_4560 = list_4559.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4560, item_4558)?;
        }
        list_4559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("MaxResults");
    if let Some(var_4562) = &input.max_results {
        scope_4561.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4562).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4563 = writer.prefix("NextToken");
    if let Some(var_4564) = &input.next_token {
        scope_4563.string(var_4564);
    }
    #[allow(unused_mut)]
    let mut scope_4565 = writer.prefix("DryRun");
    if let Some(var_4566) = &input.dry_run {
        scope_4565.boolean(*var_4566);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4567 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4568) = &input.transit_gateway_route_table_id {
        scope_4567.string(var_4568);
    }
    #[allow(unused_mut)]
    let mut scope_4569 = writer.prefix("Filter");
    if let Some(var_4570) = &input.filters {
        let mut list_4572 = scope_4569.start_list(true, Some("Filter"));
        for item_4571 in var_4570 {
            #[allow(unused_mut)]
            let mut entry_4573 = list_4572.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4573, item_4571)?;
        }
        list_4572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("MaxResults");
    if let Some(var_4575) = &input.max_results {
        scope_4574.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4575).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("NextToken");
    if let Some(var_4577) = &input.next_token {
        scope_4576.string(var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("DryRun");
    if let Some(var_4579) = &input.dry_run {
        scope_4578.boolean(*var_4579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4581) = &input.transit_gateway_route_table_id {
        scope_4580.string(var_4581);
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("Filter");
    if let Some(var_4583) = &input.filters {
        let mut list_4585 = scope_4582.start_list(true, Some("Filter"));
        for item_4584 in var_4583 {
            #[allow(unused_mut)]
            let mut entry_4586 = list_4585.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4586, item_4584)?;
        }
        list_4585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("MaxResults");
    if let Some(var_4588) = &input.max_results {
        scope_4587.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4588).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("NextToken");
    if let Some(var_4590) = &input.next_token {
        scope_4589.string(var_4590);
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("DryRun");
    if let Some(var_4592) = &input.dry_run {
        scope_4591.boolean(*var_4592);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4594) = &input.transit_gateway_route_table_id {
        scope_4593.string(var_4594);
    }
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("Filter");
    if let Some(var_4596) = &input.filters {
        let mut list_4598 = scope_4595.start_list(true, Some("Filter"));
        for item_4597 in var_4596 {
            #[allow(unused_mut)]
            let mut entry_4599 = list_4598.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4599, item_4597)?;
        }
        list_4598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4600 = writer.prefix("MaxResults");
    if let Some(var_4601) = &input.max_results {
        scope_4600.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4601).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("NextToken");
    if let Some(var_4603) = &input.next_token {
        scope_4602.string(var_4603);
    }
    #[allow(unused_mut)]
    let mut scope_4604 = writer.prefix("DryRun");
    if let Some(var_4605) = &input.dry_run {
        scope_4604.boolean(*var_4605);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("VpnConnectionId");
    if let Some(var_4607) = &input.vpn_connection_id {
        scope_4606.string(var_4607);
    }
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4609) = &input.vpn_connection_device_type_id {
        scope_4608.string(var_4609);
    }
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4611) = &input.internet_key_exchange_version {
        scope_4610.string(var_4611);
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("DryRun");
    if let Some(var_4613) = &input.dry_run {
        scope_4612.boolean(*var_4613);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4614 = writer.prefix("MaxResults");
    if let Some(var_4615) = &input.max_results {
        scope_4614.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4615).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4616 = writer.prefix("NextToken");
    if let Some(var_4617) = &input.next_token {
        scope_4616.string(var_4617);
    }
    #[allow(unused_mut)]
    let mut scope_4618 = writer.prefix("DryRun");
    if let Some(var_4619) = &input.dry_run {
        scope_4618.boolean(*var_4619);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4620 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4621) = &input.client_vpn_endpoint_id {
        scope_4620.string(var_4621);
    }
    #[allow(unused_mut)]
    let mut scope_4622 = writer.prefix("CertificateRevocationList");
    if let Some(var_4623) = &input.certificate_revocation_list {
        scope_4622.string(var_4623);
    }
    #[allow(unused_mut)]
    let mut scope_4624 = writer.prefix("DryRun");
    if let Some(var_4625) = &input.dry_run {
        scope_4624.boolean(*var_4625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4626 = writer.prefix("Architecture");
    if let Some(var_4627) = &input.architecture {
        scope_4626.string(var_4627);
    }
    #[allow(unused_mut)]
    let mut scope_4628 = writer.prefix("ClientData");
    if let Some(var_4629) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4628, var_4629)?;
    }
    #[allow(unused_mut)]
    let mut scope_4630 = writer.prefix("ClientToken");
    if let Some(var_4631) = &input.client_token {
        scope_4630.string(var_4631);
    }
    #[allow(unused_mut)]
    let mut scope_4632 = writer.prefix("Description");
    if let Some(var_4633) = &input.description {
        scope_4632.string(var_4633);
    }
    #[allow(unused_mut)]
    let mut scope_4634 = writer.prefix("DiskContainer");
    if let Some(var_4635) = &input.disk_containers {
        let mut list_4637 = scope_4634.start_list(true, Some("item"));
        for item_4636 in var_4635 {
            #[allow(unused_mut)]
            let mut entry_4638 = list_4637.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4638, item_4636,
            )?;
        }
        list_4637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("DryRun");
    if let Some(var_4640) = &input.dry_run {
        scope_4639.boolean(*var_4640);
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("Encrypted");
    if let Some(var_4642) = &input.encrypted {
        scope_4641.boolean(*var_4642);
    }
    #[allow(unused_mut)]
    let mut scope_4643 = writer.prefix("Hypervisor");
    if let Some(var_4644) = &input.hypervisor {
        scope_4643.string(var_4644);
    }
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("KmsKeyId");
    if let Some(var_4646) = &input.kms_key_id {
        scope_4645.string(var_4646);
    }
    #[allow(unused_mut)]
    let mut scope_4647 = writer.prefix("LicenseType");
    if let Some(var_4648) = &input.license_type {
        scope_4647.string(var_4648);
    }
    #[allow(unused_mut)]
    let mut scope_4649 = writer.prefix("Platform");
    if let Some(var_4650) = &input.platform {
        scope_4649.string(var_4650);
    }
    #[allow(unused_mut)]
    let mut scope_4651 = writer.prefix("RoleName");
    if let Some(var_4652) = &input.role_name {
        scope_4651.string(var_4652);
    }
    #[allow(unused_mut)]
    let mut scope_4653 = writer.prefix("LicenseSpecifications");
    if let Some(var_4654) = &input.license_specifications {
        let mut list_4656 = scope_4653.start_list(true, Some("item"));
        for item_4655 in var_4654 {
            #[allow(unused_mut)]
            let mut entry_4657 = list_4656.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4657, item_4655)?;
        }
        list_4656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("TagSpecification");
    if let Some(var_4659) = &input.tag_specifications {
        let mut list_4661 = scope_4658.start_list(true, Some("item"));
        for item_4660 in var_4659 {
            #[allow(unused_mut)]
            let mut entry_4662 = list_4661.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4662, item_4660,
            )?;
        }
        list_4661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("UsageOperation");
    if let Some(var_4664) = &input.usage_operation {
        scope_4663.string(var_4664);
    }
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("BootMode");
    if let Some(var_4666) = &input.boot_mode {
        scope_4665.string(var_4666.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("Description");
    if let Some(var_4668) = &input.description {
        scope_4667.string(var_4668);
    }
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("DiskImage");
    if let Some(var_4670) = &input.disk_images {
        let mut list_4672 = scope_4669.start_list(true, None);
        for item_4671 in var_4670 {
            #[allow(unused_mut)]
            let mut entry_4673 = list_4672.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4673, item_4671)?;
        }
        list_4672.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("DryRun");
    if let Some(var_4675) = &input.dry_run {
        scope_4674.boolean(*var_4675);
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("LaunchSpecification");
    if let Some(var_4677) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4676, var_4677,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("Platform");
    if let Some(var_4679) = &input.platform {
        scope_4678.string(var_4679.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("DryRun");
    if let Some(var_4681) = &input.dry_run {
        scope_4680.boolean(*var_4681);
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("KeyName");
    if let Some(var_4683) = &input.key_name {
        scope_4682.string(var_4683);
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4685) = &input.public_key_material {
        scope_4684.string(&aws_smithy_types::base64::encode(var_4685));
    }
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("TagSpecification");
    if let Some(var_4687) = &input.tag_specifications {
        let mut list_4689 = scope_4686.start_list(true, Some("item"));
        for item_4688 in var_4687 {
            #[allow(unused_mut)]
            let mut entry_4690 = list_4689.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4690, item_4688,
            )?;
        }
        list_4689.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4691 = writer.prefix("ClientData");
    if let Some(var_4692) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4691, var_4692)?;
    }
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("ClientToken");
    if let Some(var_4694) = &input.client_token {
        scope_4693.string(var_4694);
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("Description");
    if let Some(var_4696) = &input.description {
        scope_4695.string(var_4696);
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("DiskContainer");
    if let Some(var_4698) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4697, var_4698,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("DryRun");
    if let Some(var_4700) = &input.dry_run {
        scope_4699.boolean(*var_4700);
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("Encrypted");
    if let Some(var_4702) = &input.encrypted {
        scope_4701.boolean(*var_4702);
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("KmsKeyId");
    if let Some(var_4704) = &input.kms_key_id {
        scope_4703.string(var_4704);
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("RoleName");
    if let Some(var_4706) = &input.role_name {
        scope_4705.string(var_4706);
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("TagSpecification");
    if let Some(var_4708) = &input.tag_specifications {
        let mut list_4710 = scope_4707.start_list(true, Some("item"));
        for item_4709 in var_4708 {
            #[allow(unused_mut)]
            let mut entry_4711 = list_4710.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4711, item_4709,
            )?;
        }
        list_4710.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4712 = writer.prefix("AvailabilityZone");
    if let Some(var_4713) = &input.availability_zone {
        scope_4712.string(var_4713);
    }
    #[allow(unused_mut)]
    let mut scope_4714 = writer.prefix("Description");
    if let Some(var_4715) = &input.description {
        scope_4714.string(var_4715);
    }
    #[allow(unused_mut)]
    let mut scope_4716 = writer.prefix("DryRun");
    if let Some(var_4717) = &input.dry_run {
        scope_4716.boolean(*var_4717);
    }
    #[allow(unused_mut)]
    let mut scope_4718 = writer.prefix("Image");
    if let Some(var_4719) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4718, var_4719)?;
    }
    #[allow(unused_mut)]
    let mut scope_4720 = writer.prefix("Volume");
    if let Some(var_4721) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4720, var_4721)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4722 = writer.prefix("ImageId");
    if let Some(var_4723) = &input.image_ids {
        let mut list_4725 = scope_4722.start_list(true, Some("ImageId"));
        for item_4724 in var_4723 {
            #[allow(unused_mut)]
            let mut entry_4726 = list_4725.entry();
            entry_4726.string(item_4724);
        }
        list_4725.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4727 = writer.prefix("NextToken");
    if let Some(var_4728) = &input.next_token {
        scope_4727.string(var_4728);
    }
    #[allow(unused_mut)]
    let mut scope_4729 = writer.prefix("MaxResults");
    if let Some(var_4730) = &input.max_results {
        scope_4729.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4730).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4731 = writer.prefix("DryRun");
    if let Some(var_4732) = &input.dry_run {
        scope_4731.boolean(*var_4732);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4733 = writer.prefix("MaxResults");
    if let Some(var_4734) = &input.max_results {
        scope_4733.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4734).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4735 = writer.prefix("NextToken");
    if let Some(var_4736) = &input.next_token {
        scope_4735.string(var_4736);
    }
    #[allow(unused_mut)]
    let mut scope_4737 = writer.prefix("SnapshotId");
    if let Some(var_4738) = &input.snapshot_ids {
        let mut list_4740 = scope_4737.start_list(true, Some("SnapshotId"));
        for item_4739 in var_4738 {
            #[allow(unused_mut)]
            let mut entry_4741 = list_4740.entry();
            entry_4741.string(item_4739);
        }
        list_4740.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4742 = writer.prefix("DryRun");
    if let Some(var_4743) = &input.dry_run {
        scope_4742.boolean(*var_4743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4744 = writer.prefix("AllocationId");
    if let Some(var_4745) = &input.allocation_id {
        scope_4744.string(var_4745);
    }
    #[allow(unused_mut)]
    let mut scope_4746 = writer.prefix("DomainName");
    if let Some(var_4747) = &input.domain_name {
        scope_4746.string(var_4747);
    }
    #[allow(unused_mut)]
    let mut scope_4748 = writer.prefix("DryRun");
    if let Some(var_4749) = &input.dry_run {
        scope_4748.boolean(*var_4749);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("GroupName");
    if let Some(var_4751) = &input.group_name {
        scope_4750.string(var_4751);
    }
    #[allow(unused_mut)]
    let mut scope_4752 = writer.prefix("OptInStatus");
    if let Some(var_4753) = &input.opt_in_status {
        scope_4752.string(var_4753.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4754 = writer.prefix("DryRun");
    if let Some(var_4755) = &input.dry_run {
        scope_4754.boolean(*var_4755);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4756 = writer.prefix("CapacityReservationId");
    if let Some(var_4757) = &input.capacity_reservation_id {
        scope_4756.string(var_4757);
    }
    #[allow(unused_mut)]
    let mut scope_4758 = writer.prefix("InstanceCount");
    if let Some(var_4759) = &input.instance_count {
        scope_4758.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4759).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4760 = writer.prefix("EndDate");
    if let Some(var_4761) = &input.end_date {
        scope_4760.date_time(var_4761, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4762 = writer.prefix("EndDateType");
    if let Some(var_4763) = &input.end_date_type {
        scope_4762.string(var_4763.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4764 = writer.prefix("Accept");
    if let Some(var_4765) = &input.accept {
        scope_4764.boolean(*var_4765);
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("DryRun");
    if let Some(var_4767) = &input.dry_run {
        scope_4766.boolean(*var_4767);
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("AdditionalInfo");
    if let Some(var_4769) = &input.additional_info {
        scope_4768.string(var_4769);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4771) = &input.capacity_reservation_fleet_id {
        scope_4770.string(var_4771);
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4773) = &input.total_target_capacity {
        scope_4772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4773).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("EndDate");
    if let Some(var_4775) = &input.end_date {
        scope_4774.date_time(var_4775, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("DryRun");
    if let Some(var_4777) = &input.dry_run {
        scope_4776.boolean(*var_4777);
    }
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("RemoveEndDate");
    if let Some(var_4779) = &input.remove_end_date {
        scope_4778.boolean(*var_4779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4781) = &input.client_vpn_endpoint_id {
        scope_4780.string(var_4781);
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("ServerCertificateArn");
    if let Some(var_4783) = &input.server_certificate_arn {
        scope_4782.string(var_4783);
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4785) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4784, var_4785,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("DnsServers");
    if let Some(var_4787) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4786, var_4787,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("VpnPort");
    if let Some(var_4789) = &input.vpn_port {
        scope_4788.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4789).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("Description");
    if let Some(var_4791) = &input.description {
        scope_4790.string(var_4791);
    }
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("SplitTunnel");
    if let Some(var_4793) = &input.split_tunnel {
        scope_4792.boolean(*var_4793);
    }
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("DryRun");
    if let Some(var_4795) = &input.dry_run {
        scope_4794.boolean(*var_4795);
    }
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("SecurityGroupId");
    if let Some(var_4797) = &input.security_group_ids {
        let mut list_4799 = scope_4796.start_list(true, Some("item"));
        for item_4798 in var_4797 {
            #[allow(unused_mut)]
            let mut entry_4800 = list_4799.entry();
            entry_4800.string(item_4798);
        }
        list_4799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4801 = writer.prefix("VpcId");
    if let Some(var_4802) = &input.vpc_id {
        scope_4801.string(var_4802);
    }
    #[allow(unused_mut)]
    let mut scope_4803 = writer.prefix("SelfServicePortal");
    if let Some(var_4804) = &input.self_service_portal {
        scope_4803.string(var_4804.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("ClientConnectOptions");
    if let Some(var_4806) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4805, var_4806,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4808) = &input.session_timeout_hours {
        scope_4807.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4808).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4810) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4809, var_4810,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("DryRun");
    if let Some(var_4812) = &input.dry_run {
        scope_4811.boolean(*var_4812);
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("InstanceFamily");
    if let Some(var_4814) = &input.instance_family {
        scope_4813.string(var_4814.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("CpuCredits");
    if let Some(var_4816) = &input.cpu_credits {
        scope_4815.string(var_4816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("KmsKeyId");
    if let Some(var_4818) = &input.kms_key_id {
        scope_4817.string(var_4818);
    }
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("DryRun");
    if let Some(var_4820) = &input.dry_run {
        scope_4819.boolean(*var_4820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("DryRun");
    if let Some(var_4822) = &input.dry_run {
        scope_4821.boolean(*var_4822);
    }
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4824) = &input.excess_capacity_termination_policy {
        scope_4823.string(var_4824.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4826) = &input.launch_template_configs {
        let mut list_4828 = scope_4825.start_list(true, Some("item"));
        for item_4827 in var_4826 {
            #[allow(unused_mut)]
            let mut entry_4829 = list_4828.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4829, item_4827,
            )?;
        }
        list_4828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("FleetId");
    if let Some(var_4831) = &input.fleet_id {
        scope_4830.string(var_4831);
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4833) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4832, var_4833,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("Context");
    if let Some(var_4835) = &input.context {
        scope_4834.string(var_4835);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("DryRun");
    if let Some(var_4837) = &input.dry_run {
        scope_4836.boolean(*var_4837);
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("FpgaImageId");
    if let Some(var_4839) = &input.fpga_image_id {
        scope_4838.string(var_4839);
    }
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("Attribute");
    if let Some(var_4841) = &input.attribute {
        scope_4840.string(var_4841.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("OperationType");
    if let Some(var_4843) = &input.operation_type {
        scope_4842.string(var_4843.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4844 = writer.prefix("UserId");
    if let Some(var_4845) = &input.user_ids {
        let mut list_4847 = scope_4844.start_list(true, Some("UserId"));
        for item_4846 in var_4845 {
            #[allow(unused_mut)]
            let mut entry_4848 = list_4847.entry();
            entry_4848.string(item_4846);
        }
        list_4847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("UserGroup");
    if let Some(var_4850) = &input.user_groups {
        let mut list_4852 = scope_4849.start_list(true, Some("UserGroup"));
        for item_4851 in var_4850 {
            #[allow(unused_mut)]
            let mut entry_4853 = list_4852.entry();
            entry_4853.string(item_4851);
        }
        list_4852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4854 = writer.prefix("ProductCode");
    if let Some(var_4855) = &input.product_codes {
        let mut list_4857 = scope_4854.start_list(true, Some("ProductCode"));
        for item_4856 in var_4855 {
            #[allow(unused_mut)]
            let mut entry_4858 = list_4857.entry();
            entry_4858.string(item_4856);
        }
        list_4857.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("LoadPermission");
    if let Some(var_4860) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4859, var_4860,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("Description");
    if let Some(var_4862) = &input.description {
        scope_4861.string(var_4862);
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("Name");
    if let Some(var_4864) = &input.name {
        scope_4863.string(var_4864);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("AutoPlacement");
    if let Some(var_4866) = &input.auto_placement {
        scope_4865.string(var_4866.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("HostId");
    if let Some(var_4868) = &input.host_ids {
        let mut list_4870 = scope_4867.start_list(true, Some("item"));
        for item_4869 in var_4868 {
            #[allow(unused_mut)]
            let mut entry_4871 = list_4870.entry();
            entry_4871.string(item_4869);
        }
        list_4870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("HostRecovery");
    if let Some(var_4873) = &input.host_recovery {
        scope_4872.string(var_4873.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("InstanceType");
    if let Some(var_4875) = &input.instance_type {
        scope_4874.string(var_4875);
    }
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("InstanceFamily");
    if let Some(var_4877) = &input.instance_family {
        scope_4876.string(var_4877);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("PrincipalArn");
    if let Some(var_4879) = &input.principal_arn {
        scope_4878.string(var_4879);
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("Resource");
    if let Some(var_4881) = &input.resource {
        scope_4880.string(var_4881);
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("UseLongIds");
    if let Some(var_4883) = &input.use_long_ids {
        scope_4882.boolean(*var_4883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("Resource");
    if let Some(var_4885) = &input.resource {
        scope_4884.string(var_4885);
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("UseLongIds");
    if let Some(var_4887) = &input.use_long_ids {
        scope_4886.boolean(*var_4887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("Attribute");
    if let Some(var_4889) = &input.attribute {
        scope_4888.string(var_4889);
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("Description");
    if let Some(var_4891) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4890, var_4891)?;
    }
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("ImageId");
    if let Some(var_4893) = &input.image_id {
        scope_4892.string(var_4893);
    }
    #[allow(unused_mut)]
    let mut scope_4894 = writer.prefix("LaunchPermission");
    if let Some(var_4895) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4894, var_4895,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4896 = writer.prefix("OperationType");
    if let Some(var_4897) = &input.operation_type {
        scope_4896.string(var_4897.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4898 = writer.prefix("ProductCode");
    if let Some(var_4899) = &input.product_codes {
        let mut list_4901 = scope_4898.start_list(true, Some("ProductCode"));
        for item_4900 in var_4899 {
            #[allow(unused_mut)]
            let mut entry_4902 = list_4901.entry();
            entry_4902.string(item_4900);
        }
        list_4901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("UserGroup");
    if let Some(var_4904) = &input.user_groups {
        let mut list_4906 = scope_4903.start_list(true, Some("UserGroup"));
        for item_4905 in var_4904 {
            #[allow(unused_mut)]
            let mut entry_4907 = list_4906.entry();
            entry_4907.string(item_4905);
        }
        list_4906.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("UserId");
    if let Some(var_4909) = &input.user_ids {
        let mut list_4911 = scope_4908.start_list(true, Some("UserId"));
        for item_4910 in var_4909 {
            #[allow(unused_mut)]
            let mut entry_4912 = list_4911.entry();
            entry_4912.string(item_4910);
        }
        list_4911.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("Value");
    if let Some(var_4914) = &input.value {
        scope_4913.string(var_4914);
    }
    #[allow(unused_mut)]
    let mut scope_4915 = writer.prefix("DryRun");
    if let Some(var_4916) = &input.dry_run {
        scope_4915.boolean(*var_4916);
    }
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("OrganizationArn");
    if let Some(var_4918) = &input.organization_arns {
        let mut list_4920 = scope_4917.start_list(true, Some("OrganizationArn"));
        for item_4919 in var_4918 {
            #[allow(unused_mut)]
            let mut entry_4921 = list_4920.entry();
            entry_4921.string(item_4919);
        }
        list_4920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4922 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4923) = &input.organizational_unit_arns {
        let mut list_4925 = scope_4922.start_list(true, Some("OrganizationalUnitArn"));
        for item_4924 in var_4923 {
            #[allow(unused_mut)]
            let mut entry_4926 = list_4925.entry();
            entry_4926.string(item_4924);
        }
        list_4925.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4927 = writer.prefix("SourceDestCheck");
    if let Some(var_4928) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4927, var_4928,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4929 = writer.prefix("Attribute");
    if let Some(var_4930) = &input.attribute {
        scope_4929.string(var_4930.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4932) = &input.block_device_mappings {
        let mut list_4934 = scope_4931.start_list(true, Some("item"));
        for item_4933 in var_4932 {
            #[allow(unused_mut)]
            let mut entry_4935 = list_4934.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4935, item_4933)?;
        }
        list_4934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("DisableApiTermination");
    if let Some(var_4937) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4936, var_4937,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4938 = writer.prefix("DryRun");
    if let Some(var_4939) = &input.dry_run {
        scope_4938.boolean(*var_4939);
    }
    #[allow(unused_mut)]
    let mut scope_4940 = writer.prefix("EbsOptimized");
    if let Some(var_4941) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4940, var_4941,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4942 = writer.prefix("EnaSupport");
    if let Some(var_4943) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4942, var_4943,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4944 = writer.prefix("GroupId");
    if let Some(var_4945) = &input.groups {
        let mut list_4947 = scope_4944.start_list(true, Some("groupId"));
        for item_4946 in var_4945 {
            #[allow(unused_mut)]
            let mut entry_4948 = list_4947.entry();
            entry_4948.string(item_4946);
        }
        list_4947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("InstanceId");
    if let Some(var_4950) = &input.instance_id {
        scope_4949.string(var_4950);
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4952) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4951, var_4952)?;
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("InstanceType");
    if let Some(var_4954) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4953, var_4954)?;
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("Kernel");
    if let Some(var_4956) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4955, var_4956)?;
    }
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("Ramdisk");
    if let Some(var_4958) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4957, var_4958)?;
    }
    #[allow(unused_mut)]
    let mut scope_4959 = writer.prefix("SriovNetSupport");
    if let Some(var_4960) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4959, var_4960)?;
    }
    #[allow(unused_mut)]
    let mut scope_4961 = writer.prefix("UserData");
    if let Some(var_4962) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4961, var_4962,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4963 = writer.prefix("Value");
    if let Some(var_4964) = &input.value {
        scope_4963.string(var_4964);
    }
    #[allow(unused_mut)]
    let mut scope_4965 = writer.prefix("DisableApiStop");
    if let Some(var_4966) = &input.disable_api_stop {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4965, var_4966,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4967 = writer.prefix("InstanceId");
    if let Some(var_4968) = &input.instance_id {
        scope_4967.string(var_4968);
    }
    #[allow(unused_mut)]
    let mut scope_4969 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4970) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4969, var_4970,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4971 = writer.prefix("DryRun");
    if let Some(var_4972) = &input.dry_run {
        scope_4971.boolean(*var_4972);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4973 = writer.prefix("DryRun");
    if let Some(var_4974) = &input.dry_run {
        scope_4973.boolean(*var_4974);
    }
    #[allow(unused_mut)]
    let mut scope_4975 = writer.prefix("ClientToken");
    if let Some(var_4976) = &input.client_token {
        scope_4975.string(var_4976);
    }
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4978) = &input.instance_credit_specifications {
        let mut list_4980 = scope_4977.start_list(true, Some("item"));
        for item_4979 in var_4978 {
            #[allow(unused_mut)]
            let mut entry_4981 = list_4980.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4981, item_4979)?;
        }
        list_4980.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4982 = writer.prefix("DryRun");
    if let Some(var_4983) = &input.dry_run {
        scope_4982.boolean(*var_4983);
    }
    #[allow(unused_mut)]
    let mut scope_4984 = writer.prefix("InstanceId");
    if let Some(var_4985) = &input.instance_id {
        scope_4984.string(var_4985);
    }
    #[allow(unused_mut)]
    let mut scope_4986 = writer.prefix("InstanceEventId");
    if let Some(var_4987) = &input.instance_event_id {
        scope_4986.string(var_4987);
    }
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("NotBefore");
    if let Some(var_4989) = &input.not_before {
        scope_4988.date_time(var_4989, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("DryRun");
    if let Some(var_4991) = &input.dry_run {
        scope_4990.boolean(*var_4991);
    }
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("Name");
    if let Some(var_4993) = &input.name {
        scope_4992.string(var_4993);
    }
    #[allow(unused_mut)]
    let mut scope_4994 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4995) = &input.instance_event_window_id {
        scope_4994.string(var_4995);
    }
    #[allow(unused_mut)]
    let mut scope_4996 = writer.prefix("TimeRange");
    if let Some(var_4997) = &input.time_ranges {
        let mut list_4999 = scope_4996.start_list(true, None);
        for item_4998 in var_4997 {
            #[allow(unused_mut)]
            let mut entry_5000 = list_4999.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_5000, item_4998)?;
        }
        list_4999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("CronExpression");
    if let Some(var_5002) = &input.cron_expression {
        scope_5001.string(var_5002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("InstanceId");
    if let Some(var_5004) = &input.instance_id {
        scope_5003.string(var_5004);
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("AutoRecovery");
    if let Some(var_5006) = &input.auto_recovery {
        scope_5005.string(var_5006.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("DryRun");
    if let Some(var_5008) = &input.dry_run {
        scope_5007.boolean(*var_5008);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("InstanceId");
    if let Some(var_5010) = &input.instance_id {
        scope_5009.string(var_5010);
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("HttpTokens");
    if let Some(var_5012) = &input.http_tokens {
        scope_5011.string(var_5012.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_5014) = &input.http_put_response_hop_limit {
        scope_5013.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5014).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("HttpEndpoint");
    if let Some(var_5016) = &input.http_endpoint {
        scope_5015.string(var_5016.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5017 = writer.prefix("DryRun");
    if let Some(var_5018) = &input.dry_run {
        scope_5017.boolean(*var_5018);
    }
    #[allow(unused_mut)]
    let mut scope_5019 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_5020) = &input.http_protocol_ipv6 {
        scope_5019.string(var_5020.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("InstanceMetadataTags");
    if let Some(var_5022) = &input.instance_metadata_tags {
        scope_5021.string(var_5022.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("Affinity");
    if let Some(var_5024) = &input.affinity {
        scope_5023.string(var_5024.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("GroupName");
    if let Some(var_5026) = &input.group_name {
        scope_5025.string(var_5026);
    }
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("HostId");
    if let Some(var_5028) = &input.host_id {
        scope_5027.string(var_5028);
    }
    #[allow(unused_mut)]
    let mut scope_5029 = writer.prefix("InstanceId");
    if let Some(var_5030) = &input.instance_id {
        scope_5029.string(var_5030);
    }
    #[allow(unused_mut)]
    let mut scope_5031 = writer.prefix("Tenancy");
    if let Some(var_5032) = &input.tenancy {
        scope_5031.string(var_5032.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5033 = writer.prefix("PartitionNumber");
    if let Some(var_5034) = &input.partition_number {
        scope_5033.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5034).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("HostResourceGroupArn");
    if let Some(var_5036) = &input.host_resource_group_arn {
        scope_5035.string(var_5036);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("DryRun");
    if let Some(var_5038) = &input.dry_run {
        scope_5037.boolean(*var_5038);
    }
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("IpamId");
    if let Some(var_5040) = &input.ipam_id {
        scope_5039.string(var_5040);
    }
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("Description");
    if let Some(var_5042) = &input.description {
        scope_5041.string(var_5042);
    }
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("AddOperatingRegion");
    if let Some(var_5044) = &input.add_operating_regions {
        let mut list_5046 = scope_5043.start_list(true, None);
        for item_5045 in var_5044 {
            #[allow(unused_mut)]
            let mut entry_5047 = list_5046.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_5047, item_5045,
            )?;
        }
        list_5046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5048 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_5049) = &input.remove_operating_regions {
        let mut list_5051 = scope_5048.start_list(true, None);
        for item_5050 in var_5049 {
            #[allow(unused_mut)]
            let mut entry_5052 = list_5051.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_5052, item_5050,
            )?;
        }
        list_5051.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("DryRun");
    if let Some(var_5054) = &input.dry_run {
        scope_5053.boolean(*var_5054);
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("IpamPoolId");
    if let Some(var_5056) = &input.ipam_pool_id {
        scope_5055.string(var_5056);
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("Description");
    if let Some(var_5058) = &input.description {
        scope_5057.string(var_5058);
    }
    #[allow(unused_mut)]
    let mut scope_5059 = writer.prefix("AutoImport");
    if let Some(var_5060) = &input.auto_import {
        scope_5059.boolean(*var_5060);
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_5062) = &input.allocation_min_netmask_length {
        scope_5061.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5062).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_5064) = &input.allocation_max_netmask_length {
        scope_5063.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5064).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_5066) = &input.allocation_default_netmask_length {
        scope_5065.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5066).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_5068) = &input.clear_allocation_default_netmask_length {
        scope_5067.boolean(*var_5068);
    }
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_5070) = &input.add_allocation_resource_tags {
        let mut list_5072 = scope_5069.start_list(true, Some("item"));
        for item_5071 in var_5070 {
            #[allow(unused_mut)]
            let mut entry_5073 = list_5072.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_5073, item_5071,
            )?;
        }
        list_5072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5074 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_5075) = &input.remove_allocation_resource_tags {
        let mut list_5077 = scope_5074.start_list(true, Some("item"));
        for item_5076 in var_5075 {
            #[allow(unused_mut)]
            let mut entry_5078 = list_5077.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_5078, item_5076,
            )?;
        }
        list_5077.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("DryRun");
    if let Some(var_5080) = &input.dry_run {
        scope_5079.boolean(*var_5080);
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("ResourceId");
    if let Some(var_5082) = &input.resource_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("ResourceCidr");
    if let Some(var_5084) = &input.resource_cidr {
        scope_5083.string(var_5084);
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("ResourceRegion");
    if let Some(var_5086) = &input.resource_region {
        scope_5085.string(var_5086);
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_5088) = &input.current_ipam_scope_id {
        scope_5087.string(var_5088);
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_5090) = &input.destination_ipam_scope_id {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("Monitored");
    if let Some(var_5092) = &input.monitored {
        scope_5091.boolean(*var_5092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("DryRun");
    if let Some(var_5094) = &input.dry_run {
        scope_5093.boolean(*var_5094);
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("IpamScopeId");
    if let Some(var_5096) = &input.ipam_scope_id {
        scope_5095.string(var_5096);
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("Description");
    if let Some(var_5098) = &input.description {
        scope_5097.string(var_5098);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("DryRun");
    if let Some(var_5100) = &input.dry_run {
        scope_5099.boolean(*var_5100);
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("ClientToken");
    if let Some(var_5102) = &input.client_token {
        scope_5101.string(var_5102);
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("LaunchTemplateId");
    if let Some(var_5104) = &input.launch_template_id {
        scope_5103.string(var_5104);
    }
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("LaunchTemplateName");
    if let Some(var_5106) = &input.launch_template_name {
        scope_5105.string(var_5106);
    }
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("SetDefaultVersion");
    if let Some(var_5108) = &input.default_version {
        scope_5107.string(var_5108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("DryRun");
    if let Some(var_5110) = &input.dry_run {
        scope_5109.boolean(*var_5110);
    }
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("PrefixListId");
    if let Some(var_5112) = &input.prefix_list_id {
        scope_5111.string(var_5112);
    }
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("CurrentVersion");
    if let Some(var_5114) = &input.current_version {
        scope_5113.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5114).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5115 = writer.prefix("PrefixListName");
    if let Some(var_5116) = &input.prefix_list_name {
        scope_5115.string(var_5116);
    }
    #[allow(unused_mut)]
    let mut scope_5117 = writer.prefix("AddEntry");
    if let Some(var_5118) = &input.add_entries {
        let mut list_5120 = scope_5117.start_list(true, None);
        for item_5119 in var_5118 {
            #[allow(unused_mut)]
            let mut entry_5121 = list_5120.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_5121, item_5119,
            )?;
        }
        list_5120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("RemoveEntry");
    if let Some(var_5123) = &input.remove_entries {
        let mut list_5125 = scope_5122.start_list(true, None);
        for item_5124 in var_5123 {
            #[allow(unused_mut)]
            let mut entry_5126 = list_5125.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_5126, item_5124,
            )?;
        }
        list_5125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5127 = writer.prefix("MaxEntries");
    if let Some(var_5128) = &input.max_entries {
        scope_5127.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5128).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5129 = writer.prefix("Attachment");
    if let Some(var_5130) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_5129, var_5130,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5131 = writer.prefix("Description");
    if let Some(var_5132) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5131, var_5132)?;
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("DryRun");
    if let Some(var_5134) = &input.dry_run {
        scope_5133.boolean(*var_5134);
    }
    #[allow(unused_mut)]
    let mut scope_5135 = writer.prefix("SecurityGroupId");
    if let Some(var_5136) = &input.groups {
        let mut list_5138 = scope_5135.start_list(true, Some("SecurityGroupId"));
        for item_5137 in var_5136 {
            #[allow(unused_mut)]
            let mut entry_5139 = list_5138.entry();
            entry_5139.string(item_5137);
        }
        list_5138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5141) = &input.network_interface_id {
        scope_5140.string(var_5141);
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("SourceDestCheck");
    if let Some(var_5143) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5142, var_5143,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("DryRun");
    if let Some(var_5145) = &input.dry_run {
        scope_5144.boolean(*var_5145);
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("InstanceId");
    if let Some(var_5147) = &input.instance_id {
        scope_5146.string(var_5147);
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5149) = &input.private_dns_hostname_type {
        scope_5148.string(var_5149.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5151) = &input.enable_resource_name_dns_a_record {
        scope_5150.boolean(*var_5151);
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5153) = &input.enable_resource_name_dns_aaaa_record {
        scope_5152.boolean(*var_5153);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("ReservedInstancesId");
    if let Some(var_5155) = &input.reserved_instances_ids {
        let mut list_5157 = scope_5154.start_list(true, Some("ReservedInstancesId"));
        for item_5156 in var_5155 {
            #[allow(unused_mut)]
            let mut entry_5158 = list_5157.entry();
            entry_5158.string(item_5156);
        }
        list_5157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5159 = writer.prefix("ClientToken");
    if let Some(var_5160) = &input.client_token {
        scope_5159.string(var_5160);
    }
    #[allow(unused_mut)]
    let mut scope_5161 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5162) = &input.target_configurations {
        let mut list_5164 = scope_5161.start_list(true, Some("item"));
        for item_5163 in var_5162 {
            #[allow(unused_mut)]
            let mut entry_5165 = list_5164.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5165, item_5163,
            )?;
        }
        list_5164.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("GroupId");
    if let Some(var_5167) = &input.group_id {
        scope_5166.string(var_5167);
    }
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("SecurityGroupRule");
    if let Some(var_5169) = &input.security_group_rules {
        let mut list_5171 = scope_5168.start_list(true, Some("item"));
        for item_5170 in var_5169 {
            #[allow(unused_mut)]
            let mut entry_5172 = list_5171.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5172, item_5170,
            )?;
        }
        list_5171.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("DryRun");
    if let Some(var_5174) = &input.dry_run {
        scope_5173.boolean(*var_5174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("Attribute");
    if let Some(var_5176) = &input.attribute {
        scope_5175.string(var_5176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("CreateVolumePermission");
    if let Some(var_5178) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5177, var_5178,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("UserGroup");
    if let Some(var_5180) = &input.group_names {
        let mut list_5182 = scope_5179.start_list(true, Some("GroupName"));
        for item_5181 in var_5180 {
            #[allow(unused_mut)]
            let mut entry_5183 = list_5182.entry();
            entry_5183.string(item_5181);
        }
        list_5182.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5184 = writer.prefix("OperationType");
    if let Some(var_5185) = &input.operation_type {
        scope_5184.string(var_5185.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("SnapshotId");
    if let Some(var_5187) = &input.snapshot_id {
        scope_5186.string(var_5187);
    }
    #[allow(unused_mut)]
    let mut scope_5188 = writer.prefix("UserId");
    if let Some(var_5189) = &input.user_ids {
        let mut list_5191 = scope_5188.start_list(true, Some("UserId"));
        for item_5190 in var_5189 {
            #[allow(unused_mut)]
            let mut entry_5192 = list_5191.entry();
            entry_5192.string(item_5190);
        }
        list_5191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5193 = writer.prefix("DryRun");
    if let Some(var_5194) = &input.dry_run {
        scope_5193.boolean(*var_5194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5195 = writer.prefix("SnapshotId");
    if let Some(var_5196) = &input.snapshot_id {
        scope_5195.string(var_5196);
    }
    #[allow(unused_mut)]
    let mut scope_5197 = writer.prefix("StorageTier");
    if let Some(var_5198) = &input.storage_tier {
        scope_5197.string(var_5198.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5199 = writer.prefix("DryRun");
    if let Some(var_5200) = &input.dry_run {
        scope_5199.boolean(*var_5200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5201 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5202) = &input.excess_capacity_termination_policy {
        scope_5201.string(var_5202.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5203 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5204) = &input.launch_template_configs {
        let mut list_5206 = scope_5203.start_list(true, Some("item"));
        for item_5205 in var_5204 {
            #[allow(unused_mut)]
            let mut entry_5207 = list_5206.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5207, item_5205,
            )?;
        }
        list_5206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5209) = &input.spot_fleet_request_id {
        scope_5208.string(var_5209);
    }
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("TargetCapacity");
    if let Some(var_5211) = &input.target_capacity {
        scope_5210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5212 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5213) = &input.on_demand_target_capacity {
        scope_5212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5213).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5214 = writer.prefix("Context");
    if let Some(var_5215) = &input.context {
        scope_5214.string(var_5215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5216 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5217) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5216, var_5217,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5218 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5219) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5218, var_5219,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5220 = writer.prefix("SubnetId");
    if let Some(var_5221) = &input.subnet_id {
        scope_5220.string(var_5221);
    }
    #[allow(unused_mut)]
    let mut scope_5222 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5223) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5222, var_5223,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5224 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5225) = &input.customer_owned_ipv4_pool {
        scope_5224.string(var_5225);
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("EnableDns64");
    if let Some(var_5227) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5226, var_5227,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5229) = &input.private_dns_hostname_type_on_launch {
        scope_5228.string(var_5229.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5231) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5230, var_5231,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5232 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5233) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5232, var_5233,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5234 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5235) = &input.enable_lni_at_device_index {
        scope_5234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5236 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5237) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5236, var_5237,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5239) = &input.traffic_mirror_filter_id {
        scope_5238.string(var_5239);
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("AddNetworkService");
    if let Some(var_5241) = &input.add_network_services {
        let mut list_5243 = scope_5240.start_list(true, Some("item"));
        for item_5242 in var_5241 {
            #[allow(unused_mut)]
            let mut entry_5244 = list_5243.entry();
            entry_5244.string(item_5242.as_str());
        }
        list_5243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5245 = writer.prefix("RemoveNetworkService");
    if let Some(var_5246) = &input.remove_network_services {
        let mut list_5248 = scope_5245.start_list(true, Some("item"));
        for item_5247 in var_5246 {
            #[allow(unused_mut)]
            let mut entry_5249 = list_5248.entry();
            entry_5249.string(item_5247.as_str());
        }
        list_5248.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("DryRun");
    if let Some(var_5251) = &input.dry_run {
        scope_5250.boolean(*var_5251);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5253) = &input.traffic_mirror_filter_rule_id {
        scope_5252.string(var_5253);
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("TrafficDirection");
    if let Some(var_5255) = &input.traffic_direction {
        scope_5254.string(var_5255.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("RuleNumber");
    if let Some(var_5257) = &input.rule_number {
        scope_5256.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("RuleAction");
    if let Some(var_5259) = &input.rule_action {
        scope_5258.string(var_5259.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("DestinationPortRange");
    if let Some(var_5261) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5260, var_5261,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("SourcePortRange");
    if let Some(var_5263) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5262, var_5263,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5264 = writer.prefix("Protocol");
    if let Some(var_5265) = &input.protocol {
        scope_5264.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5265).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5266 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5267) = &input.destination_cidr_block {
        scope_5266.string(var_5267);
    }
    #[allow(unused_mut)]
    let mut scope_5268 = writer.prefix("SourceCidrBlock");
    if let Some(var_5269) = &input.source_cidr_block {
        scope_5268.string(var_5269);
    }
    #[allow(unused_mut)]
    let mut scope_5270 = writer.prefix("Description");
    if let Some(var_5271) = &input.description {
        scope_5270.string(var_5271);
    }
    #[allow(unused_mut)]
    let mut scope_5272 = writer.prefix("RemoveField");
    if let Some(var_5273) = &input.remove_fields {
        let mut list_5275 = scope_5272.start_list(true, None);
        for item_5274 in var_5273 {
            #[allow(unused_mut)]
            let mut entry_5276 = list_5275.entry();
            entry_5276.string(item_5274.as_str());
        }
        list_5275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5277 = writer.prefix("DryRun");
    if let Some(var_5278) = &input.dry_run {
        scope_5277.boolean(*var_5278);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5279 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5280) = &input.traffic_mirror_session_id {
        scope_5279.string(var_5280);
    }
    #[allow(unused_mut)]
    let mut scope_5281 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5282) = &input.traffic_mirror_target_id {
        scope_5281.string(var_5282);
    }
    #[allow(unused_mut)]
    let mut scope_5283 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5284) = &input.traffic_mirror_filter_id {
        scope_5283.string(var_5284);
    }
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("PacketLength");
    if let Some(var_5286) = &input.packet_length {
        scope_5285.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5286).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("SessionNumber");
    if let Some(var_5288) = &input.session_number {
        scope_5287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("VirtualNetworkId");
    if let Some(var_5290) = &input.virtual_network_id {
        scope_5289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5291 = writer.prefix("Description");
    if let Some(var_5292) = &input.description {
        scope_5291.string(var_5292);
    }
    #[allow(unused_mut)]
    let mut scope_5293 = writer.prefix("RemoveField");
    if let Some(var_5294) = &input.remove_fields {
        let mut list_5296 = scope_5293.start_list(true, None);
        for item_5295 in var_5294 {
            #[allow(unused_mut)]
            let mut entry_5297 = list_5296.entry();
            entry_5297.string(item_5295.as_str());
        }
        list_5296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5298 = writer.prefix("DryRun");
    if let Some(var_5299) = &input.dry_run {
        scope_5298.boolean(*var_5299);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("TransitGatewayId");
    if let Some(var_5301) = &input.transit_gateway_id {
        scope_5300.string(var_5301);
    }
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("Description");
    if let Some(var_5303) = &input.description {
        scope_5302.string(var_5303);
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("Options");
    if let Some(var_5305) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5304, var_5305,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5306 = writer.prefix("DryRun");
    if let Some(var_5307) = &input.dry_run {
        scope_5306.boolean(*var_5307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5308 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5309) = &input.transit_gateway_route_table_id {
        scope_5308.string(var_5309);
    }
    #[allow(unused_mut)]
    let mut scope_5310 = writer.prefix("PrefixListId");
    if let Some(var_5311) = &input.prefix_list_id {
        scope_5310.string(var_5311);
    }
    #[allow(unused_mut)]
    let mut scope_5312 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5313) = &input.transit_gateway_attachment_id {
        scope_5312.string(var_5313);
    }
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("Blackhole");
    if let Some(var_5315) = &input.blackhole {
        scope_5314.boolean(*var_5315);
    }
    #[allow(unused_mut)]
    let mut scope_5316 = writer.prefix("DryRun");
    if let Some(var_5317) = &input.dry_run {
        scope_5316.boolean(*var_5317);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5318 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5319) = &input.transit_gateway_attachment_id {
        scope_5318.string(var_5319);
    }
    #[allow(unused_mut)]
    let mut scope_5320 = writer.prefix("AddSubnetIds");
    if let Some(var_5321) = &input.add_subnet_ids {
        let mut list_5323 = scope_5320.start_list(true, Some("item"));
        for item_5322 in var_5321 {
            #[allow(unused_mut)]
            let mut entry_5324 = list_5323.entry();
            entry_5324.string(item_5322);
        }
        list_5323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5325 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5326) = &input.remove_subnet_ids {
        let mut list_5328 = scope_5325.start_list(true, Some("item"));
        for item_5327 in var_5326 {
            #[allow(unused_mut)]
            let mut entry_5329 = list_5328.entry();
            entry_5329.string(item_5327);
        }
        list_5328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5330 = writer.prefix("Options");
    if let Some(var_5331) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5330, var_5331)?;
    }
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("DryRun");
    if let Some(var_5333) = &input.dry_run {
        scope_5332.boolean(*var_5333);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("DryRun");
    if let Some(var_5335) = &input.dry_run {
        scope_5334.boolean(*var_5335);
    }
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("VolumeId");
    if let Some(var_5337) = &input.volume_id {
        scope_5336.string(var_5337);
    }
    #[allow(unused_mut)]
    let mut scope_5338 = writer.prefix("Size");
    if let Some(var_5339) = &input.size {
        scope_5338.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5339).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5340 = writer.prefix("VolumeType");
    if let Some(var_5341) = &input.volume_type {
        scope_5340.string(var_5341.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5342 = writer.prefix("Iops");
    if let Some(var_5343) = &input.iops {
        scope_5342.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5343).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5344 = writer.prefix("Throughput");
    if let Some(var_5345) = &input.throughput {
        scope_5344.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5345).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5347) = &input.multi_attach_enabled {
        scope_5346.boolean(*var_5347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("AutoEnableIO");
    if let Some(var_5349) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5348, var_5349,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5350 = writer.prefix("VolumeId");
    if let Some(var_5351) = &input.volume_id {
        scope_5350.string(var_5351);
    }
    #[allow(unused_mut)]
    let mut scope_5352 = writer.prefix("DryRun");
    if let Some(var_5353) = &input.dry_run {
        scope_5352.boolean(*var_5353);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5354 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5355) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5354, var_5355,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5356 = writer.prefix("EnableDnsSupport");
    if let Some(var_5357) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5356, var_5357,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("VpcId");
    if let Some(var_5359) = &input.vpc_id {
        scope_5358.string(var_5359);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("DryRun");
    if let Some(var_5361) = &input.dry_run {
        scope_5360.boolean(*var_5361);
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("VpcEndpointId");
    if let Some(var_5363) = &input.vpc_endpoint_id {
        scope_5362.string(var_5363);
    }
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("ResetPolicy");
    if let Some(var_5365) = &input.reset_policy {
        scope_5364.boolean(*var_5365);
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("PolicyDocument");
    if let Some(var_5367) = &input.policy_document {
        scope_5366.string(var_5367);
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("AddRouteTableId");
    if let Some(var_5369) = &input.add_route_table_ids {
        let mut list_5371 = scope_5368.start_list(true, Some("item"));
        for item_5370 in var_5369 {
            #[allow(unused_mut)]
            let mut entry_5372 = list_5371.entry();
            entry_5372.string(item_5370);
        }
        list_5371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5373 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5374) = &input.remove_route_table_ids {
        let mut list_5376 = scope_5373.start_list(true, Some("item"));
        for item_5375 in var_5374 {
            #[allow(unused_mut)]
            let mut entry_5377 = list_5376.entry();
            entry_5377.string(item_5375);
        }
        list_5376.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5378 = writer.prefix("AddSubnetId");
    if let Some(var_5379) = &input.add_subnet_ids {
        let mut list_5381 = scope_5378.start_list(true, Some("item"));
        for item_5380 in var_5379 {
            #[allow(unused_mut)]
            let mut entry_5382 = list_5381.entry();
            entry_5382.string(item_5380);
        }
        list_5381.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("RemoveSubnetId");
    if let Some(var_5384) = &input.remove_subnet_ids {
        let mut list_5386 = scope_5383.start_list(true, Some("item"));
        for item_5385 in var_5384 {
            #[allow(unused_mut)]
            let mut entry_5387 = list_5386.entry();
            entry_5387.string(item_5385);
        }
        list_5386.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5388 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5389) = &input.add_security_group_ids {
        let mut list_5391 = scope_5388.start_list(true, Some("item"));
        for item_5390 in var_5389 {
            #[allow(unused_mut)]
            let mut entry_5392 = list_5391.entry();
            entry_5392.string(item_5390);
        }
        list_5391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5394) = &input.remove_security_group_ids {
        let mut list_5396 = scope_5393.start_list(true, Some("item"));
        for item_5395 in var_5394 {
            #[allow(unused_mut)]
            let mut entry_5397 = list_5396.entry();
            entry_5397.string(item_5395);
        }
        list_5396.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5398 = writer.prefix("IpAddressType");
    if let Some(var_5399) = &input.ip_address_type {
        scope_5398.string(var_5399.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5400 = writer.prefix("DnsOptions");
    if let Some(var_5401) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_5400, var_5401,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5402 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5403) = &input.private_dns_enabled {
        scope_5402.boolean(*var_5403);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5404 = writer.prefix("DryRun");
    if let Some(var_5405) = &input.dry_run {
        scope_5404.boolean(*var_5405);
    }
    #[allow(unused_mut)]
    let mut scope_5406 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5407) = &input.connection_notification_id {
        scope_5406.string(var_5407);
    }
    #[allow(unused_mut)]
    let mut scope_5408 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5409) = &input.connection_notification_arn {
        scope_5408.string(var_5409);
    }
    #[allow(unused_mut)]
    let mut scope_5410 = writer.prefix("ConnectionEvents");
    if let Some(var_5411) = &input.connection_events {
        let mut list_5413 = scope_5410.start_list(true, Some("item"));
        for item_5412 in var_5411 {
            #[allow(unused_mut)]
            let mut entry_5414 = list_5413.entry();
            entry_5414.string(item_5412);
        }
        list_5413.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("DryRun");
    if let Some(var_5416) = &input.dry_run {
        scope_5415.boolean(*var_5416);
    }
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("ServiceId");
    if let Some(var_5418) = &input.service_id {
        scope_5417.string(var_5418);
    }
    #[allow(unused_mut)]
    let mut scope_5419 = writer.prefix("PrivateDnsName");
    if let Some(var_5420) = &input.private_dns_name {
        scope_5419.string(var_5420);
    }
    #[allow(unused_mut)]
    let mut scope_5421 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5422) = &input.remove_private_dns_name {
        scope_5421.boolean(*var_5422);
    }
    #[allow(unused_mut)]
    let mut scope_5423 = writer.prefix("AcceptanceRequired");
    if let Some(var_5424) = &input.acceptance_required {
        scope_5423.boolean(*var_5424);
    }
    #[allow(unused_mut)]
    let mut scope_5425 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5426) = &input.add_network_load_balancer_arns {
        let mut list_5428 = scope_5425.start_list(true, Some("item"));
        for item_5427 in var_5426 {
            #[allow(unused_mut)]
            let mut entry_5429 = list_5428.entry();
            entry_5429.string(item_5427);
        }
        list_5428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5431) = &input.remove_network_load_balancer_arns {
        let mut list_5433 = scope_5430.start_list(true, Some("item"));
        for item_5432 in var_5431 {
            #[allow(unused_mut)]
            let mut entry_5434 = list_5433.entry();
            entry_5434.string(item_5432);
        }
        list_5433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5435 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5436) = &input.add_gateway_load_balancer_arns {
        let mut list_5438 = scope_5435.start_list(true, Some("item"));
        for item_5437 in var_5436 {
            #[allow(unused_mut)]
            let mut entry_5439 = list_5438.entry();
            entry_5439.string(item_5437);
        }
        list_5438.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5440 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5441) = &input.remove_gateway_load_balancer_arns {
        let mut list_5443 = scope_5440.start_list(true, Some("item"));
        for item_5442 in var_5441 {
            #[allow(unused_mut)]
            let mut entry_5444 = list_5443.entry();
            entry_5444.string(item_5442);
        }
        list_5443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5445 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5446) = &input.add_supported_ip_address_types {
        let mut list_5448 = scope_5445.start_list(true, Some("item"));
        for item_5447 in var_5446 {
            #[allow(unused_mut)]
            let mut entry_5449 = list_5448.entry();
            entry_5449.string(item_5447);
        }
        list_5448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5450 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5451) = &input.remove_supported_ip_address_types {
        let mut list_5453 = scope_5450.start_list(true, Some("item"));
        for item_5452 in var_5451 {
            #[allow(unused_mut)]
            let mut entry_5454 = list_5453.entry();
            entry_5454.string(item_5452);
        }
        list_5453.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5455 = writer.prefix("DryRun");
    if let Some(var_5456) = &input.dry_run {
        scope_5455.boolean(*var_5456);
    }
    #[allow(unused_mut)]
    let mut scope_5457 = writer.prefix("ServiceId");
    if let Some(var_5458) = &input.service_id {
        scope_5457.string(var_5458);
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("PayerResponsibility");
    if let Some(var_5460) = &input.payer_responsibility {
        scope_5459.string(var_5460.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("DryRun");
    if let Some(var_5462) = &input.dry_run {
        scope_5461.boolean(*var_5462);
    }
    #[allow(unused_mut)]
    let mut scope_5463 = writer.prefix("ServiceId");
    if let Some(var_5464) = &input.service_id {
        scope_5463.string(var_5464);
    }
    #[allow(unused_mut)]
    let mut scope_5465 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5466) = &input.add_allowed_principals {
        let mut list_5468 = scope_5465.start_list(true, Some("item"));
        for item_5467 in var_5466 {
            #[allow(unused_mut)]
            let mut entry_5469 = list_5468.entry();
            entry_5469.string(item_5467);
        }
        list_5468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5470 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5471) = &input.remove_allowed_principals {
        let mut list_5473 = scope_5470.start_list(true, Some("item"));
        for item_5472 in var_5471 {
            #[allow(unused_mut)]
            let mut entry_5474 = list_5473.entry();
            entry_5474.string(item_5472);
        }
        list_5473.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5475 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5476) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5475, var_5476,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5477 = writer.prefix("DryRun");
    if let Some(var_5478) = &input.dry_run {
        scope_5477.boolean(*var_5478);
    }
    #[allow(unused_mut)]
    let mut scope_5479 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5480) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5479, var_5480,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5481 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5482) = &input.vpc_peering_connection_id {
        scope_5481.string(var_5482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5483 = writer.prefix("VpcId");
    if let Some(var_5484) = &input.vpc_id {
        scope_5483.string(var_5484);
    }
    #[allow(unused_mut)]
    let mut scope_5485 = writer.prefix("InstanceTenancy");
    if let Some(var_5486) = &input.instance_tenancy {
        scope_5485.string(var_5486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5487 = writer.prefix("DryRun");
    if let Some(var_5488) = &input.dry_run {
        scope_5487.boolean(*var_5488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("VpnConnectionId");
    if let Some(var_5490) = &input.vpn_connection_id {
        scope_5489.string(var_5490);
    }
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("TransitGatewayId");
    if let Some(var_5492) = &input.transit_gateway_id {
        scope_5491.string(var_5492);
    }
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("CustomerGatewayId");
    if let Some(var_5494) = &input.customer_gateway_id {
        scope_5493.string(var_5494);
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("VpnGatewayId");
    if let Some(var_5496) = &input.vpn_gateway_id {
        scope_5495.string(var_5496);
    }
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("DryRun");
    if let Some(var_5498) = &input.dry_run {
        scope_5497.boolean(*var_5498);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("VpnConnectionId");
    if let Some(var_5500) = &input.vpn_connection_id {
        scope_5499.string(var_5500);
    }
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5502) = &input.local_ipv4_network_cidr {
        scope_5501.string(var_5502);
    }
    #[allow(unused_mut)]
    let mut scope_5503 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5504) = &input.remote_ipv4_network_cidr {
        scope_5503.string(var_5504);
    }
    #[allow(unused_mut)]
    let mut scope_5505 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5506) = &input.local_ipv6_network_cidr {
        scope_5505.string(var_5506);
    }
    #[allow(unused_mut)]
    let mut scope_5507 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5508) = &input.remote_ipv6_network_cidr {
        scope_5507.string(var_5508);
    }
    #[allow(unused_mut)]
    let mut scope_5509 = writer.prefix("DryRun");
    if let Some(var_5510) = &input.dry_run {
        scope_5509.boolean(*var_5510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5511 = writer.prefix("VpnConnectionId");
    if let Some(var_5512) = &input.vpn_connection_id {
        scope_5511.string(var_5512);
    }
    #[allow(unused_mut)]
    let mut scope_5513 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5514) = &input.vpn_tunnel_outside_ip_address {
        scope_5513.string(var_5514);
    }
    #[allow(unused_mut)]
    let mut scope_5515 = writer.prefix("DryRun");
    if let Some(var_5516) = &input.dry_run {
        scope_5515.boolean(*var_5516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5517 = writer.prefix("VpnConnectionId");
    if let Some(var_5518) = &input.vpn_connection_id {
        scope_5517.string(var_5518);
    }
    #[allow(unused_mut)]
    let mut scope_5519 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5520) = &input.vpn_tunnel_outside_ip_address {
        scope_5519.string(var_5520);
    }
    #[allow(unused_mut)]
    let mut scope_5521 = writer.prefix("TunnelOptions");
    if let Some(var_5522) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5521, var_5522,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5523 = writer.prefix("DryRun");
    if let Some(var_5524) = &input.dry_run {
        scope_5523.boolean(*var_5524);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5525 = writer.prefix("InstanceId");
    if let Some(var_5526) = &input.instance_ids {
        let mut list_5528 = scope_5525.start_list(true, Some("InstanceId"));
        for item_5527 in var_5526 {
            #[allow(unused_mut)]
            let mut entry_5529 = list_5528.entry();
            entry_5529.string(item_5527);
        }
        list_5528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("DryRun");
    if let Some(var_5531) = &input.dry_run {
        scope_5530.boolean(*var_5531);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("DryRun");
    if let Some(var_5533) = &input.dry_run {
        scope_5532.boolean(*var_5533);
    }
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("PublicIp");
    if let Some(var_5535) = &input.public_ip {
        scope_5534.string(var_5535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5536 = writer.prefix("DryRun");
    if let Some(var_5537) = &input.dry_run {
        scope_5536.boolean(*var_5537);
    }
    #[allow(unused_mut)]
    let mut scope_5538 = writer.prefix("Cidr");
    if let Some(var_5539) = &input.cidr {
        scope_5538.string(var_5539);
    }
    #[allow(unused_mut)]
    let mut scope_5540 = writer.prefix("IpamPoolId");
    if let Some(var_5541) = &input.ipam_pool_id {
        scope_5540.string(var_5541);
    }
    #[allow(unused_mut)]
    let mut scope_5542 = writer.prefix("IpamPoolOwner");
    if let Some(var_5543) = &input.ipam_pool_owner {
        scope_5542.string(var_5543);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5544 = writer.prefix("Cidr");
    if let Some(var_5545) = &input.cidr {
        scope_5544.string(var_5545);
    }
    #[allow(unused_mut)]
    let mut scope_5546 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5547) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5546, var_5547,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5548 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5549) = &input.publicly_advertisable {
        scope_5548.boolean(*var_5549);
    }
    #[allow(unused_mut)]
    let mut scope_5550 = writer.prefix("Description");
    if let Some(var_5551) = &input.description {
        scope_5550.string(var_5551);
    }
    #[allow(unused_mut)]
    let mut scope_5552 = writer.prefix("DryRun");
    if let Some(var_5553) = &input.dry_run {
        scope_5552.boolean(*var_5553);
    }
    #[allow(unused_mut)]
    let mut scope_5554 = writer.prefix("PoolTagSpecification");
    if let Some(var_5555) = &input.pool_tag_specifications {
        let mut list_5557 = scope_5554.start_list(true, Some("item"));
        for item_5556 in var_5555 {
            #[allow(unused_mut)]
            let mut entry_5558 = list_5557.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5558, item_5556,
            )?;
        }
        list_5557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5559 = writer.prefix("MultiRegion");
    if let Some(var_5560) = &input.multi_region {
        scope_5559.boolean(*var_5560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5561 = writer.prefix("DryRun");
    if let Some(var_5562) = &input.dry_run {
        scope_5561.boolean(*var_5562);
    }
    #[allow(unused_mut)]
    let mut scope_5563 = writer.prefix("IpamPoolId");
    if let Some(var_5564) = &input.ipam_pool_id {
        scope_5563.string(var_5564);
    }
    #[allow(unused_mut)]
    let mut scope_5565 = writer.prefix("Cidr");
    if let Some(var_5566) = &input.cidr {
        scope_5565.string(var_5566);
    }
    #[allow(unused_mut)]
    let mut scope_5567 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5568) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5567, var_5568,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5569 = writer.prefix("DryRun");
    if let Some(var_5570) = &input.dry_run {
        scope_5569.boolean(*var_5570);
    }
    #[allow(unused_mut)]
    let mut scope_5571 = writer.prefix("IpamPoolId");
    if let Some(var_5572) = &input.ipam_pool_id {
        scope_5571.string(var_5572);
    }
    #[allow(unused_mut)]
    let mut scope_5573 = writer.prefix("PoolId");
    if let Some(var_5574) = &input.pool_id {
        scope_5573.string(var_5574);
    }
    #[allow(unused_mut)]
    let mut scope_5575 = writer.prefix("NetmaskLength");
    if let Some(var_5576) = &input.netmask_length {
        scope_5575.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5576).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5577 = writer.prefix("ClientToken");
    if let Some(var_5578) = &input.client_token {
        scope_5577.string(var_5578);
    }
    #[allow(unused_mut)]
    let mut scope_5579 = writer.prefix("CurrencyCode");
    if let Some(var_5580) = &input.currency_code {
        scope_5579.string(var_5580.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5581 = writer.prefix("HostIdSet");
    if let Some(var_5582) = &input.host_id_set {
        let mut list_5584 = scope_5581.start_list(true, Some("item"));
        for item_5583 in var_5582 {
            #[allow(unused_mut)]
            let mut entry_5585 = list_5584.entry();
            entry_5585.string(item_5583);
        }
        list_5584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5586 = writer.prefix("LimitPrice");
    if let Some(var_5587) = &input.limit_price {
        scope_5586.string(var_5587);
    }
    #[allow(unused_mut)]
    let mut scope_5588 = writer.prefix("OfferingId");
    if let Some(var_5589) = &input.offering_id {
        scope_5588.string(var_5589);
    }
    #[allow(unused_mut)]
    let mut scope_5590 = writer.prefix("TagSpecification");
    if let Some(var_5591) = &input.tag_specifications {
        let mut list_5593 = scope_5590.start_list(true, Some("item"));
        for item_5592 in var_5591 {
            #[allow(unused_mut)]
            let mut entry_5594 = list_5593.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5594, item_5592,
            )?;
        }
        list_5593.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5595 = writer.prefix("InstanceCount");
    if let Some(var_5596) = &input.instance_count {
        scope_5595.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5596).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5597 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5598) = &input.reserved_instances_offering_id {
        scope_5597.string(var_5598);
    }
    #[allow(unused_mut)]
    let mut scope_5599 = writer.prefix("DryRun");
    if let Some(var_5600) = &input.dry_run {
        scope_5599.boolean(*var_5600);
    }
    #[allow(unused_mut)]
    let mut scope_5601 = writer.prefix("LimitPrice");
    if let Some(var_5602) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5601, var_5602,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5603 = writer.prefix("PurchaseTime");
    if let Some(var_5604) = &input.purchase_time {
        scope_5603.date_time(var_5604, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5605 = writer.prefix("ClientToken");
    if let Some(var_5606) = &input.client_token {
        scope_5605.string(var_5606);
    }
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("DryRun");
    if let Some(var_5608) = &input.dry_run {
        scope_5607.boolean(*var_5608);
    }
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("PurchaseRequest");
    if let Some(var_5610) = &input.purchase_requests {
        let mut list_5612 = scope_5609.start_list(true, Some("PurchaseRequest"));
        for item_5611 in var_5610 {
            #[allow(unused_mut)]
            let mut entry_5613 = list_5612.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5613, item_5611,
            )?;
        }
        list_5612.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5614 = writer.prefix("InstanceId");
    if let Some(var_5615) = &input.instance_ids {
        let mut list_5617 = scope_5614.start_list(true, Some("InstanceId"));
        for item_5616 in var_5615 {
            #[allow(unused_mut)]
            let mut entry_5618 = list_5617.entry();
            entry_5618.string(item_5616);
        }
        list_5617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5619 = writer.prefix("DryRun");
    if let Some(var_5620) = &input.dry_run {
        scope_5619.boolean(*var_5620);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5621 = writer.prefix("ImageLocation");
    if let Some(var_5622) = &input.image_location {
        scope_5621.string(var_5622);
    }
    #[allow(unused_mut)]
    let mut scope_5623 = writer.prefix("Architecture");
    if let Some(var_5624) = &input.architecture {
        scope_5623.string(var_5624.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5625 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5626) = &input.block_device_mappings {
        let mut list_5628 = scope_5625.start_list(true, Some("BlockDeviceMapping"));
        for item_5627 in var_5626 {
            #[allow(unused_mut)]
            let mut entry_5629 = list_5628.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5629, item_5627,
            )?;
        }
        list_5628.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5630 = writer.prefix("Description");
    if let Some(var_5631) = &input.description {
        scope_5630.string(var_5631);
    }
    #[allow(unused_mut)]
    let mut scope_5632 = writer.prefix("DryRun");
    if let Some(var_5633) = &input.dry_run {
        scope_5632.boolean(*var_5633);
    }
    #[allow(unused_mut)]
    let mut scope_5634 = writer.prefix("EnaSupport");
    if let Some(var_5635) = &input.ena_support {
        scope_5634.boolean(*var_5635);
    }
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("KernelId");
    if let Some(var_5637) = &input.kernel_id {
        scope_5636.string(var_5637);
    }
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("Name");
    if let Some(var_5639) = &input.name {
        scope_5638.string(var_5639);
    }
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("BillingProduct");
    if let Some(var_5641) = &input.billing_products {
        let mut list_5643 = scope_5640.start_list(true, Some("item"));
        for item_5642 in var_5641 {
            #[allow(unused_mut)]
            let mut entry_5644 = list_5643.entry();
            entry_5644.string(item_5642);
        }
        list_5643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5645 = writer.prefix("RamdiskId");
    if let Some(var_5646) = &input.ramdisk_id {
        scope_5645.string(var_5646);
    }
    #[allow(unused_mut)]
    let mut scope_5647 = writer.prefix("RootDeviceName");
    if let Some(var_5648) = &input.root_device_name {
        scope_5647.string(var_5648);
    }
    #[allow(unused_mut)]
    let mut scope_5649 = writer.prefix("SriovNetSupport");
    if let Some(var_5650) = &input.sriov_net_support {
        scope_5649.string(var_5650);
    }
    #[allow(unused_mut)]
    let mut scope_5651 = writer.prefix("VirtualizationType");
    if let Some(var_5652) = &input.virtualization_type {
        scope_5651.string(var_5652);
    }
    #[allow(unused_mut)]
    let mut scope_5653 = writer.prefix("BootMode");
    if let Some(var_5654) = &input.boot_mode {
        scope_5653.string(var_5654.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5655 = writer.prefix("TpmSupport");
    if let Some(var_5656) = &input.tpm_support {
        scope_5655.string(var_5656.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5657 = writer.prefix("UefiData");
    if let Some(var_5658) = &input.uefi_data {
        scope_5657.string(var_5658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5659 = writer.prefix("DryRun");
    if let Some(var_5660) = &input.dry_run {
        scope_5659.boolean(*var_5660);
    }
    #[allow(unused_mut)]
    let mut scope_5661 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5662) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5661, var_5662,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5663 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5664) = &input.transit_gateway_multicast_domain_id {
        scope_5663.string(var_5664);
    }
    #[allow(unused_mut)]
    let mut scope_5665 = writer.prefix("GroupIpAddress");
    if let Some(var_5666) = &input.group_ip_address {
        scope_5665.string(var_5666);
    }
    #[allow(unused_mut)]
    let mut scope_5667 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5668) = &input.network_interface_ids {
        let mut list_5670 = scope_5667.start_list(true, Some("item"));
        for item_5669 in var_5668 {
            #[allow(unused_mut)]
            let mut entry_5671 = list_5670.entry();
            entry_5671.string(item_5669);
        }
        list_5670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5672 = writer.prefix("DryRun");
    if let Some(var_5673) = &input.dry_run {
        scope_5672.boolean(*var_5673);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5674 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5675) = &input.transit_gateway_multicast_domain_id {
        scope_5674.string(var_5675);
    }
    #[allow(unused_mut)]
    let mut scope_5676 = writer.prefix("GroupIpAddress");
    if let Some(var_5677) = &input.group_ip_address {
        scope_5676.string(var_5677);
    }
    #[allow(unused_mut)]
    let mut scope_5678 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5679) = &input.network_interface_ids {
        let mut list_5681 = scope_5678.start_list(true, Some("item"));
        for item_5680 in var_5679 {
            #[allow(unused_mut)]
            let mut entry_5682 = list_5681.entry();
            entry_5682.string(item_5680);
        }
        list_5681.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5683 = writer.prefix("DryRun");
    if let Some(var_5684) = &input.dry_run {
        scope_5683.boolean(*var_5684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5685 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5686) = &input.transit_gateway_multicast_domain_id {
        scope_5685.string(var_5686);
    }
    #[allow(unused_mut)]
    let mut scope_5687 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5688) = &input.transit_gateway_attachment_id {
        scope_5687.string(var_5688);
    }
    #[allow(unused_mut)]
    let mut scope_5689 = writer.prefix("SubnetIds");
    if let Some(var_5690) = &input.subnet_ids {
        let mut list_5692 = scope_5689.start_list(true, Some("item"));
        for item_5691 in var_5690 {
            #[allow(unused_mut)]
            let mut entry_5693 = list_5692.entry();
            entry_5693.string(item_5691);
        }
        list_5692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5694 = writer.prefix("DryRun");
    if let Some(var_5695) = &input.dry_run {
        scope_5694.boolean(*var_5695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5696 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5697) = &input.transit_gateway_attachment_id {
        scope_5696.string(var_5697);
    }
    #[allow(unused_mut)]
    let mut scope_5698 = writer.prefix("DryRun");
    if let Some(var_5699) = &input.dry_run {
        scope_5698.boolean(*var_5699);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5700 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5701) = &input.transit_gateway_attachment_id {
        scope_5700.string(var_5701);
    }
    #[allow(unused_mut)]
    let mut scope_5702 = writer.prefix("DryRun");
    if let Some(var_5703) = &input.dry_run {
        scope_5702.boolean(*var_5703);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5704 = writer.prefix("DryRun");
    if let Some(var_5705) = &input.dry_run {
        scope_5704.boolean(*var_5705);
    }
    #[allow(unused_mut)]
    let mut scope_5706 = writer.prefix("ServiceId");
    if let Some(var_5707) = &input.service_id {
        scope_5706.string(var_5707);
    }
    #[allow(unused_mut)]
    let mut scope_5708 = writer.prefix("VpcEndpointId");
    if let Some(var_5709) = &input.vpc_endpoint_ids {
        let mut list_5711 = scope_5708.start_list(true, Some("item"));
        for item_5710 in var_5709 {
            #[allow(unused_mut)]
            let mut entry_5712 = list_5711.entry();
            entry_5712.string(item_5710);
        }
        list_5711.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5713 = writer.prefix("DryRun");
    if let Some(var_5714) = &input.dry_run {
        scope_5713.boolean(*var_5714);
    }
    #[allow(unused_mut)]
    let mut scope_5715 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5716) = &input.vpc_peering_connection_id {
        scope_5715.string(var_5716);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5717 = writer.prefix("AllocationId");
    if let Some(var_5718) = &input.allocation_id {
        scope_5717.string(var_5718);
    }
    #[allow(unused_mut)]
    let mut scope_5719 = writer.prefix("PublicIp");
    if let Some(var_5720) = &input.public_ip {
        scope_5719.string(var_5720);
    }
    #[allow(unused_mut)]
    let mut scope_5721 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5722) = &input.network_border_group {
        scope_5721.string(var_5722);
    }
    #[allow(unused_mut)]
    let mut scope_5723 = writer.prefix("DryRun");
    if let Some(var_5724) = &input.dry_run {
        scope_5723.boolean(*var_5724);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5725 = writer.prefix("HostId");
    if let Some(var_5726) = &input.host_ids {
        let mut list_5728 = scope_5725.start_list(true, Some("item"));
        for item_5727 in var_5726 {
            #[allow(unused_mut)]
            let mut entry_5729 = list_5728.entry();
            entry_5729.string(item_5727);
        }
        list_5728.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("DryRun");
    if let Some(var_5731) = &input.dry_run {
        scope_5730.boolean(*var_5731);
    }
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("IpamPoolId");
    if let Some(var_5733) = &input.ipam_pool_id {
        scope_5732.string(var_5733);
    }
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("Cidr");
    if let Some(var_5735) = &input.cidr {
        scope_5734.string(var_5735);
    }
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5737) = &input.ipam_pool_allocation_id {
        scope_5736.string(var_5737);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("IamInstanceProfile");
    if let Some(var_5739) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5738, var_5739,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("AssociationId");
    if let Some(var_5741) = &input.association_id {
        scope_5740.string(var_5741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("AssociationId");
    if let Some(var_5743) = &input.association_id {
        scope_5742.string(var_5743);
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("DryRun");
    if let Some(var_5745) = &input.dry_run {
        scope_5744.boolean(*var_5745);
    }
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("NetworkAclId");
    if let Some(var_5747) = &input.network_acl_id {
        scope_5746.string(var_5747);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("CidrBlock");
    if let Some(var_5749) = &input.cidr_block {
        scope_5748.string(var_5749);
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("DryRun");
    if let Some(var_5751) = &input.dry_run {
        scope_5750.boolean(*var_5751);
    }
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("Egress");
    if let Some(var_5753) = &input.egress {
        scope_5752.boolean(*var_5753);
    }
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("Icmp");
    if let Some(var_5755) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5754, var_5755)?;
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5757) = &input.ipv6_cidr_block {
        scope_5756.string(var_5757);
    }
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("NetworkAclId");
    if let Some(var_5759) = &input.network_acl_id {
        scope_5758.string(var_5759);
    }
    #[allow(unused_mut)]
    let mut scope_5760 = writer.prefix("PortRange");
    if let Some(var_5761) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5760, var_5761)?;
    }
    #[allow(unused_mut)]
    let mut scope_5762 = writer.prefix("Protocol");
    if let Some(var_5763) = &input.protocol {
        scope_5762.string(var_5763);
    }
    #[allow(unused_mut)]
    let mut scope_5764 = writer.prefix("RuleAction");
    if let Some(var_5765) = &input.rule_action {
        scope_5764.string(var_5765.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5766 = writer.prefix("RuleNumber");
    if let Some(var_5767) = &input.rule_number {
        scope_5766.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5767).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5768 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5769) = &input.destination_cidr_block {
        scope_5768.string(var_5769);
    }
    #[allow(unused_mut)]
    let mut scope_5770 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5771) = &input.destination_ipv6_cidr_block {
        scope_5770.string(var_5771);
    }
    #[allow(unused_mut)]
    let mut scope_5772 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5773) = &input.destination_prefix_list_id {
        scope_5772.string(var_5773);
    }
    #[allow(unused_mut)]
    let mut scope_5774 = writer.prefix("DryRun");
    if let Some(var_5775) = &input.dry_run {
        scope_5774.boolean(*var_5775);
    }
    #[allow(unused_mut)]
    let mut scope_5776 = writer.prefix("VpcEndpointId");
    if let Some(var_5777) = &input.vpc_endpoint_id {
        scope_5776.string(var_5777);
    }
    #[allow(unused_mut)]
    let mut scope_5778 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5779) = &input.egress_only_internet_gateway_id {
        scope_5778.string(var_5779);
    }
    #[allow(unused_mut)]
    let mut scope_5780 = writer.prefix("GatewayId");
    if let Some(var_5781) = &input.gateway_id {
        scope_5780.string(var_5781);
    }
    #[allow(unused_mut)]
    let mut scope_5782 = writer.prefix("InstanceId");
    if let Some(var_5783) = &input.instance_id {
        scope_5782.string(var_5783);
    }
    #[allow(unused_mut)]
    let mut scope_5784 = writer.prefix("LocalTarget");
    if let Some(var_5785) = &input.local_target {
        scope_5784.boolean(*var_5785);
    }
    #[allow(unused_mut)]
    let mut scope_5786 = writer.prefix("NatGatewayId");
    if let Some(var_5787) = &input.nat_gateway_id {
        scope_5786.string(var_5787);
    }
    #[allow(unused_mut)]
    let mut scope_5788 = writer.prefix("TransitGatewayId");
    if let Some(var_5789) = &input.transit_gateway_id {
        scope_5788.string(var_5789);
    }
    #[allow(unused_mut)]
    let mut scope_5790 = writer.prefix("LocalGatewayId");
    if let Some(var_5791) = &input.local_gateway_id {
        scope_5790.string(var_5791);
    }
    #[allow(unused_mut)]
    let mut scope_5792 = writer.prefix("CarrierGatewayId");
    if let Some(var_5793) = &input.carrier_gateway_id {
        scope_5792.string(var_5793);
    }
    #[allow(unused_mut)]
    let mut scope_5794 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5795) = &input.network_interface_id {
        scope_5794.string(var_5795);
    }
    #[allow(unused_mut)]
    let mut scope_5796 = writer.prefix("RouteTableId");
    if let Some(var_5797) = &input.route_table_id {
        scope_5796.string(var_5797);
    }
    #[allow(unused_mut)]
    let mut scope_5798 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5799) = &input.vpc_peering_connection_id {
        scope_5798.string(var_5799);
    }
    #[allow(unused_mut)]
    let mut scope_5800 = writer.prefix("CoreNetworkArn");
    if let Some(var_5801) = &input.core_network_arn {
        scope_5800.string(var_5801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5802 = writer.prefix("AssociationId");
    if let Some(var_5803) = &input.association_id {
        scope_5802.string(var_5803);
    }
    #[allow(unused_mut)]
    let mut scope_5804 = writer.prefix("DryRun");
    if let Some(var_5805) = &input.dry_run {
        scope_5804.boolean(*var_5805);
    }
    #[allow(unused_mut)]
    let mut scope_5806 = writer.prefix("RouteTableId");
    if let Some(var_5807) = &input.route_table_id {
        scope_5806.string(var_5807);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5808 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5809) = &input.destination_cidr_block {
        scope_5808.string(var_5809);
    }
    #[allow(unused_mut)]
    let mut scope_5810 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5811) = &input.transit_gateway_route_table_id {
        scope_5810.string(var_5811);
    }
    #[allow(unused_mut)]
    let mut scope_5812 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5813) = &input.transit_gateway_attachment_id {
        scope_5812.string(var_5813);
    }
    #[allow(unused_mut)]
    let mut scope_5814 = writer.prefix("Blackhole");
    if let Some(var_5815) = &input.blackhole {
        scope_5814.boolean(*var_5815);
    }
    #[allow(unused_mut)]
    let mut scope_5816 = writer.prefix("DryRun");
    if let Some(var_5817) = &input.dry_run {
        scope_5816.boolean(*var_5817);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5818 = writer.prefix("Description");
    if let Some(var_5819) = &input.description {
        scope_5818.string(var_5819);
    }
    #[allow(unused_mut)]
    let mut scope_5820 = writer.prefix("DryRun");
    if let Some(var_5821) = &input.dry_run {
        scope_5820.boolean(*var_5821);
    }
    #[allow(unused_mut)]
    let mut scope_5822 = writer.prefix("EndTime");
    if let Some(var_5823) = &input.end_time {
        scope_5822.date_time(var_5823, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5824 = writer.prefix("InstanceId");
    if let Some(var_5825) = &input.instances {
        let mut list_5827 = scope_5824.start_list(true, Some("InstanceId"));
        for item_5826 in var_5825 {
            #[allow(unused_mut)]
            let mut entry_5828 = list_5827.entry();
            entry_5828.string(item_5826);
        }
        list_5827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("ReasonCode");
    if let Some(var_5830) = &input.reason_codes {
        let mut list_5832 = scope_5829.start_list(true, Some("item"));
        for item_5831 in var_5830 {
            #[allow(unused_mut)]
            let mut entry_5833 = list_5832.entry();
            entry_5833.string(item_5831.as_str());
        }
        list_5832.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5834 = writer.prefix("StartTime");
    if let Some(var_5835) = &input.start_time {
        scope_5834.date_time(var_5835, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5836 = writer.prefix("Status");
    if let Some(var_5837) = &input.status {
        scope_5836.string(var_5837.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5838 = writer.prefix("DryRun");
    if let Some(var_5839) = &input.dry_run {
        scope_5838.boolean(*var_5839);
    }
    #[allow(unused_mut)]
    let mut scope_5840 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5841) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5840, var_5841,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5842 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5843) = &input.availability_zone_group {
        scope_5842.string(var_5843);
    }
    #[allow(unused_mut)]
    let mut scope_5844 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5845) = &input.block_duration_minutes {
        scope_5844.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5845).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5846 = writer.prefix("ClientToken");
    if let Some(var_5847) = &input.client_token {
        scope_5846.string(var_5847);
    }
    #[allow(unused_mut)]
    let mut scope_5848 = writer.prefix("DryRun");
    if let Some(var_5849) = &input.dry_run {
        scope_5848.boolean(*var_5849);
    }
    #[allow(unused_mut)]
    let mut scope_5850 = writer.prefix("InstanceCount");
    if let Some(var_5851) = &input.instance_count {
        scope_5850.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5851).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5852 = writer.prefix("LaunchGroup");
    if let Some(var_5853) = &input.launch_group {
        scope_5852.string(var_5853);
    }
    #[allow(unused_mut)]
    let mut scope_5854 = writer.prefix("LaunchSpecification");
    if let Some(var_5855) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5854, var_5855,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5856 = writer.prefix("SpotPrice");
    if let Some(var_5857) = &input.spot_price {
        scope_5856.string(var_5857);
    }
    #[allow(unused_mut)]
    let mut scope_5858 = writer.prefix("Type");
    if let Some(var_5859) = &input.r#type {
        scope_5858.string(var_5859.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5860 = writer.prefix("ValidFrom");
    if let Some(var_5861) = &input.valid_from {
        scope_5860.date_time(var_5861, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5862 = writer.prefix("ValidUntil");
    if let Some(var_5863) = &input.valid_until {
        scope_5862.date_time(var_5863, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5864 = writer.prefix("TagSpecification");
    if let Some(var_5865) = &input.tag_specifications {
        let mut list_5867 = scope_5864.start_list(true, Some("item"));
        for item_5866 in var_5865 {
            #[allow(unused_mut)]
            let mut entry_5868 = list_5867.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5868, item_5866,
            )?;
        }
        list_5867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5869 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5870) = &input.instance_interruption_behavior {
        scope_5869.string(var_5870.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5871 = writer.prefix("AllocationId");
    if let Some(var_5872) = &input.allocation_id {
        scope_5871.string(var_5872);
    }
    #[allow(unused_mut)]
    let mut scope_5873 = writer.prefix("Attribute");
    if let Some(var_5874) = &input.attribute {
        scope_5873.string(var_5874.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5875 = writer.prefix("DryRun");
    if let Some(var_5876) = &input.dry_run {
        scope_5875.boolean(*var_5876);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5877 = writer.prefix("DryRun");
    if let Some(var_5878) = &input.dry_run {
        scope_5877.boolean(*var_5878);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5879 = writer.prefix("DryRun");
    if let Some(var_5880) = &input.dry_run {
        scope_5879.boolean(*var_5880);
    }
    #[allow(unused_mut)]
    let mut scope_5881 = writer.prefix("FpgaImageId");
    if let Some(var_5882) = &input.fpga_image_id {
        scope_5881.string(var_5882);
    }
    #[allow(unused_mut)]
    let mut scope_5883 = writer.prefix("Attribute");
    if let Some(var_5884) = &input.attribute {
        scope_5883.string(var_5884.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5885 = writer.prefix("Attribute");
    if let Some(var_5886) = &input.attribute {
        scope_5885.string(var_5886.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5887 = writer.prefix("ImageId");
    if let Some(var_5888) = &input.image_id {
        scope_5887.string(var_5888);
    }
    #[allow(unused_mut)]
    let mut scope_5889 = writer.prefix("DryRun");
    if let Some(var_5890) = &input.dry_run {
        scope_5889.boolean(*var_5890);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5891 = writer.prefix("Attribute");
    if let Some(var_5892) = &input.attribute {
        scope_5891.string(var_5892.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5893 = writer.prefix("DryRun");
    if let Some(var_5894) = &input.dry_run {
        scope_5893.boolean(*var_5894);
    }
    #[allow(unused_mut)]
    let mut scope_5895 = writer.prefix("InstanceId");
    if let Some(var_5896) = &input.instance_id {
        scope_5895.string(var_5896);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5897 = writer.prefix("DryRun");
    if let Some(var_5898) = &input.dry_run {
        scope_5897.boolean(*var_5898);
    }
    #[allow(unused_mut)]
    let mut scope_5899 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5900) = &input.network_interface_id {
        scope_5899.string(var_5900);
    }
    #[allow(unused_mut)]
    let mut scope_5901 = writer.prefix("SourceDestCheck");
    if let Some(var_5902) = &input.source_dest_check {
        scope_5901.string(var_5902);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5903 = writer.prefix("Attribute");
    if let Some(var_5904) = &input.attribute {
        scope_5903.string(var_5904.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5905 = writer.prefix("SnapshotId");
    if let Some(var_5906) = &input.snapshot_id {
        scope_5905.string(var_5906);
    }
    #[allow(unused_mut)]
    let mut scope_5907 = writer.prefix("DryRun");
    if let Some(var_5908) = &input.dry_run {
        scope_5907.boolean(*var_5908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5909 = writer.prefix("DryRun");
    if let Some(var_5910) = &input.dry_run {
        scope_5909.boolean(*var_5910);
    }
    #[allow(unused_mut)]
    let mut scope_5911 = writer.prefix("PublicIp");
    if let Some(var_5912) = &input.public_ip {
        scope_5911.string(var_5912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5913 = writer.prefix("ImageId");
    if let Some(var_5914) = &input.image_id {
        scope_5913.string(var_5914);
    }
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("DryRun");
    if let Some(var_5916) = &input.dry_run {
        scope_5915.boolean(*var_5916);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("DryRun");
    if let Some(var_5918) = &input.dry_run {
        scope_5917.boolean(*var_5918);
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("PrefixListId");
    if let Some(var_5920) = &input.prefix_list_id {
        scope_5919.string(var_5920);
    }
    #[allow(unused_mut)]
    let mut scope_5921 = writer.prefix("PreviousVersion");
    if let Some(var_5922) = &input.previous_version {
        scope_5921.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5922).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5923 = writer.prefix("CurrentVersion");
    if let Some(var_5924) = &input.current_version {
        scope_5923.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5924).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5925 = writer.prefix("SnapshotId");
    if let Some(var_5926) = &input.snapshot_id {
        scope_5925.string(var_5926);
    }
    #[allow(unused_mut)]
    let mut scope_5927 = writer.prefix("DryRun");
    if let Some(var_5928) = &input.dry_run {
        scope_5927.boolean(*var_5928);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5929 = writer.prefix("SnapshotId");
    if let Some(var_5930) = &input.snapshot_id {
        scope_5929.string(var_5930);
    }
    #[allow(unused_mut)]
    let mut scope_5931 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5932) = &input.temporary_restore_days {
        scope_5931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5933 = writer.prefix("PermanentRestore");
    if let Some(var_5934) = &input.permanent_restore {
        scope_5933.boolean(*var_5934);
    }
    #[allow(unused_mut)]
    let mut scope_5935 = writer.prefix("DryRun");
    if let Some(var_5936) = &input.dry_run {
        scope_5935.boolean(*var_5936);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5938) = &input.client_vpn_endpoint_id {
        scope_5937.string(var_5938);
    }
    #[allow(unused_mut)]
    let mut scope_5939 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5940) = &input.target_network_cidr {
        scope_5939.string(var_5940);
    }
    #[allow(unused_mut)]
    let mut scope_5941 = writer.prefix("AccessGroupId");
    if let Some(var_5942) = &input.access_group_id {
        scope_5941.string(var_5942);
    }
    #[allow(unused_mut)]
    let mut scope_5943 = writer.prefix("RevokeAllGroups");
    if let Some(var_5944) = &input.revoke_all_groups {
        scope_5943.boolean(*var_5944);
    }
    #[allow(unused_mut)]
    let mut scope_5945 = writer.prefix("DryRun");
    if let Some(var_5946) = &input.dry_run {
        scope_5945.boolean(*var_5946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5947 = writer.prefix("DryRun");
    if let Some(var_5948) = &input.dry_run {
        scope_5947.boolean(*var_5948);
    }
    #[allow(unused_mut)]
    let mut scope_5949 = writer.prefix("GroupId");
    if let Some(var_5950) = &input.group_id {
        scope_5949.string(var_5950);
    }
    #[allow(unused_mut)]
    let mut scope_5951 = writer.prefix("IpPermissions");
    if let Some(var_5952) = &input.ip_permissions {
        let mut list_5954 = scope_5951.start_list(true, Some("item"));
        for item_5953 in var_5952 {
            #[allow(unused_mut)]
            let mut entry_5955 = list_5954.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5955, item_5953)?;
        }
        list_5954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5956 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5957) = &input.security_group_rule_ids {
        let mut list_5959 = scope_5956.start_list(true, Some("item"));
        for item_5958 in var_5957 {
            #[allow(unused_mut)]
            let mut entry_5960 = list_5959.entry();
            entry_5960.string(item_5958);
        }
        list_5959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5961 = writer.prefix("CidrIp");
    if let Some(var_5962) = &input.cidr_ip {
        scope_5961.string(var_5962);
    }
    #[allow(unused_mut)]
    let mut scope_5963 = writer.prefix("FromPort");
    if let Some(var_5964) = &input.from_port {
        scope_5963.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5964).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5965 = writer.prefix("IpProtocol");
    if let Some(var_5966) = &input.ip_protocol {
        scope_5965.string(var_5966);
    }
    #[allow(unused_mut)]
    let mut scope_5967 = writer.prefix("ToPort");
    if let Some(var_5968) = &input.to_port {
        scope_5967.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5968).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5969 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5970) = &input.source_security_group_name {
        scope_5969.string(var_5970);
    }
    #[allow(unused_mut)]
    let mut scope_5971 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5972) = &input.source_security_group_owner_id {
        scope_5971.string(var_5972);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5973 = writer.prefix("CidrIp");
    if let Some(var_5974) = &input.cidr_ip {
        scope_5973.string(var_5974);
    }
    #[allow(unused_mut)]
    let mut scope_5975 = writer.prefix("FromPort");
    if let Some(var_5976) = &input.from_port {
        scope_5975.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5976).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("GroupId");
    if let Some(var_5978) = &input.group_id {
        scope_5977.string(var_5978);
    }
    #[allow(unused_mut)]
    let mut scope_5979 = writer.prefix("GroupName");
    if let Some(var_5980) = &input.group_name {
        scope_5979.string(var_5980);
    }
    #[allow(unused_mut)]
    let mut scope_5981 = writer.prefix("IpPermissions");
    if let Some(var_5982) = &input.ip_permissions {
        let mut list_5984 = scope_5981.start_list(true, Some("item"));
        for item_5983 in var_5982 {
            #[allow(unused_mut)]
            let mut entry_5985 = list_5984.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5985, item_5983)?;
        }
        list_5984.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5986 = writer.prefix("IpProtocol");
    if let Some(var_5987) = &input.ip_protocol {
        scope_5986.string(var_5987);
    }
    #[allow(unused_mut)]
    let mut scope_5988 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5989) = &input.source_security_group_name {
        scope_5988.string(var_5989);
    }
    #[allow(unused_mut)]
    let mut scope_5990 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5991) = &input.source_security_group_owner_id {
        scope_5990.string(var_5991);
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("ToPort");
    if let Some(var_5993) = &input.to_port {
        scope_5992.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5993).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("DryRun");
    if let Some(var_5995) = &input.dry_run {
        scope_5994.boolean(*var_5995);
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5997) = &input.security_group_rule_ids {
        let mut list_5999 = scope_5996.start_list(true, Some("item"));
        for item_5998 in var_5997 {
            #[allow(unused_mut)]
            let mut entry_6000 = list_5999.entry();
            entry_6000.string(item_5998);
        }
        list_5999.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6001 = writer.prefix("BlockDeviceMapping");
    if let Some(var_6002) = &input.block_device_mappings {
        let mut list_6004 = scope_6001.start_list(true, Some("BlockDeviceMapping"));
        for item_6003 in var_6002 {
            #[allow(unused_mut)]
            let mut entry_6005 = list_6004.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_6005, item_6003,
            )?;
        }
        list_6004.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("ImageId");
    if let Some(var_6007) = &input.image_id {
        scope_6006.string(var_6007);
    }
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("InstanceType");
    if let Some(var_6009) = &input.instance_type {
        scope_6008.string(var_6009.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6010 = writer.prefix("Ipv6AddressCount");
    if let Some(var_6011) = &input.ipv6_address_count {
        scope_6010.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6011).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6012 = writer.prefix("Ipv6Address");
    if let Some(var_6013) = &input.ipv6_addresses {
        let mut list_6015 = scope_6012.start_list(true, Some("item"));
        for item_6014 in var_6013 {
            #[allow(unused_mut)]
            let mut entry_6016 = list_6015.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_6016, item_6014,
            )?;
        }
        list_6015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6017 = writer.prefix("KernelId");
    if let Some(var_6018) = &input.kernel_id {
        scope_6017.string(var_6018);
    }
    #[allow(unused_mut)]
    let mut scope_6019 = writer.prefix("KeyName");
    if let Some(var_6020) = &input.key_name {
        scope_6019.string(var_6020);
    }
    #[allow(unused_mut)]
    let mut scope_6021 = writer.prefix("MaxCount");
    if let Some(var_6022) = &input.max_count {
        scope_6021.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6022).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6023 = writer.prefix("MinCount");
    if let Some(var_6024) = &input.min_count {
        scope_6023.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6024).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6025 = writer.prefix("Monitoring");
    if let Some(var_6026) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_6025, var_6026,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6027 = writer.prefix("Placement");
    if let Some(var_6028) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_6027, var_6028)?;
    }
    #[allow(unused_mut)]
    let mut scope_6029 = writer.prefix("RamdiskId");
    if let Some(var_6030) = &input.ramdisk_id {
        scope_6029.string(var_6030);
    }
    #[allow(unused_mut)]
    let mut scope_6031 = writer.prefix("SecurityGroupId");
    if let Some(var_6032) = &input.security_group_ids {
        let mut list_6034 = scope_6031.start_list(true, Some("SecurityGroupId"));
        for item_6033 in var_6032 {
            #[allow(unused_mut)]
            let mut entry_6035 = list_6034.entry();
            entry_6035.string(item_6033);
        }
        list_6034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6036 = writer.prefix("SecurityGroup");
    if let Some(var_6037) = &input.security_groups {
        let mut list_6039 = scope_6036.start_list(true, Some("SecurityGroup"));
        for item_6038 in var_6037 {
            #[allow(unused_mut)]
            let mut entry_6040 = list_6039.entry();
            entry_6040.string(item_6038);
        }
        list_6039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6041 = writer.prefix("SubnetId");
    if let Some(var_6042) = &input.subnet_id {
        scope_6041.string(var_6042);
    }
    #[allow(unused_mut)]
    let mut scope_6043 = writer.prefix("UserData");
    if let Some(var_6044) = &input.user_data {
        scope_6043.string(var_6044);
    }
    #[allow(unused_mut)]
    let mut scope_6045 = writer.prefix("AdditionalInfo");
    if let Some(var_6046) = &input.additional_info {
        scope_6045.string(var_6046);
    }
    #[allow(unused_mut)]
    let mut scope_6047 = writer.prefix("ClientToken");
    if let Some(var_6048) = &input.client_token {
        scope_6047.string(var_6048);
    }
    #[allow(unused_mut)]
    let mut scope_6049 = writer.prefix("DisableApiTermination");
    if let Some(var_6050) = &input.disable_api_termination {
        scope_6049.boolean(*var_6050);
    }
    #[allow(unused_mut)]
    let mut scope_6051 = writer.prefix("DryRun");
    if let Some(var_6052) = &input.dry_run {
        scope_6051.boolean(*var_6052);
    }
    #[allow(unused_mut)]
    let mut scope_6053 = writer.prefix("EbsOptimized");
    if let Some(var_6054) = &input.ebs_optimized {
        scope_6053.boolean(*var_6054);
    }
    #[allow(unused_mut)]
    let mut scope_6055 = writer.prefix("IamInstanceProfile");
    if let Some(var_6056) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_6055, var_6056,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6057 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_6058) = &input.instance_initiated_shutdown_behavior {
        scope_6057.string(var_6058.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_6059 = writer.prefix("NetworkInterface");
    if let Some(var_6060) = &input.network_interfaces {
        let mut list_6062 = scope_6059.start_list(true, Some("item"));
        for item_6061 in var_6060 {
            #[allow(unused_mut)]
            let mut entry_6063 = list_6062.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_6063, item_6061)?;
        }
        list_6062.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6064 = writer.prefix("PrivateIpAddress");
    if let Some(var_6065) = &input.private_ip_address {
        scope_6064.string(var_6065);
    }
    #[allow(unused_mut)]
    let mut scope_6066 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_6067) = &input.elastic_gpu_specification {
        let mut list_6069 = scope_6066.start_list(true, Some("item"));
        for item_6068 in var_6067 {
            #[allow(unused_mut)]
            let mut entry_6070 = list_6069.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_6070, item_6068,
            )?;
        }
        list_6069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6071 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_6072) = &input.elastic_inference_accelerators {
        let mut list_6074 = scope_6071.start_list(true, Some("item"));
        for item_6073 in var_6072 {
            #[allow(unused_mut)]
            let mut entry_6075 = list_6074.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_6075, item_6073,
            )?;
        }
        list_6074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6076 = writer.prefix("TagSpecification");
    if let Some(var_6077) = &input.tag_specifications {
        let mut list_6079 = scope_6076.start_list(true, Some("item"));
        for item_6078 in var_6077 {
            #[allow(unused_mut)]
            let mut entry_6080 = list_6079.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6080, item_6078,
            )?;
        }
        list_6079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6081 = writer.prefix("LaunchTemplate");
    if let Some(var_6082) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_6081, var_6082,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6083 = writer.prefix("InstanceMarketOptions");
    if let Some(var_6084) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_6083, var_6084,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6085 = writer.prefix("CreditSpecification");
    if let Some(var_6086) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_6085, var_6086,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6087 = writer.prefix("CpuOptions");
    if let Some(var_6088) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_6087, var_6088,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6089 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_6090) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_6089, var_6090,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6091 = writer.prefix("HibernationOptions");
    if let Some(var_6092) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_6091, var_6092,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6093 = writer.prefix("LicenseSpecification");
    if let Some(var_6094) = &input.license_specifications {
        let mut list_6096 = scope_6093.start_list(true, Some("item"));
        for item_6095 in var_6094 {
            #[allow(unused_mut)]
            let mut entry_6097 = list_6096.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_6097, item_6095,
            )?;
        }
        list_6096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6098 = writer.prefix("MetadataOptions");
    if let Some(var_6099) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_6098, var_6099,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6100 = writer.prefix("EnclaveOptions");
    if let Some(var_6101) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_6100, var_6101,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6102 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_6103) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_6102, var_6103,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6104 = writer.prefix("MaintenanceOptions");
    if let Some(var_6105) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_6104, var_6105,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6106 = writer.prefix("DisableApiStop");
    if let Some(var_6107) = &input.disable_api_stop {
        scope_6106.boolean(*var_6107);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6108 = writer.prefix("ClientToken");
    if let Some(var_6109) = &input.client_token {
        scope_6108.string(var_6109);
    }
    #[allow(unused_mut)]
    let mut scope_6110 = writer.prefix("DryRun");
    if let Some(var_6111) = &input.dry_run {
        scope_6110.boolean(*var_6111);
    }
    #[allow(unused_mut)]
    let mut scope_6112 = writer.prefix("InstanceCount");
    if let Some(var_6113) = &input.instance_count {
        scope_6112.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6113).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6114 = writer.prefix("LaunchSpecification");
    if let Some(var_6115) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_6114, var_6115,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6116 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6117) = &input.scheduled_instance_id {
        scope_6116.string(var_6117);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6118 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6119) = &input.local_gateway_route_table_id {
        scope_6118.string(var_6119);
    }
    #[allow(unused_mut)]
    let mut scope_6120 = writer.prefix("Filter");
    if let Some(var_6121) = &input.filters {
        let mut list_6123 = scope_6120.start_list(true, Some("Filter"));
        for item_6122 in var_6121 {
            #[allow(unused_mut)]
            let mut entry_6124 = list_6123.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6124, item_6122)?;
        }
        list_6123.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6125 = writer.prefix("MaxResults");
    if let Some(var_6126) = &input.max_results {
        scope_6125.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6126).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6127 = writer.prefix("NextToken");
    if let Some(var_6128) = &input.next_token {
        scope_6127.string(var_6128);
    }
    #[allow(unused_mut)]
    let mut scope_6129 = writer.prefix("DryRun");
    if let Some(var_6130) = &input.dry_run {
        scope_6129.boolean(*var_6130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6131 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6132) = &input.transit_gateway_multicast_domain_id {
        scope_6131.string(var_6132);
    }
    #[allow(unused_mut)]
    let mut scope_6133 = writer.prefix("Filter");
    if let Some(var_6134) = &input.filters {
        let mut list_6136 = scope_6133.start_list(true, Some("Filter"));
        for item_6135 in var_6134 {
            #[allow(unused_mut)]
            let mut entry_6137 = list_6136.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6137, item_6135)?;
        }
        list_6136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6138 = writer.prefix("MaxResults");
    if let Some(var_6139) = &input.max_results {
        scope_6138.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6139).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6140 = writer.prefix("NextToken");
    if let Some(var_6141) = &input.next_token {
        scope_6140.string(var_6141);
    }
    #[allow(unused_mut)]
    let mut scope_6142 = writer.prefix("DryRun");
    if let Some(var_6143) = &input.dry_run {
        scope_6142.boolean(*var_6143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6144 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6145) = &input.transit_gateway_route_table_id {
        scope_6144.string(var_6145);
    }
    #[allow(unused_mut)]
    let mut scope_6146 = writer.prefix("Filter");
    if let Some(var_6147) = &input.filters {
        let mut list_6149 = scope_6146.start_list(true, Some("Filter"));
        for item_6148 in var_6147 {
            #[allow(unused_mut)]
            let mut entry_6150 = list_6149.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6150, item_6148)?;
        }
        list_6149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6151 = writer.prefix("MaxResults");
    if let Some(var_6152) = &input.max_results {
        scope_6151.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6152).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6153 = writer.prefix("DryRun");
    if let Some(var_6154) = &input.dry_run {
        scope_6153.boolean(*var_6154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6155 = writer.prefix("InstanceId");
    if let Some(var_6156) = &input.instance_id {
        scope_6155.string(var_6156);
    }
    #[allow(unused_mut)]
    let mut scope_6157 = writer.prefix("DryRun");
    if let Some(var_6158) = &input.dry_run {
        scope_6157.boolean(*var_6158);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6159 = writer.prefix("InstanceId");
    if let Some(var_6160) = &input.instance_ids {
        let mut list_6162 = scope_6159.start_list(true, Some("InstanceId"));
        for item_6161 in var_6160 {
            #[allow(unused_mut)]
            let mut entry_6163 = list_6162.entry();
            entry_6163.string(item_6161);
        }
        list_6162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6164 = writer.prefix("AdditionalInfo");
    if let Some(var_6165) = &input.additional_info {
        scope_6164.string(var_6165);
    }
    #[allow(unused_mut)]
    let mut scope_6166 = writer.prefix("DryRun");
    if let Some(var_6167) = &input.dry_run {
        scope_6166.boolean(*var_6167);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6168 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6169) = &input.network_insights_access_scope_id {
        scope_6168.string(var_6169);
    }
    #[allow(unused_mut)]
    let mut scope_6170 = writer.prefix("DryRun");
    if let Some(var_6171) = &input.dry_run {
        scope_6170.boolean(*var_6171);
    }
    #[allow(unused_mut)]
    let mut scope_6172 = writer.prefix("TagSpecification");
    if let Some(var_6173) = &input.tag_specifications {
        let mut list_6175 = scope_6172.start_list(true, Some("item"));
        for item_6174 in var_6173 {
            #[allow(unused_mut)]
            let mut entry_6176 = list_6175.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6176, item_6174,
            )?;
        }
        list_6175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6177 = writer.prefix("ClientToken");
    if let Some(var_6178) = &input.client_token {
        scope_6177.string(var_6178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6179 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6180) = &input.network_insights_path_id {
        scope_6179.string(var_6180);
    }
    #[allow(unused_mut)]
    let mut scope_6181 = writer.prefix("FilterInArn");
    if let Some(var_6182) = &input.filter_in_arns {
        let mut list_6184 = scope_6181.start_list(true, Some("item"));
        for item_6183 in var_6182 {
            #[allow(unused_mut)]
            let mut entry_6185 = list_6184.entry();
            entry_6185.string(item_6183);
        }
        list_6184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6186 = writer.prefix("DryRun");
    if let Some(var_6187) = &input.dry_run {
        scope_6186.boolean(*var_6187);
    }
    #[allow(unused_mut)]
    let mut scope_6188 = writer.prefix("TagSpecification");
    if let Some(var_6189) = &input.tag_specifications {
        let mut list_6191 = scope_6188.start_list(true, Some("item"));
        for item_6190 in var_6189 {
            #[allow(unused_mut)]
            let mut entry_6192 = list_6191.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6192, item_6190,
            )?;
        }
        list_6191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6193 = writer.prefix("ClientToken");
    if let Some(var_6194) = &input.client_token {
        scope_6193.string(var_6194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6195 = writer.prefix("DryRun");
    if let Some(var_6196) = &input.dry_run {
        scope_6195.boolean(*var_6196);
    }
    #[allow(unused_mut)]
    let mut scope_6197 = writer.prefix("ServiceId");
    if let Some(var_6198) = &input.service_id {
        scope_6197.string(var_6198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6199 = writer.prefix("InstanceId");
    if let Some(var_6200) = &input.instance_ids {
        let mut list_6202 = scope_6199.start_list(true, Some("InstanceId"));
        for item_6201 in var_6200 {
            #[allow(unused_mut)]
            let mut entry_6203 = list_6202.entry();
            entry_6203.string(item_6201);
        }
        list_6202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6204 = writer.prefix("Hibernate");
    if let Some(var_6205) = &input.hibernate {
        scope_6204.boolean(*var_6205);
    }
    #[allow(unused_mut)]
    let mut scope_6206 = writer.prefix("DryRun");
    if let Some(var_6207) = &input.dry_run {
        scope_6206.boolean(*var_6207);
    }
    #[allow(unused_mut)]
    let mut scope_6208 = writer.prefix("Force");
    if let Some(var_6209) = &input.force {
        scope_6208.boolean(*var_6209);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6210 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6211) = &input.client_vpn_endpoint_id {
        scope_6210.string(var_6211);
    }
    #[allow(unused_mut)]
    let mut scope_6212 = writer.prefix("ConnectionId");
    if let Some(var_6213) = &input.connection_id {
        scope_6212.string(var_6213);
    }
    #[allow(unused_mut)]
    let mut scope_6214 = writer.prefix("Username");
    if let Some(var_6215) = &input.username {
        scope_6214.string(var_6215);
    }
    #[allow(unused_mut)]
    let mut scope_6216 = writer.prefix("DryRun");
    if let Some(var_6217) = &input.dry_run {
        scope_6216.boolean(*var_6217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6218 = writer.prefix("InstanceId");
    if let Some(var_6219) = &input.instance_ids {
        let mut list_6221 = scope_6218.start_list(true, Some("InstanceId"));
        for item_6220 in var_6219 {
            #[allow(unused_mut)]
            let mut entry_6222 = list_6221.entry();
            entry_6222.string(item_6220);
        }
        list_6221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6223 = writer.prefix("DryRun");
    if let Some(var_6224) = &input.dry_run {
        scope_6223.boolean(*var_6224);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6225 = writer.prefix("Ipv6Addresses");
    if let Some(var_6226) = &input.ipv6_addresses {
        let mut list_6228 = scope_6225.start_list(true, Some("item"));
        for item_6227 in var_6226 {
            #[allow(unused_mut)]
            let mut entry_6229 = list_6228.entry();
            entry_6229.string(item_6227);
        }
        list_6228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6230 = writer.prefix("Ipv6Prefix");
    if let Some(var_6231) = &input.ipv6_prefixes {
        let mut list_6233 = scope_6230.start_list(true, Some("item"));
        for item_6232 in var_6231 {
            #[allow(unused_mut)]
            let mut entry_6234 = list_6233.entry();
            entry_6234.string(item_6232);
        }
        list_6233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6235 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6236) = &input.network_interface_id {
        scope_6235.string(var_6236);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6237 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6238) = &input.network_interface_id {
        scope_6237.string(var_6238);
    }
    #[allow(unused_mut)]
    let mut scope_6239 = writer.prefix("PrivateIpAddress");
    if let Some(var_6240) = &input.private_ip_addresses {
        let mut list_6242 = scope_6239.start_list(true, Some("PrivateIpAddress"));
        for item_6241 in var_6240 {
            #[allow(unused_mut)]
            let mut entry_6243 = list_6242.entry();
            entry_6243.string(item_6241);
        }
        list_6242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6244 = writer.prefix("Ipv4Prefix");
    if let Some(var_6245) = &input.ipv4_prefixes {
        let mut list_6247 = scope_6244.start_list(true, Some("item"));
        for item_6246 in var_6245 {
            #[allow(unused_mut)]
            let mut entry_6248 = list_6247.entry();
            entry_6248.string(item_6246);
        }
        list_6247.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6249 = writer.prefix("InstanceId");
    if let Some(var_6250) = &input.instance_ids {
        let mut list_6252 = scope_6249.start_list(true, Some("InstanceId"));
        for item_6251 in var_6250 {
            #[allow(unused_mut)]
            let mut entry_6253 = list_6252.entry();
            entry_6253.string(item_6251);
        }
        list_6252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6254 = writer.prefix("DryRun");
    if let Some(var_6255) = &input.dry_run {
        scope_6254.boolean(*var_6255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6256 = writer.prefix("DryRun");
    if let Some(var_6257) = &input.dry_run {
        scope_6256.boolean(*var_6257);
    }
    #[allow(unused_mut)]
    let mut scope_6258 = writer.prefix("GroupId");
    if let Some(var_6259) = &input.group_id {
        scope_6258.string(var_6259);
    }
    #[allow(unused_mut)]
    let mut scope_6260 = writer.prefix("GroupName");
    if let Some(var_6261) = &input.group_name {
        scope_6260.string(var_6261);
    }
    #[allow(unused_mut)]
    let mut scope_6262 = writer.prefix("IpPermissions");
    if let Some(var_6263) = &input.ip_permissions {
        let mut list_6265 = scope_6262.start_list(true, Some("item"));
        for item_6264 in var_6263 {
            #[allow(unused_mut)]
            let mut entry_6266 = list_6265.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6266, item_6264)?;
        }
        list_6265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6267 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6268) = &input.security_group_rule_descriptions {
        let mut list_6270 = scope_6267.start_list(true, Some("item"));
        for item_6269 in var_6268 {
            #[allow(unused_mut)]
            let mut entry_6271 = list_6270.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6271, item_6269,
            )?;
        }
        list_6270.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6272 = writer.prefix("DryRun");
    if let Some(var_6273) = &input.dry_run {
        scope_6272.boolean(*var_6273);
    }
    #[allow(unused_mut)]
    let mut scope_6274 = writer.prefix("GroupId");
    if let Some(var_6275) = &input.group_id {
        scope_6274.string(var_6275);
    }
    #[allow(unused_mut)]
    let mut scope_6276 = writer.prefix("GroupName");
    if let Some(var_6277) = &input.group_name {
        scope_6276.string(var_6277);
    }
    #[allow(unused_mut)]
    let mut scope_6278 = writer.prefix("IpPermissions");
    if let Some(var_6279) = &input.ip_permissions {
        let mut list_6281 = scope_6278.start_list(true, Some("item"));
        for item_6280 in var_6279 {
            #[allow(unused_mut)]
            let mut entry_6282 = list_6281.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6282, item_6280)?;
        }
        list_6281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6283 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6284) = &input.security_group_rule_descriptions {
        let mut list_6286 = scope_6283.start_list(true, Some("item"));
        for item_6285 in var_6284 {
            #[allow(unused_mut)]
            let mut entry_6287 = list_6286.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6287, item_6285,
            )?;
        }
        list_6286.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6288 = writer.prefix("Cidr");
    if let Some(var_6289) = &input.cidr {
        scope_6288.string(var_6289);
    }
    #[allow(unused_mut)]
    let mut scope_6290 = writer.prefix("DryRun");
    if let Some(var_6291) = &input.dry_run {
        scope_6290.boolean(*var_6291);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
