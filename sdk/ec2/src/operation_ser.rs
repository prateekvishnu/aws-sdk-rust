// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("OutpostArn");
    if let Some(var_86) = &input.outpost_arn {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("DryRun");
    if let Some(var_88) = &input.dry_run {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("IpamPoolId");
    if let Some(var_90) = &input.ipam_pool_id {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Cidr");
    if let Some(var_92) = &input.cidr {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NetmaskLength");
    if let Some(var_94) = &input.netmask_length {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClientToken");
    if let Some(var_96) = &input.client_token {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Description");
    if let Some(var_98) = &input.description {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreviewNextCidr");
    if let Some(var_100) = &input.preview_next_cidr {
        scope_99.boolean(*var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("DisallowedCidr");
    if let Some(var_102) = &input.disallowed_cidrs {
        let mut list_104 = scope_101.start_list(true, Some("item"));
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            entry_105.string(item_103);
        }
        list_104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_107) = &input.client_vpn_endpoint_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("VpcId");
    if let Some(var_109) = &input.vpc_id {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SecurityGroupId");
    if let Some(var_111) = &input.security_group_ids {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("DryRun");
    if let Some(var_116) = &input.dry_run {
        scope_115.boolean(*var_116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6AddressCount");
    if let Some(var_118) = &input.ipv6_address_count {
        scope_117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Ipv6Addresses");
    if let Some(var_120) = &input.ipv6_addresses {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_125) = &input.ipv6_prefix_count {
        scope_124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Ipv6Prefix");
    if let Some(var_127) = &input.ipv6_prefixes {
        let mut list_129 = scope_126.start_list(true, Some("item"));
        for item_128 in var_127 {
            #[allow(unused_mut)]
            let mut entry_130 = list_129.entry();
            entry_130.string(item_128);
        }
        list_129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_132) = &input.network_interface_id {
        scope_131.string(var_132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("AllowReassignment");
    if let Some(var_134) = &input.allow_reassignment {
        scope_133.boolean(*var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("NetworkInterfaceId");
    if let Some(var_136) = &input.network_interface_id {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("PrivateIpAddress");
    if let Some(var_138) = &input.private_ip_addresses {
        let mut list_140 = scope_137.start_list(true, Some("PrivateIpAddress"));
        for item_139 in var_138 {
            #[allow(unused_mut)]
            let mut entry_141 = list_140.entry();
            entry_141.string(item_139);
        }
        list_140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_143) = &input.secondary_private_ip_address_count {
        scope_142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Ipv4Prefix");
    if let Some(var_145) = &input.ipv4_prefixes {
        let mut list_147 = scope_144.start_list(true, Some("item"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_150) = &input.ipv4_prefix_count {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("AllocationId");
    if let Some(var_152) = &input.allocation_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("InstanceId");
    if let Some(var_154) = &input.instance_id {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PublicIp");
    if let Some(var_156) = &input.public_ip {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("AllowReassociation");
    if let Some(var_158) = &input.allow_reassociation {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("DryRun");
    if let Some(var_160) = &input.dry_run {
        scope_159.boolean(*var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_162) = &input.network_interface_id {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("PrivateIpAddress");
    if let Some(var_164) = &input.private_ip_address {
        scope_163.string(var_164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_166) = &input.client_vpn_endpoint_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("SubnetId");
    if let Some(var_168) = &input.subnet_id {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ClientToken");
    if let Some(var_170) = &input.client_token {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DryRun");
    if let Some(var_172) = &input.dry_run {
        scope_171.boolean(*var_172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("DhcpOptionsId");
    if let Some(var_174) = &input.dhcp_options_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("VpcId");
    if let Some(var_176) = &input.vpc_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("DryRun");
    if let Some(var_178) = &input.dry_run {
        scope_177.boolean(*var_178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("CertificateArn");
    if let Some(var_180) = &input.certificate_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RoleArn");
    if let Some(var_182) = &input.role_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("DryRun");
    if let Some(var_184) = &input.dry_run {
        scope_183.boolean(*var_184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("IamInstanceProfile");
    if let Some(var_186) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_185, var_186,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("InstanceId");
    if let Some(var_188) = &input.instance_id {
        scope_187.string(var_188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("DryRun");
    if let Some(var_190) = &input.dry_run {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("InstanceEventWindowId");
    if let Some(var_192) = &input.instance_event_window_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AssociationTarget");
    if let Some(var_194) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_193, var_194)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("RouteTableId");
    if let Some(var_198) = &input.route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("SubnetId");
    if let Some(var_200) = &input.subnet_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("GatewayId");
    if let Some(var_202) = &input.gateway_id {
        scope_201.string(var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_204) = &input.ipv6_cidr_block {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("SubnetId");
    if let Some(var_206) = &input.subnet_id {
        scope_205.string(var_206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_208) = &input.transit_gateway_multicast_domain_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_210) = &input.transit_gateway_attachment_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SubnetIds");
    if let Some(var_212) = &input.subnet_ids {
        let mut list_214 = scope_211.start_list(true, Some("item"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            entry_215.string(item_213);
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("DryRun");
    if let Some(var_217) = &input.dry_run {
        scope_216.boolean(*var_217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_219) = &input.transit_gateway_route_table_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_221) = &input.transit_gateway_attachment_id {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("DryRun");
    if let Some(var_223) = &input.dry_run {
        scope_222.boolean(*var_223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("BranchInterfaceId");
    if let Some(var_225) = &input.branch_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("TrunkInterfaceId");
    if let Some(var_227) = &input.trunk_interface_id {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("VlanId");
    if let Some(var_229) = &input.vlan_id {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("GreKey");
    if let Some(var_231) = &input.gre_key {
        scope_230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("ClientToken");
    if let Some(var_233) = &input.client_token {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("DryRun");
    if let Some(var_235) = &input.dry_run {
        scope_234.boolean(*var_235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_237) = &input.amazon_provided_ipv6_cidr_block {
        scope_236.boolean(*var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("CidrBlock");
    if let Some(var_239) = &input.cidr_block {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("VpcId");
    if let Some(var_241) = &input.vpc_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_243) = &input.ipv6_cidr_block_network_border_group {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6Pool");
    if let Some(var_245) = &input.ipv6_pool {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_247) = &input.ipv6_cidr_block {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_249) = &input.ipv4_ipam_pool_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_251) = &input.ipv4_netmask_length {
        scope_250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_253) = &input.ipv6_ipam_pool_id {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_255) = &input.ipv6_netmask_length {
        scope_254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_255).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("DryRun");
    if let Some(var_257) = &input.dry_run {
        scope_256.boolean(*var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("SecurityGroupId");
    if let Some(var_259) = &input.groups {
        let mut list_261 = scope_258.start_list(true, Some("groupId"));
        for item_260 in var_259 {
            #[allow(unused_mut)]
            let mut entry_262 = list_261.entry();
            entry_262.string(item_260);
        }
        list_261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("InstanceId");
    if let Some(var_264) = &input.instance_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("VpcId");
    if let Some(var_266) = &input.vpc_id {
        scope_265.string(var_266);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("DryRun");
    if let Some(var_268) = &input.dry_run {
        scope_267.boolean(*var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("InternetGatewayId");
    if let Some(var_270) = &input.internet_gateway_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("VpcId");
    if let Some(var_272) = &input.vpc_id {
        scope_271.string(var_272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DeviceIndex");
    if let Some(var_274) = &input.device_index {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DryRun");
    if let Some(var_276) = &input.dry_run {
        scope_275.boolean(*var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("InstanceId");
    if let Some(var_278) = &input.instance_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkInterfaceId");
    if let Some(var_280) = &input.network_interface_id {
        scope_279.string(var_280);
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("NetworkCardIndex");
    if let Some(var_282) = &input.network_card_index {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Device");
    if let Some(var_284) = &input.device {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("InstanceId");
    if let Some(var_286) = &input.instance_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("VolumeId");
    if let Some(var_288) = &input.volume_id {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("DryRun");
    if let Some(var_290) = &input.dry_run {
        scope_289.boolean(*var_290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpcId");
    if let Some(var_292) = &input.vpc_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("VpnGatewayId");
    if let Some(var_294) = &input.vpn_gateway_id {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("DryRun");
    if let Some(var_296) = &input.dry_run {
        scope_295.boolean(*var_296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_298) = &input.client_vpn_endpoint_id {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("TargetNetworkCidr");
    if let Some(var_300) = &input.target_network_cidr {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AccessGroupId");
    if let Some(var_302) = &input.access_group_id {
        scope_301.string(var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_304) = &input.authorize_all_groups {
        scope_303.boolean(*var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Description");
    if let Some(var_306) = &input.description {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("ClientToken");
    if let Some(var_308) = &input.client_token {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("DryRun");
    if let Some(var_312) = &input.dry_run {
        scope_311.boolean(*var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("GroupId");
    if let Some(var_314) = &input.group_id {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("IpPermissions");
    if let Some(var_316) = &input.ip_permissions {
        let mut list_318 = scope_315.start_list(true, Some("item"));
        for item_317 in var_316 {
            #[allow(unused_mut)]
            let mut entry_319 = list_318.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_319, item_317)?;
        }
        list_318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("TagSpecification");
    if let Some(var_321) = &input.tag_specifications {
        let mut list_323 = scope_320.start_list(true, Some("item"));
        for item_322 in var_321 {
            #[allow(unused_mut)]
            let mut entry_324 = list_323.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_324, item_322,
            )?;
        }
        list_323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("CidrIp");
    if let Some(var_326) = &input.cidr_ip {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("FromPort");
    if let Some(var_328) = &input.from_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("IpProtocol");
    if let Some(var_330) = &input.ip_protocol {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("ToPort");
    if let Some(var_332) = &input.to_port {
        scope_331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_334) = &input.source_security_group_name {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_336) = &input.source_security_group_owner_id {
        scope_335.string(var_336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("CidrIp");
    if let Some(var_338) = &input.cidr_ip {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("FromPort");
    if let Some(var_340) = &input.from_port {
        scope_339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupId");
    if let Some(var_342) = &input.group_id {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("GroupName");
    if let Some(var_344) = &input.group_name {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("IpPermissions");
    if let Some(var_346) = &input.ip_permissions {
        let mut list_348 = scope_345.start_list(true, Some("item"));
        for item_347 in var_346 {
            #[allow(unused_mut)]
            let mut entry_349 = list_348.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_349, item_347)?;
        }
        list_348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("IpProtocol");
    if let Some(var_351) = &input.ip_protocol {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_353) = &input.source_security_group_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_355) = &input.source_security_group_owner_id {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ToPort");
    if let Some(var_357) = &input.to_port {
        scope_356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("DryRun");
    if let Some(var_359) = &input.dry_run {
        scope_358.boolean(*var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("TagSpecification");
    if let Some(var_361) = &input.tag_specifications {
        let mut list_363 = scope_360.start_list(true, Some("item"));
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_364, item_362,
            )?;
        }
        list_363.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("InstanceId");
    if let Some(var_366) = &input.instance_id {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("Storage");
    if let Some(var_368) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_367, var_368)?;
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("DryRun");
    if let Some(var_370) = &input.dry_run {
        scope_369.boolean(*var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("BundleId");
    if let Some(var_372) = &input.bundle_id {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("CapacityReservationId");
    if let Some(var_376) = &input.capacity_reservation_id {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("DryRun");
    if let Some(var_380) = &input.dry_run {
        scope_379.boolean(*var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_382) = &input.capacity_reservation_fleet_ids {
        let mut list_384 = scope_381.start_list(true, Some("item"));
        for item_383 in var_382 {
            #[allow(unused_mut)]
            let mut entry_385 = list_384.entry();
            entry_385.string(item_383);
        }
        list_384.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("ConversionTaskId");
    if let Some(var_387) = &input.conversion_task_id {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("DryRun");
    if let Some(var_389) = &input.dry_run {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ReasonMessage");
    if let Some(var_391) = &input.reason_message {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("ExportTaskId");
    if let Some(var_393) = &input.export_task_id {
        scope_392.string(var_393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("CancelReason");
    if let Some(var_395) = &input.cancel_reason {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("DryRun");
    if let Some(var_397) = &input.dry_run {
        scope_396.boolean(*var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ImportTaskId");
    if let Some(var_399) = &input.import_task_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_401) = &input.reserved_instances_listing_id {
        scope_400.string(var_401);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("DryRun");
    if let Some(var_403) = &input.dry_run {
        scope_402.boolean(*var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("SpotFleetRequestId");
    if let Some(var_405) = &input.spot_fleet_request_ids {
        let mut list_407 = scope_404.start_list(true, Some("item"));
        for item_406 in var_405 {
            #[allow(unused_mut)]
            let mut entry_408 = list_407.entry();
            entry_408.string(item_406);
        }
        list_407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("TerminateInstances");
    if let Some(var_410) = &input.terminate_instances {
        scope_409.boolean(*var_410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("DryRun");
    if let Some(var_412) = &input.dry_run {
        scope_411.boolean(*var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_414) = &input.spot_instance_request_ids {
        let mut list_416 = scope_413.start_list(true, Some("SpotInstanceRequestId"));
        for item_415 in var_414 {
            #[allow(unused_mut)]
            let mut entry_417 = list_416.entry();
            entry_417.string(item_415);
        }
        list_416.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("InstanceId");
    if let Some(var_419) = &input.instance_id {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("ProductCode");
    if let Some(var_421) = &input.product_code {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("DryRun");
    if let Some(var_425) = &input.dry_run {
        scope_424.boolean(*var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("SourceFpgaImageId");
    if let Some(var_427) = &input.source_fpga_image_id {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Description");
    if let Some(var_429) = &input.description {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("Name");
    if let Some(var_431) = &input.name {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceRegion");
    if let Some(var_433) = &input.source_region {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("ClientToken");
    if let Some(var_437) = &input.client_token {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Description");
    if let Some(var_439) = &input.description {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("Encrypted");
    if let Some(var_441) = &input.encrypted {
        scope_440.boolean(*var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("KmsKeyId");
    if let Some(var_443) = &input.kms_key_id {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Name");
    if let Some(var_445) = &input.name {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceImageId");
    if let Some(var_447) = &input.source_image_id {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("SourceRegion");
    if let Some(var_449) = &input.source_region {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DestinationOutpostArn");
    if let Some(var_451) = &input.destination_outpost_arn {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("DryRun");
    if let Some(var_453) = &input.dry_run {
        scope_452.boolean(*var_453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("Description");
    if let Some(var_455) = &input.description {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationOutpostArn");
    if let Some(var_457) = &input.destination_outpost_arn {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("DestinationRegion");
    if let Some(var_459) = &input.destination_region {
        scope_458.string(var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Encrypted");
    if let Some(var_461) = &input.encrypted {
        scope_460.boolean(*var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("KmsKeyId");
    if let Some(var_463) = &input.kms_key_id {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("PresignedUrl");
    if let Some(var_465) = &input.presigned_url {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceRegion");
    if let Some(var_467) = &input.source_region {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("SourceSnapshotId");
    if let Some(var_469) = &input.source_snapshot_id {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("TagSpecification");
    if let Some(var_471) = &input.tag_specifications {
        let mut list_473 = scope_470.start_list(true, Some("item"));
        for item_472 in var_471 {
            #[allow(unused_mut)]
            let mut entry_474 = list_473.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_474, item_472,
            )?;
        }
        list_473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("DryRun");
    if let Some(var_476) = &input.dry_run {
        scope_475.boolean(*var_476);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("ClientToken");
    if let Some(var_478) = &input.client_token {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstanceType");
    if let Some(var_480) = &input.instance_type {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("InstancePlatform");
    if let Some(var_482) = &input.instance_platform {
        scope_481.string(var_482.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZone");
    if let Some(var_484) = &input.availability_zone {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("AvailabilityZoneId");
    if let Some(var_486) = &input.availability_zone_id {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("Tenancy");
    if let Some(var_488) = &input.tenancy {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("InstanceCount");
    if let Some(var_490) = &input.instance_count {
        scope_489.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_490).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EbsOptimized");
    if let Some(var_492) = &input.ebs_optimized {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EphemeralStorage");
    if let Some(var_494) = &input.ephemeral_storage {
        scope_493.boolean(*var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDate");
    if let Some(var_496) = &input.end_date {
        scope_495.date_time(var_496, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("EndDateType");
    if let Some(var_498) = &input.end_date_type {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_500) = &input.instance_match_criteria {
        scope_499.string(var_500.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("TagSpecifications");
    if let Some(var_502) = &input.tag_specifications {
        let mut list_504 = scope_501.start_list(true, Some("item"));
        for item_503 in var_502 {
            #[allow(unused_mut)]
            let mut entry_505 = list_504.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_505, item_503,
            )?;
        }
        list_504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("DryRun");
    if let Some(var_507) = &input.dry_run {
        scope_506.boolean(*var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("OutpostArn");
    if let Some(var_509) = &input.outpost_arn {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("PlacementGroupArn");
    if let Some(var_511) = &input.placement_group_arn {
        scope_510.string(var_511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("AllocationStrategy");
    if let Some(var_513) = &input.allocation_strategy {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ClientToken");
    if let Some(var_515) = &input.client_token {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_517) = &input.instance_type_specifications {
        let mut list_519 = scope_516.start_list(true, None);
        for item_518 in var_517 {
            #[allow(unused_mut)]
            let mut entry_520 = list_519.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_520, item_518)?;
        }
        list_519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("Tenancy");
    if let Some(var_522) = &input.tenancy {
        scope_521.string(var_522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("TotalTargetCapacity");
    if let Some(var_524) = &input.total_target_capacity {
        scope_523.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("EndDate");
    if let Some(var_526) = &input.end_date {
        scope_525.date_time(var_526, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_528) = &input.instance_match_criteria {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("TagSpecification");
    if let Some(var_530) = &input.tag_specifications {
        let mut list_532 = scope_529.start_list(true, Some("item"));
        for item_531 in var_530 {
            #[allow(unused_mut)]
            let mut entry_533 = list_532.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_533, item_531,
            )?;
        }
        list_532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("DryRun");
    if let Some(var_535) = &input.dry_run {
        scope_534.boolean(*var_535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("VpcId");
    if let Some(var_537) = &input.vpc_id {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("TagSpecification");
    if let Some(var_539) = &input.tag_specifications {
        let mut list_541 = scope_538.start_list(true, Some("item"));
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_542, item_540,
            )?;
        }
        list_541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("DryRun");
    if let Some(var_544) = &input.dry_run {
        scope_543.boolean(*var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientToken");
    if let Some(var_546) = &input.client_token {
        scope_545.string(var_546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ClientCidrBlock");
    if let Some(var_548) = &input.client_cidr_block {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("ServerCertificateArn");
    if let Some(var_550) = &input.server_certificate_arn {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("Authentication");
    if let Some(var_552) = &input.authentication_options {
        let mut list_554 = scope_551.start_list(true, None);
        for item_553 in var_552 {
            #[allow(unused_mut)]
            let mut entry_555 = list_554.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_555, item_553,
            )?;
        }
        list_554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("ConnectionLogOptions");
    if let Some(var_557) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_556, var_557,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("DnsServers");
    if let Some(var_559) = &input.dns_servers {
        let mut list_561 = scope_558.start_list(true, Some("item"));
        for item_560 in var_559 {
            #[allow(unused_mut)]
            let mut entry_562 = list_561.entry();
            entry_562.string(item_560);
        }
        list_561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("TransportProtocol");
    if let Some(var_564) = &input.transport_protocol {
        scope_563.string(var_564.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("VpnPort");
    if let Some(var_566) = &input.vpn_port {
        scope_565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_566).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("Description");
    if let Some(var_568) = &input.description {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("SplitTunnel");
    if let Some(var_570) = &input.split_tunnel {
        scope_569.boolean(*var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("DryRun");
    if let Some(var_572) = &input.dry_run {
        scope_571.boolean(*var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("ClientToken");
    if let Some(var_574) = &input.client_token {
        scope_573.string(var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("TagSpecification");
    if let Some(var_576) = &input.tag_specifications {
        let mut list_578 = scope_575.start_list(true, Some("item"));
        for item_577 in var_576 {
            #[allow(unused_mut)]
            let mut entry_579 = list_578.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_579, item_577,
            )?;
        }
        list_578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("SecurityGroupId");
    if let Some(var_581) = &input.security_group_ids {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            entry_584.string(item_582);
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("VpcId");
    if let Some(var_586) = &input.vpc_id {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("SelfServicePortal");
    if let Some(var_588) = &input.self_service_portal {
        scope_587.string(var_588.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("ClientConnectOptions");
    if let Some(var_590) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_589, var_590,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("SessionTimeoutHours");
    if let Some(var_592) = &input.session_timeout_hours {
        scope_591.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_592).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_594) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_593, var_594,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_596) = &input.client_vpn_endpoint_id {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("DestinationCidrBlock");
    if let Some(var_598) = &input.destination_cidr_block {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_600) = &input.target_vpc_subnet_id {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("Description");
    if let Some(var_602) = &input.description {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("ClientToken");
    if let Some(var_604) = &input.client_token {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DryRun");
    if let Some(var_606) = &input.dry_run {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("BgpAsn");
    if let Some(var_608) = &input.bgp_asn {
        scope_607.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_608).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("IpAddress");
    if let Some(var_610) = &input.public_ip {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("CertificateArn");
    if let Some(var_612) = &input.certificate_arn {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Type");
    if let Some(var_614) = &input.r#type {
        scope_613.string(var_614.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("TagSpecification");
    if let Some(var_616) = &input.tag_specifications {
        let mut list_618 = scope_615.start_list(true, Some("item"));
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_619, item_617,
            )?;
        }
        list_618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DeviceName");
    if let Some(var_621) = &input.device_name {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("DryRun");
    if let Some(var_623) = &input.dry_run {
        scope_622.boolean(*var_623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("AvailabilityZone");
    if let Some(var_625) = &input.availability_zone {
        scope_624.string(var_625);
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("DryRun");
    if let Some(var_627) = &input.dry_run {
        scope_626.boolean(*var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("Ipv6Native");
    if let Some(var_629) = &input.ipv6_native {
        scope_628.boolean(*var_629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("DryRun");
    if let Some(var_631) = &input.dry_run {
        scope_630.boolean(*var_631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("DhcpConfiguration");
    if let Some(var_633) = &input.dhcp_configurations {
        let mut list_635 = scope_632.start_list(true, Some("item"));
        for item_634 in var_633 {
            #[allow(unused_mut)]
            let mut entry_636 = list_635.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_636, item_634,
            )?;
        }
        list_635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("TagSpecification");
    if let Some(var_638) = &input.tag_specifications {
        let mut list_640 = scope_637.start_list(true, Some("item"));
        for item_639 in var_638 {
            #[allow(unused_mut)]
            let mut entry_641 = list_640.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_641, item_639,
            )?;
        }
        list_640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("DryRun");
    if let Some(var_643) = &input.dry_run {
        scope_642.boolean(*var_643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("ClientToken");
    if let Some(var_645) = &input.client_token {
        scope_644.string(var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("DryRun");
    if let Some(var_647) = &input.dry_run {
        scope_646.boolean(*var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("VpcId");
    if let Some(var_649) = &input.vpc_id {
        scope_648.string(var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("TagSpecification");
    if let Some(var_651) = &input.tag_specifications {
        let mut list_653 = scope_650.start_list(true, Some("item"));
        for item_652 in var_651 {
            #[allow(unused_mut)]
            let mut entry_654 = list_653.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_654, item_652,
            )?;
        }
        list_653.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("DryRun");
    if let Some(var_656) = &input.dry_run {
        scope_655.boolean(*var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("ClientToken");
    if let Some(var_658) = &input.client_token {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("SpotOptions");
    if let Some(var_660) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_659, var_660)?;
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("OnDemandOptions");
    if let Some(var_662) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_661, var_662,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_664) = &input.excess_capacity_termination_policy {
        scope_663.string(var_664.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_666) = &input.launch_template_configs {
        let mut list_668 = scope_665.start_list(true, Some("item"));
        for item_667 in var_666 {
            #[allow(unused_mut)]
            let mut entry_669 = list_668.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_669, item_667,
            )?;
        }
        list_668.finish();
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_671) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_670, var_671,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_673) = &input.terminate_instances_with_expiration {
        scope_672.boolean(*var_673);
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("Type");
    if let Some(var_675) = &input.r#type {
        scope_674.string(var_675.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("ValidFrom");
    if let Some(var_677) = &input.valid_from {
        scope_676.date_time(var_677, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("ValidUntil");
    if let Some(var_679) = &input.valid_until {
        scope_678.date_time(var_679, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_681) = &input.replace_unhealthy_instances {
        scope_680.boolean(*var_681);
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("TagSpecification");
    if let Some(var_683) = &input.tag_specifications {
        let mut list_685 = scope_682.start_list(true, Some("item"));
        for item_684 in var_683 {
            #[allow(unused_mut)]
            let mut entry_686 = list_685.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_686, item_684,
            )?;
        }
        list_685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("Context");
    if let Some(var_688) = &input.context {
        scope_687.string(var_688);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("DryRun");
    if let Some(var_690) = &input.dry_run {
        scope_689.boolean(*var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("ClientToken");
    if let Some(var_692) = &input.client_token {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_694) = &input.deliver_logs_permission_arn {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("LogGroupName");
    if let Some(var_696) = &input.log_group_name {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("ResourceId");
    if let Some(var_698) = &input.resource_ids {
        let mut list_700 = scope_697.start_list(true, Some("item"));
        for item_699 in var_698 {
            #[allow(unused_mut)]
            let mut entry_701 = list_700.entry();
            entry_701.string(item_699);
        }
        list_700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("ResourceType");
    if let Some(var_703) = &input.resource_type {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("TrafficType");
    if let Some(var_705) = &input.traffic_type {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("LogDestinationType");
    if let Some(var_707) = &input.log_destination_type {
        scope_706.string(var_707.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LogDestination");
    if let Some(var_709) = &input.log_destination {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("LogFormat");
    if let Some(var_711) = &input.log_format {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("TagSpecification");
    if let Some(var_713) = &input.tag_specifications {
        let mut list_715 = scope_712.start_list(true, Some("item"));
        for item_714 in var_713 {
            #[allow(unused_mut)]
            let mut entry_716 = list_715.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_716, item_714,
            )?;
        }
        list_715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("MaxAggregationInterval");
    if let Some(var_718) = &input.max_aggregation_interval {
        scope_717.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_718).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DestinationOptions");
    if let Some(var_720) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_719, var_720,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DryRun");
    if let Some(var_722) = &input.dry_run {
        scope_721.boolean(*var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("InputStorageLocation");
    if let Some(var_724) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_723, var_724)?;
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("LogsStorageLocation");
    if let Some(var_726) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_725, var_726)?;
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("Description");
    if let Some(var_728) = &input.description {
        scope_727.string(var_728);
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("Name");
    if let Some(var_730) = &input.name {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("ClientToken");
    if let Some(var_732) = &input.client_token {
        scope_731.string(var_732);
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("TagSpecification");
    if let Some(var_734) = &input.tag_specifications {
        let mut list_736 = scope_733.start_list(true, Some("item"));
        for item_735 in var_734 {
            #[allow(unused_mut)]
            let mut entry_737 = list_736.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_737, item_735,
            )?;
        }
        list_736.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("BlockDeviceMapping");
    if let Some(var_739) = &input.block_device_mappings {
        let mut list_741 = scope_738.start_list(true, Some("BlockDeviceMapping"));
        for item_740 in var_739 {
            #[allow(unused_mut)]
            let mut entry_742 = list_741.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_742, item_740,
            )?;
        }
        list_741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("Description");
    if let Some(var_744) = &input.description {
        scope_743.string(var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("DryRun");
    if let Some(var_746) = &input.dry_run {
        scope_745.boolean(*var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("InstanceId");
    if let Some(var_748) = &input.instance_id {
        scope_747.string(var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("Name");
    if let Some(var_750) = &input.name {
        scope_749.string(var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("NoReboot");
    if let Some(var_752) = &input.no_reboot {
        scope_751.boolean(*var_752);
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("TagSpecification");
    if let Some(var_754) = &input.tag_specifications {
        let mut list_756 = scope_753.start_list(true, Some("item"));
        for item_755 in var_754 {
            #[allow(unused_mut)]
            let mut entry_757 = list_756.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_757, item_755,
            )?;
        }
        list_756.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("DryRun");
    if let Some(var_759) = &input.dry_run {
        scope_758.boolean(*var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("Name");
    if let Some(var_761) = &input.name {
        scope_760.string(var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("TimeRange");
    if let Some(var_763) = &input.time_ranges {
        let mut list_765 = scope_762.start_list(true, None);
        for item_764 in var_763 {
            #[allow(unused_mut)]
            let mut entry_766 = list_765.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_766, item_764)?;
        }
        list_765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("CronExpression");
    if let Some(var_768) = &input.cron_expression {
        scope_767.string(var_768);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("TagSpecification");
    if let Some(var_770) = &input.tag_specifications {
        let mut list_772 = scope_769.start_list(true, Some("item"));
        for item_771 in var_770 {
            #[allow(unused_mut)]
            let mut entry_773 = list_772.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_773, item_771,
            )?;
        }
        list_772.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("Description");
    if let Some(var_775) = &input.description {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("ExportToS3");
    if let Some(var_777) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_776, var_777,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("InstanceId");
    if let Some(var_779) = &input.instance_id {
        scope_778.string(var_779);
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("TargetEnvironment");
    if let Some(var_781) = &input.target_environment {
        scope_780.string(var_781.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("TagSpecification");
    if let Some(var_783) = &input.tag_specifications {
        let mut list_785 = scope_782.start_list(true, Some("item"));
        for item_784 in var_783 {
            #[allow(unused_mut)]
            let mut entry_786 = list_785.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_786, item_784,
            )?;
        }
        list_785.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("TagSpecification");
    if let Some(var_788) = &input.tag_specifications {
        let mut list_790 = scope_787.start_list(true, Some("item"));
        for item_789 in var_788 {
            #[allow(unused_mut)]
            let mut entry_791 = list_790.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_791, item_789,
            )?;
        }
        list_790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("DryRun");
    if let Some(var_793) = &input.dry_run {
        scope_792.boolean(*var_793);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("DryRun");
    if let Some(var_795) = &input.dry_run {
        scope_794.boolean(*var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("Description");
    if let Some(var_797) = &input.description {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("OperatingRegion");
    if let Some(var_799) = &input.operating_regions {
        let mut list_801 = scope_798.start_list(true, None);
        for item_800 in var_799 {
            #[allow(unused_mut)]
            let mut entry_802 = list_801.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_802, item_800,
            )?;
        }
        list_801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("TagSpecification");
    if let Some(var_804) = &input.tag_specifications {
        let mut list_806 = scope_803.start_list(true, Some("item"));
        for item_805 in var_804 {
            #[allow(unused_mut)]
            let mut entry_807 = list_806.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_807, item_805,
            )?;
        }
        list_806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("ClientToken");
    if let Some(var_809) = &input.client_token {
        scope_808.string(var_809);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("DryRun");
    if let Some(var_811) = &input.dry_run {
        scope_810.boolean(*var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("IpamScopeId");
    if let Some(var_813) = &input.ipam_scope_id {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("Locale");
    if let Some(var_815) = &input.locale {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("SourceIpamPoolId");
    if let Some(var_817) = &input.source_ipam_pool_id {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("Description");
    if let Some(var_819) = &input.description {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("AddressFamily");
    if let Some(var_821) = &input.address_family {
        scope_820.string(var_821.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("AutoImport");
    if let Some(var_823) = &input.auto_import {
        scope_822.boolean(*var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_825) = &input.publicly_advertisable {
        scope_824.boolean(*var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_827) = &input.allocation_min_netmask_length {
        scope_826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_829) = &input.allocation_max_netmask_length {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_831) = &input.allocation_default_netmask_length {
        scope_830.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("AllocationResourceTag");
    if let Some(var_833) = &input.allocation_resource_tags {
        let mut list_835 = scope_832.start_list(true, Some("item"));
        for item_834 in var_833 {
            #[allow(unused_mut)]
            let mut entry_836 = list_835.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_836, item_834,
            )?;
        }
        list_835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("TagSpecification");
    if let Some(var_838) = &input.tag_specifications {
        let mut list_840 = scope_837.start_list(true, Some("item"));
        for item_839 in var_838 {
            #[allow(unused_mut)]
            let mut entry_841 = list_840.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_841, item_839,
            )?;
        }
        list_840.finish();
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("ClientToken");
    if let Some(var_843) = &input.client_token {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("AwsService");
    if let Some(var_845) = &input.aws_service {
        scope_844.string(var_845.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("DryRun");
    if let Some(var_847) = &input.dry_run {
        scope_846.boolean(*var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("IpamId");
    if let Some(var_849) = &input.ipam_id {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("Description");
    if let Some(var_851) = &input.description {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("TagSpecification");
    if let Some(var_853) = &input.tag_specifications {
        let mut list_855 = scope_852.start_list(true, Some("item"));
        for item_854 in var_853 {
            #[allow(unused_mut)]
            let mut entry_856 = list_855.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_856, item_854,
            )?;
        }
        list_855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("ClientToken");
    if let Some(var_858) = &input.client_token {
        scope_857.string(var_858);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("KeyName");
    if let Some(var_860) = &input.key_name {
        scope_859.string(var_860);
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("DryRun");
    if let Some(var_862) = &input.dry_run {
        scope_861.boolean(*var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("KeyType");
    if let Some(var_864) = &input.key_type {
        scope_863.string(var_864.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("TagSpecification");
    if let Some(var_866) = &input.tag_specifications {
        let mut list_868 = scope_865.start_list(true, Some("item"));
        for item_867 in var_866 {
            #[allow(unused_mut)]
            let mut entry_869 = list_868.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_869, item_867,
            )?;
        }
        list_868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("KeyFormat");
    if let Some(var_871) = &input.key_format {
        scope_870.string(var_871.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("DryRun");
    if let Some(var_873) = &input.dry_run {
        scope_872.boolean(*var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("ClientToken");
    if let Some(var_875) = &input.client_token {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("LaunchTemplateName");
    if let Some(var_877) = &input.launch_template_name {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("VersionDescription");
    if let Some(var_879) = &input.version_description {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("LaunchTemplateData");
    if let Some(var_881) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_880, var_881,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("TagSpecification");
    if let Some(var_883) = &input.tag_specifications {
        let mut list_885 = scope_882.start_list(true, Some("item"));
        for item_884 in var_883 {
            #[allow(unused_mut)]
            let mut entry_886 = list_885.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_886, item_884,
            )?;
        }
        list_885.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("DryRun");
    if let Some(var_888) = &input.dry_run {
        scope_887.boolean(*var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("ClientToken");
    if let Some(var_890) = &input.client_token {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("LaunchTemplateId");
    if let Some(var_892) = &input.launch_template_id {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("LaunchTemplateName");
    if let Some(var_894) = &input.launch_template_name {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("SourceVersion");
    if let Some(var_896) = &input.source_version {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("VersionDescription");
    if let Some(var_898) = &input.version_description {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("LaunchTemplateData");
    if let Some(var_900) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_899, var_900,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("DestinationCidrBlock");
    if let Some(var_902) = &input.destination_cidr_block {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_904) = &input.local_gateway_route_table_id {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_906) = &input.local_gateway_virtual_interface_group_id {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("DryRun");
    if let Some(var_908) = &input.dry_run {
        scope_907.boolean(*var_908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_910) = &input.local_gateway_route_table_id {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("VpcId");
    if let Some(var_912) = &input.vpc_id {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("TagSpecification");
    if let Some(var_914) = &input.tag_specifications {
        let mut list_916 = scope_913.start_list(true, Some("item"));
        for item_915 in var_914 {
            #[allow(unused_mut)]
            let mut entry_917 = list_916.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_917, item_915,
            )?;
        }
        list_916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("DryRun");
    if let Some(var_919) = &input.dry_run {
        scope_918.boolean(*var_919);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("DryRun");
    if let Some(var_921) = &input.dry_run {
        scope_920.boolean(*var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("PrefixListName");
    if let Some(var_923) = &input.prefix_list_name {
        scope_922.string(var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("Entry");
    if let Some(var_925) = &input.entries {
        let mut list_927 = scope_924.start_list(true, None);
        for item_926 in var_925 {
            #[allow(unused_mut)]
            let mut entry_928 = list_927.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_928, item_926,
            )?;
        }
        list_927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("MaxEntries");
    if let Some(var_930) = &input.max_entries {
        scope_929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("TagSpecification");
    if let Some(var_932) = &input.tag_specifications {
        let mut list_934 = scope_931.start_list(true, Some("item"));
        for item_933 in var_932 {
            #[allow(unused_mut)]
            let mut entry_935 = list_934.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_935, item_933,
            )?;
        }
        list_934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("AddressFamily");
    if let Some(var_937) = &input.address_family {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("ClientToken");
    if let Some(var_939) = &input.client_token {
        scope_938.string(var_939);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("AllocationId");
    if let Some(var_941) = &input.allocation_id {
        scope_940.string(var_941);
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("ClientToken");
    if let Some(var_943) = &input.client_token {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("DryRun");
    if let Some(var_945) = &input.dry_run {
        scope_944.boolean(*var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("SubnetId");
    if let Some(var_947) = &input.subnet_id {
        scope_946.string(var_947);
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("TagSpecification");
    if let Some(var_949) = &input.tag_specifications {
        let mut list_951 = scope_948.start_list(true, Some("item"));
        for item_950 in var_949 {
            #[allow(unused_mut)]
            let mut entry_952 = list_951.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_952, item_950,
            )?;
        }
        list_951.finish();
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("ConnectivityType");
    if let Some(var_954) = &input.connectivity_type {
        scope_953.string(var_954.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("DryRun");
    if let Some(var_956) = &input.dry_run {
        scope_955.boolean(*var_956);
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("VpcId");
    if let Some(var_958) = &input.vpc_id {
        scope_957.string(var_958);
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("TagSpecification");
    if let Some(var_960) = &input.tag_specifications {
        let mut list_962 = scope_959.start_list(true, Some("item"));
        for item_961 in var_960 {
            #[allow(unused_mut)]
            let mut entry_963 = list_962.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_963, item_961,
            )?;
        }
        list_962.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("CidrBlock");
    if let Some(var_965) = &input.cidr_block {
        scope_964.string(var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("DryRun");
    if let Some(var_967) = &input.dry_run {
        scope_966.boolean(*var_967);
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Egress");
    if let Some(var_969) = &input.egress {
        scope_968.boolean(*var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Icmp");
    if let Some(var_971) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_970, var_971)?;
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_973) = &input.ipv6_cidr_block {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("NetworkAclId");
    if let Some(var_975) = &input.network_acl_id {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("PortRange");
    if let Some(var_977) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_976, var_977)?;
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("Protocol");
    if let Some(var_979) = &input.protocol {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("RuleAction");
    if let Some(var_981) = &input.rule_action {
        scope_980.string(var_981.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("RuleNumber");
    if let Some(var_983) = &input.rule_number {
        scope_982.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_983).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("MatchPath");
    if let Some(var_985) = &input.match_paths {
        let mut list_987 = scope_984.start_list(true, Some("item"));
        for item_986 in var_985 {
            #[allow(unused_mut)]
            let mut entry_988 = list_987.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_988, item_986,
            )?;
        }
        list_987.finish();
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("ExcludePath");
    if let Some(var_990) = &input.exclude_paths {
        let mut list_992 = scope_989.start_list(true, Some("item"));
        for item_991 in var_990 {
            #[allow(unused_mut)]
            let mut entry_993 = list_992.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_993, item_991,
            )?;
        }
        list_992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("ClientToken");
    if let Some(var_995) = &input.client_token {
        scope_994.string(var_995);
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("TagSpecification");
    if let Some(var_997) = &input.tag_specifications {
        let mut list_999 = scope_996.start_list(true, Some("item"));
        for item_998 in var_997 {
            #[allow(unused_mut)]
            let mut entry_1000 = list_999.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1000, item_998,
            )?;
        }
        list_999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("DryRun");
    if let Some(var_1002) = &input.dry_run {
        scope_1001.boolean(*var_1002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("SourceIp");
    if let Some(var_1004) = &input.source_ip {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("DestinationIp");
    if let Some(var_1006) = &input.destination_ip {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("Source");
    if let Some(var_1008) = &input.source {
        scope_1007.string(var_1008);
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("Destination");
    if let Some(var_1010) = &input.destination {
        scope_1009.string(var_1010);
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("Protocol");
    if let Some(var_1012) = &input.protocol {
        scope_1011.string(var_1012.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("DestinationPort");
    if let Some(var_1014) = &input.destination_port {
        scope_1013.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1014).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("TagSpecification");
    if let Some(var_1016) = &input.tag_specifications {
        let mut list_1018 = scope_1015.start_list(true, Some("item"));
        for item_1017 in var_1016 {
            #[allow(unused_mut)]
            let mut entry_1019 = list_1018.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1019, item_1017,
            )?;
        }
        list_1018.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("DryRun");
    if let Some(var_1021) = &input.dry_run {
        scope_1020.boolean(*var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("ClientToken");
    if let Some(var_1023) = &input.client_token {
        scope_1022.string(var_1023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("Description");
    if let Some(var_1025) = &input.description {
        scope_1024.string(var_1025);
    }
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("DryRun");
    if let Some(var_1027) = &input.dry_run {
        scope_1026.boolean(*var_1027);
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("SecurityGroupId");
    if let Some(var_1029) = &input.groups {
        let mut list_1031 = scope_1028.start_list(true, Some("SecurityGroupId"));
        for item_1030 in var_1029 {
            #[allow(unused_mut)]
            let mut entry_1032 = list_1031.entry();
            entry_1032.string(item_1030);
        }
        list_1031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1034) = &input.ipv6_address_count {
        scope_1033.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1034).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("Ipv6Addresses");
    if let Some(var_1036) = &input.ipv6_addresses {
        let mut list_1038 = scope_1035.start_list(true, Some("item"));
        for item_1037 in var_1036 {
            #[allow(unused_mut)]
            let mut entry_1039 = list_1038.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1039, item_1037,
            )?;
        }
        list_1038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("PrivateIpAddress");
    if let Some(var_1041) = &input.private_ip_address {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1043) = &input.private_ip_addresses {
        let mut list_1045 = scope_1042.start_list(true, Some("item"));
        for item_1044 in var_1043 {
            #[allow(unused_mut)]
            let mut entry_1046 = list_1045.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1046, item_1044,
            )?;
        }
        list_1045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1048) = &input.secondary_private_ip_address_count {
        scope_1047.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1048).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("Ipv4Prefix");
    if let Some(var_1050) = &input.ipv4_prefixes {
        let mut list_1052 = scope_1049.start_list(true, Some("item"));
        for item_1051 in var_1050 {
            #[allow(unused_mut)]
            let mut entry_1053 = list_1052.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1053, item_1051,
            )?;
        }
        list_1052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1055) = &input.ipv4_prefix_count {
        scope_1054.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1055).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Ipv6Prefix");
    if let Some(var_1057) = &input.ipv6_prefixes {
        let mut list_1059 = scope_1056.start_list(true, Some("item"));
        for item_1058 in var_1057 {
            #[allow(unused_mut)]
            let mut entry_1060 = list_1059.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1060, item_1058,
            )?;
        }
        list_1059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1062) = &input.ipv6_prefix_count {
        scope_1061.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1062).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("InterfaceType");
    if let Some(var_1064) = &input.interface_type {
        scope_1063.string(var_1064.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("SubnetId");
    if let Some(var_1066) = &input.subnet_id {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("TagSpecification");
    if let Some(var_1068) = &input.tag_specifications {
        let mut list_1070 = scope_1067.start_list(true, Some("item"));
        for item_1069 in var_1068 {
            #[allow(unused_mut)]
            let mut entry_1071 = list_1070.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1071, item_1069,
            )?;
        }
        list_1070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("ClientToken");
    if let Some(var_1073) = &input.client_token {
        scope_1072.string(var_1073);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1075) = &input.network_interface_id {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("AwsAccountId");
    if let Some(var_1077) = &input.aws_account_id {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("AwsService");
    if let Some(var_1079) = &input.aws_service {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("Permission");
    if let Some(var_1081) = &input.permission {
        scope_1080.string(var_1081.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("DryRun");
    if let Some(var_1083) = &input.dry_run {
        scope_1082.boolean(*var_1083);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("DryRun");
    if let Some(var_1085) = &input.dry_run {
        scope_1084.boolean(*var_1085);
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("GroupName");
    if let Some(var_1087) = &input.group_name {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("Strategy");
    if let Some(var_1089) = &input.strategy {
        scope_1088.string(var_1089.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("PartitionCount");
    if let Some(var_1091) = &input.partition_count {
        scope_1090.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1091).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("TagSpecification");
    if let Some(var_1093) = &input.tag_specifications {
        let mut list_1095 = scope_1092.start_list(true, Some("item"));
        for item_1094 in var_1093 {
            #[allow(unused_mut)]
            let mut entry_1096 = list_1095.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1096, item_1094,
            )?;
        }
        list_1095.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("DryRun");
    if let Some(var_1098) = &input.dry_run {
        scope_1097.boolean(*var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("TagSpecification");
    if let Some(var_1100) = &input.tag_specifications {
        let mut list_1102 = scope_1099.start_list(true, Some("item"));
        for item_1101 in var_1100 {
            #[allow(unused_mut)]
            let mut entry_1103 = list_1102.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1103, item_1101,
            )?;
        }
        list_1102.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("InstanceId");
    if let Some(var_1105) = &input.instance_id {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("SnapshotId");
    if let Some(var_1107) = &input.snapshot_id {
        scope_1106.string(var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("ClientToken");
    if let Some(var_1109) = &input.client_token {
        scope_1108.string(var_1109);
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("DryRun");
    if let Some(var_1111) = &input.dry_run {
        scope_1110.boolean(*var_1111);
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("TagSpecification");
    if let Some(var_1113) = &input.tag_specifications {
        let mut list_1115 = scope_1112.start_list(true, Some("item"));
        for item_1114 in var_1113 {
            #[allow(unused_mut)]
            let mut entry_1116 = list_1115.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1116, item_1114,
            )?;
        }
        list_1115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("ClientToken");
    if let Some(var_1118) = &input.client_token {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("InstanceCount");
    if let Some(var_1120) = &input.instance_count {
        scope_1119.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("PriceSchedules");
    if let Some(var_1122) = &input.price_schedules {
        let mut list_1124 = scope_1121.start_list(true, Some("item"));
        for item_1123 in var_1122 {
            #[allow(unused_mut)]
            let mut entry_1125 = list_1124.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1125, item_1123,
            )?;
        }
        list_1124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("ReservedInstancesId");
    if let Some(var_1127) = &input.reserved_instances_id {
        scope_1126.string(var_1127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("Bucket");
    if let Some(var_1129) = &input.bucket {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("ObjectKey");
    if let Some(var_1131) = &input.object_key {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("Name");
    if let Some(var_1133) = &input.name {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("TagSpecification");
    if let Some(var_1135) = &input.tag_specifications {
        let mut list_1137 = scope_1134.start_list(true, Some("item"));
        for item_1136 in var_1135 {
            #[allow(unused_mut)]
            let mut entry_1138 = list_1137.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1138, item_1136,
            )?;
        }
        list_1137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("DryRun");
    if let Some(var_1140) = &input.dry_run {
        scope_1139.boolean(*var_1140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1142) = &input.destination_cidr_block {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1144) = &input.destination_ipv6_cidr_block {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1146) = &input.destination_prefix_list_id {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("DryRun");
    if let Some(var_1148) = &input.dry_run {
        scope_1147.boolean(*var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("VpcEndpointId");
    if let Some(var_1150) = &input.vpc_endpoint_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1152) = &input.egress_only_internet_gateway_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("GatewayId");
    if let Some(var_1154) = &input.gateway_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("InstanceId");
    if let Some(var_1156) = &input.instance_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("NatGatewayId");
    if let Some(var_1158) = &input.nat_gateway_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("TransitGatewayId");
    if let Some(var_1160) = &input.transit_gateway_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("LocalGatewayId");
    if let Some(var_1162) = &input.local_gateway_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("CarrierGatewayId");
    if let Some(var_1164) = &input.carrier_gateway_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1166) = &input.network_interface_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("RouteTableId");
    if let Some(var_1168) = &input.route_table_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1170) = &input.vpc_peering_connection_id {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("CoreNetworkArn");
    if let Some(var_1172) = &input.core_network_arn {
        scope_1171.string(var_1172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("DryRun");
    if let Some(var_1174) = &input.dry_run {
        scope_1173.boolean(*var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("VpcId");
    if let Some(var_1176) = &input.vpc_id {
        scope_1175.string(var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("TagSpecification");
    if let Some(var_1178) = &input.tag_specifications {
        let mut list_1180 = scope_1177.start_list(true, Some("item"));
        for item_1179 in var_1178 {
            #[allow(unused_mut)]
            let mut entry_1181 = list_1180.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1181, item_1179,
            )?;
        }
        list_1180.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("GroupDescription");
    if let Some(var_1183) = &input.description {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("GroupName");
    if let Some(var_1185) = &input.group_name {
        scope_1184.string(var_1185);
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("VpcId");
    if let Some(var_1187) = &input.vpc_id {
        scope_1186.string(var_1187);
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("TagSpecification");
    if let Some(var_1189) = &input.tag_specifications {
        let mut list_1191 = scope_1188.start_list(true, Some("item"));
        for item_1190 in var_1189 {
            #[allow(unused_mut)]
            let mut entry_1192 = list_1191.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1192, item_1190,
            )?;
        }
        list_1191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("DryRun");
    if let Some(var_1194) = &input.dry_run {
        scope_1193.boolean(*var_1194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("Description");
    if let Some(var_1196) = &input.description {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("OutpostArn");
    if let Some(var_1198) = &input.outpost_arn {
        scope_1197.string(var_1198);
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("VolumeId");
    if let Some(var_1200) = &input.volume_id {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("TagSpecification");
    if let Some(var_1202) = &input.tag_specifications {
        let mut list_1204 = scope_1201.start_list(true, Some("item"));
        for item_1203 in var_1202 {
            #[allow(unused_mut)]
            let mut entry_1205 = list_1204.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1205, item_1203,
            )?;
        }
        list_1204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("DryRun");
    if let Some(var_1207) = &input.dry_run {
        scope_1206.boolean(*var_1207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("Description");
    if let Some(var_1209) = &input.description {
        scope_1208.string(var_1209);
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("InstanceSpecification");
    if let Some(var_1211) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1210, var_1211,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("OutpostArn");
    if let Some(var_1213) = &input.outpost_arn {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("TagSpecification");
    if let Some(var_1215) = &input.tag_specifications {
        let mut list_1217 = scope_1214.start_list(true, Some("item"));
        for item_1216 in var_1215 {
            #[allow(unused_mut)]
            let mut entry_1218 = list_1217.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1218, item_1216,
            )?;
        }
        list_1217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("DryRun");
    if let Some(var_1220) = &input.dry_run {
        scope_1219.boolean(*var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1222) = &input.copy_tags_from_source {
        scope_1221.string(var_1222.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("Bucket");
    if let Some(var_1224) = &input.bucket {
        scope_1223.string(var_1224);
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("DryRun");
    if let Some(var_1226) = &input.dry_run {
        scope_1225.boolean(*var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("Prefix");
    if let Some(var_1228) = &input.prefix {
        scope_1227.string(var_1228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("ImageId");
    if let Some(var_1230) = &input.image_id {
        scope_1229.string(var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("Bucket");
    if let Some(var_1232) = &input.bucket {
        scope_1231.string(var_1232);
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("S3ObjectTag");
    if let Some(var_1234) = &input.s3_object_tags {
        let mut list_1236 = scope_1233.start_list(true, Some("item"));
        for item_1235 in var_1234 {
            #[allow(unused_mut)]
            let mut entry_1237 = list_1236.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1237, item_1235)?;
        }
        list_1236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("DryRun");
    if let Some(var_1239) = &input.dry_run {
        scope_1238.boolean(*var_1239);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("TagSpecification");
    if let Some(var_1241) = &input.tag_specifications {
        let mut list_1243 = scope_1240.start_list(true, Some("item"));
        for item_1242 in var_1241 {
            #[allow(unused_mut)]
            let mut entry_1244 = list_1243.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1244, item_1242,
            )?;
        }
        list_1243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("AvailabilityZone");
    if let Some(var_1246) = &input.availability_zone {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1248) = &input.availability_zone_id {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("CidrBlock");
    if let Some(var_1250) = &input.cidr_block {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1252) = &input.ipv6_cidr_block {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("OutpostArn");
    if let Some(var_1254) = &input.outpost_arn {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("VpcId");
    if let Some(var_1256) = &input.vpc_id {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("DryRun");
    if let Some(var_1258) = &input.dry_run {
        scope_1257.boolean(*var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("Ipv6Native");
    if let Some(var_1260) = &input.ipv6_native {
        scope_1259.boolean(*var_1260);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("SubnetId");
    if let Some(var_1262) = &input.subnet_id {
        scope_1261.string(var_1262);
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("Cidr");
    if let Some(var_1264) = &input.cidr {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("ReservationType");
    if let Some(var_1266) = &input.reservation_type {
        scope_1265.string(var_1266.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("Description");
    if let Some(var_1268) = &input.description {
        scope_1267.string(var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("DryRun");
    if let Some(var_1270) = &input.dry_run {
        scope_1269.boolean(*var_1270);
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("TagSpecification");
    if let Some(var_1272) = &input.tag_specifications {
        let mut list_1274 = scope_1271.start_list(true, Some("item"));
        for item_1273 in var_1272 {
            #[allow(unused_mut)]
            let mut entry_1275 = list_1274.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1275, item_1273,
            )?;
        }
        list_1274.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("DryRun");
    if let Some(var_1277) = &input.dry_run {
        scope_1276.boolean(*var_1277);
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("ResourceId");
    if let Some(var_1279) = &input.resources {
        let mut list_1281 = scope_1278.start_list(true, None);
        for item_1280 in var_1279 {
            #[allow(unused_mut)]
            let mut entry_1282 = list_1281.entry();
            entry_1282.string(item_1280);
        }
        list_1281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("Tag");
    if let Some(var_1284) = &input.tags {
        let mut list_1286 = scope_1283.start_list(true, Some("item"));
        for item_1285 in var_1284 {
            #[allow(unused_mut)]
            let mut entry_1287 = list_1286.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1287, item_1285)?;
        }
        list_1286.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("Description");
    if let Some(var_1289) = &input.description {
        scope_1288.string(var_1289);
    }
    #[allow(unused_mut)]
    let mut scope_1290 = writer.prefix("TagSpecification");
    if let Some(var_1291) = &input.tag_specifications {
        let mut list_1293 = scope_1290.start_list(true, Some("item"));
        for item_1292 in var_1291 {
            #[allow(unused_mut)]
            let mut entry_1294 = list_1293.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1294, item_1292,
            )?;
        }
        list_1293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("DryRun");
    if let Some(var_1296) = &input.dry_run {
        scope_1295.boolean(*var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("ClientToken");
    if let Some(var_1298) = &input.client_token {
        scope_1297.string(var_1298);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1300) = &input.traffic_mirror_filter_id {
        scope_1299.string(var_1300);
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("TrafficDirection");
    if let Some(var_1302) = &input.traffic_direction {
        scope_1301.string(var_1302.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("RuleNumber");
    if let Some(var_1304) = &input.rule_number {
        scope_1303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("RuleAction");
    if let Some(var_1306) = &input.rule_action {
        scope_1305.string(var_1306.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("DestinationPortRange");
    if let Some(var_1308) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1307, var_1308,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("SourcePortRange");
    if let Some(var_1310) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1309, var_1310,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("Protocol");
    if let Some(var_1312) = &input.protocol {
        scope_1311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1314) = &input.destination_cidr_block {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("SourceCidrBlock");
    if let Some(var_1316) = &input.source_cidr_block {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("Description");
    if let Some(var_1318) = &input.description {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("DryRun");
    if let Some(var_1320) = &input.dry_run {
        scope_1319.boolean(*var_1320);
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("ClientToken");
    if let Some(var_1322) = &input.client_token {
        scope_1321.string(var_1322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1324) = &input.network_interface_id {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1326) = &input.traffic_mirror_target_id {
        scope_1325.string(var_1326);
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1328) = &input.traffic_mirror_filter_id {
        scope_1327.string(var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("PacketLength");
    if let Some(var_1330) = &input.packet_length {
        scope_1329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("SessionNumber");
    if let Some(var_1332) = &input.session_number {
        scope_1331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("VirtualNetworkId");
    if let Some(var_1334) = &input.virtual_network_id {
        scope_1333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("Description");
    if let Some(var_1336) = &input.description {
        scope_1335.string(var_1336);
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("TagSpecification");
    if let Some(var_1338) = &input.tag_specifications {
        let mut list_1340 = scope_1337.start_list(true, Some("item"));
        for item_1339 in var_1338 {
            #[allow(unused_mut)]
            let mut entry_1341 = list_1340.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1341, item_1339,
            )?;
        }
        list_1340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("DryRun");
    if let Some(var_1343) = &input.dry_run {
        scope_1342.boolean(*var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("ClientToken");
    if let Some(var_1345) = &input.client_token {
        scope_1344.string(var_1345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1347) = &input.network_interface_id {
        scope_1346.string(var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1349) = &input.network_load_balancer_arn {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Description");
    if let Some(var_1351) = &input.description {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("TagSpecification");
    if let Some(var_1353) = &input.tag_specifications {
        let mut list_1355 = scope_1352.start_list(true, Some("item"));
        for item_1354 in var_1353 {
            #[allow(unused_mut)]
            let mut entry_1356 = list_1355.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1356, item_1354,
            )?;
        }
        list_1355.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("DryRun");
    if let Some(var_1358) = &input.dry_run {
        scope_1357.boolean(*var_1358);
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("ClientToken");
    if let Some(var_1360) = &input.client_token {
        scope_1359.string(var_1360);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("Description");
    if let Some(var_1362) = &input.description {
        scope_1361.string(var_1362);
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("Options");
    if let Some(var_1364) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1363, var_1364,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("TagSpecification");
    if let Some(var_1366) = &input.tag_specifications {
        let mut list_1368 = scope_1365.start_list(true, Some("item"));
        for item_1367 in var_1366 {
            #[allow(unused_mut)]
            let mut entry_1369 = list_1368.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1369, item_1367,
            )?;
        }
        list_1368.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("DryRun");
    if let Some(var_1371) = &input.dry_run {
        scope_1370.boolean(*var_1371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1373) = &input.transport_transit_gateway_attachment_id {
        scope_1372.string(var_1373);
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("Options");
    if let Some(var_1375) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1374, var_1375)?;
    }
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("TagSpecification");
    if let Some(var_1377) = &input.tag_specifications {
        let mut list_1379 = scope_1376.start_list(true, Some("item"));
        for item_1378 in var_1377 {
            #[allow(unused_mut)]
            let mut entry_1380 = list_1379.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1380, item_1378,
            )?;
        }
        list_1379.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("DryRun");
    if let Some(var_1382) = &input.dry_run {
        scope_1381.boolean(*var_1382);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1384) = &input.transit_gateway_attachment_id {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1386) = &input.transit_gateway_address {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("PeerAddress");
    if let Some(var_1388) = &input.peer_address {
        scope_1387.string(var_1388);
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("BgpOptions");
    if let Some(var_1390) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1389, var_1390)?;
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1392) = &input.inside_cidr_blocks {
        let mut list_1394 = scope_1391.start_list(true, Some("item"));
        for item_1393 in var_1392 {
            #[allow(unused_mut)]
            let mut entry_1395 = list_1394.entry();
            entry_1395.string(item_1393);
        }
        list_1394.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("TagSpecification");
    if let Some(var_1397) = &input.tag_specifications {
        let mut list_1399 = scope_1396.start_list(true, Some("item"));
        for item_1398 in var_1397 {
            #[allow(unused_mut)]
            let mut entry_1400 = list_1399.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1400, item_1398,
            )?;
        }
        list_1399.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("DryRun");
    if let Some(var_1402) = &input.dry_run {
        scope_1401.boolean(*var_1402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("TransitGatewayId");
    if let Some(var_1404) = &input.transit_gateway_id {
        scope_1403.string(var_1404);
    }
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("Options");
    if let Some(var_1406) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1405, var_1406)?;
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("TagSpecification");
    if let Some(var_1408) = &input.tag_specifications {
        let mut list_1410 = scope_1407.start_list(true, Some("item"));
        for item_1409 in var_1408 {
            #[allow(unused_mut)]
            let mut entry_1411 = list_1410.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1411, item_1409,
            )?;
        }
        list_1410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("DryRun");
    if let Some(var_1413) = &input.dry_run {
        scope_1412.boolean(*var_1413);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("TransitGatewayId");
    if let Some(var_1415) = &input.transit_gateway_id {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1417) = &input.peer_transit_gateway_id {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("PeerAccountId");
    if let Some(var_1419) = &input.peer_account_id {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("PeerRegion");
    if let Some(var_1421) = &input.peer_region {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("TagSpecification");
    if let Some(var_1423) = &input.tag_specifications {
        let mut list_1425 = scope_1422.start_list(true, Some("item"));
        for item_1424 in var_1423 {
            #[allow(unused_mut)]
            let mut entry_1426 = list_1425.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1426, item_1424,
            )?;
        }
        list_1425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("DryRun");
    if let Some(var_1428) = &input.dry_run {
        scope_1427.boolean(*var_1428);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1430) = &input.transit_gateway_route_table_id {
        scope_1429.string(var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("PrefixListId");
    if let Some(var_1432) = &input.prefix_list_id {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1434) = &input.transit_gateway_attachment_id {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("Blackhole");
    if let Some(var_1436) = &input.blackhole {
        scope_1435.boolean(*var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("DryRun");
    if let Some(var_1438) = &input.dry_run {
        scope_1437.boolean(*var_1438);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1440) = &input.destination_cidr_block {
        scope_1439.string(var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1442) = &input.transit_gateway_route_table_id {
        scope_1441.string(var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1444) = &input.transit_gateway_attachment_id {
        scope_1443.string(var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("Blackhole");
    if let Some(var_1446) = &input.blackhole {
        scope_1445.boolean(*var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("DryRun");
    if let Some(var_1448) = &input.dry_run {
        scope_1447.boolean(*var_1448);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("TransitGatewayId");
    if let Some(var_1450) = &input.transit_gateway_id {
        scope_1449.string(var_1450);
    }
    #[allow(unused_mut)]
    let mut scope_1451 = writer.prefix("TagSpecifications");
    if let Some(var_1452) = &input.tag_specifications {
        let mut list_1454 = scope_1451.start_list(true, Some("item"));
        for item_1453 in var_1452 {
            #[allow(unused_mut)]
            let mut entry_1455 = list_1454.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1455, item_1453,
            )?;
        }
        list_1454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("DryRun");
    if let Some(var_1457) = &input.dry_run {
        scope_1456.boolean(*var_1457);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("TransitGatewayId");
    if let Some(var_1459) = &input.transit_gateway_id {
        scope_1458.string(var_1459);
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("VpcId");
    if let Some(var_1461) = &input.vpc_id {
        scope_1460.string(var_1461);
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("SubnetIds");
    if let Some(var_1463) = &input.subnet_ids {
        let mut list_1465 = scope_1462.start_list(true, Some("item"));
        for item_1464 in var_1463 {
            #[allow(unused_mut)]
            let mut entry_1466 = list_1465.entry();
            entry_1466.string(item_1464);
        }
        list_1465.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("Options");
    if let Some(var_1468) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1467, var_1468)?;
    }
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("TagSpecifications");
    if let Some(var_1470) = &input.tag_specifications {
        let mut list_1472 = scope_1469.start_list(true, Some("item"));
        for item_1471 in var_1470 {
            #[allow(unused_mut)]
            let mut entry_1473 = list_1472.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1473, item_1471,
            )?;
        }
        list_1472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("DryRun");
    if let Some(var_1475) = &input.dry_run {
        scope_1474.boolean(*var_1475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("AvailabilityZone");
    if let Some(var_1477) = &input.availability_zone {
        scope_1476.string(var_1477);
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("Encrypted");
    if let Some(var_1479) = &input.encrypted {
        scope_1478.boolean(*var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("Iops");
    if let Some(var_1481) = &input.iops {
        scope_1480.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1481).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("KmsKeyId");
    if let Some(var_1483) = &input.kms_key_id {
        scope_1482.string(var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("OutpostArn");
    if let Some(var_1485) = &input.outpost_arn {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("Size");
    if let Some(var_1487) = &input.size {
        scope_1486.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1487).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("SnapshotId");
    if let Some(var_1489) = &input.snapshot_id {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("VolumeType");
    if let Some(var_1491) = &input.volume_type {
        scope_1490.string(var_1491.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("DryRun");
    if let Some(var_1493) = &input.dry_run {
        scope_1492.boolean(*var_1493);
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("TagSpecification");
    if let Some(var_1495) = &input.tag_specifications {
        let mut list_1497 = scope_1494.start_list(true, Some("item"));
        for item_1496 in var_1495 {
            #[allow(unused_mut)]
            let mut entry_1498 = list_1497.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1498, item_1496,
            )?;
        }
        list_1497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1500) = &input.multi_attach_enabled {
        scope_1499.boolean(*var_1500);
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("Throughput");
    if let Some(var_1502) = &input.throughput {
        scope_1501.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1502).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("ClientToken");
    if let Some(var_1504) = &input.client_token {
        scope_1503.string(var_1504);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("CidrBlock");
    if let Some(var_1506) = &input.cidr_block {
        scope_1505.string(var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1508) = &input.amazon_provided_ipv6_cidr_block {
        scope_1507.boolean(*var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("Ipv6Pool");
    if let Some(var_1510) = &input.ipv6_pool {
        scope_1509.string(var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1512) = &input.ipv6_cidr_block {
        scope_1511.string(var_1512);
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1514) = &input.ipv4_ipam_pool_id {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1516) = &input.ipv4_netmask_length {
        scope_1515.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1516).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1518) = &input.ipv6_ipam_pool_id {
        scope_1517.string(var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1520) = &input.ipv6_netmask_length {
        scope_1519.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1520).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("DryRun");
    if let Some(var_1522) = &input.dry_run {
        scope_1521.boolean(*var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("InstanceTenancy");
    if let Some(var_1524) = &input.instance_tenancy {
        scope_1523.string(var_1524.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1526) = &input.ipv6_cidr_block_network_border_group {
        scope_1525.string(var_1526);
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("TagSpecification");
    if let Some(var_1528) = &input.tag_specifications {
        let mut list_1530 = scope_1527.start_list(true, Some("item"));
        for item_1529 in var_1528 {
            #[allow(unused_mut)]
            let mut entry_1531 = list_1530.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1531, item_1529,
            )?;
        }
        list_1530.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("DryRun");
    if let Some(var_1533) = &input.dry_run {
        scope_1532.boolean(*var_1533);
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("VpcEndpointType");
    if let Some(var_1535) = &input.vpc_endpoint_type {
        scope_1534.string(var_1535.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("VpcId");
    if let Some(var_1537) = &input.vpc_id {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("ServiceName");
    if let Some(var_1539) = &input.service_name {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("PolicyDocument");
    if let Some(var_1541) = &input.policy_document {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("RouteTableId");
    if let Some(var_1543) = &input.route_table_ids {
        let mut list_1545 = scope_1542.start_list(true, Some("item"));
        for item_1544 in var_1543 {
            #[allow(unused_mut)]
            let mut entry_1546 = list_1545.entry();
            entry_1546.string(item_1544);
        }
        list_1545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1547 = writer.prefix("SubnetId");
    if let Some(var_1548) = &input.subnet_ids {
        let mut list_1550 = scope_1547.start_list(true, Some("item"));
        for item_1549 in var_1548 {
            #[allow(unused_mut)]
            let mut entry_1551 = list_1550.entry();
            entry_1551.string(item_1549);
        }
        list_1550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("SecurityGroupId");
    if let Some(var_1553) = &input.security_group_ids {
        let mut list_1555 = scope_1552.start_list(true, Some("item"));
        for item_1554 in var_1553 {
            #[allow(unused_mut)]
            let mut entry_1556 = list_1555.entry();
            entry_1556.string(item_1554);
        }
        list_1555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("IpAddressType");
    if let Some(var_1558) = &input.ip_address_type {
        scope_1557.string(var_1558.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("DnsOptions");
    if let Some(var_1560) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_1559, var_1560,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("ClientToken");
    if let Some(var_1562) = &input.client_token {
        scope_1561.string(var_1562);
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1564) = &input.private_dns_enabled {
        scope_1563.boolean(*var_1564);
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("TagSpecification");
    if let Some(var_1566) = &input.tag_specifications {
        let mut list_1568 = scope_1565.start_list(true, Some("item"));
        for item_1567 in var_1566 {
            #[allow(unused_mut)]
            let mut entry_1569 = list_1568.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1569, item_1567,
            )?;
        }
        list_1568.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("DryRun");
    if let Some(var_1571) = &input.dry_run {
        scope_1570.boolean(*var_1571);
    }
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("ServiceId");
    if let Some(var_1573) = &input.service_id {
        scope_1572.string(var_1573);
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("VpcEndpointId");
    if let Some(var_1575) = &input.vpc_endpoint_id {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1577) = &input.connection_notification_arn {
        scope_1576.string(var_1577);
    }
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("ConnectionEvents");
    if let Some(var_1579) = &input.connection_events {
        let mut list_1581 = scope_1578.start_list(true, Some("item"));
        for item_1580 in var_1579 {
            #[allow(unused_mut)]
            let mut entry_1582 = list_1581.entry();
            entry_1582.string(item_1580);
        }
        list_1581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("ClientToken");
    if let Some(var_1584) = &input.client_token {
        scope_1583.string(var_1584);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("DryRun");
    if let Some(var_1586) = &input.dry_run {
        scope_1585.boolean(*var_1586);
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("AcceptanceRequired");
    if let Some(var_1588) = &input.acceptance_required {
        scope_1587.boolean(*var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("PrivateDnsName");
    if let Some(var_1590) = &input.private_dns_name {
        scope_1589.string(var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1592) = &input.network_load_balancer_arns {
        let mut list_1594 = scope_1591.start_list(true, Some("item"));
        for item_1593 in var_1592 {
            #[allow(unused_mut)]
            let mut entry_1595 = list_1594.entry();
            entry_1595.string(item_1593);
        }
        list_1594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1597) = &input.gateway_load_balancer_arns {
        let mut list_1599 = scope_1596.start_list(true, Some("item"));
        for item_1598 in var_1597 {
            #[allow(unused_mut)]
            let mut entry_1600 = list_1599.entry();
            entry_1600.string(item_1598);
        }
        list_1599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1602) = &input.supported_ip_address_types {
        let mut list_1604 = scope_1601.start_list(true, Some("item"));
        for item_1603 in var_1602 {
            #[allow(unused_mut)]
            let mut entry_1605 = list_1604.entry();
            entry_1605.string(item_1603);
        }
        list_1604.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("ClientToken");
    if let Some(var_1607) = &input.client_token {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("TagSpecification");
    if let Some(var_1609) = &input.tag_specifications {
        let mut list_1611 = scope_1608.start_list(true, Some("item"));
        for item_1610 in var_1609 {
            #[allow(unused_mut)]
            let mut entry_1612 = list_1611.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1612, item_1610,
            )?;
        }
        list_1611.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("DryRun");
    if let Some(var_1614) = &input.dry_run {
        scope_1613.boolean(*var_1614);
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("PeerOwnerId");
    if let Some(var_1616) = &input.peer_owner_id {
        scope_1615.string(var_1616);
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("PeerVpcId");
    if let Some(var_1618) = &input.peer_vpc_id {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("VpcId");
    if let Some(var_1620) = &input.vpc_id {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("PeerRegion");
    if let Some(var_1622) = &input.peer_region {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("TagSpecification");
    if let Some(var_1624) = &input.tag_specifications {
        let mut list_1626 = scope_1623.start_list(true, Some("item"));
        for item_1625 in var_1624 {
            #[allow(unused_mut)]
            let mut entry_1627 = list_1626.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1627, item_1625,
            )?;
        }
        list_1626.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("CustomerGatewayId");
    if let Some(var_1629) = &input.customer_gateway_id {
        scope_1628.string(var_1629);
    }
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("Type");
    if let Some(var_1631) = &input.r#type {
        scope_1630.string(var_1631);
    }
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("VpnGatewayId");
    if let Some(var_1633) = &input.vpn_gateway_id {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("TransitGatewayId");
    if let Some(var_1635) = &input.transit_gateway_id {
        scope_1634.string(var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("DryRun");
    if let Some(var_1637) = &input.dry_run {
        scope_1636.boolean(*var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("Options");
    if let Some(var_1639) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1638, var_1639,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("TagSpecification");
    if let Some(var_1641) = &input.tag_specifications {
        let mut list_1643 = scope_1640.start_list(true, Some("item"));
        for item_1642 in var_1641 {
            #[allow(unused_mut)]
            let mut entry_1644 = list_1643.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1644, item_1642,
            )?;
        }
        list_1643.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1645 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1646) = &input.destination_cidr_block {
        scope_1645.string(var_1646);
    }
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("VpnConnectionId");
    if let Some(var_1648) = &input.vpn_connection_id {
        scope_1647.string(var_1648);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("AvailabilityZone");
    if let Some(var_1650) = &input.availability_zone {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("Type");
    if let Some(var_1652) = &input.r#type {
        scope_1651.string(var_1652.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("TagSpecification");
    if let Some(var_1654) = &input.tag_specifications {
        let mut list_1656 = scope_1653.start_list(true, Some("item"));
        for item_1655 in var_1654 {
            #[allow(unused_mut)]
            let mut entry_1657 = list_1656.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1657, item_1655,
            )?;
        }
        list_1656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("AmazonSideAsn");
    if let Some(var_1659) = &input.amazon_side_asn {
        scope_1658.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1659).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("DryRun");
    if let Some(var_1661) = &input.dry_run {
        scope_1660.boolean(*var_1661);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("CarrierGatewayId");
    if let Some(var_1663) = &input.carrier_gateway_id {
        scope_1662.string(var_1663);
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("DryRun");
    if let Some(var_1665) = &input.dry_run {
        scope_1664.boolean(*var_1665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1667) = &input.client_vpn_endpoint_id {
        scope_1666.string(var_1667);
    }
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("DryRun");
    if let Some(var_1669) = &input.dry_run {
        scope_1668.boolean(*var_1669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1671) = &input.client_vpn_endpoint_id {
        scope_1670.string(var_1671);
    }
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1673) = &input.target_vpc_subnet_id {
        scope_1672.string(var_1673);
    }
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1675) = &input.destination_cidr_block {
        scope_1674.string(var_1675);
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("DryRun");
    if let Some(var_1677) = &input.dry_run {
        scope_1676.boolean(*var_1677);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("CustomerGatewayId");
    if let Some(var_1679) = &input.customer_gateway_id {
        scope_1678.string(var_1679);
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("DryRun");
    if let Some(var_1681) = &input.dry_run {
        scope_1680.boolean(*var_1681);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("DhcpOptionsId");
    if let Some(var_1683) = &input.dhcp_options_id {
        scope_1682.string(var_1683);
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("DryRun");
    if let Some(var_1685) = &input.dry_run {
        scope_1684.boolean(*var_1685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DryRun");
    if let Some(var_1687) = &input.dry_run {
        scope_1686.boolean(*var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1689) = &input.egress_only_internet_gateway_id {
        scope_1688.string(var_1689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("DryRun");
    if let Some(var_1691) = &input.dry_run {
        scope_1690.boolean(*var_1691);
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("FleetId");
    if let Some(var_1693) = &input.fleet_ids {
        let mut list_1695 = scope_1692.start_list(true, None);
        for item_1694 in var_1693 {
            #[allow(unused_mut)]
            let mut entry_1696 = list_1695.entry();
            entry_1696.string(item_1694);
        }
        list_1695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("TerminateInstances");
    if let Some(var_1698) = &input.terminate_instances {
        scope_1697.boolean(*var_1698);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("DryRun");
    if let Some(var_1700) = &input.dry_run {
        scope_1699.boolean(*var_1700);
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("FlowLogId");
    if let Some(var_1702) = &input.flow_log_ids {
        let mut list_1704 = scope_1701.start_list(true, Some("item"));
        for item_1703 in var_1702 {
            #[allow(unused_mut)]
            let mut entry_1705 = list_1704.entry();
            entry_1705.string(item_1703);
        }
        list_1704.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("DryRun");
    if let Some(var_1707) = &input.dry_run {
        scope_1706.boolean(*var_1707);
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("FpgaImageId");
    if let Some(var_1709) = &input.fpga_image_id {
        scope_1708.string(var_1709);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("DryRun");
    if let Some(var_1711) = &input.dry_run {
        scope_1710.boolean(*var_1711);
    }
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("ForceDelete");
    if let Some(var_1713) = &input.force_delete {
        scope_1712.boolean(*var_1713);
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1715) = &input.instance_event_window_id {
        scope_1714.string(var_1715);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("DryRun");
    if let Some(var_1717) = &input.dry_run {
        scope_1716.boolean(*var_1717);
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("InternetGatewayId");
    if let Some(var_1719) = &input.internet_gateway_id {
        scope_1718.string(var_1719);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("DryRun");
    if let Some(var_1721) = &input.dry_run {
        scope_1720.boolean(*var_1721);
    }
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("IpamId");
    if let Some(var_1723) = &input.ipam_id {
        scope_1722.string(var_1723);
    }
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("Cascade");
    if let Some(var_1725) = &input.cascade {
        scope_1724.boolean(*var_1725);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("DryRun");
    if let Some(var_1727) = &input.dry_run {
        scope_1726.boolean(*var_1727);
    }
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("IpamPoolId");
    if let Some(var_1729) = &input.ipam_pool_id {
        scope_1728.string(var_1729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1730 = writer.prefix("DryRun");
    if let Some(var_1731) = &input.dry_run {
        scope_1730.boolean(*var_1731);
    }
    #[allow(unused_mut)]
    let mut scope_1732 = writer.prefix("IpamScopeId");
    if let Some(var_1733) = &input.ipam_scope_id {
        scope_1732.string(var_1733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1734 = writer.prefix("KeyName");
    if let Some(var_1735) = &input.key_name {
        scope_1734.string(var_1735);
    }
    #[allow(unused_mut)]
    let mut scope_1736 = writer.prefix("KeyPairId");
    if let Some(var_1737) = &input.key_pair_id {
        scope_1736.string(var_1737);
    }
    #[allow(unused_mut)]
    let mut scope_1738 = writer.prefix("DryRun");
    if let Some(var_1739) = &input.dry_run {
        scope_1738.boolean(*var_1739);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("DryRun");
    if let Some(var_1741) = &input.dry_run {
        scope_1740.boolean(*var_1741);
    }
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("LaunchTemplateId");
    if let Some(var_1743) = &input.launch_template_id {
        scope_1742.string(var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("LaunchTemplateName");
    if let Some(var_1745) = &input.launch_template_name {
        scope_1744.string(var_1745);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("DryRun");
    if let Some(var_1747) = &input.dry_run {
        scope_1746.boolean(*var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("LaunchTemplateId");
    if let Some(var_1749) = &input.launch_template_id {
        scope_1748.string(var_1749);
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("LaunchTemplateName");
    if let Some(var_1751) = &input.launch_template_name {
        scope_1750.string(var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1753) = &input.versions {
        let mut list_1755 = scope_1752.start_list(true, Some("item"));
        for item_1754 in var_1753 {
            #[allow(unused_mut)]
            let mut entry_1756 = list_1755.entry();
            entry_1756.string(item_1754);
        }
        list_1755.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1758) = &input.destination_cidr_block {
        scope_1757.string(var_1758);
    }
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1760) = &input.local_gateway_route_table_id {
        scope_1759.string(var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("DryRun");
    if let Some(var_1762) = &input.dry_run {
        scope_1761.boolean(*var_1762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1764) = &input.local_gateway_route_table_vpc_association_id {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("DryRun");
    if let Some(var_1766) = &input.dry_run {
        scope_1765.boolean(*var_1766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("DryRun");
    if let Some(var_1768) = &input.dry_run {
        scope_1767.boolean(*var_1768);
    }
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("PrefixListId");
    if let Some(var_1770) = &input.prefix_list_id {
        scope_1769.string(var_1770);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("DryRun");
    if let Some(var_1772) = &input.dry_run {
        scope_1771.boolean(*var_1772);
    }
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("NatGatewayId");
    if let Some(var_1774) = &input.nat_gateway_id {
        scope_1773.string(var_1774);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("DryRun");
    if let Some(var_1776) = &input.dry_run {
        scope_1775.boolean(*var_1776);
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("NetworkAclId");
    if let Some(var_1778) = &input.network_acl_id {
        scope_1777.string(var_1778);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("DryRun");
    if let Some(var_1780) = &input.dry_run {
        scope_1779.boolean(*var_1780);
    }
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("Egress");
    if let Some(var_1782) = &input.egress {
        scope_1781.boolean(*var_1782);
    }
    #[allow(unused_mut)]
    let mut scope_1783 = writer.prefix("NetworkAclId");
    if let Some(var_1784) = &input.network_acl_id {
        scope_1783.string(var_1784);
    }
    #[allow(unused_mut)]
    let mut scope_1785 = writer.prefix("RuleNumber");
    if let Some(var_1786) = &input.rule_number {
        scope_1785.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1786).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1787 = writer.prefix("DryRun");
    if let Some(var_1788) = &input.dry_run {
        scope_1787.boolean(*var_1788);
    }
    #[allow(unused_mut)]
    let mut scope_1789 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1790) = &input.network_insights_access_scope_id {
        scope_1789.string(var_1790);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1792) = &input.network_insights_access_scope_analysis_id {
        scope_1791.string(var_1792);
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("DryRun");
    if let Some(var_1794) = &input.dry_run {
        scope_1793.boolean(*var_1794);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("DryRun");
    if let Some(var_1796) = &input.dry_run {
        scope_1795.boolean(*var_1796);
    }
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1798) = &input.network_insights_analysis_id {
        scope_1797.string(var_1798);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("DryRun");
    if let Some(var_1800) = &input.dry_run {
        scope_1799.boolean(*var_1800);
    }
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1802) = &input.network_insights_path_id {
        scope_1801.string(var_1802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("DryRun");
    if let Some(var_1804) = &input.dry_run {
        scope_1803.boolean(*var_1804);
    }
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1806) = &input.network_interface_id {
        scope_1805.string(var_1806);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1808) = &input.network_interface_permission_id {
        scope_1807.string(var_1808);
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("Force");
    if let Some(var_1810) = &input.force {
        scope_1809.boolean(*var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("DryRun");
    if let Some(var_1812) = &input.dry_run {
        scope_1811.boolean(*var_1812);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("DryRun");
    if let Some(var_1814) = &input.dry_run {
        scope_1813.boolean(*var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("GroupName");
    if let Some(var_1816) = &input.group_name {
        scope_1815.string(var_1816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DryRun");
    if let Some(var_1818) = &input.dry_run {
        scope_1817.boolean(*var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("PoolId");
    if let Some(var_1820) = &input.pool_id {
        scope_1819.string(var_1820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("DryRun");
    if let Some(var_1822) = &input.dry_run {
        scope_1821.boolean(*var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("ReservedInstancesId");
    if let Some(var_1824) = &input.reserved_instances_ids {
        let mut list_1826 = scope_1823.start_list(true, Some("item"));
        for item_1825 in var_1824 {
            #[allow(unused_mut)]
            let mut entry_1827 = list_1826.entry();
            entry_1827.string(item_1825);
        }
        list_1826.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1828 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1829) = &input.destination_cidr_block {
        scope_1828.string(var_1829);
    }
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1831) = &input.destination_ipv6_cidr_block {
        scope_1830.string(var_1831);
    }
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1833) = &input.destination_prefix_list_id {
        scope_1832.string(var_1833);
    }
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("DryRun");
    if let Some(var_1835) = &input.dry_run {
        scope_1834.boolean(*var_1835);
    }
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("RouteTableId");
    if let Some(var_1837) = &input.route_table_id {
        scope_1836.string(var_1837);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1838 = writer.prefix("DryRun");
    if let Some(var_1839) = &input.dry_run {
        scope_1838.boolean(*var_1839);
    }
    #[allow(unused_mut)]
    let mut scope_1840 = writer.prefix("RouteTableId");
    if let Some(var_1841) = &input.route_table_id {
        scope_1840.string(var_1841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("GroupId");
    if let Some(var_1843) = &input.group_id {
        scope_1842.string(var_1843);
    }
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("GroupName");
    if let Some(var_1845) = &input.group_name {
        scope_1844.string(var_1845);
    }
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("DryRun");
    if let Some(var_1847) = &input.dry_run {
        scope_1846.boolean(*var_1847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1848 = writer.prefix("SnapshotId");
    if let Some(var_1849) = &input.snapshot_id {
        scope_1848.string(var_1849);
    }
    #[allow(unused_mut)]
    let mut scope_1850 = writer.prefix("DryRun");
    if let Some(var_1851) = &input.dry_run {
        scope_1850.boolean(*var_1851);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1852 = writer.prefix("DryRun");
    if let Some(var_1853) = &input.dry_run {
        scope_1852.boolean(*var_1853);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("SubnetId");
    if let Some(var_1855) = &input.subnet_id {
        scope_1854.string(var_1855);
    }
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("DryRun");
    if let Some(var_1857) = &input.dry_run {
        scope_1856.boolean(*var_1857);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1859) = &input.subnet_cidr_reservation_id {
        scope_1858.string(var_1859);
    }
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("DryRun");
    if let Some(var_1861) = &input.dry_run {
        scope_1860.boolean(*var_1861);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("DryRun");
    if let Some(var_1863) = &input.dry_run {
        scope_1862.boolean(*var_1863);
    }
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("ResourceId");
    if let Some(var_1865) = &input.resources {
        let mut list_1867 = scope_1864.start_list(true, None);
        for item_1866 in var_1865 {
            #[allow(unused_mut)]
            let mut entry_1868 = list_1867.entry();
            entry_1868.string(item_1866);
        }
        list_1867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("Tag");
    if let Some(var_1870) = &input.tags {
        let mut list_1872 = scope_1869.start_list(true, Some("item"));
        for item_1871 in var_1870 {
            #[allow(unused_mut)]
            let mut entry_1873 = list_1872.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1873, item_1871)?;
        }
        list_1872.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1874 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1875) = &input.traffic_mirror_filter_id {
        scope_1874.string(var_1875);
    }
    #[allow(unused_mut)]
    let mut scope_1876 = writer.prefix("DryRun");
    if let Some(var_1877) = &input.dry_run {
        scope_1876.boolean(*var_1877);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1878 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1879) = &input.traffic_mirror_filter_rule_id {
        scope_1878.string(var_1879);
    }
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("DryRun");
    if let Some(var_1881) = &input.dry_run {
        scope_1880.boolean(*var_1881);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1883) = &input.traffic_mirror_session_id {
        scope_1882.string(var_1883);
    }
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("DryRun");
    if let Some(var_1885) = &input.dry_run {
        scope_1884.boolean(*var_1885);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1887) = &input.traffic_mirror_target_id {
        scope_1886.string(var_1887);
    }
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("DryRun");
    if let Some(var_1889) = &input.dry_run {
        scope_1888.boolean(*var_1889);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("TransitGatewayId");
    if let Some(var_1891) = &input.transit_gateway_id {
        scope_1890.string(var_1891);
    }
    #[allow(unused_mut)]
    let mut scope_1892 = writer.prefix("DryRun");
    if let Some(var_1893) = &input.dry_run {
        scope_1892.boolean(*var_1893);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1894 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1895) = &input.transit_gateway_attachment_id {
        scope_1894.string(var_1895);
    }
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("DryRun");
    if let Some(var_1897) = &input.dry_run {
        scope_1896.boolean(*var_1897);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1899) = &input.transit_gateway_connect_peer_id {
        scope_1898.string(var_1899);
    }
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("DryRun");
    if let Some(var_1901) = &input.dry_run {
        scope_1900.boolean(*var_1901);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1903) = &input.transit_gateway_multicast_domain_id {
        scope_1902.string(var_1903);
    }
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("DryRun");
    if let Some(var_1905) = &input.dry_run {
        scope_1904.boolean(*var_1905);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1907) = &input.transit_gateway_attachment_id {
        scope_1906.string(var_1907);
    }
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("DryRun");
    if let Some(var_1909) = &input.dry_run {
        scope_1908.boolean(*var_1909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1911) = &input.transit_gateway_route_table_id {
        scope_1910.string(var_1911);
    }
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("PrefixListId");
    if let Some(var_1913) = &input.prefix_list_id {
        scope_1912.string(var_1913);
    }
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("DryRun");
    if let Some(var_1915) = &input.dry_run {
        scope_1914.boolean(*var_1915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1916 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1917) = &input.transit_gateway_route_table_id {
        scope_1916.string(var_1917);
    }
    #[allow(unused_mut)]
    let mut scope_1918 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1919) = &input.destination_cidr_block {
        scope_1918.string(var_1919);
    }
    #[allow(unused_mut)]
    let mut scope_1920 = writer.prefix("DryRun");
    if let Some(var_1921) = &input.dry_run {
        scope_1920.boolean(*var_1921);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1922 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1923) = &input.transit_gateway_route_table_id {
        scope_1922.string(var_1923);
    }
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("DryRun");
    if let Some(var_1925) = &input.dry_run {
        scope_1924.boolean(*var_1925);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1927) = &input.transit_gateway_attachment_id {
        scope_1926.string(var_1927);
    }
    #[allow(unused_mut)]
    let mut scope_1928 = writer.prefix("DryRun");
    if let Some(var_1929) = &input.dry_run {
        scope_1928.boolean(*var_1929);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1930 = writer.prefix("VolumeId");
    if let Some(var_1931) = &input.volume_id {
        scope_1930.string(var_1931);
    }
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("DryRun");
    if let Some(var_1933) = &input.dry_run {
        scope_1932.boolean(*var_1933);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("VpcId");
    if let Some(var_1935) = &input.vpc_id {
        scope_1934.string(var_1935);
    }
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("DryRun");
    if let Some(var_1937) = &input.dry_run {
        scope_1936.boolean(*var_1937);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("DryRun");
    if let Some(var_1939) = &input.dry_run {
        scope_1938.boolean(*var_1939);
    }
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1941) = &input.connection_notification_ids {
        let mut list_1943 = scope_1940.start_list(true, Some("item"));
        for item_1942 in var_1941 {
            #[allow(unused_mut)]
            let mut entry_1944 = list_1943.entry();
            entry_1944.string(item_1942);
        }
        list_1943.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("DryRun");
    if let Some(var_1946) = &input.dry_run {
        scope_1945.boolean(*var_1946);
    }
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("VpcEndpointId");
    if let Some(var_1948) = &input.vpc_endpoint_ids {
        let mut list_1950 = scope_1947.start_list(true, Some("item"));
        for item_1949 in var_1948 {
            #[allow(unused_mut)]
            let mut entry_1951 = list_1950.entry();
            entry_1951.string(item_1949);
        }
        list_1950.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("DryRun");
    if let Some(var_1953) = &input.dry_run {
        scope_1952.boolean(*var_1953);
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("ServiceId");
    if let Some(var_1955) = &input.service_ids {
        let mut list_1957 = scope_1954.start_list(true, Some("item"));
        for item_1956 in var_1955 {
            #[allow(unused_mut)]
            let mut entry_1958 = list_1957.entry();
            entry_1958.string(item_1956);
        }
        list_1957.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1959 = writer.prefix("DryRun");
    if let Some(var_1960) = &input.dry_run {
        scope_1959.boolean(*var_1960);
    }
    #[allow(unused_mut)]
    let mut scope_1961 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1962) = &input.vpc_peering_connection_id {
        scope_1961.string(var_1962);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("VpnConnectionId");
    if let Some(var_1964) = &input.vpn_connection_id {
        scope_1963.string(var_1964);
    }
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("DryRun");
    if let Some(var_1966) = &input.dry_run {
        scope_1965.boolean(*var_1966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1967 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1968) = &input.destination_cidr_block {
        scope_1967.string(var_1968);
    }
    #[allow(unused_mut)]
    let mut scope_1969 = writer.prefix("VpnConnectionId");
    if let Some(var_1970) = &input.vpn_connection_id {
        scope_1969.string(var_1970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1971 = writer.prefix("VpnGatewayId");
    if let Some(var_1972) = &input.vpn_gateway_id {
        scope_1971.string(var_1972);
    }
    #[allow(unused_mut)]
    let mut scope_1973 = writer.prefix("DryRun");
    if let Some(var_1974) = &input.dry_run {
        scope_1973.boolean(*var_1974);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1975 = writer.prefix("Cidr");
    if let Some(var_1976) = &input.cidr {
        scope_1975.string(var_1976);
    }
    #[allow(unused_mut)]
    let mut scope_1977 = writer.prefix("DryRun");
    if let Some(var_1978) = &input.dry_run {
        scope_1977.boolean(*var_1978);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1979 = writer.prefix("DryRun");
    if let Some(var_1980) = &input.dry_run {
        scope_1979.boolean(*var_1980);
    }
    #[allow(unused_mut)]
    let mut scope_1981 = writer.prefix("IpamPoolId");
    if let Some(var_1982) = &input.ipam_pool_id {
        scope_1981.string(var_1982);
    }
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("Cidr");
    if let Some(var_1984) = &input.cidr {
        scope_1983.string(var_1984);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("DryRun");
    if let Some(var_1986) = &input.dry_run {
        scope_1985.boolean(*var_1986);
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("PoolId");
    if let Some(var_1988) = &input.pool_id {
        scope_1987.string(var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("Cidr");
    if let Some(var_1990) = &input.cidr {
        scope_1989.string(var_1990);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1991 = writer.prefix("ImageId");
    if let Some(var_1992) = &input.image_id {
        scope_1991.string(var_1992);
    }
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("DryRun");
    if let Some(var_1994) = &input.dry_run {
        scope_1993.boolean(*var_1994);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("DryRun");
    if let Some(var_1996) = &input.dry_run {
        scope_1995.boolean(*var_1996);
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1998) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_1997, var_1998)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2000) = &input.transit_gateway_multicast_domain_id {
        scope_1999.string(var_2000);
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("GroupIpAddress");
    if let Some(var_2002) = &input.group_ip_address {
        scope_2001.string(var_2002);
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2004) = &input.network_interface_ids {
        let mut list_2006 = scope_2003.start_list(true, Some("item"));
        for item_2005 in var_2004 {
            #[allow(unused_mut)]
            let mut entry_2007 = list_2006.entry();
            entry_2007.string(item_2005);
        }
        list_2006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2008 = writer.prefix("DryRun");
    if let Some(var_2009) = &input.dry_run {
        scope_2008.boolean(*var_2009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2011) = &input.transit_gateway_multicast_domain_id {
        scope_2010.string(var_2011);
    }
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("GroupIpAddress");
    if let Some(var_2013) = &input.group_ip_address {
        scope_2012.string(var_2013);
    }
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2015) = &input.network_interface_ids {
        let mut list_2017 = scope_2014.start_list(true, Some("item"));
        for item_2016 in var_2015 {
            #[allow(unused_mut)]
            let mut entry_2018 = list_2017.entry();
            entry_2018.string(item_2016);
        }
        list_2017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("DryRun");
    if let Some(var_2020) = &input.dry_run {
        scope_2019.boolean(*var_2020);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("AttributeName");
    if let Some(var_2022) = &input.attribute_names {
        let mut list_2024 = scope_2021.start_list(true, Some("attributeName"));
        for item_2023 in var_2022 {
            #[allow(unused_mut)]
            let mut entry_2025 = list_2024.entry();
            entry_2025.string(item_2023.as_str());
        }
        list_2024.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2026 = writer.prefix("DryRun");
    if let Some(var_2027) = &input.dry_run {
        scope_2026.boolean(*var_2027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2028 = writer.prefix("Filter");
    if let Some(var_2029) = &input.filters {
        let mut list_2031 = scope_2028.start_list(true, Some("Filter"));
        for item_2030 in var_2029 {
            #[allow(unused_mut)]
            let mut entry_2032 = list_2031.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2032, item_2030)?;
        }
        list_2031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2033 = writer.prefix("PublicIp");
    if let Some(var_2034) = &input.public_ips {
        let mut list_2036 = scope_2033.start_list(true, Some("PublicIp"));
        for item_2035 in var_2034 {
            #[allow(unused_mut)]
            let mut entry_2037 = list_2036.entry();
            entry_2037.string(item_2035);
        }
        list_2036.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2038 = writer.prefix("AllocationId");
    if let Some(var_2039) = &input.allocation_ids {
        let mut list_2041 = scope_2038.start_list(true, Some("AllocationId"));
        for item_2040 in var_2039 {
            #[allow(unused_mut)]
            let mut entry_2042 = list_2041.entry();
            entry_2042.string(item_2040);
        }
        list_2041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("DryRun");
    if let Some(var_2044) = &input.dry_run {
        scope_2043.boolean(*var_2044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("AllocationId");
    if let Some(var_2046) = &input.allocation_ids {
        let mut list_2048 = scope_2045.start_list(true, Some("item"));
        for item_2047 in var_2046 {
            #[allow(unused_mut)]
            let mut entry_2049 = list_2048.entry();
            entry_2049.string(item_2047);
        }
        list_2048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2050 = writer.prefix("Attribute");
    if let Some(var_2051) = &input.attribute {
        scope_2050.string(var_2051.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2052 = writer.prefix("NextToken");
    if let Some(var_2053) = &input.next_token {
        scope_2052.string(var_2053);
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("MaxResults");
    if let Some(var_2055) = &input.max_results {
        scope_2054.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2055).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("DryRun");
    if let Some(var_2057) = &input.dry_run {
        scope_2056.boolean(*var_2057);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2058 = writer.prefix("DryRun");
    if let Some(var_2059) = &input.dry_run {
        scope_2058.boolean(*var_2059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2060 = writer.prefix("Filter");
    if let Some(var_2061) = &input.filters {
        let mut list_2063 = scope_2060.start_list(true, Some("Filter"));
        for item_2062 in var_2061 {
            #[allow(unused_mut)]
            let mut entry_2064 = list_2063.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2064, item_2062)?;
        }
        list_2063.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2065 = writer.prefix("ZoneName");
    if let Some(var_2066) = &input.zone_names {
        let mut list_2068 = scope_2065.start_list(true, Some("ZoneName"));
        for item_2067 in var_2066 {
            #[allow(unused_mut)]
            let mut entry_2069 = list_2068.entry();
            entry_2069.string(item_2067);
        }
        list_2068.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2070 = writer.prefix("ZoneId");
    if let Some(var_2071) = &input.zone_ids {
        let mut list_2073 = scope_2070.start_list(true, Some("ZoneId"));
        for item_2072 in var_2071 {
            #[allow(unused_mut)]
            let mut entry_2074 = list_2073.entry();
            entry_2074.string(item_2072);
        }
        list_2073.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2076) = &input.all_availability_zones {
        scope_2075.boolean(*var_2076);
    }
    #[allow(unused_mut)]
    let mut scope_2077 = writer.prefix("DryRun");
    if let Some(var_2078) = &input.dry_run {
        scope_2077.boolean(*var_2078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("BundleId");
    if let Some(var_2080) = &input.bundle_ids {
        let mut list_2082 = scope_2079.start_list(true, Some("BundleId"));
        for item_2081 in var_2080 {
            #[allow(unused_mut)]
            let mut entry_2083 = list_2082.entry();
            entry_2083.string(item_2081);
        }
        list_2082.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2084 = writer.prefix("Filter");
    if let Some(var_2085) = &input.filters {
        let mut list_2087 = scope_2084.start_list(true, Some("Filter"));
        for item_2086 in var_2085 {
            #[allow(unused_mut)]
            let mut entry_2088 = list_2087.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2088, item_2086)?;
        }
        list_2087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("DryRun");
    if let Some(var_2090) = &input.dry_run {
        scope_2089.boolean(*var_2090);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("DryRun");
    if let Some(var_2092) = &input.dry_run {
        scope_2091.boolean(*var_2092);
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("MaxResults");
    if let Some(var_2094) = &input.max_results {
        scope_2093.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2094).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("NextToken");
    if let Some(var_2096) = &input.next_token {
        scope_2095.string(var_2096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2098) = &input.capacity_reservation_fleet_ids {
        let mut list_2100 = scope_2097.start_list(true, Some("item"));
        for item_2099 in var_2098 {
            #[allow(unused_mut)]
            let mut entry_2101 = list_2100.entry();
            entry_2101.string(item_2099);
        }
        list_2100.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2102 = writer.prefix("NextToken");
    if let Some(var_2103) = &input.next_token {
        scope_2102.string(var_2103);
    }
    #[allow(unused_mut)]
    let mut scope_2104 = writer.prefix("MaxResults");
    if let Some(var_2105) = &input.max_results {
        scope_2104.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2105).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2106 = writer.prefix("Filter");
    if let Some(var_2107) = &input.filters {
        let mut list_2109 = scope_2106.start_list(true, Some("Filter"));
        for item_2108 in var_2107 {
            #[allow(unused_mut)]
            let mut entry_2110 = list_2109.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2110, item_2108)?;
        }
        list_2109.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2111 = writer.prefix("DryRun");
    if let Some(var_2112) = &input.dry_run {
        scope_2111.boolean(*var_2112);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2113 = writer.prefix("CapacityReservationId");
    if let Some(var_2114) = &input.capacity_reservation_ids {
        let mut list_2116 = scope_2113.start_list(true, Some("item"));
        for item_2115 in var_2114 {
            #[allow(unused_mut)]
            let mut entry_2117 = list_2116.entry();
            entry_2117.string(item_2115);
        }
        list_2116.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2118 = writer.prefix("NextToken");
    if let Some(var_2119) = &input.next_token {
        scope_2118.string(var_2119);
    }
    #[allow(unused_mut)]
    let mut scope_2120 = writer.prefix("MaxResults");
    if let Some(var_2121) = &input.max_results {
        scope_2120.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2121).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("Filter");
    if let Some(var_2123) = &input.filters {
        let mut list_2125 = scope_2122.start_list(true, Some("Filter"));
        for item_2124 in var_2123 {
            #[allow(unused_mut)]
            let mut entry_2126 = list_2125.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2126, item_2124)?;
        }
        list_2125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2127 = writer.prefix("DryRun");
    if let Some(var_2128) = &input.dry_run {
        scope_2127.boolean(*var_2128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2129 = writer.prefix("CarrierGatewayId");
    if let Some(var_2130) = &input.carrier_gateway_ids {
        let mut list_2132 = scope_2129.start_list(true, None);
        for item_2131 in var_2130 {
            #[allow(unused_mut)]
            let mut entry_2133 = list_2132.entry();
            entry_2133.string(item_2131);
        }
        list_2132.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2134 = writer.prefix("Filter");
    if let Some(var_2135) = &input.filters {
        let mut list_2137 = scope_2134.start_list(true, Some("Filter"));
        for item_2136 in var_2135 {
            #[allow(unused_mut)]
            let mut entry_2138 = list_2137.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2138, item_2136)?;
        }
        list_2137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2139 = writer.prefix("MaxResults");
    if let Some(var_2140) = &input.max_results {
        scope_2139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2141 = writer.prefix("NextToken");
    if let Some(var_2142) = &input.next_token {
        scope_2141.string(var_2142);
    }
    #[allow(unused_mut)]
    let mut scope_2143 = writer.prefix("DryRun");
    if let Some(var_2144) = &input.dry_run {
        scope_2143.boolean(*var_2144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("Filter");
    if let Some(var_2146) = &input.filters {
        let mut list_2148 = scope_2145.start_list(true, Some("Filter"));
        for item_2147 in var_2146 {
            #[allow(unused_mut)]
            let mut entry_2149 = list_2148.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2149, item_2147)?;
        }
        list_2148.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2150 = writer.prefix("DryRun");
    if let Some(var_2151) = &input.dry_run {
        scope_2150.boolean(*var_2151);
    }
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("InstanceId");
    if let Some(var_2153) = &input.instance_ids {
        let mut list_2155 = scope_2152.start_list(true, Some("InstanceId"));
        for item_2154 in var_2153 {
            #[allow(unused_mut)]
            let mut entry_2156 = list_2155.entry();
            entry_2156.string(item_2154);
        }
        list_2155.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2157 = writer.prefix("MaxResults");
    if let Some(var_2158) = &input.max_results {
        scope_2157.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2158).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("NextToken");
    if let Some(var_2160) = &input.next_token {
        scope_2159.string(var_2160);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2162) = &input.client_vpn_endpoint_id {
        scope_2161.string(var_2162);
    }
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("DryRun");
    if let Some(var_2164) = &input.dry_run {
        scope_2163.boolean(*var_2164);
    }
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("NextToken");
    if let Some(var_2166) = &input.next_token {
        scope_2165.string(var_2166);
    }
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("Filter");
    if let Some(var_2168) = &input.filters {
        let mut list_2170 = scope_2167.start_list(true, Some("Filter"));
        for item_2169 in var_2168 {
            #[allow(unused_mut)]
            let mut entry_2171 = list_2170.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2171, item_2169)?;
        }
        list_2170.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2172 = writer.prefix("MaxResults");
    if let Some(var_2173) = &input.max_results {
        scope_2172.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2173).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2174 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2175) = &input.client_vpn_endpoint_id {
        scope_2174.string(var_2175);
    }
    #[allow(unused_mut)]
    let mut scope_2176 = writer.prefix("Filter");
    if let Some(var_2177) = &input.filters {
        let mut list_2179 = scope_2176.start_list(true, Some("Filter"));
        for item_2178 in var_2177 {
            #[allow(unused_mut)]
            let mut entry_2180 = list_2179.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2180, item_2178)?;
        }
        list_2179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("NextToken");
    if let Some(var_2182) = &input.next_token {
        scope_2181.string(var_2182);
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("MaxResults");
    if let Some(var_2184) = &input.max_results {
        scope_2183.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2184).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("DryRun");
    if let Some(var_2186) = &input.dry_run {
        scope_2185.boolean(*var_2186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2187 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2188) = &input.client_vpn_endpoint_ids {
        let mut list_2190 = scope_2187.start_list(true, Some("item"));
        for item_2189 in var_2188 {
            #[allow(unused_mut)]
            let mut entry_2191 = list_2190.entry();
            entry_2191.string(item_2189);
        }
        list_2190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("MaxResults");
    if let Some(var_2193) = &input.max_results {
        scope_2192.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2193).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("NextToken");
    if let Some(var_2195) = &input.next_token {
        scope_2194.string(var_2195);
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("Filter");
    if let Some(var_2197) = &input.filters {
        let mut list_2199 = scope_2196.start_list(true, Some("Filter"));
        for item_2198 in var_2197 {
            #[allow(unused_mut)]
            let mut entry_2200 = list_2199.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2200, item_2198)?;
        }
        list_2199.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2201 = writer.prefix("DryRun");
    if let Some(var_2202) = &input.dry_run {
        scope_2201.boolean(*var_2202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2204) = &input.client_vpn_endpoint_id {
        scope_2203.string(var_2204);
    }
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("Filter");
    if let Some(var_2206) = &input.filters {
        let mut list_2208 = scope_2205.start_list(true, Some("Filter"));
        for item_2207 in var_2206 {
            #[allow(unused_mut)]
            let mut entry_2209 = list_2208.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2209, item_2207)?;
        }
        list_2208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2210 = writer.prefix("MaxResults");
    if let Some(var_2211) = &input.max_results {
        scope_2210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2212 = writer.prefix("NextToken");
    if let Some(var_2213) = &input.next_token {
        scope_2212.string(var_2213);
    }
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("DryRun");
    if let Some(var_2215) = &input.dry_run {
        scope_2214.boolean(*var_2215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2217) = &input.client_vpn_endpoint_id {
        scope_2216.string(var_2217);
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("AssociationIds");
    if let Some(var_2219) = &input.association_ids {
        let mut list_2221 = scope_2218.start_list(true, Some("item"));
        for item_2220 in var_2219 {
            #[allow(unused_mut)]
            let mut entry_2222 = list_2221.entry();
            entry_2222.string(item_2220);
        }
        list_2221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2223 = writer.prefix("MaxResults");
    if let Some(var_2224) = &input.max_results {
        scope_2223.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2224).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2225 = writer.prefix("NextToken");
    if let Some(var_2226) = &input.next_token {
        scope_2225.string(var_2226);
    }
    #[allow(unused_mut)]
    let mut scope_2227 = writer.prefix("Filter");
    if let Some(var_2228) = &input.filters {
        let mut list_2230 = scope_2227.start_list(true, Some("Filter"));
        for item_2229 in var_2228 {
            #[allow(unused_mut)]
            let mut entry_2231 = list_2230.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2231, item_2229)?;
        }
        list_2230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2232 = writer.prefix("DryRun");
    if let Some(var_2233) = &input.dry_run {
        scope_2232.boolean(*var_2233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2234 = writer.prefix("PoolId");
    if let Some(var_2235) = &input.pool_ids {
        let mut list_2237 = scope_2234.start_list(true, Some("item"));
        for item_2236 in var_2235 {
            #[allow(unused_mut)]
            let mut entry_2238 = list_2237.entry();
            entry_2238.string(item_2236);
        }
        list_2237.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2239 = writer.prefix("Filter");
    if let Some(var_2240) = &input.filters {
        let mut list_2242 = scope_2239.start_list(true, Some("Filter"));
        for item_2241 in var_2240 {
            #[allow(unused_mut)]
            let mut entry_2243 = list_2242.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2243, item_2241)?;
        }
        list_2242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2244 = writer.prefix("MaxResults");
    if let Some(var_2245) = &input.max_results {
        scope_2244.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2246 = writer.prefix("NextToken");
    if let Some(var_2247) = &input.next_token {
        scope_2246.string(var_2247);
    }
    #[allow(unused_mut)]
    let mut scope_2248 = writer.prefix("DryRun");
    if let Some(var_2249) = &input.dry_run {
        scope_2248.boolean(*var_2249);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2250 = writer.prefix("ConversionTaskId");
    if let Some(var_2251) = &input.conversion_task_ids {
        let mut list_2253 = scope_2250.start_list(true, Some("item"));
        for item_2252 in var_2251 {
            #[allow(unused_mut)]
            let mut entry_2254 = list_2253.entry();
            entry_2254.string(item_2252);
        }
        list_2253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2255 = writer.prefix("DryRun");
    if let Some(var_2256) = &input.dry_run {
        scope_2255.boolean(*var_2256);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2257 = writer.prefix("CustomerGatewayId");
    if let Some(var_2258) = &input.customer_gateway_ids {
        let mut list_2260 = scope_2257.start_list(true, Some("CustomerGatewayId"));
        for item_2259 in var_2258 {
            #[allow(unused_mut)]
            let mut entry_2261 = list_2260.entry();
            entry_2261.string(item_2259);
        }
        list_2260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2262 = writer.prefix("Filter");
    if let Some(var_2263) = &input.filters {
        let mut list_2265 = scope_2262.start_list(true, Some("Filter"));
        for item_2264 in var_2263 {
            #[allow(unused_mut)]
            let mut entry_2266 = list_2265.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2266, item_2264)?;
        }
        list_2265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2267 = writer.prefix("DryRun");
    if let Some(var_2268) = &input.dry_run {
        scope_2267.boolean(*var_2268);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2269 = writer.prefix("DhcpOptionsId");
    if let Some(var_2270) = &input.dhcp_options_ids {
        let mut list_2272 = scope_2269.start_list(true, Some("DhcpOptionsId"));
        for item_2271 in var_2270 {
            #[allow(unused_mut)]
            let mut entry_2273 = list_2272.entry();
            entry_2273.string(item_2271);
        }
        list_2272.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("Filter");
    if let Some(var_2275) = &input.filters {
        let mut list_2277 = scope_2274.start_list(true, Some("Filter"));
        for item_2276 in var_2275 {
            #[allow(unused_mut)]
            let mut entry_2278 = list_2277.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2278, item_2276)?;
        }
        list_2277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2279 = writer.prefix("DryRun");
    if let Some(var_2280) = &input.dry_run {
        scope_2279.boolean(*var_2280);
    }
    #[allow(unused_mut)]
    let mut scope_2281 = writer.prefix("NextToken");
    if let Some(var_2282) = &input.next_token {
        scope_2281.string(var_2282);
    }
    #[allow(unused_mut)]
    let mut scope_2283 = writer.prefix("MaxResults");
    if let Some(var_2284) = &input.max_results {
        scope_2283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2284).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2285 = writer.prefix("DryRun");
    if let Some(var_2286) = &input.dry_run {
        scope_2285.boolean(*var_2286);
    }
    #[allow(unused_mut)]
    let mut scope_2287 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2288) = &input.egress_only_internet_gateway_ids {
        let mut list_2290 = scope_2287.start_list(true, Some("item"));
        for item_2289 in var_2288 {
            #[allow(unused_mut)]
            let mut entry_2291 = list_2290.entry();
            entry_2291.string(item_2289);
        }
        list_2290.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2292 = writer.prefix("MaxResults");
    if let Some(var_2293) = &input.max_results {
        scope_2292.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2293).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2294 = writer.prefix("NextToken");
    if let Some(var_2295) = &input.next_token {
        scope_2294.string(var_2295);
    }
    #[allow(unused_mut)]
    let mut scope_2296 = writer.prefix("Filter");
    if let Some(var_2297) = &input.filters {
        let mut list_2299 = scope_2296.start_list(true, Some("Filter"));
        for item_2298 in var_2297 {
            #[allow(unused_mut)]
            let mut entry_2300 = list_2299.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2300, item_2298)?;
        }
        list_2299.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2301 = writer.prefix("ElasticGpuId");
    if let Some(var_2302) = &input.elastic_gpu_ids {
        let mut list_2304 = scope_2301.start_list(true, Some("item"));
        for item_2303 in var_2302 {
            #[allow(unused_mut)]
            let mut entry_2305 = list_2304.entry();
            entry_2305.string(item_2303);
        }
        list_2304.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("DryRun");
    if let Some(var_2307) = &input.dry_run {
        scope_2306.boolean(*var_2307);
    }
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("Filter");
    if let Some(var_2309) = &input.filters {
        let mut list_2311 = scope_2308.start_list(true, Some("Filter"));
        for item_2310 in var_2309 {
            #[allow(unused_mut)]
            let mut entry_2312 = list_2311.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2312, item_2310)?;
        }
        list_2311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2313 = writer.prefix("MaxResults");
    if let Some(var_2314) = &input.max_results {
        scope_2313.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2314).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2315 = writer.prefix("NextToken");
    if let Some(var_2316) = &input.next_token {
        scope_2315.string(var_2316);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2317 = writer.prefix("DryRun");
    if let Some(var_2318) = &input.dry_run {
        scope_2317.boolean(*var_2318);
    }
    #[allow(unused_mut)]
    let mut scope_2319 = writer.prefix("Filter");
    if let Some(var_2320) = &input.filters {
        let mut list_2322 = scope_2319.start_list(true, Some("Filter"));
        for item_2321 in var_2320 {
            #[allow(unused_mut)]
            let mut entry_2323 = list_2322.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2323, item_2321)?;
        }
        list_2322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2324 = writer.prefix("ExportImageTaskId");
    if let Some(var_2325) = &input.export_image_task_ids {
        let mut list_2327 = scope_2324.start_list(true, Some("ExportImageTaskId"));
        for item_2326 in var_2325 {
            #[allow(unused_mut)]
            let mut entry_2328 = list_2327.entry();
            entry_2328.string(item_2326);
        }
        list_2327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2329 = writer.prefix("MaxResults");
    if let Some(var_2330) = &input.max_results {
        scope_2329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2331 = writer.prefix("NextToken");
    if let Some(var_2332) = &input.next_token {
        scope_2331.string(var_2332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("ExportTaskId");
    if let Some(var_2334) = &input.export_task_ids {
        let mut list_2336 = scope_2333.start_list(true, Some("ExportTaskId"));
        for item_2335 in var_2334 {
            #[allow(unused_mut)]
            let mut entry_2337 = list_2336.entry();
            entry_2337.string(item_2335);
        }
        list_2336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2338 = writer.prefix("Filter");
    if let Some(var_2339) = &input.filters {
        let mut list_2341 = scope_2338.start_list(true, Some("Filter"));
        for item_2340 in var_2339 {
            #[allow(unused_mut)]
            let mut entry_2342 = list_2341.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2342, item_2340)?;
        }
        list_2341.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2343 = writer.prefix("ImageId");
    if let Some(var_2344) = &input.image_ids {
        let mut list_2346 = scope_2343.start_list(true, Some("ImageId"));
        for item_2345 in var_2344 {
            #[allow(unused_mut)]
            let mut entry_2347 = list_2346.entry();
            entry_2347.string(item_2345);
        }
        list_2346.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2348 = writer.prefix("Filter");
    if let Some(var_2349) = &input.filters {
        let mut list_2351 = scope_2348.start_list(true, Some("Filter"));
        for item_2350 in var_2349 {
            #[allow(unused_mut)]
            let mut entry_2352 = list_2351.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2352, item_2350)?;
        }
        list_2351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2353 = writer.prefix("MaxResults");
    if let Some(var_2354) = &input.max_results {
        scope_2353.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2354).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2355 = writer.prefix("NextToken");
    if let Some(var_2356) = &input.next_token {
        scope_2355.string(var_2356);
    }
    #[allow(unused_mut)]
    let mut scope_2357 = writer.prefix("DryRun");
    if let Some(var_2358) = &input.dry_run {
        scope_2357.boolean(*var_2358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("Filter");
    if let Some(var_2360) = &input.filters {
        let mut list_2362 = scope_2359.start_list(true, Some("Filter"));
        for item_2361 in var_2360 {
            #[allow(unused_mut)]
            let mut entry_2363 = list_2362.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2363, item_2361)?;
        }
        list_2362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2364 = writer.prefix("MaxResults");
    if let Some(var_2365) = &input.max_results {
        scope_2364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2366 = writer.prefix("NextToken");
    if let Some(var_2367) = &input.next_token {
        scope_2366.string(var_2367);
    }
    #[allow(unused_mut)]
    let mut scope_2368 = writer.prefix("DryRun");
    if let Some(var_2369) = &input.dry_run {
        scope_2368.boolean(*var_2369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("DryRun");
    if let Some(var_2371) = &input.dry_run {
        scope_2370.boolean(*var_2371);
    }
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("EventType");
    if let Some(var_2373) = &input.event_type {
        scope_2372.string(var_2373.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("MaxResults");
    if let Some(var_2375) = &input.max_results {
        scope_2374.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2375).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("NextToken");
    if let Some(var_2377) = &input.next_token {
        scope_2376.string(var_2377);
    }
    #[allow(unused_mut)]
    let mut scope_2378 = writer.prefix("FleetId");
    if let Some(var_2379) = &input.fleet_id {
        scope_2378.string(var_2379);
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("StartTime");
    if let Some(var_2381) = &input.start_time {
        scope_2380.date_time(var_2381, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("DryRun");
    if let Some(var_2383) = &input.dry_run {
        scope_2382.boolean(*var_2383);
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("MaxResults");
    if let Some(var_2385) = &input.max_results {
        scope_2384.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2385).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("NextToken");
    if let Some(var_2387) = &input.next_token {
        scope_2386.string(var_2387);
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("FleetId");
    if let Some(var_2389) = &input.fleet_id {
        scope_2388.string(var_2389);
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("Filter");
    if let Some(var_2391) = &input.filters {
        let mut list_2393 = scope_2390.start_list(true, Some("Filter"));
        for item_2392 in var_2391 {
            #[allow(unused_mut)]
            let mut entry_2394 = list_2393.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2394, item_2392)?;
        }
        list_2393.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2395 = writer.prefix("DryRun");
    if let Some(var_2396) = &input.dry_run {
        scope_2395.boolean(*var_2396);
    }
    #[allow(unused_mut)]
    let mut scope_2397 = writer.prefix("MaxResults");
    if let Some(var_2398) = &input.max_results {
        scope_2397.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2398).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2399 = writer.prefix("NextToken");
    if let Some(var_2400) = &input.next_token {
        scope_2399.string(var_2400);
    }
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("FleetId");
    if let Some(var_2402) = &input.fleet_ids {
        let mut list_2404 = scope_2401.start_list(true, None);
        for item_2403 in var_2402 {
            #[allow(unused_mut)]
            let mut entry_2405 = list_2404.entry();
            entry_2405.string(item_2403);
        }
        list_2404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2406 = writer.prefix("Filter");
    if let Some(var_2407) = &input.filters {
        let mut list_2409 = scope_2406.start_list(true, Some("Filter"));
        for item_2408 in var_2407 {
            #[allow(unused_mut)]
            let mut entry_2410 = list_2409.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2410, item_2408)?;
        }
        list_2409.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2411 = writer.prefix("DryRun");
    if let Some(var_2412) = &input.dry_run {
        scope_2411.boolean(*var_2412);
    }
    #[allow(unused_mut)]
    let mut scope_2413 = writer.prefix("Filter");
    if let Some(var_2414) = &input.filter {
        let mut list_2416 = scope_2413.start_list(true, Some("Filter"));
        for item_2415 in var_2414 {
            #[allow(unused_mut)]
            let mut entry_2417 = list_2416.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2417, item_2415)?;
        }
        list_2416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2418 = writer.prefix("FlowLogId");
    if let Some(var_2419) = &input.flow_log_ids {
        let mut list_2421 = scope_2418.start_list(true, Some("item"));
        for item_2420 in var_2419 {
            #[allow(unused_mut)]
            let mut entry_2422 = list_2421.entry();
            entry_2422.string(item_2420);
        }
        list_2421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2423 = writer.prefix("MaxResults");
    if let Some(var_2424) = &input.max_results {
        scope_2423.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2424).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2425 = writer.prefix("NextToken");
    if let Some(var_2426) = &input.next_token {
        scope_2425.string(var_2426);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2427 = writer.prefix("DryRun");
    if let Some(var_2428) = &input.dry_run {
        scope_2427.boolean(*var_2428);
    }
    #[allow(unused_mut)]
    let mut scope_2429 = writer.prefix("FpgaImageId");
    if let Some(var_2430) = &input.fpga_image_id {
        scope_2429.string(var_2430);
    }
    #[allow(unused_mut)]
    let mut scope_2431 = writer.prefix("Attribute");
    if let Some(var_2432) = &input.attribute {
        scope_2431.string(var_2432.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("DryRun");
    if let Some(var_2434) = &input.dry_run {
        scope_2433.boolean(*var_2434);
    }
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("FpgaImageId");
    if let Some(var_2436) = &input.fpga_image_ids {
        let mut list_2438 = scope_2435.start_list(true, Some("item"));
        for item_2437 in var_2436 {
            #[allow(unused_mut)]
            let mut entry_2439 = list_2438.entry();
            entry_2439.string(item_2437);
        }
        list_2438.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2440 = writer.prefix("Owner");
    if let Some(var_2441) = &input.owners {
        let mut list_2443 = scope_2440.start_list(true, Some("Owner"));
        for item_2442 in var_2441 {
            #[allow(unused_mut)]
            let mut entry_2444 = list_2443.entry();
            entry_2444.string(item_2442);
        }
        list_2443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2445 = writer.prefix("Filter");
    if let Some(var_2446) = &input.filters {
        let mut list_2448 = scope_2445.start_list(true, Some("Filter"));
        for item_2447 in var_2446 {
            #[allow(unused_mut)]
            let mut entry_2449 = list_2448.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2449, item_2447)?;
        }
        list_2448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2450 = writer.prefix("NextToken");
    if let Some(var_2451) = &input.next_token {
        scope_2450.string(var_2451);
    }
    #[allow(unused_mut)]
    let mut scope_2452 = writer.prefix("MaxResults");
    if let Some(var_2453) = &input.max_results {
        scope_2452.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2453).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("Filter");
    if let Some(var_2455) = &input.filter {
        let mut list_2457 = scope_2454.start_list(true, Some("Filter"));
        for item_2456 in var_2455 {
            #[allow(unused_mut)]
            let mut entry_2458 = list_2457.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2458, item_2456)?;
        }
        list_2457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2459 = writer.prefix("MaxDuration");
    if let Some(var_2460) = &input.max_duration {
        scope_2459.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2460).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2461 = writer.prefix("MaxResults");
    if let Some(var_2462) = &input.max_results {
        scope_2461.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2462).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("MinDuration");
    if let Some(var_2464) = &input.min_duration {
        scope_2463.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2464).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("NextToken");
    if let Some(var_2466) = &input.next_token {
        scope_2465.string(var_2466);
    }
    #[allow(unused_mut)]
    let mut scope_2467 = writer.prefix("OfferingId");
    if let Some(var_2468) = &input.offering_id {
        scope_2467.string(var_2468);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2469 = writer.prefix("Filter");
    if let Some(var_2470) = &input.filter {
        let mut list_2472 = scope_2469.start_list(true, Some("Filter"));
        for item_2471 in var_2470 {
            #[allow(unused_mut)]
            let mut entry_2473 = list_2472.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2473, item_2471)?;
        }
        list_2472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2474 = writer.prefix("HostReservationIdSet");
    if let Some(var_2475) = &input.host_reservation_id_set {
        let mut list_2477 = scope_2474.start_list(true, Some("item"));
        for item_2476 in var_2475 {
            #[allow(unused_mut)]
            let mut entry_2478 = list_2477.entry();
            entry_2478.string(item_2476);
        }
        list_2477.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2479 = writer.prefix("MaxResults");
    if let Some(var_2480) = &input.max_results {
        scope_2479.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2480).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2481 = writer.prefix("NextToken");
    if let Some(var_2482) = &input.next_token {
        scope_2481.string(var_2482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2483 = writer.prefix("Filter");
    if let Some(var_2484) = &input.filter {
        let mut list_2486 = scope_2483.start_list(true, Some("Filter"));
        for item_2485 in var_2484 {
            #[allow(unused_mut)]
            let mut entry_2487 = list_2486.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2487, item_2485)?;
        }
        list_2486.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2488 = writer.prefix("HostId");
    if let Some(var_2489) = &input.host_ids {
        let mut list_2491 = scope_2488.start_list(true, Some("item"));
        for item_2490 in var_2489 {
            #[allow(unused_mut)]
            let mut entry_2492 = list_2491.entry();
            entry_2492.string(item_2490);
        }
        list_2491.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2493 = writer.prefix("MaxResults");
    if let Some(var_2494) = &input.max_results {
        scope_2493.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2494).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2495 = writer.prefix("NextToken");
    if let Some(var_2496) = &input.next_token {
        scope_2495.string(var_2496);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2497 = writer.prefix("AssociationId");
    if let Some(var_2498) = &input.association_ids {
        let mut list_2500 = scope_2497.start_list(true, Some("AssociationId"));
        for item_2499 in var_2498 {
            #[allow(unused_mut)]
            let mut entry_2501 = list_2500.entry();
            entry_2501.string(item_2499);
        }
        list_2500.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("Filter");
    if let Some(var_2503) = &input.filters {
        let mut list_2505 = scope_2502.start_list(true, Some("Filter"));
        for item_2504 in var_2503 {
            #[allow(unused_mut)]
            let mut entry_2506 = list_2505.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2506, item_2504)?;
        }
        list_2505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2507 = writer.prefix("MaxResults");
    if let Some(var_2508) = &input.max_results {
        scope_2507.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2508).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2509 = writer.prefix("NextToken");
    if let Some(var_2510) = &input.next_token {
        scope_2509.string(var_2510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("PrincipalArn");
    if let Some(var_2512) = &input.principal_arn {
        scope_2511.string(var_2512);
    }
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("Resource");
    if let Some(var_2514) = &input.resource {
        scope_2513.string(var_2514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2515 = writer.prefix("Resource");
    if let Some(var_2516) = &input.resource {
        scope_2515.string(var_2516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("Attribute");
    if let Some(var_2518) = &input.attribute {
        scope_2517.string(var_2518.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2519 = writer.prefix("ImageId");
    if let Some(var_2520) = &input.image_id {
        scope_2519.string(var_2520);
    }
    #[allow(unused_mut)]
    let mut scope_2521 = writer.prefix("DryRun");
    if let Some(var_2522) = &input.dry_run {
        scope_2521.boolean(*var_2522);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2523 = writer.prefix("ExecutableBy");
    if let Some(var_2524) = &input.executable_users {
        let mut list_2526 = scope_2523.start_list(true, Some("ExecutableBy"));
        for item_2525 in var_2524 {
            #[allow(unused_mut)]
            let mut entry_2527 = list_2526.entry();
            entry_2527.string(item_2525);
        }
        list_2526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2528 = writer.prefix("Filter");
    if let Some(var_2529) = &input.filters {
        let mut list_2531 = scope_2528.start_list(true, Some("Filter"));
        for item_2530 in var_2529 {
            #[allow(unused_mut)]
            let mut entry_2532 = list_2531.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2532, item_2530)?;
        }
        list_2531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2533 = writer.prefix("ImageId");
    if let Some(var_2534) = &input.image_ids {
        let mut list_2536 = scope_2533.start_list(true, Some("ImageId"));
        for item_2535 in var_2534 {
            #[allow(unused_mut)]
            let mut entry_2537 = list_2536.entry();
            entry_2537.string(item_2535);
        }
        list_2536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2538 = writer.prefix("Owner");
    if let Some(var_2539) = &input.owners {
        let mut list_2541 = scope_2538.start_list(true, Some("Owner"));
        for item_2540 in var_2539 {
            #[allow(unused_mut)]
            let mut entry_2542 = list_2541.entry();
            entry_2542.string(item_2540);
        }
        list_2541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2543 = writer.prefix("IncludeDeprecated");
    if let Some(var_2544) = &input.include_deprecated {
        scope_2543.boolean(*var_2544);
    }
    #[allow(unused_mut)]
    let mut scope_2545 = writer.prefix("DryRun");
    if let Some(var_2546) = &input.dry_run {
        scope_2545.boolean(*var_2546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2547 = writer.prefix("DryRun");
    if let Some(var_2548) = &input.dry_run {
        scope_2547.boolean(*var_2548);
    }
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("Filters");
    if let Some(var_2550) = &input.filters {
        let mut list_2552 = scope_2549.start_list(true, Some("Filter"));
        for item_2551 in var_2550 {
            #[allow(unused_mut)]
            let mut entry_2553 = list_2552.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2553, item_2551)?;
        }
        list_2552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2554 = writer.prefix("ImportTaskId");
    if let Some(var_2555) = &input.import_task_ids {
        let mut list_2557 = scope_2554.start_list(true, Some("ImportTaskId"));
        for item_2556 in var_2555 {
            #[allow(unused_mut)]
            let mut entry_2558 = list_2557.entry();
            entry_2558.string(item_2556);
        }
        list_2557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2559 = writer.prefix("MaxResults");
    if let Some(var_2560) = &input.max_results {
        scope_2559.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2560).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2561 = writer.prefix("NextToken");
    if let Some(var_2562) = &input.next_token {
        scope_2561.string(var_2562);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2563 = writer.prefix("DryRun");
    if let Some(var_2564) = &input.dry_run {
        scope_2563.boolean(*var_2564);
    }
    #[allow(unused_mut)]
    let mut scope_2565 = writer.prefix("Filters");
    if let Some(var_2566) = &input.filters {
        let mut list_2568 = scope_2565.start_list(true, Some("Filter"));
        for item_2567 in var_2566 {
            #[allow(unused_mut)]
            let mut entry_2569 = list_2568.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2569, item_2567)?;
        }
        list_2568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("ImportTaskId");
    if let Some(var_2571) = &input.import_task_ids {
        let mut list_2573 = scope_2570.start_list(true, Some("ImportTaskId"));
        for item_2572 in var_2571 {
            #[allow(unused_mut)]
            let mut entry_2574 = list_2573.entry();
            entry_2574.string(item_2572);
        }
        list_2573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2575 = writer.prefix("MaxResults");
    if let Some(var_2576) = &input.max_results {
        scope_2575.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2576).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2577 = writer.prefix("NextToken");
    if let Some(var_2578) = &input.next_token {
        scope_2577.string(var_2578);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2579 = writer.prefix("Attribute");
    if let Some(var_2580) = &input.attribute {
        scope_2579.string(var_2580.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("DryRun");
    if let Some(var_2582) = &input.dry_run {
        scope_2581.boolean(*var_2582);
    }
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("InstanceId");
    if let Some(var_2584) = &input.instance_id {
        scope_2583.string(var_2584);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("DryRun");
    if let Some(var_2586) = &input.dry_run {
        scope_2585.boolean(*var_2586);
    }
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("Filter");
    if let Some(var_2588) = &input.filters {
        let mut list_2590 = scope_2587.start_list(true, Some("Filter"));
        for item_2589 in var_2588 {
            #[allow(unused_mut)]
            let mut entry_2591 = list_2590.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2591, item_2589)?;
        }
        list_2590.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2592 = writer.prefix("InstanceId");
    if let Some(var_2593) = &input.instance_ids {
        let mut list_2595 = scope_2592.start_list(true, Some("InstanceId"));
        for item_2594 in var_2593 {
            #[allow(unused_mut)]
            let mut entry_2596 = list_2595.entry();
            entry_2596.string(item_2594);
        }
        list_2595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2597 = writer.prefix("MaxResults");
    if let Some(var_2598) = &input.max_results {
        scope_2597.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2598).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("NextToken");
    if let Some(var_2600) = &input.next_token {
        scope_2599.string(var_2600);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("DryRun");
    if let Some(var_2602) = &input.dry_run {
        scope_2601.boolean(*var_2602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("DryRun");
    if let Some(var_2604) = &input.dry_run {
        scope_2603.boolean(*var_2604);
    }
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2606) = &input.instance_event_window_ids {
        let mut list_2608 = scope_2605.start_list(true, Some("InstanceEventWindowId"));
        for item_2607 in var_2606 {
            #[allow(unused_mut)]
            let mut entry_2609 = list_2608.entry();
            entry_2609.string(item_2607);
        }
        list_2608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2610 = writer.prefix("Filter");
    if let Some(var_2611) = &input.filters {
        let mut list_2613 = scope_2610.start_list(true, Some("Filter"));
        for item_2612 in var_2611 {
            #[allow(unused_mut)]
            let mut entry_2614 = list_2613.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2614, item_2612)?;
        }
        list_2613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2615 = writer.prefix("MaxResults");
    if let Some(var_2616) = &input.max_results {
        scope_2615.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2616).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2617 = writer.prefix("NextToken");
    if let Some(var_2618) = &input.next_token {
        scope_2617.string(var_2618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2619 = writer.prefix("Filter");
    if let Some(var_2620) = &input.filters {
        let mut list_2622 = scope_2619.start_list(true, Some("Filter"));
        for item_2621 in var_2620 {
            #[allow(unused_mut)]
            let mut entry_2623 = list_2622.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2623, item_2621)?;
        }
        list_2622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2624 = writer.prefix("InstanceId");
    if let Some(var_2625) = &input.instance_ids {
        let mut list_2627 = scope_2624.start_list(true, Some("InstanceId"));
        for item_2626 in var_2625 {
            #[allow(unused_mut)]
            let mut entry_2628 = list_2627.entry();
            entry_2628.string(item_2626);
        }
        list_2627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("DryRun");
    if let Some(var_2630) = &input.dry_run {
        scope_2629.boolean(*var_2630);
    }
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("MaxResults");
    if let Some(var_2632) = &input.max_results {
        scope_2631.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2632).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("NextToken");
    if let Some(var_2634) = &input.next_token {
        scope_2633.string(var_2634);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("Filter");
    if let Some(var_2636) = &input.filters {
        let mut list_2638 = scope_2635.start_list(true, Some("Filter"));
        for item_2637 in var_2636 {
            #[allow(unused_mut)]
            let mut entry_2639 = list_2638.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2639, item_2637)?;
        }
        list_2638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2640 = writer.prefix("InstanceId");
    if let Some(var_2641) = &input.instance_ids {
        let mut list_2643 = scope_2640.start_list(true, Some("InstanceId"));
        for item_2642 in var_2641 {
            #[allow(unused_mut)]
            let mut entry_2644 = list_2643.entry();
            entry_2644.string(item_2642);
        }
        list_2643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2645 = writer.prefix("MaxResults");
    if let Some(var_2646) = &input.max_results {
        scope_2645.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2646).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("NextToken");
    if let Some(var_2648) = &input.next_token {
        scope_2647.string(var_2648);
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("DryRun");
    if let Some(var_2650) = &input.dry_run {
        scope_2649.boolean(*var_2650);
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("IncludeAllInstances");
    if let Some(var_2652) = &input.include_all_instances {
        scope_2651.boolean(*var_2652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("DryRun");
    if let Some(var_2654) = &input.dry_run {
        scope_2653.boolean(*var_2654);
    }
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("LocationType");
    if let Some(var_2656) = &input.location_type {
        scope_2655.string(var_2656.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("Filter");
    if let Some(var_2658) = &input.filters {
        let mut list_2660 = scope_2657.start_list(true, Some("Filter"));
        for item_2659 in var_2658 {
            #[allow(unused_mut)]
            let mut entry_2661 = list_2660.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2661, item_2659)?;
        }
        list_2660.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2662 = writer.prefix("MaxResults");
    if let Some(var_2663) = &input.max_results {
        scope_2662.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2663).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2664 = writer.prefix("NextToken");
    if let Some(var_2665) = &input.next_token {
        scope_2664.string(var_2665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2666 = writer.prefix("DryRun");
    if let Some(var_2667) = &input.dry_run {
        scope_2666.boolean(*var_2667);
    }
    #[allow(unused_mut)]
    let mut scope_2668 = writer.prefix("InstanceType");
    if let Some(var_2669) = &input.instance_types {
        let mut list_2671 = scope_2668.start_list(true, None);
        for item_2670 in var_2669 {
            #[allow(unused_mut)]
            let mut entry_2672 = list_2671.entry();
            entry_2672.string(item_2670.as_str());
        }
        list_2671.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2673 = writer.prefix("Filter");
    if let Some(var_2674) = &input.filters {
        let mut list_2676 = scope_2673.start_list(true, Some("Filter"));
        for item_2675 in var_2674 {
            #[allow(unused_mut)]
            let mut entry_2677 = list_2676.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2677, item_2675)?;
        }
        list_2676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2678 = writer.prefix("MaxResults");
    if let Some(var_2679) = &input.max_results {
        scope_2678.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2679).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2680 = writer.prefix("NextToken");
    if let Some(var_2681) = &input.next_token {
        scope_2680.string(var_2681);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2682 = writer.prefix("Filter");
    if let Some(var_2683) = &input.filters {
        let mut list_2685 = scope_2682.start_list(true, Some("Filter"));
        for item_2684 in var_2683 {
            #[allow(unused_mut)]
            let mut entry_2686 = list_2685.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2686, item_2684)?;
        }
        list_2685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2687 = writer.prefix("DryRun");
    if let Some(var_2688) = &input.dry_run {
        scope_2687.boolean(*var_2688);
    }
    #[allow(unused_mut)]
    let mut scope_2689 = writer.prefix("InternetGatewayId");
    if let Some(var_2690) = &input.internet_gateway_ids {
        let mut list_2692 = scope_2689.start_list(true, Some("item"));
        for item_2691 in var_2690 {
            #[allow(unused_mut)]
            let mut entry_2693 = list_2692.entry();
            entry_2693.string(item_2691);
        }
        list_2692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2694 = writer.prefix("NextToken");
    if let Some(var_2695) = &input.next_token {
        scope_2694.string(var_2695);
    }
    #[allow(unused_mut)]
    let mut scope_2696 = writer.prefix("MaxResults");
    if let Some(var_2697) = &input.max_results {
        scope_2696.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2697).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("DryRun");
    if let Some(var_2699) = &input.dry_run {
        scope_2698.boolean(*var_2699);
    }
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("Filter");
    if let Some(var_2701) = &input.filters {
        let mut list_2703 = scope_2700.start_list(true, Some("Filter"));
        for item_2702 in var_2701 {
            #[allow(unused_mut)]
            let mut entry_2704 = list_2703.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2704, item_2702)?;
        }
        list_2703.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2705 = writer.prefix("MaxResults");
    if let Some(var_2706) = &input.max_results {
        scope_2705.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2706).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2707 = writer.prefix("NextToken");
    if let Some(var_2708) = &input.next_token {
        scope_2707.string(var_2708);
    }
    #[allow(unused_mut)]
    let mut scope_2709 = writer.prefix("IpamPoolId");
    if let Some(var_2710) = &input.ipam_pool_ids {
        let mut list_2712 = scope_2709.start_list(true, Some("item"));
        for item_2711 in var_2710 {
            #[allow(unused_mut)]
            let mut entry_2713 = list_2712.entry();
            entry_2713.string(item_2711);
        }
        list_2712.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2714 = writer.prefix("DryRun");
    if let Some(var_2715) = &input.dry_run {
        scope_2714.boolean(*var_2715);
    }
    #[allow(unused_mut)]
    let mut scope_2716 = writer.prefix("Filter");
    if let Some(var_2717) = &input.filters {
        let mut list_2719 = scope_2716.start_list(true, Some("Filter"));
        for item_2718 in var_2717 {
            #[allow(unused_mut)]
            let mut entry_2720 = list_2719.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2720, item_2718)?;
        }
        list_2719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2721 = writer.prefix("MaxResults");
    if let Some(var_2722) = &input.max_results {
        scope_2721.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2722).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2723 = writer.prefix("NextToken");
    if let Some(var_2724) = &input.next_token {
        scope_2723.string(var_2724);
    }
    #[allow(unused_mut)]
    let mut scope_2725 = writer.prefix("IpamId");
    if let Some(var_2726) = &input.ipam_ids {
        let mut list_2728 = scope_2725.start_list(true, Some("item"));
        for item_2727 in var_2726 {
            #[allow(unused_mut)]
            let mut entry_2729 = list_2728.entry();
            entry_2729.string(item_2727);
        }
        list_2728.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2730 = writer.prefix("DryRun");
    if let Some(var_2731) = &input.dry_run {
        scope_2730.boolean(*var_2731);
    }
    #[allow(unused_mut)]
    let mut scope_2732 = writer.prefix("Filter");
    if let Some(var_2733) = &input.filters {
        let mut list_2735 = scope_2732.start_list(true, Some("Filter"));
        for item_2734 in var_2733 {
            #[allow(unused_mut)]
            let mut entry_2736 = list_2735.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2736, item_2734)?;
        }
        list_2735.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2737 = writer.prefix("MaxResults");
    if let Some(var_2738) = &input.max_results {
        scope_2737.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2738).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2739 = writer.prefix("NextToken");
    if let Some(var_2740) = &input.next_token {
        scope_2739.string(var_2740);
    }
    #[allow(unused_mut)]
    let mut scope_2741 = writer.prefix("IpamScopeId");
    if let Some(var_2742) = &input.ipam_scope_ids {
        let mut list_2744 = scope_2741.start_list(true, Some("item"));
        for item_2743 in var_2742 {
            #[allow(unused_mut)]
            let mut entry_2745 = list_2744.entry();
            entry_2745.string(item_2743);
        }
        list_2744.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2746 = writer.prefix("PoolId");
    if let Some(var_2747) = &input.pool_ids {
        let mut list_2749 = scope_2746.start_list(true, Some("item"));
        for item_2748 in var_2747 {
            #[allow(unused_mut)]
            let mut entry_2750 = list_2749.entry();
            entry_2750.string(item_2748);
        }
        list_2749.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2751 = writer.prefix("NextToken");
    if let Some(var_2752) = &input.next_token {
        scope_2751.string(var_2752);
    }
    #[allow(unused_mut)]
    let mut scope_2753 = writer.prefix("MaxResults");
    if let Some(var_2754) = &input.max_results {
        scope_2753.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2754).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2755 = writer.prefix("DryRun");
    if let Some(var_2756) = &input.dry_run {
        scope_2755.boolean(*var_2756);
    }
    #[allow(unused_mut)]
    let mut scope_2757 = writer.prefix("Filter");
    if let Some(var_2758) = &input.filters {
        let mut list_2760 = scope_2757.start_list(true, Some("Filter"));
        for item_2759 in var_2758 {
            #[allow(unused_mut)]
            let mut entry_2761 = list_2760.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2761, item_2759)?;
        }
        list_2760.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2762 = writer.prefix("Filter");
    if let Some(var_2763) = &input.filters {
        let mut list_2765 = scope_2762.start_list(true, Some("Filter"));
        for item_2764 in var_2763 {
            #[allow(unused_mut)]
            let mut entry_2766 = list_2765.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2766, item_2764)?;
        }
        list_2765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("KeyName");
    if let Some(var_2768) = &input.key_names {
        let mut list_2770 = scope_2767.start_list(true, Some("KeyName"));
        for item_2769 in var_2768 {
            #[allow(unused_mut)]
            let mut entry_2771 = list_2770.entry();
            entry_2771.string(item_2769);
        }
        list_2770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2772 = writer.prefix("KeyPairId");
    if let Some(var_2773) = &input.key_pair_ids {
        let mut list_2775 = scope_2772.start_list(true, Some("KeyPairId"));
        for item_2774 in var_2773 {
            #[allow(unused_mut)]
            let mut entry_2776 = list_2775.entry();
            entry_2776.string(item_2774);
        }
        list_2775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2777 = writer.prefix("DryRun");
    if let Some(var_2778) = &input.dry_run {
        scope_2777.boolean(*var_2778);
    }
    #[allow(unused_mut)]
    let mut scope_2779 = writer.prefix("IncludePublicKey");
    if let Some(var_2780) = &input.include_public_key {
        scope_2779.boolean(*var_2780);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2781 = writer.prefix("DryRun");
    if let Some(var_2782) = &input.dry_run {
        scope_2781.boolean(*var_2782);
    }
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("LaunchTemplateId");
    if let Some(var_2784) = &input.launch_template_ids {
        let mut list_2786 = scope_2783.start_list(true, Some("item"));
        for item_2785 in var_2784 {
            #[allow(unused_mut)]
            let mut entry_2787 = list_2786.entry();
            entry_2787.string(item_2785);
        }
        list_2786.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2788 = writer.prefix("LaunchTemplateName");
    if let Some(var_2789) = &input.launch_template_names {
        let mut list_2791 = scope_2788.start_list(true, Some("item"));
        for item_2790 in var_2789 {
            #[allow(unused_mut)]
            let mut entry_2792 = list_2791.entry();
            entry_2792.string(item_2790);
        }
        list_2791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2793 = writer.prefix("Filter");
    if let Some(var_2794) = &input.filters {
        let mut list_2796 = scope_2793.start_list(true, Some("Filter"));
        for item_2795 in var_2794 {
            #[allow(unused_mut)]
            let mut entry_2797 = list_2796.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2797, item_2795)?;
        }
        list_2796.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2798 = writer.prefix("NextToken");
    if let Some(var_2799) = &input.next_token {
        scope_2798.string(var_2799);
    }
    #[allow(unused_mut)]
    let mut scope_2800 = writer.prefix("MaxResults");
    if let Some(var_2801) = &input.max_results {
        scope_2800.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2801).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2802 = writer.prefix("DryRun");
    if let Some(var_2803) = &input.dry_run {
        scope_2802.boolean(*var_2803);
    }
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("LaunchTemplateId");
    if let Some(var_2805) = &input.launch_template_id {
        scope_2804.string(var_2805);
    }
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("LaunchTemplateName");
    if let Some(var_2807) = &input.launch_template_name {
        scope_2806.string(var_2807);
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2809) = &input.versions {
        let mut list_2811 = scope_2808.start_list(true, Some("item"));
        for item_2810 in var_2809 {
            #[allow(unused_mut)]
            let mut entry_2812 = list_2811.entry();
            entry_2812.string(item_2810);
        }
        list_2811.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2813 = writer.prefix("MinVersion");
    if let Some(var_2814) = &input.min_version {
        scope_2813.string(var_2814);
    }
    #[allow(unused_mut)]
    let mut scope_2815 = writer.prefix("MaxVersion");
    if let Some(var_2816) = &input.max_version {
        scope_2815.string(var_2816);
    }
    #[allow(unused_mut)]
    let mut scope_2817 = writer.prefix("NextToken");
    if let Some(var_2818) = &input.next_token {
        scope_2817.string(var_2818);
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("MaxResults");
    if let Some(var_2820) = &input.max_results {
        scope_2819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2820).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("Filter");
    if let Some(var_2822) = &input.filters {
        let mut list_2824 = scope_2821.start_list(true, Some("Filter"));
        for item_2823 in var_2822 {
            #[allow(unused_mut)]
            let mut entry_2825 = list_2824.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2825, item_2823)?;
        }
        list_2824.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2826 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2827) = &input.local_gateway_route_table_ids {
        let mut list_2829 = scope_2826.start_list(true, Some("item"));
        for item_2828 in var_2827 {
            #[allow(unused_mut)]
            let mut entry_2830 = list_2829.entry();
            entry_2830.string(item_2828);
        }
        list_2829.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("Filter");
    if let Some(var_2832) = &input.filters {
        let mut list_2834 = scope_2831.start_list(true, Some("Filter"));
        for item_2833 in var_2832 {
            #[allow(unused_mut)]
            let mut entry_2835 = list_2834.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2835, item_2833)?;
        }
        list_2834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2836 = writer.prefix("MaxResults");
    if let Some(var_2837) = &input.max_results {
        scope_2836.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2837).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("NextToken");
    if let Some(var_2839) = &input.next_token {
        scope_2838.string(var_2839);
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("DryRun");
    if let Some(var_2841) = &input.dry_run {
        scope_2840.boolean(*var_2841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2843) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2845 = scope_2842.start_list(true, Some("item"));
        for item_2844 in var_2843 {
            #[allow(unused_mut)]
            let mut entry_2846 = list_2845.entry();
            entry_2846.string(item_2844);
        }
        list_2845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("Filter");
    if let Some(var_2848) = &input.filters {
        let mut list_2850 = scope_2847.start_list(true, Some("Filter"));
        for item_2849 in var_2848 {
            #[allow(unused_mut)]
            let mut entry_2851 = list_2850.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2851, item_2849)?;
        }
        list_2850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2852 = writer.prefix("MaxResults");
    if let Some(var_2853) = &input.max_results {
        scope_2852.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2853).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2854 = writer.prefix("NextToken");
    if let Some(var_2855) = &input.next_token {
        scope_2854.string(var_2855);
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("DryRun");
    if let Some(var_2857) = &input.dry_run {
        scope_2856.boolean(*var_2857);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2859) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2861 = scope_2858.start_list(true, Some("item"));
        for item_2860 in var_2859 {
            #[allow(unused_mut)]
            let mut entry_2862 = list_2861.entry();
            entry_2862.string(item_2860);
        }
        list_2861.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2863 = writer.prefix("Filter");
    if let Some(var_2864) = &input.filters {
        let mut list_2866 = scope_2863.start_list(true, Some("Filter"));
        for item_2865 in var_2864 {
            #[allow(unused_mut)]
            let mut entry_2867 = list_2866.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2867, item_2865)?;
        }
        list_2866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2868 = writer.prefix("MaxResults");
    if let Some(var_2869) = &input.max_results {
        scope_2868.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2869).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2870 = writer.prefix("NextToken");
    if let Some(var_2871) = &input.next_token {
        scope_2870.string(var_2871);
    }
    #[allow(unused_mut)]
    let mut scope_2872 = writer.prefix("DryRun");
    if let Some(var_2873) = &input.dry_run {
        scope_2872.boolean(*var_2873);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2874 = writer.prefix("LocalGatewayId");
    if let Some(var_2875) = &input.local_gateway_ids {
        let mut list_2877 = scope_2874.start_list(true, Some("item"));
        for item_2876 in var_2875 {
            #[allow(unused_mut)]
            let mut entry_2878 = list_2877.entry();
            entry_2878.string(item_2876);
        }
        list_2877.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2879 = writer.prefix("Filter");
    if let Some(var_2880) = &input.filters {
        let mut list_2882 = scope_2879.start_list(true, Some("Filter"));
        for item_2881 in var_2880 {
            #[allow(unused_mut)]
            let mut entry_2883 = list_2882.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2883, item_2881)?;
        }
        list_2882.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2884 = writer.prefix("MaxResults");
    if let Some(var_2885) = &input.max_results {
        scope_2884.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2885).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2886 = writer.prefix("NextToken");
    if let Some(var_2887) = &input.next_token {
        scope_2886.string(var_2887);
    }
    #[allow(unused_mut)]
    let mut scope_2888 = writer.prefix("DryRun");
    if let Some(var_2889) = &input.dry_run {
        scope_2888.boolean(*var_2889);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2891) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2893 = scope_2890.start_list(true, Some("item"));
        for item_2892 in var_2891 {
            #[allow(unused_mut)]
            let mut entry_2894 = list_2893.entry();
            entry_2894.string(item_2892);
        }
        list_2893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2895 = writer.prefix("Filter");
    if let Some(var_2896) = &input.filters {
        let mut list_2898 = scope_2895.start_list(true, Some("Filter"));
        for item_2897 in var_2896 {
            #[allow(unused_mut)]
            let mut entry_2899 = list_2898.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2899, item_2897)?;
        }
        list_2898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("MaxResults");
    if let Some(var_2901) = &input.max_results {
        scope_2900.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2901).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2902 = writer.prefix("NextToken");
    if let Some(var_2903) = &input.next_token {
        scope_2902.string(var_2903);
    }
    #[allow(unused_mut)]
    let mut scope_2904 = writer.prefix("DryRun");
    if let Some(var_2905) = &input.dry_run {
        scope_2904.boolean(*var_2905);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2906 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2907) = &input.local_gateway_virtual_interface_ids {
        let mut list_2909 = scope_2906.start_list(true, Some("item"));
        for item_2908 in var_2907 {
            #[allow(unused_mut)]
            let mut entry_2910 = list_2909.entry();
            entry_2910.string(item_2908);
        }
        list_2909.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2911 = writer.prefix("Filter");
    if let Some(var_2912) = &input.filters {
        let mut list_2914 = scope_2911.start_list(true, Some("Filter"));
        for item_2913 in var_2912 {
            #[allow(unused_mut)]
            let mut entry_2915 = list_2914.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2915, item_2913)?;
        }
        list_2914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("MaxResults");
    if let Some(var_2917) = &input.max_results {
        scope_2916.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2917).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("NextToken");
    if let Some(var_2919) = &input.next_token {
        scope_2918.string(var_2919);
    }
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("DryRun");
    if let Some(var_2921) = &input.dry_run {
        scope_2920.boolean(*var_2921);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("DryRun");
    if let Some(var_2923) = &input.dry_run {
        scope_2922.boolean(*var_2923);
    }
    #[allow(unused_mut)]
    let mut scope_2924 = writer.prefix("Filter");
    if let Some(var_2925) = &input.filters {
        let mut list_2927 = scope_2924.start_list(true, Some("Filter"));
        for item_2926 in var_2925 {
            #[allow(unused_mut)]
            let mut entry_2928 = list_2927.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2928, item_2926)?;
        }
        list_2927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2929 = writer.prefix("MaxResults");
    if let Some(var_2930) = &input.max_results {
        scope_2929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2931 = writer.prefix("NextToken");
    if let Some(var_2932) = &input.next_token {
        scope_2931.string(var_2932);
    }
    #[allow(unused_mut)]
    let mut scope_2933 = writer.prefix("PrefixListId");
    if let Some(var_2934) = &input.prefix_list_ids {
        let mut list_2936 = scope_2933.start_list(true, Some("item"));
        for item_2935 in var_2934 {
            #[allow(unused_mut)]
            let mut entry_2937 = list_2936.entry();
            entry_2937.string(item_2935);
        }
        list_2936.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2938 = writer.prefix("Filter");
    if let Some(var_2939) = &input.filters {
        let mut list_2941 = scope_2938.start_list(true, Some("Filter"));
        for item_2940 in var_2939 {
            #[allow(unused_mut)]
            let mut entry_2942 = list_2941.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2942, item_2940)?;
        }
        list_2941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("DryRun");
    if let Some(var_2944) = &input.dry_run {
        scope_2943.boolean(*var_2944);
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("MaxResults");
    if let Some(var_2946) = &input.max_results {
        scope_2945.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2946).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("NextToken");
    if let Some(var_2948) = &input.next_token {
        scope_2947.string(var_2948);
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("PublicIp");
    if let Some(var_2950) = &input.public_ips {
        let mut list_2952 = scope_2949.start_list(true, Some("item"));
        for item_2951 in var_2950 {
            #[allow(unused_mut)]
            let mut entry_2953 = list_2952.entry();
            entry_2953.string(item_2951);
        }
        list_2952.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2954 = writer.prefix("DryRun");
    if let Some(var_2955) = &input.dry_run {
        scope_2954.boolean(*var_2955);
    }
    #[allow(unused_mut)]
    let mut scope_2956 = writer.prefix("Filter");
    if let Some(var_2957) = &input.filter {
        let mut list_2959 = scope_2956.start_list(true, Some("Filter"));
        for item_2958 in var_2957 {
            #[allow(unused_mut)]
            let mut entry_2960 = list_2959.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2960, item_2958)?;
        }
        list_2959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2961 = writer.prefix("MaxResults");
    if let Some(var_2962) = &input.max_results {
        scope_2961.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2962).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2963 = writer.prefix("NatGatewayId");
    if let Some(var_2964) = &input.nat_gateway_ids {
        let mut list_2966 = scope_2963.start_list(true, Some("item"));
        for item_2965 in var_2964 {
            #[allow(unused_mut)]
            let mut entry_2967 = list_2966.entry();
            entry_2967.string(item_2965);
        }
        list_2966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2968 = writer.prefix("NextToken");
    if let Some(var_2969) = &input.next_token {
        scope_2968.string(var_2969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2970 = writer.prefix("Filter");
    if let Some(var_2971) = &input.filters {
        let mut list_2973 = scope_2970.start_list(true, Some("Filter"));
        for item_2972 in var_2971 {
            #[allow(unused_mut)]
            let mut entry_2974 = list_2973.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2974, item_2972)?;
        }
        list_2973.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2975 = writer.prefix("DryRun");
    if let Some(var_2976) = &input.dry_run {
        scope_2975.boolean(*var_2976);
    }
    #[allow(unused_mut)]
    let mut scope_2977 = writer.prefix("NetworkAclId");
    if let Some(var_2978) = &input.network_acl_ids {
        let mut list_2980 = scope_2977.start_list(true, Some("item"));
        for item_2979 in var_2978 {
            #[allow(unused_mut)]
            let mut entry_2981 = list_2980.entry();
            entry_2981.string(item_2979);
        }
        list_2980.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2982 = writer.prefix("NextToken");
    if let Some(var_2983) = &input.next_token {
        scope_2982.string(var_2983);
    }
    #[allow(unused_mut)]
    let mut scope_2984 = writer.prefix("MaxResults");
    if let Some(var_2985) = &input.max_results {
        scope_2984.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2985).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2986 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2987) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2989 = scope_2986.start_list(true, Some("item"));
        for item_2988 in var_2987 {
            #[allow(unused_mut)]
            let mut entry_2990 = list_2989.entry();
            entry_2990.string(item_2988);
        }
        list_2989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2992) = &input.network_insights_access_scope_id {
        scope_2991.string(var_2992);
    }
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_2994) = &input.analysis_start_time_begin {
        scope_2993.date_time(var_2994, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_2996) = &input.analysis_start_time_end {
        scope_2995.date_time(var_2996, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("Filter");
    if let Some(var_2998) = &input.filters {
        let mut list_3000 = scope_2997.start_list(true, Some("Filter"));
        for item_2999 in var_2998 {
            #[allow(unused_mut)]
            let mut entry_3001 = list_3000.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3001, item_2999)?;
        }
        list_3000.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3002 = writer.prefix("MaxResults");
    if let Some(var_3003) = &input.max_results {
        scope_3002.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3003).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3004 = writer.prefix("DryRun");
    if let Some(var_3005) = &input.dry_run {
        scope_3004.boolean(*var_3005);
    }
    #[allow(unused_mut)]
    let mut scope_3006 = writer.prefix("NextToken");
    if let Some(var_3007) = &input.next_token {
        scope_3006.string(var_3007);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3009) = &input.network_insights_access_scope_ids {
        let mut list_3011 = scope_3008.start_list(true, Some("item"));
        for item_3010 in var_3009 {
            #[allow(unused_mut)]
            let mut entry_3012 = list_3011.entry();
            entry_3012.string(item_3010);
        }
        list_3011.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3013 = writer.prefix("Filter");
    if let Some(var_3014) = &input.filters {
        let mut list_3016 = scope_3013.start_list(true, Some("Filter"));
        for item_3015 in var_3014 {
            #[allow(unused_mut)]
            let mut entry_3017 = list_3016.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3017, item_3015)?;
        }
        list_3016.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3018 = writer.prefix("MaxResults");
    if let Some(var_3019) = &input.max_results {
        scope_3018.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3019).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3020 = writer.prefix("DryRun");
    if let Some(var_3021) = &input.dry_run {
        scope_3020.boolean(*var_3021);
    }
    #[allow(unused_mut)]
    let mut scope_3022 = writer.prefix("NextToken");
    if let Some(var_3023) = &input.next_token {
        scope_3022.string(var_3023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3024 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3025) = &input.network_insights_analysis_ids {
        let mut list_3027 = scope_3024.start_list(true, Some("item"));
        for item_3026 in var_3025 {
            #[allow(unused_mut)]
            let mut entry_3028 = list_3027.entry();
            entry_3028.string(item_3026);
        }
        list_3027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3029 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3030) = &input.network_insights_path_id {
        scope_3029.string(var_3030);
    }
    #[allow(unused_mut)]
    let mut scope_3031 = writer.prefix("AnalysisStartTime");
    if let Some(var_3032) = &input.analysis_start_time {
        scope_3031.date_time(var_3032, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3033 = writer.prefix("AnalysisEndTime");
    if let Some(var_3034) = &input.analysis_end_time {
        scope_3033.date_time(var_3034, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3035 = writer.prefix("Filter");
    if let Some(var_3036) = &input.filters {
        let mut list_3038 = scope_3035.start_list(true, Some("Filter"));
        for item_3037 in var_3036 {
            #[allow(unused_mut)]
            let mut entry_3039 = list_3038.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3039, item_3037)?;
        }
        list_3038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3040 = writer.prefix("MaxResults");
    if let Some(var_3041) = &input.max_results {
        scope_3040.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3041).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3042 = writer.prefix("DryRun");
    if let Some(var_3043) = &input.dry_run {
        scope_3042.boolean(*var_3043);
    }
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("NextToken");
    if let Some(var_3045) = &input.next_token {
        scope_3044.string(var_3045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3047) = &input.network_insights_path_ids {
        let mut list_3049 = scope_3046.start_list(true, Some("item"));
        for item_3048 in var_3047 {
            #[allow(unused_mut)]
            let mut entry_3050 = list_3049.entry();
            entry_3050.string(item_3048);
        }
        list_3049.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3051 = writer.prefix("Filter");
    if let Some(var_3052) = &input.filters {
        let mut list_3054 = scope_3051.start_list(true, Some("Filter"));
        for item_3053 in var_3052 {
            #[allow(unused_mut)]
            let mut entry_3055 = list_3054.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3055, item_3053)?;
        }
        list_3054.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3056 = writer.prefix("MaxResults");
    if let Some(var_3057) = &input.max_results {
        scope_3056.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3057).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3058 = writer.prefix("DryRun");
    if let Some(var_3059) = &input.dry_run {
        scope_3058.boolean(*var_3059);
    }
    #[allow(unused_mut)]
    let mut scope_3060 = writer.prefix("NextToken");
    if let Some(var_3061) = &input.next_token {
        scope_3060.string(var_3061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("Attribute");
    if let Some(var_3063) = &input.attribute {
        scope_3062.string(var_3063.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("DryRun");
    if let Some(var_3065) = &input.dry_run {
        scope_3064.boolean(*var_3065);
    }
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3067) = &input.network_interface_id {
        scope_3066.string(var_3067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3068 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3069) = &input.network_interface_permission_ids {
        let mut list_3071 = scope_3068.start_list(true, None);
        for item_3070 in var_3069 {
            #[allow(unused_mut)]
            let mut entry_3072 = list_3071.entry();
            entry_3072.string(item_3070);
        }
        list_3071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3073 = writer.prefix("Filter");
    if let Some(var_3074) = &input.filters {
        let mut list_3076 = scope_3073.start_list(true, Some("Filter"));
        for item_3075 in var_3074 {
            #[allow(unused_mut)]
            let mut entry_3077 = list_3076.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3077, item_3075)?;
        }
        list_3076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3078 = writer.prefix("NextToken");
    if let Some(var_3079) = &input.next_token {
        scope_3078.string(var_3079);
    }
    #[allow(unused_mut)]
    let mut scope_3080 = writer.prefix("MaxResults");
    if let Some(var_3081) = &input.max_results {
        scope_3080.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3081).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3082 = writer.prefix("Filter");
    if let Some(var_3083) = &input.filters {
        let mut list_3085 = scope_3082.start_list(true, Some("Filter"));
        for item_3084 in var_3083 {
            #[allow(unused_mut)]
            let mut entry_3086 = list_3085.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3086, item_3084)?;
        }
        list_3085.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3087 = writer.prefix("DryRun");
    if let Some(var_3088) = &input.dry_run {
        scope_3087.boolean(*var_3088);
    }
    #[allow(unused_mut)]
    let mut scope_3089 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3090) = &input.network_interface_ids {
        let mut list_3092 = scope_3089.start_list(true, Some("item"));
        for item_3091 in var_3090 {
            #[allow(unused_mut)]
            let mut entry_3093 = list_3092.entry();
            entry_3093.string(item_3091);
        }
        list_3092.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3094 = writer.prefix("NextToken");
    if let Some(var_3095) = &input.next_token {
        scope_3094.string(var_3095);
    }
    #[allow(unused_mut)]
    let mut scope_3096 = writer.prefix("MaxResults");
    if let Some(var_3097) = &input.max_results {
        scope_3096.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3097).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("Filter");
    if let Some(var_3099) = &input.filters {
        let mut list_3101 = scope_3098.start_list(true, Some("Filter"));
        for item_3100 in var_3099 {
            #[allow(unused_mut)]
            let mut entry_3102 = list_3101.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3102, item_3100)?;
        }
        list_3101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3103 = writer.prefix("DryRun");
    if let Some(var_3104) = &input.dry_run {
        scope_3103.boolean(*var_3104);
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("GroupName");
    if let Some(var_3106) = &input.group_names {
        let mut list_3108 = scope_3105.start_list(true, None);
        for item_3107 in var_3106 {
            #[allow(unused_mut)]
            let mut entry_3109 = list_3108.entry();
            entry_3109.string(item_3107);
        }
        list_3108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3110 = writer.prefix("GroupId");
    if let Some(var_3111) = &input.group_ids {
        let mut list_3113 = scope_3110.start_list(true, Some("GroupId"));
        for item_3112 in var_3111 {
            #[allow(unused_mut)]
            let mut entry_3114 = list_3113.entry();
            entry_3114.string(item_3112);
        }
        list_3113.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3115 = writer.prefix("DryRun");
    if let Some(var_3116) = &input.dry_run {
        scope_3115.boolean(*var_3116);
    }
    #[allow(unused_mut)]
    let mut scope_3117 = writer.prefix("Filter");
    if let Some(var_3118) = &input.filters {
        let mut list_3120 = scope_3117.start_list(true, Some("Filter"));
        for item_3119 in var_3118 {
            #[allow(unused_mut)]
            let mut entry_3121 = list_3120.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3121, item_3119)?;
        }
        list_3120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3122 = writer.prefix("MaxResults");
    if let Some(var_3123) = &input.max_results {
        scope_3122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3124 = writer.prefix("NextToken");
    if let Some(var_3125) = &input.next_token {
        scope_3124.string(var_3125);
    }
    #[allow(unused_mut)]
    let mut scope_3126 = writer.prefix("PrefixListId");
    if let Some(var_3127) = &input.prefix_list_ids {
        let mut list_3129 = scope_3126.start_list(true, Some("item"));
        for item_3128 in var_3127 {
            #[allow(unused_mut)]
            let mut entry_3130 = list_3129.entry();
            entry_3130.string(item_3128);
        }
        list_3129.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3131 = writer.prefix("DryRun");
    if let Some(var_3132) = &input.dry_run {
        scope_3131.boolean(*var_3132);
    }
    #[allow(unused_mut)]
    let mut scope_3133 = writer.prefix("Resource");
    if let Some(var_3134) = &input.resources {
        let mut list_3136 = scope_3133.start_list(true, Some("item"));
        for item_3135 in var_3134 {
            #[allow(unused_mut)]
            let mut entry_3137 = list_3136.entry();
            entry_3137.string(item_3135);
        }
        list_3136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3138 = writer.prefix("MaxResults");
    if let Some(var_3139) = &input.max_results {
        scope_3138.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3139).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3140 = writer.prefix("NextToken");
    if let Some(var_3141) = &input.next_token {
        scope_3140.string(var_3141);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("PoolId");
    if let Some(var_3143) = &input.pool_ids {
        let mut list_3145 = scope_3142.start_list(true, Some("item"));
        for item_3144 in var_3143 {
            #[allow(unused_mut)]
            let mut entry_3146 = list_3145.entry();
            entry_3146.string(item_3144);
        }
        list_3145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3147 = writer.prefix("NextToken");
    if let Some(var_3148) = &input.next_token {
        scope_3147.string(var_3148);
    }
    #[allow(unused_mut)]
    let mut scope_3149 = writer.prefix("MaxResults");
    if let Some(var_3150) = &input.max_results {
        scope_3149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3150).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("Filter");
    if let Some(var_3152) = &input.filters {
        let mut list_3154 = scope_3151.start_list(true, Some("Filter"));
        for item_3153 in var_3152 {
            #[allow(unused_mut)]
            let mut entry_3155 = list_3154.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3155, item_3153)?;
        }
        list_3154.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3156 = writer.prefix("Filter");
    if let Some(var_3157) = &input.filters {
        let mut list_3159 = scope_3156.start_list(true, Some("Filter"));
        for item_3158 in var_3157 {
            #[allow(unused_mut)]
            let mut entry_3160 = list_3159.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3160, item_3158)?;
        }
        list_3159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3161 = writer.prefix("RegionName");
    if let Some(var_3162) = &input.region_names {
        let mut list_3164 = scope_3161.start_list(true, Some("RegionName"));
        for item_3163 in var_3162 {
            #[allow(unused_mut)]
            let mut entry_3165 = list_3164.entry();
            entry_3165.string(item_3163);
        }
        list_3164.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3166 = writer.prefix("DryRun");
    if let Some(var_3167) = &input.dry_run {
        scope_3166.boolean(*var_3167);
    }
    #[allow(unused_mut)]
    let mut scope_3168 = writer.prefix("AllRegions");
    if let Some(var_3169) = &input.all_regions {
        scope_3168.boolean(*var_3169);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3170 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3171) = &input.replace_root_volume_task_ids {
        let mut list_3173 = scope_3170.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3172 in var_3171 {
            #[allow(unused_mut)]
            let mut entry_3174 = list_3173.entry();
            entry_3174.string(item_3172);
        }
        list_3173.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3175 = writer.prefix("Filter");
    if let Some(var_3176) = &input.filters {
        let mut list_3178 = scope_3175.start_list(true, Some("Filter"));
        for item_3177 in var_3176 {
            #[allow(unused_mut)]
            let mut entry_3179 = list_3178.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3179, item_3177)?;
        }
        list_3178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3180 = writer.prefix("MaxResults");
    if let Some(var_3181) = &input.max_results {
        scope_3180.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3181).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3182 = writer.prefix("NextToken");
    if let Some(var_3183) = &input.next_token {
        scope_3182.string(var_3183);
    }
    #[allow(unused_mut)]
    let mut scope_3184 = writer.prefix("DryRun");
    if let Some(var_3185) = &input.dry_run {
        scope_3184.boolean(*var_3185);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3186 = writer.prefix("Filter");
    if let Some(var_3187) = &input.filters {
        let mut list_3189 = scope_3186.start_list(true, Some("Filter"));
        for item_3188 in var_3187 {
            #[allow(unused_mut)]
            let mut entry_3190 = list_3189.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3190, item_3188)?;
        }
        list_3189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3191 = writer.prefix("OfferingClass");
    if let Some(var_3192) = &input.offering_class {
        scope_3191.string(var_3192.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3193 = writer.prefix("ReservedInstancesId");
    if let Some(var_3194) = &input.reserved_instances_ids {
        let mut list_3196 = scope_3193.start_list(true, Some("ReservedInstancesId"));
        for item_3195 in var_3194 {
            #[allow(unused_mut)]
            let mut entry_3197 = list_3196.entry();
            entry_3197.string(item_3195);
        }
        list_3196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3198 = writer.prefix("DryRun");
    if let Some(var_3199) = &input.dry_run {
        scope_3198.boolean(*var_3199);
    }
    #[allow(unused_mut)]
    let mut scope_3200 = writer.prefix("OfferingType");
    if let Some(var_3201) = &input.offering_type {
        scope_3200.string(var_3201.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3202 = writer.prefix("Filter");
    if let Some(var_3203) = &input.filters {
        let mut list_3205 = scope_3202.start_list(true, Some("Filter"));
        for item_3204 in var_3203 {
            #[allow(unused_mut)]
            let mut entry_3206 = list_3205.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3206, item_3204)?;
        }
        list_3205.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3207 = writer.prefix("ReservedInstancesId");
    if let Some(var_3208) = &input.reserved_instances_id {
        scope_3207.string(var_3208);
    }
    #[allow(unused_mut)]
    let mut scope_3209 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3210) = &input.reserved_instances_listing_id {
        scope_3209.string(var_3210);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3211 = writer.prefix("Filter");
    if let Some(var_3212) = &input.filters {
        let mut list_3214 = scope_3211.start_list(true, Some("Filter"));
        for item_3213 in var_3212 {
            #[allow(unused_mut)]
            let mut entry_3215 = list_3214.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3215, item_3213)?;
        }
        list_3214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3216 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3217) = &input.reserved_instances_modification_ids {
        let mut list_3219 = scope_3216.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3218 in var_3217 {
            #[allow(unused_mut)]
            let mut entry_3220 = list_3219.entry();
            entry_3220.string(item_3218);
        }
        list_3219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3221 = writer.prefix("NextToken");
    if let Some(var_3222) = &input.next_token {
        scope_3221.string(var_3222);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3223 = writer.prefix("AvailabilityZone");
    if let Some(var_3224) = &input.availability_zone {
        scope_3223.string(var_3224);
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("Filter");
    if let Some(var_3226) = &input.filters {
        let mut list_3228 = scope_3225.start_list(true, Some("Filter"));
        for item_3227 in var_3226 {
            #[allow(unused_mut)]
            let mut entry_3229 = list_3228.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3229, item_3227)?;
        }
        list_3228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3230 = writer.prefix("IncludeMarketplace");
    if let Some(var_3231) = &input.include_marketplace {
        scope_3230.boolean(*var_3231);
    }
    #[allow(unused_mut)]
    let mut scope_3232 = writer.prefix("InstanceType");
    if let Some(var_3233) = &input.instance_type {
        scope_3232.string(var_3233.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("MaxDuration");
    if let Some(var_3235) = &input.max_duration {
        scope_3234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("MaxInstanceCount");
    if let Some(var_3237) = &input.max_instance_count {
        scope_3236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("MinDuration");
    if let Some(var_3239) = &input.min_duration {
        scope_3238.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("OfferingClass");
    if let Some(var_3241) = &input.offering_class {
        scope_3240.string(var_3241.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("ProductDescription");
    if let Some(var_3243) = &input.product_description {
        scope_3242.string(var_3243.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3244 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3245) = &input.reserved_instances_offering_ids {
        let mut list_3247 = scope_3244.start_list(true, None);
        for item_3246 in var_3245 {
            #[allow(unused_mut)]
            let mut entry_3248 = list_3247.entry();
            entry_3248.string(item_3246);
        }
        list_3247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("DryRun");
    if let Some(var_3250) = &input.dry_run {
        scope_3249.boolean(*var_3250);
    }
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("InstanceTenancy");
    if let Some(var_3252) = &input.instance_tenancy {
        scope_3251.string(var_3252.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3253 = writer.prefix("MaxResults");
    if let Some(var_3254) = &input.max_results {
        scope_3253.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3254).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3255 = writer.prefix("NextToken");
    if let Some(var_3256) = &input.next_token {
        scope_3255.string(var_3256);
    }
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("OfferingType");
    if let Some(var_3258) = &input.offering_type {
        scope_3257.string(var_3258.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3259 = writer.prefix("Filter");
    if let Some(var_3260) = &input.filters {
        let mut list_3262 = scope_3259.start_list(true, Some("Filter"));
        for item_3261 in var_3260 {
            #[allow(unused_mut)]
            let mut entry_3263 = list_3262.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3263, item_3261)?;
        }
        list_3262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3264 = writer.prefix("DryRun");
    if let Some(var_3265) = &input.dry_run {
        scope_3264.boolean(*var_3265);
    }
    #[allow(unused_mut)]
    let mut scope_3266 = writer.prefix("RouteTableId");
    if let Some(var_3267) = &input.route_table_ids {
        let mut list_3269 = scope_3266.start_list(true, Some("item"));
        for item_3268 in var_3267 {
            #[allow(unused_mut)]
            let mut entry_3270 = list_3269.entry();
            entry_3270.string(item_3268);
        }
        list_3269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3271 = writer.prefix("NextToken");
    if let Some(var_3272) = &input.next_token {
        scope_3271.string(var_3272);
    }
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("MaxResults");
    if let Some(var_3274) = &input.max_results {
        scope_3273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3274).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("DryRun");
    if let Some(var_3276) = &input.dry_run {
        scope_3275.boolean(*var_3276);
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("Filter");
    if let Some(var_3278) = &input.filters {
        let mut list_3280 = scope_3277.start_list(true, Some("Filter"));
        for item_3279 in var_3278 {
            #[allow(unused_mut)]
            let mut entry_3281 = list_3280.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3281, item_3279)?;
        }
        list_3280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3282 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3283) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3282, var_3283,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("MaxResults");
    if let Some(var_3285) = &input.max_results {
        scope_3284.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3285).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3287) = &input.max_slot_duration_in_hours {
        scope_3286.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3287).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3289) = &input.min_slot_duration_in_hours {
        scope_3288.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("NextToken");
    if let Some(var_3291) = &input.next_token {
        scope_3290.string(var_3291);
    }
    #[allow(unused_mut)]
    let mut scope_3292 = writer.prefix("Recurrence");
    if let Some(var_3293) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3292, var_3293,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("DryRun");
    if let Some(var_3295) = &input.dry_run {
        scope_3294.boolean(*var_3295);
    }
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("Filter");
    if let Some(var_3297) = &input.filters {
        let mut list_3299 = scope_3296.start_list(true, Some("Filter"));
        for item_3298 in var_3297 {
            #[allow(unused_mut)]
            let mut entry_3300 = list_3299.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3300, item_3298)?;
        }
        list_3299.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3301 = writer.prefix("MaxResults");
    if let Some(var_3302) = &input.max_results {
        scope_3301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3303 = writer.prefix("NextToken");
    if let Some(var_3304) = &input.next_token {
        scope_3303.string(var_3304);
    }
    #[allow(unused_mut)]
    let mut scope_3305 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3306) = &input.scheduled_instance_ids {
        let mut list_3308 = scope_3305.start_list(true, Some("ScheduledInstanceId"));
        for item_3307 in var_3306 {
            #[allow(unused_mut)]
            let mut entry_3309 = list_3308.entry();
            entry_3309.string(item_3307);
        }
        list_3308.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3310 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3311) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3310, var_3311,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3312 = writer.prefix("DryRun");
    if let Some(var_3313) = &input.dry_run {
        scope_3312.boolean(*var_3313);
    }
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("GroupId");
    if let Some(var_3315) = &input.group_id {
        let mut list_3317 = scope_3314.start_list(true, Some("item"));
        for item_3316 in var_3315 {
            #[allow(unused_mut)]
            let mut entry_3318 = list_3317.entry();
            entry_3318.string(item_3316);
        }
        list_3317.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3319 = writer.prefix("Filter");
    if let Some(var_3320) = &input.filters {
        let mut list_3322 = scope_3319.start_list(true, Some("Filter"));
        for item_3321 in var_3320 {
            #[allow(unused_mut)]
            let mut entry_3323 = list_3322.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3323, item_3321)?;
        }
        list_3322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3324 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3325) = &input.security_group_rule_ids {
        let mut list_3327 = scope_3324.start_list(true, Some("item"));
        for item_3326 in var_3325 {
            #[allow(unused_mut)]
            let mut entry_3328 = list_3327.entry();
            entry_3328.string(item_3326);
        }
        list_3327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3329 = writer.prefix("DryRun");
    if let Some(var_3330) = &input.dry_run {
        scope_3329.boolean(*var_3330);
    }
    #[allow(unused_mut)]
    let mut scope_3331 = writer.prefix("NextToken");
    if let Some(var_3332) = &input.next_token {
        scope_3331.string(var_3332);
    }
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("MaxResults");
    if let Some(var_3334) = &input.max_results {
        scope_3333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3334).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("Filter");
    if let Some(var_3336) = &input.filters {
        let mut list_3338 = scope_3335.start_list(true, Some("Filter"));
        for item_3337 in var_3336 {
            #[allow(unused_mut)]
            let mut entry_3339 = list_3338.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3339, item_3337)?;
        }
        list_3338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3340 = writer.prefix("GroupId");
    if let Some(var_3341) = &input.group_ids {
        let mut list_3343 = scope_3340.start_list(true, Some("groupId"));
        for item_3342 in var_3341 {
            #[allow(unused_mut)]
            let mut entry_3344 = list_3343.entry();
            entry_3344.string(item_3342);
        }
        list_3343.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("GroupName");
    if let Some(var_3346) = &input.group_names {
        let mut list_3348 = scope_3345.start_list(true, Some("GroupName"));
        for item_3347 in var_3346 {
            #[allow(unused_mut)]
            let mut entry_3349 = list_3348.entry();
            entry_3349.string(item_3347);
        }
        list_3348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3350 = writer.prefix("DryRun");
    if let Some(var_3351) = &input.dry_run {
        scope_3350.boolean(*var_3351);
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("NextToken");
    if let Some(var_3353) = &input.next_token {
        scope_3352.string(var_3353);
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("MaxResults");
    if let Some(var_3355) = &input.max_results {
        scope_3354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3355).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("Attribute");
    if let Some(var_3357) = &input.attribute {
        scope_3356.string(var_3357.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("SnapshotId");
    if let Some(var_3359) = &input.snapshot_id {
        scope_3358.string(var_3359);
    }
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("DryRun");
    if let Some(var_3361) = &input.dry_run {
        scope_3360.boolean(*var_3361);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("Filter");
    if let Some(var_3363) = &input.filters {
        let mut list_3365 = scope_3362.start_list(true, Some("Filter"));
        for item_3364 in var_3363 {
            #[allow(unused_mut)]
            let mut entry_3366 = list_3365.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3366, item_3364)?;
        }
        list_3365.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3367 = writer.prefix("MaxResults");
    if let Some(var_3368) = &input.max_results {
        scope_3367.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3368).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3369 = writer.prefix("NextToken");
    if let Some(var_3370) = &input.next_token {
        scope_3369.string(var_3370);
    }
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("Owner");
    if let Some(var_3372) = &input.owner_ids {
        let mut list_3374 = scope_3371.start_list(true, Some("Owner"));
        for item_3373 in var_3372 {
            #[allow(unused_mut)]
            let mut entry_3375 = list_3374.entry();
            entry_3375.string(item_3373);
        }
        list_3374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("RestorableBy");
    if let Some(var_3377) = &input.restorable_by_user_ids {
        let mut list_3379 = scope_3376.start_list(true, None);
        for item_3378 in var_3377 {
            #[allow(unused_mut)]
            let mut entry_3380 = list_3379.entry();
            entry_3380.string(item_3378);
        }
        list_3379.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3381 = writer.prefix("SnapshotId");
    if let Some(var_3382) = &input.snapshot_ids {
        let mut list_3384 = scope_3381.start_list(true, Some("SnapshotId"));
        for item_3383 in var_3382 {
            #[allow(unused_mut)]
            let mut entry_3385 = list_3384.entry();
            entry_3385.string(item_3383);
        }
        list_3384.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3386 = writer.prefix("DryRun");
    if let Some(var_3387) = &input.dry_run {
        scope_3386.boolean(*var_3387);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3388 = writer.prefix("Filter");
    if let Some(var_3389) = &input.filters {
        let mut list_3391 = scope_3388.start_list(true, Some("Filter"));
        for item_3390 in var_3389 {
            #[allow(unused_mut)]
            let mut entry_3392 = list_3391.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3392, item_3390)?;
        }
        list_3391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3393 = writer.prefix("DryRun");
    if let Some(var_3394) = &input.dry_run {
        scope_3393.boolean(*var_3394);
    }
    #[allow(unused_mut)]
    let mut scope_3395 = writer.prefix("NextToken");
    if let Some(var_3396) = &input.next_token {
        scope_3395.string(var_3396);
    }
    #[allow(unused_mut)]
    let mut scope_3397 = writer.prefix("MaxResults");
    if let Some(var_3398) = &input.max_results {
        scope_3397.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3398).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3399 = writer.prefix("DryRun");
    if let Some(var_3400) = &input.dry_run {
        scope_3399.boolean(*var_3400);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3401 = writer.prefix("DryRun");
    if let Some(var_3402) = &input.dry_run {
        scope_3401.boolean(*var_3402);
    }
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("MaxResults");
    if let Some(var_3404) = &input.max_results {
        scope_3403.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3404).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("NextToken");
    if let Some(var_3406) = &input.next_token {
        scope_3405.string(var_3406);
    }
    #[allow(unused_mut)]
    let mut scope_3407 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3408) = &input.spot_fleet_request_id {
        scope_3407.string(var_3408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3409 = writer.prefix("DryRun");
    if let Some(var_3410) = &input.dry_run {
        scope_3409.boolean(*var_3410);
    }
    #[allow(unused_mut)]
    let mut scope_3411 = writer.prefix("EventType");
    if let Some(var_3412) = &input.event_type {
        scope_3411.string(var_3412.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3413 = writer.prefix("MaxResults");
    if let Some(var_3414) = &input.max_results {
        scope_3413.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3414).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("NextToken");
    if let Some(var_3416) = &input.next_token {
        scope_3415.string(var_3416);
    }
    #[allow(unused_mut)]
    let mut scope_3417 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3418) = &input.spot_fleet_request_id {
        scope_3417.string(var_3418);
    }
    #[allow(unused_mut)]
    let mut scope_3419 = writer.prefix("StartTime");
    if let Some(var_3420) = &input.start_time {
        scope_3419.date_time(var_3420, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("DryRun");
    if let Some(var_3422) = &input.dry_run {
        scope_3421.boolean(*var_3422);
    }
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("MaxResults");
    if let Some(var_3424) = &input.max_results {
        scope_3423.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3424).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("NextToken");
    if let Some(var_3426) = &input.next_token {
        scope_3425.string(var_3426);
    }
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3428) = &input.spot_fleet_request_ids {
        let mut list_3430 = scope_3427.start_list(true, Some("item"));
        for item_3429 in var_3428 {
            #[allow(unused_mut)]
            let mut entry_3431 = list_3430.entry();
            entry_3431.string(item_3429);
        }
        list_3430.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3432 = writer.prefix("Filter");
    if let Some(var_3433) = &input.filters {
        let mut list_3435 = scope_3432.start_list(true, Some("Filter"));
        for item_3434 in var_3433 {
            #[allow(unused_mut)]
            let mut entry_3436 = list_3435.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3436, item_3434)?;
        }
        list_3435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3437 = writer.prefix("DryRun");
    if let Some(var_3438) = &input.dry_run {
        scope_3437.boolean(*var_3438);
    }
    #[allow(unused_mut)]
    let mut scope_3439 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3440) = &input.spot_instance_request_ids {
        let mut list_3442 = scope_3439.start_list(true, Some("SpotInstanceRequestId"));
        for item_3441 in var_3440 {
            #[allow(unused_mut)]
            let mut entry_3443 = list_3442.entry();
            entry_3443.string(item_3441);
        }
        list_3442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3444 = writer.prefix("NextToken");
    if let Some(var_3445) = &input.next_token {
        scope_3444.string(var_3445);
    }
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("MaxResults");
    if let Some(var_3447) = &input.max_results {
        scope_3446.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3447).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("Filter");
    if let Some(var_3449) = &input.filters {
        let mut list_3451 = scope_3448.start_list(true, Some("Filter"));
        for item_3450 in var_3449 {
            #[allow(unused_mut)]
            let mut entry_3452 = list_3451.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3452, item_3450)?;
        }
        list_3451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3453 = writer.prefix("AvailabilityZone");
    if let Some(var_3454) = &input.availability_zone {
        scope_3453.string(var_3454);
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("DryRun");
    if let Some(var_3456) = &input.dry_run {
        scope_3455.boolean(*var_3456);
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("EndTime");
    if let Some(var_3458) = &input.end_time {
        scope_3457.date_time(var_3458, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("InstanceType");
    if let Some(var_3460) = &input.instance_types {
        let mut list_3462 = scope_3459.start_list(true, None);
        for item_3461 in var_3460 {
            #[allow(unused_mut)]
            let mut entry_3463 = list_3462.entry();
            entry_3463.string(item_3461.as_str());
        }
        list_3462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3464 = writer.prefix("MaxResults");
    if let Some(var_3465) = &input.max_results {
        scope_3464.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3465).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("NextToken");
    if let Some(var_3467) = &input.next_token {
        scope_3466.string(var_3467);
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("ProductDescription");
    if let Some(var_3469) = &input.product_descriptions {
        let mut list_3471 = scope_3468.start_list(true, None);
        for item_3470 in var_3469 {
            #[allow(unused_mut)]
            let mut entry_3472 = list_3471.entry();
            entry_3472.string(item_3470);
        }
        list_3471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3473 = writer.prefix("StartTime");
    if let Some(var_3474) = &input.start_time {
        scope_3473.date_time(var_3474, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3475 = writer.prefix("DryRun");
    if let Some(var_3476) = &input.dry_run {
        scope_3475.boolean(*var_3476);
    }
    #[allow(unused_mut)]
    let mut scope_3477 = writer.prefix("MaxResults");
    if let Some(var_3478) = &input.max_results {
        scope_3477.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3478).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("NextToken");
    if let Some(var_3480) = &input.next_token {
        scope_3479.string(var_3480);
    }
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("VpcId");
    if let Some(var_3482) = &input.vpc_id {
        scope_3481.string(var_3482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3483 = writer.prefix("ImageId");
    if let Some(var_3484) = &input.image_ids {
        let mut list_3486 = scope_3483.start_list(true, Some("item"));
        for item_3485 in var_3484 {
            #[allow(unused_mut)]
            let mut entry_3487 = list_3486.entry();
            entry_3487.string(item_3485);
        }
        list_3486.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("DryRun");
    if let Some(var_3489) = &input.dry_run {
        scope_3488.boolean(*var_3489);
    }
    #[allow(unused_mut)]
    let mut scope_3490 = writer.prefix("Filter");
    if let Some(var_3491) = &input.filters {
        let mut list_3493 = scope_3490.start_list(true, Some("Filter"));
        for item_3492 in var_3491 {
            #[allow(unused_mut)]
            let mut entry_3494 = list_3493.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3494, item_3492)?;
        }
        list_3493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3495 = writer.prefix("NextToken");
    if let Some(var_3496) = &input.next_token {
        scope_3495.string(var_3496);
    }
    #[allow(unused_mut)]
    let mut scope_3497 = writer.prefix("MaxResults");
    if let Some(var_3498) = &input.max_results {
        scope_3497.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3498).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("Filter");
    if let Some(var_3500) = &input.filters {
        let mut list_3502 = scope_3499.start_list(true, Some("Filter"));
        for item_3501 in var_3500 {
            #[allow(unused_mut)]
            let mut entry_3503 = list_3502.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3503, item_3501)?;
        }
        list_3502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("SubnetId");
    if let Some(var_3505) = &input.subnet_ids {
        let mut list_3507 = scope_3504.start_list(true, Some("SubnetId"));
        for item_3506 in var_3505 {
            #[allow(unused_mut)]
            let mut entry_3508 = list_3507.entry();
            entry_3508.string(item_3506);
        }
        list_3507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3509 = writer.prefix("DryRun");
    if let Some(var_3510) = &input.dry_run {
        scope_3509.boolean(*var_3510);
    }
    #[allow(unused_mut)]
    let mut scope_3511 = writer.prefix("NextToken");
    if let Some(var_3512) = &input.next_token {
        scope_3511.string(var_3512);
    }
    #[allow(unused_mut)]
    let mut scope_3513 = writer.prefix("MaxResults");
    if let Some(var_3514) = &input.max_results {
        scope_3513.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3514).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("DryRun");
    if let Some(var_3516) = &input.dry_run {
        scope_3515.boolean(*var_3516);
    }
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("Filter");
    if let Some(var_3518) = &input.filters {
        let mut list_3520 = scope_3517.start_list(true, Some("Filter"));
        for item_3519 in var_3518 {
            #[allow(unused_mut)]
            let mut entry_3521 = list_3520.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3521, item_3519)?;
        }
        list_3520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3522 = writer.prefix("MaxResults");
    if let Some(var_3523) = &input.max_results {
        scope_3522.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3523).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3524 = writer.prefix("NextToken");
    if let Some(var_3525) = &input.next_token {
        scope_3524.string(var_3525);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3526 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3527) = &input.traffic_mirror_filter_ids {
        let mut list_3529 = scope_3526.start_list(true, Some("item"));
        for item_3528 in var_3527 {
            #[allow(unused_mut)]
            let mut entry_3530 = list_3529.entry();
            entry_3530.string(item_3528);
        }
        list_3529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3531 = writer.prefix("DryRun");
    if let Some(var_3532) = &input.dry_run {
        scope_3531.boolean(*var_3532);
    }
    #[allow(unused_mut)]
    let mut scope_3533 = writer.prefix("Filter");
    if let Some(var_3534) = &input.filters {
        let mut list_3536 = scope_3533.start_list(true, Some("Filter"));
        for item_3535 in var_3534 {
            #[allow(unused_mut)]
            let mut entry_3537 = list_3536.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3537, item_3535)?;
        }
        list_3536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3538 = writer.prefix("MaxResults");
    if let Some(var_3539) = &input.max_results {
        scope_3538.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3539).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3540 = writer.prefix("NextToken");
    if let Some(var_3541) = &input.next_token {
        scope_3540.string(var_3541);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3542 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3543) = &input.traffic_mirror_session_ids {
        let mut list_3545 = scope_3542.start_list(true, Some("item"));
        for item_3544 in var_3543 {
            #[allow(unused_mut)]
            let mut entry_3546 = list_3545.entry();
            entry_3546.string(item_3544);
        }
        list_3545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("DryRun");
    if let Some(var_3548) = &input.dry_run {
        scope_3547.boolean(*var_3548);
    }
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("Filter");
    if let Some(var_3550) = &input.filters {
        let mut list_3552 = scope_3549.start_list(true, Some("Filter"));
        for item_3551 in var_3550 {
            #[allow(unused_mut)]
            let mut entry_3553 = list_3552.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3553, item_3551)?;
        }
        list_3552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3554 = writer.prefix("MaxResults");
    if let Some(var_3555) = &input.max_results {
        scope_3554.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3555).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3556 = writer.prefix("NextToken");
    if let Some(var_3557) = &input.next_token {
        scope_3556.string(var_3557);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3558 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3559) = &input.traffic_mirror_target_ids {
        let mut list_3561 = scope_3558.start_list(true, Some("item"));
        for item_3560 in var_3559 {
            #[allow(unused_mut)]
            let mut entry_3562 = list_3561.entry();
            entry_3562.string(item_3560);
        }
        list_3561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3563 = writer.prefix("DryRun");
    if let Some(var_3564) = &input.dry_run {
        scope_3563.boolean(*var_3564);
    }
    #[allow(unused_mut)]
    let mut scope_3565 = writer.prefix("Filter");
    if let Some(var_3566) = &input.filters {
        let mut list_3568 = scope_3565.start_list(true, Some("Filter"));
        for item_3567 in var_3566 {
            #[allow(unused_mut)]
            let mut entry_3569 = list_3568.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3569, item_3567)?;
        }
        list_3568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3570 = writer.prefix("MaxResults");
    if let Some(var_3571) = &input.max_results {
        scope_3570.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3571).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3572 = writer.prefix("NextToken");
    if let Some(var_3573) = &input.next_token {
        scope_3572.string(var_3573);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3574 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3575) = &input.transit_gateway_attachment_ids {
        let mut list_3577 = scope_3574.start_list(true, None);
        for item_3576 in var_3575 {
            #[allow(unused_mut)]
            let mut entry_3578 = list_3577.entry();
            entry_3578.string(item_3576);
        }
        list_3577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3579 = writer.prefix("Filter");
    if let Some(var_3580) = &input.filters {
        let mut list_3582 = scope_3579.start_list(true, Some("Filter"));
        for item_3581 in var_3580 {
            #[allow(unused_mut)]
            let mut entry_3583 = list_3582.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3583, item_3581)?;
        }
        list_3582.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3584 = writer.prefix("MaxResults");
    if let Some(var_3585) = &input.max_results {
        scope_3584.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3585).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3586 = writer.prefix("NextToken");
    if let Some(var_3587) = &input.next_token {
        scope_3586.string(var_3587);
    }
    #[allow(unused_mut)]
    let mut scope_3588 = writer.prefix("DryRun");
    if let Some(var_3589) = &input.dry_run {
        scope_3588.boolean(*var_3589);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3590 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3591) = &input.transit_gateway_connect_peer_ids {
        let mut list_3593 = scope_3590.start_list(true, Some("item"));
        for item_3592 in var_3591 {
            #[allow(unused_mut)]
            let mut entry_3594 = list_3593.entry();
            entry_3594.string(item_3592);
        }
        list_3593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3595 = writer.prefix("Filter");
    if let Some(var_3596) = &input.filters {
        let mut list_3598 = scope_3595.start_list(true, Some("Filter"));
        for item_3597 in var_3596 {
            #[allow(unused_mut)]
            let mut entry_3599 = list_3598.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3599, item_3597)?;
        }
        list_3598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3600 = writer.prefix("MaxResults");
    if let Some(var_3601) = &input.max_results {
        scope_3600.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3601).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3602 = writer.prefix("NextToken");
    if let Some(var_3603) = &input.next_token {
        scope_3602.string(var_3603);
    }
    #[allow(unused_mut)]
    let mut scope_3604 = writer.prefix("DryRun");
    if let Some(var_3605) = &input.dry_run {
        scope_3604.boolean(*var_3605);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3606 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3607) = &input.transit_gateway_attachment_ids {
        let mut list_3609 = scope_3606.start_list(true, None);
        for item_3608 in var_3607 {
            #[allow(unused_mut)]
            let mut entry_3610 = list_3609.entry();
            entry_3610.string(item_3608);
        }
        list_3609.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3611 = writer.prefix("Filter");
    if let Some(var_3612) = &input.filters {
        let mut list_3614 = scope_3611.start_list(true, Some("Filter"));
        for item_3613 in var_3612 {
            #[allow(unused_mut)]
            let mut entry_3615 = list_3614.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3615, item_3613)?;
        }
        list_3614.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3616 = writer.prefix("MaxResults");
    if let Some(var_3617) = &input.max_results {
        scope_3616.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3617).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3618 = writer.prefix("NextToken");
    if let Some(var_3619) = &input.next_token {
        scope_3618.string(var_3619);
    }
    #[allow(unused_mut)]
    let mut scope_3620 = writer.prefix("DryRun");
    if let Some(var_3621) = &input.dry_run {
        scope_3620.boolean(*var_3621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3622 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3623) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3625 = scope_3622.start_list(true, Some("item"));
        for item_3624 in var_3623 {
            #[allow(unused_mut)]
            let mut entry_3626 = list_3625.entry();
            entry_3626.string(item_3624);
        }
        list_3625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3627 = writer.prefix("Filter");
    if let Some(var_3628) = &input.filters {
        let mut list_3630 = scope_3627.start_list(true, Some("Filter"));
        for item_3629 in var_3628 {
            #[allow(unused_mut)]
            let mut entry_3631 = list_3630.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3631, item_3629)?;
        }
        list_3630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3632 = writer.prefix("MaxResults");
    if let Some(var_3633) = &input.max_results {
        scope_3632.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3633).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3634 = writer.prefix("NextToken");
    if let Some(var_3635) = &input.next_token {
        scope_3634.string(var_3635);
    }
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("DryRun");
    if let Some(var_3637) = &input.dry_run {
        scope_3636.boolean(*var_3637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3638 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3639) = &input.transit_gateway_attachment_ids {
        let mut list_3641 = scope_3638.start_list(true, None);
        for item_3640 in var_3639 {
            #[allow(unused_mut)]
            let mut entry_3642 = list_3641.entry();
            entry_3642.string(item_3640);
        }
        list_3641.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3643 = writer.prefix("Filter");
    if let Some(var_3644) = &input.filters {
        let mut list_3646 = scope_3643.start_list(true, Some("Filter"));
        for item_3645 in var_3644 {
            #[allow(unused_mut)]
            let mut entry_3647 = list_3646.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3647, item_3645)?;
        }
        list_3646.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3648 = writer.prefix("MaxResults");
    if let Some(var_3649) = &input.max_results {
        scope_3648.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3649).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3650 = writer.prefix("NextToken");
    if let Some(var_3651) = &input.next_token {
        scope_3650.string(var_3651);
    }
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("DryRun");
    if let Some(var_3653) = &input.dry_run {
        scope_3652.boolean(*var_3653);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3655) = &input.transit_gateway_route_table_ids {
        let mut list_3657 = scope_3654.start_list(true, Some("item"));
        for item_3656 in var_3655 {
            #[allow(unused_mut)]
            let mut entry_3658 = list_3657.entry();
            entry_3658.string(item_3656);
        }
        list_3657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3659 = writer.prefix("Filter");
    if let Some(var_3660) = &input.filters {
        let mut list_3662 = scope_3659.start_list(true, Some("Filter"));
        for item_3661 in var_3660 {
            #[allow(unused_mut)]
            let mut entry_3663 = list_3662.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3663, item_3661)?;
        }
        list_3662.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("MaxResults");
    if let Some(var_3665) = &input.max_results {
        scope_3664.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("NextToken");
    if let Some(var_3667) = &input.next_token {
        scope_3666.string(var_3667);
    }
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("DryRun");
    if let Some(var_3669) = &input.dry_run {
        scope_3668.boolean(*var_3669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("TransitGatewayIds");
    if let Some(var_3671) = &input.transit_gateway_ids {
        let mut list_3673 = scope_3670.start_list(true, Some("item"));
        for item_3672 in var_3671 {
            #[allow(unused_mut)]
            let mut entry_3674 = list_3673.entry();
            entry_3674.string(item_3672);
        }
        list_3673.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3675 = writer.prefix("Filter");
    if let Some(var_3676) = &input.filters {
        let mut list_3678 = scope_3675.start_list(true, Some("Filter"));
        for item_3677 in var_3676 {
            #[allow(unused_mut)]
            let mut entry_3679 = list_3678.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3679, item_3677)?;
        }
        list_3678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3680 = writer.prefix("MaxResults");
    if let Some(var_3681) = &input.max_results {
        scope_3680.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3681).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3682 = writer.prefix("NextToken");
    if let Some(var_3683) = &input.next_token {
        scope_3682.string(var_3683);
    }
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("DryRun");
    if let Some(var_3685) = &input.dry_run {
        scope_3684.boolean(*var_3685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3687) = &input.transit_gateway_attachment_ids {
        let mut list_3689 = scope_3686.start_list(true, None);
        for item_3688 in var_3687 {
            #[allow(unused_mut)]
            let mut entry_3690 = list_3689.entry();
            entry_3690.string(item_3688);
        }
        list_3689.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3691 = writer.prefix("Filter");
    if let Some(var_3692) = &input.filters {
        let mut list_3694 = scope_3691.start_list(true, Some("Filter"));
        for item_3693 in var_3692 {
            #[allow(unused_mut)]
            let mut entry_3695 = list_3694.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3695, item_3693)?;
        }
        list_3694.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3696 = writer.prefix("MaxResults");
    if let Some(var_3697) = &input.max_results {
        scope_3696.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3697).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3698 = writer.prefix("NextToken");
    if let Some(var_3699) = &input.next_token {
        scope_3698.string(var_3699);
    }
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("DryRun");
    if let Some(var_3701) = &input.dry_run {
        scope_3700.boolean(*var_3701);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("AssociationId");
    if let Some(var_3703) = &input.association_ids {
        let mut list_3705 = scope_3702.start_list(true, Some("item"));
        for item_3704 in var_3703 {
            #[allow(unused_mut)]
            let mut entry_3706 = list_3705.entry();
            entry_3706.string(item_3704);
        }
        list_3705.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3707 = writer.prefix("DryRun");
    if let Some(var_3708) = &input.dry_run {
        scope_3707.boolean(*var_3708);
    }
    #[allow(unused_mut)]
    let mut scope_3709 = writer.prefix("Filter");
    if let Some(var_3710) = &input.filters {
        let mut list_3712 = scope_3709.start_list(true, Some("Filter"));
        for item_3711 in var_3710 {
            #[allow(unused_mut)]
            let mut entry_3713 = list_3712.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3713, item_3711)?;
        }
        list_3712.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3714 = writer.prefix("NextToken");
    if let Some(var_3715) = &input.next_token {
        scope_3714.string(var_3715);
    }
    #[allow(unused_mut)]
    let mut scope_3716 = writer.prefix("MaxResults");
    if let Some(var_3717) = &input.max_results {
        scope_3716.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3717).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("Attribute");
    if let Some(var_3719) = &input.attribute {
        scope_3718.string(var_3719.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("VolumeId");
    if let Some(var_3721) = &input.volume_id {
        scope_3720.string(var_3721);
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("DryRun");
    if let Some(var_3723) = &input.dry_run {
        scope_3722.boolean(*var_3723);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("Filter");
    if let Some(var_3725) = &input.filters {
        let mut list_3727 = scope_3724.start_list(true, Some("Filter"));
        for item_3726 in var_3725 {
            #[allow(unused_mut)]
            let mut entry_3728 = list_3727.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3728, item_3726)?;
        }
        list_3727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3729 = writer.prefix("VolumeId");
    if let Some(var_3730) = &input.volume_ids {
        let mut list_3732 = scope_3729.start_list(true, Some("VolumeId"));
        for item_3731 in var_3730 {
            #[allow(unused_mut)]
            let mut entry_3733 = list_3732.entry();
            entry_3733.string(item_3731);
        }
        list_3732.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3734 = writer.prefix("DryRun");
    if let Some(var_3735) = &input.dry_run {
        scope_3734.boolean(*var_3735);
    }
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("MaxResults");
    if let Some(var_3737) = &input.max_results {
        scope_3736.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3737).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("NextToken");
    if let Some(var_3739) = &input.next_token {
        scope_3738.string(var_3739);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("DryRun");
    if let Some(var_3741) = &input.dry_run {
        scope_3740.boolean(*var_3741);
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("VolumeId");
    if let Some(var_3743) = &input.volume_ids {
        let mut list_3745 = scope_3742.start_list(true, Some("VolumeId"));
        for item_3744 in var_3743 {
            #[allow(unused_mut)]
            let mut entry_3746 = list_3745.entry();
            entry_3746.string(item_3744);
        }
        list_3745.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3747 = writer.prefix("Filter");
    if let Some(var_3748) = &input.filters {
        let mut list_3750 = scope_3747.start_list(true, Some("Filter"));
        for item_3749 in var_3748 {
            #[allow(unused_mut)]
            let mut entry_3751 = list_3750.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3751, item_3749)?;
        }
        list_3750.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3752 = writer.prefix("NextToken");
    if let Some(var_3753) = &input.next_token {
        scope_3752.string(var_3753);
    }
    #[allow(unused_mut)]
    let mut scope_3754 = writer.prefix("MaxResults");
    if let Some(var_3755) = &input.max_results {
        scope_3754.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3755).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3756 = writer.prefix("Filter");
    if let Some(var_3757) = &input.filters {
        let mut list_3759 = scope_3756.start_list(true, Some("Filter"));
        for item_3758 in var_3757 {
            #[allow(unused_mut)]
            let mut entry_3760 = list_3759.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3760, item_3758)?;
        }
        list_3759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("MaxResults");
    if let Some(var_3762) = &input.max_results {
        scope_3761.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3762).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("NextToken");
    if let Some(var_3764) = &input.next_token {
        scope_3763.string(var_3764);
    }
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("VolumeId");
    if let Some(var_3766) = &input.volume_ids {
        let mut list_3768 = scope_3765.start_list(true, Some("VolumeId"));
        for item_3767 in var_3766 {
            #[allow(unused_mut)]
            let mut entry_3769 = list_3768.entry();
            entry_3769.string(item_3767);
        }
        list_3768.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3770 = writer.prefix("DryRun");
    if let Some(var_3771) = &input.dry_run {
        scope_3770.boolean(*var_3771);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("Attribute");
    if let Some(var_3773) = &input.attribute {
        scope_3772.string(var_3773.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("VpcId");
    if let Some(var_3775) = &input.vpc_id {
        scope_3774.string(var_3775);
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("DryRun");
    if let Some(var_3777) = &input.dry_run {
        scope_3776.boolean(*var_3777);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("Filter");
    if let Some(var_3779) = &input.filters {
        let mut list_3781 = scope_3778.start_list(true, Some("Filter"));
        for item_3780 in var_3779 {
            #[allow(unused_mut)]
            let mut entry_3782 = list_3781.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3782, item_3780)?;
        }
        list_3781.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3783 = writer.prefix("DryRun");
    if let Some(var_3784) = &input.dry_run {
        scope_3783.boolean(*var_3784);
    }
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("VpcId");
    if let Some(var_3786) = &input.vpc_ids {
        let mut list_3788 = scope_3785.start_list(true, Some("VpcId"));
        for item_3787 in var_3786 {
            #[allow(unused_mut)]
            let mut entry_3789 = list_3788.entry();
            entry_3789.string(item_3787);
        }
        list_3788.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3790 = writer.prefix("MaxResults");
    if let Some(var_3791) = &input.max_results {
        scope_3790.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3791).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3792 = writer.prefix("NextToken");
    if let Some(var_3793) = &input.next_token {
        scope_3792.string(var_3793);
    }
    #[allow(unused_mut)]
    let mut scope_3794 = writer.prefix("VpcIds");
    if let Some(var_3795) = &input.vpc_ids {
        let mut list_3797 = scope_3794.start_list(true, Some("VpcId"));
        for item_3796 in var_3795 {
            #[allow(unused_mut)]
            let mut entry_3798 = list_3797.entry();
            entry_3798.string(item_3796);
        }
        list_3797.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3799 = writer.prefix("DryRun");
    if let Some(var_3800) = &input.dry_run {
        scope_3799.boolean(*var_3800);
    }
    #[allow(unused_mut)]
    let mut scope_3801 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3802) = &input.connection_notification_id {
        scope_3801.string(var_3802);
    }
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("Filter");
    if let Some(var_3804) = &input.filters {
        let mut list_3806 = scope_3803.start_list(true, Some("Filter"));
        for item_3805 in var_3804 {
            #[allow(unused_mut)]
            let mut entry_3807 = list_3806.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3807, item_3805)?;
        }
        list_3806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("MaxResults");
    if let Some(var_3809) = &input.max_results {
        scope_3808.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3809).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("NextToken");
    if let Some(var_3811) = &input.next_token {
        scope_3810.string(var_3811);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("DryRun");
    if let Some(var_3813) = &input.dry_run {
        scope_3812.boolean(*var_3813);
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("Filter");
    if let Some(var_3815) = &input.filters {
        let mut list_3817 = scope_3814.start_list(true, Some("Filter"));
        for item_3816 in var_3815 {
            #[allow(unused_mut)]
            let mut entry_3818 = list_3817.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3818, item_3816)?;
        }
        list_3817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3819 = writer.prefix("MaxResults");
    if let Some(var_3820) = &input.max_results {
        scope_3819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3820).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3821 = writer.prefix("NextToken");
    if let Some(var_3822) = &input.next_token {
        scope_3821.string(var_3822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("DryRun");
    if let Some(var_3824) = &input.dry_run {
        scope_3823.boolean(*var_3824);
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("VpcEndpointId");
    if let Some(var_3826) = &input.vpc_endpoint_ids {
        let mut list_3828 = scope_3825.start_list(true, Some("item"));
        for item_3827 in var_3826 {
            #[allow(unused_mut)]
            let mut entry_3829 = list_3828.entry();
            entry_3829.string(item_3827);
        }
        list_3828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3830 = writer.prefix("Filter");
    if let Some(var_3831) = &input.filters {
        let mut list_3833 = scope_3830.start_list(true, Some("Filter"));
        for item_3832 in var_3831 {
            #[allow(unused_mut)]
            let mut entry_3834 = list_3833.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3834, item_3832)?;
        }
        list_3833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("MaxResults");
    if let Some(var_3836) = &input.max_results {
        scope_3835.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3836).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3837 = writer.prefix("NextToken");
    if let Some(var_3838) = &input.next_token {
        scope_3837.string(var_3838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3839 = writer.prefix("DryRun");
    if let Some(var_3840) = &input.dry_run {
        scope_3839.boolean(*var_3840);
    }
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("ServiceId");
    if let Some(var_3842) = &input.service_ids {
        let mut list_3844 = scope_3841.start_list(true, Some("item"));
        for item_3843 in var_3842 {
            #[allow(unused_mut)]
            let mut entry_3845 = list_3844.entry();
            entry_3845.string(item_3843);
        }
        list_3844.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3846 = writer.prefix("Filter");
    if let Some(var_3847) = &input.filters {
        let mut list_3849 = scope_3846.start_list(true, Some("Filter"));
        for item_3848 in var_3847 {
            #[allow(unused_mut)]
            let mut entry_3850 = list_3849.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3850, item_3848)?;
        }
        list_3849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("MaxResults");
    if let Some(var_3852) = &input.max_results {
        scope_3851.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3852).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("NextToken");
    if let Some(var_3854) = &input.next_token {
        scope_3853.string(var_3854);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("DryRun");
    if let Some(var_3856) = &input.dry_run {
        scope_3855.boolean(*var_3856);
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("ServiceId");
    if let Some(var_3858) = &input.service_id {
        scope_3857.string(var_3858);
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("Filter");
    if let Some(var_3860) = &input.filters {
        let mut list_3862 = scope_3859.start_list(true, Some("Filter"));
        for item_3861 in var_3860 {
            #[allow(unused_mut)]
            let mut entry_3863 = list_3862.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3863, item_3861)?;
        }
        list_3862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3864 = writer.prefix("MaxResults");
    if let Some(var_3865) = &input.max_results {
        scope_3864.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3865).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3866 = writer.prefix("NextToken");
    if let Some(var_3867) = &input.next_token {
        scope_3866.string(var_3867);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3868 = writer.prefix("DryRun");
    if let Some(var_3869) = &input.dry_run {
        scope_3868.boolean(*var_3869);
    }
    #[allow(unused_mut)]
    let mut scope_3870 = writer.prefix("ServiceName");
    if let Some(var_3871) = &input.service_names {
        let mut list_3873 = scope_3870.start_list(true, Some("item"));
        for item_3872 in var_3871 {
            #[allow(unused_mut)]
            let mut entry_3874 = list_3873.entry();
            entry_3874.string(item_3872);
        }
        list_3873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3875 = writer.prefix("Filter");
    if let Some(var_3876) = &input.filters {
        let mut list_3878 = scope_3875.start_list(true, Some("Filter"));
        for item_3877 in var_3876 {
            #[allow(unused_mut)]
            let mut entry_3879 = list_3878.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3879, item_3877)?;
        }
        list_3878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("MaxResults");
    if let Some(var_3881) = &input.max_results {
        scope_3880.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3881).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("NextToken");
    if let Some(var_3883) = &input.next_token {
        scope_3882.string(var_3883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("Filter");
    if let Some(var_3885) = &input.filters {
        let mut list_3887 = scope_3884.start_list(true, Some("Filter"));
        for item_3886 in var_3885 {
            #[allow(unused_mut)]
            let mut entry_3888 = list_3887.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3888, item_3886)?;
        }
        list_3887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3889 = writer.prefix("DryRun");
    if let Some(var_3890) = &input.dry_run {
        scope_3889.boolean(*var_3890);
    }
    #[allow(unused_mut)]
    let mut scope_3891 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3892) = &input.vpc_peering_connection_ids {
        let mut list_3894 = scope_3891.start_list(true, Some("item"));
        for item_3893 in var_3892 {
            #[allow(unused_mut)]
            let mut entry_3895 = list_3894.entry();
            entry_3895.string(item_3893);
        }
        list_3894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("NextToken");
    if let Some(var_3897) = &input.next_token {
        scope_3896.string(var_3897);
    }
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("MaxResults");
    if let Some(var_3899) = &input.max_results {
        scope_3898.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3899).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("Filter");
    if let Some(var_3901) = &input.filters {
        let mut list_3903 = scope_3900.start_list(true, Some("Filter"));
        for item_3902 in var_3901 {
            #[allow(unused_mut)]
            let mut entry_3904 = list_3903.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3904, item_3902)?;
        }
        list_3903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3905 = writer.prefix("VpcId");
    if let Some(var_3906) = &input.vpc_ids {
        let mut list_3908 = scope_3905.start_list(true, Some("VpcId"));
        for item_3907 in var_3906 {
            #[allow(unused_mut)]
            let mut entry_3909 = list_3908.entry();
            entry_3909.string(item_3907);
        }
        list_3908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3910 = writer.prefix("DryRun");
    if let Some(var_3911) = &input.dry_run {
        scope_3910.boolean(*var_3911);
    }
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("NextToken");
    if let Some(var_3913) = &input.next_token {
        scope_3912.string(var_3913);
    }
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("MaxResults");
    if let Some(var_3915) = &input.max_results {
        scope_3914.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3915).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("Filter");
    if let Some(var_3917) = &input.filters {
        let mut list_3919 = scope_3916.start_list(true, Some("Filter"));
        for item_3918 in var_3917 {
            #[allow(unused_mut)]
            let mut entry_3920 = list_3919.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3920, item_3918)?;
        }
        list_3919.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3921 = writer.prefix("VpnConnectionId");
    if let Some(var_3922) = &input.vpn_connection_ids {
        let mut list_3924 = scope_3921.start_list(true, Some("VpnConnectionId"));
        for item_3923 in var_3922 {
            #[allow(unused_mut)]
            let mut entry_3925 = list_3924.entry();
            entry_3925.string(item_3923);
        }
        list_3924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3926 = writer.prefix("DryRun");
    if let Some(var_3927) = &input.dry_run {
        scope_3926.boolean(*var_3927);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3928 = writer.prefix("Filter");
    if let Some(var_3929) = &input.filters {
        let mut list_3931 = scope_3928.start_list(true, Some("Filter"));
        for item_3930 in var_3929 {
            #[allow(unused_mut)]
            let mut entry_3932 = list_3931.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3932, item_3930)?;
        }
        list_3931.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("VpnGatewayId");
    if let Some(var_3934) = &input.vpn_gateway_ids {
        let mut list_3936 = scope_3933.start_list(true, Some("VpnGatewayId"));
        for item_3935 in var_3934 {
            #[allow(unused_mut)]
            let mut entry_3937 = list_3936.entry();
            entry_3937.string(item_3935);
        }
        list_3936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3938 = writer.prefix("DryRun");
    if let Some(var_3939) = &input.dry_run {
        scope_3938.boolean(*var_3939);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3940 = writer.prefix("DryRun");
    if let Some(var_3941) = &input.dry_run {
        scope_3940.boolean(*var_3941);
    }
    #[allow(unused_mut)]
    let mut scope_3942 = writer.prefix("InstanceId");
    if let Some(var_3943) = &input.instance_id {
        scope_3942.string(var_3943);
    }
    #[allow(unused_mut)]
    let mut scope_3944 = writer.prefix("VpcId");
    if let Some(var_3945) = &input.vpc_id {
        scope_3944.string(var_3945);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3946 = writer.prefix("DryRun");
    if let Some(var_3947) = &input.dry_run {
        scope_3946.boolean(*var_3947);
    }
    #[allow(unused_mut)]
    let mut scope_3948 = writer.prefix("InternetGatewayId");
    if let Some(var_3949) = &input.internet_gateway_id {
        scope_3948.string(var_3949);
    }
    #[allow(unused_mut)]
    let mut scope_3950 = writer.prefix("VpcId");
    if let Some(var_3951) = &input.vpc_id {
        scope_3950.string(var_3951);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3952 = writer.prefix("AttachmentId");
    if let Some(var_3953) = &input.attachment_id {
        scope_3952.string(var_3953);
    }
    #[allow(unused_mut)]
    let mut scope_3954 = writer.prefix("DryRun");
    if let Some(var_3955) = &input.dry_run {
        scope_3954.boolean(*var_3955);
    }
    #[allow(unused_mut)]
    let mut scope_3956 = writer.prefix("Force");
    if let Some(var_3957) = &input.force {
        scope_3956.boolean(*var_3957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3958 = writer.prefix("Device");
    if let Some(var_3959) = &input.device {
        scope_3958.string(var_3959);
    }
    #[allow(unused_mut)]
    let mut scope_3960 = writer.prefix("Force");
    if let Some(var_3961) = &input.force {
        scope_3960.boolean(*var_3961);
    }
    #[allow(unused_mut)]
    let mut scope_3962 = writer.prefix("InstanceId");
    if let Some(var_3963) = &input.instance_id {
        scope_3962.string(var_3963);
    }
    #[allow(unused_mut)]
    let mut scope_3964 = writer.prefix("VolumeId");
    if let Some(var_3965) = &input.volume_id {
        scope_3964.string(var_3965);
    }
    #[allow(unused_mut)]
    let mut scope_3966 = writer.prefix("DryRun");
    if let Some(var_3967) = &input.dry_run {
        scope_3966.boolean(*var_3967);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3968 = writer.prefix("VpcId");
    if let Some(var_3969) = &input.vpc_id {
        scope_3968.string(var_3969);
    }
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("VpnGatewayId");
    if let Some(var_3971) = &input.vpn_gateway_id {
        scope_3970.string(var_3971);
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("DryRun");
    if let Some(var_3973) = &input.dry_run {
        scope_3972.boolean(*var_3973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("DryRun");
    if let Some(var_3975) = &input.dry_run {
        scope_3974.boolean(*var_3975);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("ImageId");
    if let Some(var_3977) = &input.image_id {
        scope_3976.string(var_3977);
    }
    #[allow(unused_mut)]
    let mut scope_3978 = writer.prefix("Force");
    if let Some(var_3979) = &input.force {
        scope_3978.boolean(*var_3979);
    }
    #[allow(unused_mut)]
    let mut scope_3980 = writer.prefix("DryRun");
    if let Some(var_3981) = &input.dry_run {
        scope_3980.boolean(*var_3981);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3982 = writer.prefix("AvailabilityZone");
    if let Some(var_3983) = &input.availability_zones {
        let mut list_3985 = scope_3982.start_list(true, Some("AvailabilityZone"));
        for item_3984 in var_3983 {
            #[allow(unused_mut)]
            let mut entry_3986 = list_3985.entry();
            entry_3986.string(item_3984);
        }
        list_3985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3987 = writer.prefix("SourceSnapshotId");
    if let Some(var_3988) = &input.source_snapshot_ids {
        let mut list_3990 = scope_3987.start_list(true, Some("SnapshotId"));
        for item_3989 in var_3988 {
            #[allow(unused_mut)]
            let mut entry_3991 = list_3990.entry();
            entry_3991.string(item_3989);
        }
        list_3990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3992 = writer.prefix("DryRun");
    if let Some(var_3993) = &input.dry_run {
        scope_3992.boolean(*var_3993);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3994 = writer.prefix("ImageId");
    if let Some(var_3995) = &input.image_id {
        scope_3994.string(var_3995);
    }
    #[allow(unused_mut)]
    let mut scope_3996 = writer.prefix("DryRun");
    if let Some(var_3997) = &input.dry_run {
        scope_3996.boolean(*var_3997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3998 = writer.prefix("DryRun");
    if let Some(var_3999) = &input.dry_run {
        scope_3998.boolean(*var_3999);
    }
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4001) = &input.delegated_admin_account_id {
        scope_4000.string(var_4001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("DryRun");
    if let Some(var_4003) = &input.dry_run {
        scope_4002.boolean(*var_4003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4004 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4005) = &input.transit_gateway_route_table_id {
        scope_4004.string(var_4005);
    }
    #[allow(unused_mut)]
    let mut scope_4006 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4007) = &input.transit_gateway_attachment_id {
        scope_4006.string(var_4007);
    }
    #[allow(unused_mut)]
    let mut scope_4008 = writer.prefix("DryRun");
    if let Some(var_4009) = &input.dry_run {
        scope_4008.boolean(*var_4009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4010 = writer.prefix("GatewayId");
    if let Some(var_4011) = &input.gateway_id {
        scope_4010.string(var_4011);
    }
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("RouteTableId");
    if let Some(var_4013) = &input.route_table_id {
        scope_4012.string(var_4013);
    }
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("DryRun");
    if let Some(var_4015) = &input.dry_run {
        scope_4014.boolean(*var_4015);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("DryRun");
    if let Some(var_4017) = &input.dry_run {
        scope_4016.boolean(*var_4017);
    }
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("VpcId");
    if let Some(var_4019) = &input.vpc_id {
        scope_4018.string(var_4019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("VpcId");
    if let Some(var_4021) = &input.vpc_id {
        scope_4020.string(var_4021);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("AssociationId");
    if let Some(var_4023) = &input.association_id {
        scope_4022.string(var_4023);
    }
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("PublicIp");
    if let Some(var_4025) = &input.public_ip {
        scope_4024.string(var_4025);
    }
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("DryRun");
    if let Some(var_4027) = &input.dry_run {
        scope_4026.boolean(*var_4027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4029) = &input.client_vpn_endpoint_id {
        scope_4028.string(var_4029);
    }
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("AssociationId");
    if let Some(var_4031) = &input.association_id {
        scope_4030.string(var_4031);
    }
    #[allow(unused_mut)]
    let mut scope_4032 = writer.prefix("DryRun");
    if let Some(var_4033) = &input.dry_run {
        scope_4032.boolean(*var_4033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4034 = writer.prefix("CertificateArn");
    if let Some(var_4035) = &input.certificate_arn {
        scope_4034.string(var_4035);
    }
    #[allow(unused_mut)]
    let mut scope_4036 = writer.prefix("RoleArn");
    if let Some(var_4037) = &input.role_arn {
        scope_4036.string(var_4037);
    }
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("DryRun");
    if let Some(var_4039) = &input.dry_run {
        scope_4038.boolean(*var_4039);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("AssociationId");
    if let Some(var_4041) = &input.association_id {
        scope_4040.string(var_4041);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("DryRun");
    if let Some(var_4043) = &input.dry_run {
        scope_4042.boolean(*var_4043);
    }
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4045) = &input.instance_event_window_id {
        scope_4044.string(var_4045);
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("AssociationTarget");
    if let Some(var_4047) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4046, var_4047)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("AssociationId");
    if let Some(var_4049) = &input.association_id {
        scope_4048.string(var_4049);
    }
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("DryRun");
    if let Some(var_4051) = &input.dry_run {
        scope_4050.boolean(*var_4051);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("AssociationId");
    if let Some(var_4053) = &input.association_id {
        scope_4052.string(var_4053);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4055) = &input.transit_gateway_multicast_domain_id {
        scope_4054.string(var_4055);
    }
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4057) = &input.transit_gateway_attachment_id {
        scope_4056.string(var_4057);
    }
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("SubnetIds");
    if let Some(var_4059) = &input.subnet_ids {
        let mut list_4061 = scope_4058.start_list(true, Some("item"));
        for item_4060 in var_4059 {
            #[allow(unused_mut)]
            let mut entry_4062 = list_4061.entry();
            entry_4062.string(item_4060);
        }
        list_4061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4063 = writer.prefix("DryRun");
    if let Some(var_4064) = &input.dry_run {
        scope_4063.boolean(*var_4064);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4065 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4066) = &input.transit_gateway_route_table_id {
        scope_4065.string(var_4066);
    }
    #[allow(unused_mut)]
    let mut scope_4067 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4068) = &input.transit_gateway_attachment_id {
        scope_4067.string(var_4068);
    }
    #[allow(unused_mut)]
    let mut scope_4069 = writer.prefix("DryRun");
    if let Some(var_4070) = &input.dry_run {
        scope_4069.boolean(*var_4070);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4071 = writer.prefix("AssociationId");
    if let Some(var_4072) = &input.association_id {
        scope_4071.string(var_4072);
    }
    #[allow(unused_mut)]
    let mut scope_4073 = writer.prefix("ClientToken");
    if let Some(var_4074) = &input.client_token {
        scope_4073.string(var_4074);
    }
    #[allow(unused_mut)]
    let mut scope_4075 = writer.prefix("DryRun");
    if let Some(var_4076) = &input.dry_run {
        scope_4075.boolean(*var_4076);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4077 = writer.prefix("AssociationId");
    if let Some(var_4078) = &input.association_id {
        scope_4077.string(var_4078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("DryRun");
    if let Some(var_4080) = &input.dry_run {
        scope_4079.boolean(*var_4080);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("ImageId");
    if let Some(var_4082) = &input.image_id {
        scope_4081.string(var_4082);
    }
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("ResourceType");
    if let Some(var_4084) = &input.resource_type {
        scope_4083.string(var_4084);
    }
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4086) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4085, var_4086)?;
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("LaunchTemplate");
    if let Some(var_4088) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4087, var_4088)?;
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4090) = &input.max_parallel_launches {
        scope_4089.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4090).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("DryRun");
    if let Some(var_4092) = &input.dry_run {
        scope_4091.boolean(*var_4092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("AvailabilityZone");
    if let Some(var_4094) = &input.availability_zones {
        let mut list_4096 = scope_4093.start_list(true, Some("AvailabilityZone"));
        for item_4095 in var_4094 {
            #[allow(unused_mut)]
            let mut entry_4097 = list_4096.entry();
            entry_4097.string(item_4095);
        }
        list_4096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("SourceSnapshotId");
    if let Some(var_4099) = &input.source_snapshot_ids {
        let mut list_4101 = scope_4098.start_list(true, Some("SnapshotId"));
        for item_4100 in var_4099 {
            #[allow(unused_mut)]
            let mut entry_4102 = list_4101.entry();
            entry_4102.string(item_4100);
        }
        list_4101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4103 = writer.prefix("DryRun");
    if let Some(var_4104) = &input.dry_run {
        scope_4103.boolean(*var_4104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4105 = writer.prefix("ImageId");
    if let Some(var_4106) = &input.image_id {
        scope_4105.string(var_4106);
    }
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("DeprecateAt");
    if let Some(var_4108) = &input.deprecate_at {
        scope_4107.date_time(var_4108, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("DryRun");
    if let Some(var_4110) = &input.dry_run {
        scope_4109.boolean(*var_4110);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("DryRun");
    if let Some(var_4112) = &input.dry_run {
        scope_4111.boolean(*var_4112);
    }
    #[allow(unused_mut)]
    let mut scope_4113 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4114) = &input.delegated_admin_account_id {
        scope_4113.string(var_4114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4115 = writer.prefix("DryRun");
    if let Some(var_4116) = &input.dry_run {
        scope_4115.boolean(*var_4116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4117 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4118) = &input.transit_gateway_route_table_id {
        scope_4117.string(var_4118);
    }
    #[allow(unused_mut)]
    let mut scope_4119 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4120) = &input.transit_gateway_attachment_id {
        scope_4119.string(var_4120);
    }
    #[allow(unused_mut)]
    let mut scope_4121 = writer.prefix("DryRun");
    if let Some(var_4122) = &input.dry_run {
        scope_4121.boolean(*var_4122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4123 = writer.prefix("GatewayId");
    if let Some(var_4124) = &input.gateway_id {
        scope_4123.string(var_4124);
    }
    #[allow(unused_mut)]
    let mut scope_4125 = writer.prefix("RouteTableId");
    if let Some(var_4126) = &input.route_table_id {
        scope_4125.string(var_4126);
    }
    #[allow(unused_mut)]
    let mut scope_4127 = writer.prefix("DryRun");
    if let Some(var_4128) = &input.dry_run {
        scope_4127.boolean(*var_4128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4129 = writer.prefix("DryRun");
    if let Some(var_4130) = &input.dry_run {
        scope_4129.boolean(*var_4130);
    }
    #[allow(unused_mut)]
    let mut scope_4131 = writer.prefix("VolumeId");
    if let Some(var_4132) = &input.volume_id {
        scope_4131.string(var_4132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4133 = writer.prefix("DryRun");
    if let Some(var_4134) = &input.dry_run {
        scope_4133.boolean(*var_4134);
    }
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("VpcId");
    if let Some(var_4136) = &input.vpc_id {
        scope_4135.string(var_4136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("VpcId");
    if let Some(var_4138) = &input.vpc_id {
        scope_4137.string(var_4138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4140) = &input.client_vpn_endpoint_id {
        scope_4139.string(var_4140);
    }
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("DryRun");
    if let Some(var_4142) = &input.dry_run {
        scope_4141.boolean(*var_4142);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4144) = &input.client_vpn_endpoint_id {
        scope_4143.string(var_4144);
    }
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("DryRun");
    if let Some(var_4146) = &input.dry_run {
        scope_4145.boolean(*var_4146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("ClientToken");
    if let Some(var_4148) = &input.client_token {
        scope_4147.string(var_4148);
    }
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("Description");
    if let Some(var_4150) = &input.description {
        scope_4149.string(var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("DiskImageFormat");
    if let Some(var_4152) = &input.disk_image_format {
        scope_4151.string(var_4152.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("DryRun");
    if let Some(var_4154) = &input.dry_run {
        scope_4153.boolean(*var_4154);
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("ImageId");
    if let Some(var_4156) = &input.image_id {
        scope_4155.string(var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("S3ExportLocation");
    if let Some(var_4158) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4157, var_4158,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("RoleName");
    if let Some(var_4160) = &input.role_name {
        scope_4159.string(var_4160);
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("TagSpecification");
    if let Some(var_4162) = &input.tag_specifications {
        let mut list_4164 = scope_4161.start_list(true, Some("item"));
        for item_4163 in var_4162 {
            #[allow(unused_mut)]
            let mut entry_4165 = list_4164.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4165, item_4163,
            )?;
        }
        list_4164.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4166 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4167) = &input.transit_gateway_route_table_id {
        scope_4166.string(var_4167);
    }
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("Filter");
    if let Some(var_4169) = &input.filters {
        let mut list_4171 = scope_4168.start_list(true, Some("Filter"));
        for item_4170 in var_4169 {
            #[allow(unused_mut)]
            let mut entry_4172 = list_4171.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4172, item_4170)?;
        }
        list_4171.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4173 = writer.prefix("S3Bucket");
    if let Some(var_4174) = &input.s3_bucket {
        scope_4173.string(var_4174);
    }
    #[allow(unused_mut)]
    let mut scope_4175 = writer.prefix("DryRun");
    if let Some(var_4176) = &input.dry_run {
        scope_4175.boolean(*var_4176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("CertificateArn");
    if let Some(var_4178) = &input.certificate_arn {
        scope_4177.string(var_4178);
    }
    #[allow(unused_mut)]
    let mut scope_4179 = writer.prefix("DryRun");
    if let Some(var_4180) = &input.dry_run {
        scope_4179.boolean(*var_4180);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("PoolId");
    if let Some(var_4182) = &input.pool_id {
        scope_4181.string(var_4182);
    }
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("NextToken");
    if let Some(var_4184) = &input.next_token {
        scope_4183.string(var_4184);
    }
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("MaxResults");
    if let Some(var_4186) = &input.max_results {
        scope_4185.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4186).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("DryRun");
    if let Some(var_4188) = &input.dry_run {
        scope_4187.boolean(*var_4188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("CapacityReservationId");
    if let Some(var_4190) = &input.capacity_reservation_id {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("NextToken");
    if let Some(var_4192) = &input.next_token {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("MaxResults");
    if let Some(var_4194) = &input.max_results {
        scope_4193.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4194).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("DryRun");
    if let Some(var_4196) = &input.dry_run {
        scope_4195.boolean(*var_4196);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("PoolId");
    if let Some(var_4198) = &input.pool_id {
        scope_4197.string(var_4198);
    }
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("Filter");
    if let Some(var_4200) = &input.filters {
        let mut list_4202 = scope_4199.start_list(true, Some("Filter"));
        for item_4201 in var_4200 {
            #[allow(unused_mut)]
            let mut entry_4203 = list_4202.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4203, item_4201)?;
        }
        list_4202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4204 = writer.prefix("MaxResults");
    if let Some(var_4205) = &input.max_results {
        scope_4204.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4205).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4206 = writer.prefix("NextToken");
    if let Some(var_4207) = &input.next_token {
        scope_4206.string(var_4207);
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("DryRun");
    if let Some(var_4209) = &input.dry_run {
        scope_4208.boolean(*var_4209);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("InstanceId");
    if let Some(var_4211) = &input.instance_id {
        scope_4210.string(var_4211);
    }
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("DryRun");
    if let Some(var_4213) = &input.dry_run {
        scope_4212.boolean(*var_4213);
    }
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("Latest");
    if let Some(var_4215) = &input.latest {
        scope_4214.boolean(*var_4215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("DryRun");
    if let Some(var_4217) = &input.dry_run {
        scope_4216.boolean(*var_4217);
    }
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("InstanceId");
    if let Some(var_4219) = &input.instance_id {
        scope_4218.string(var_4219);
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("WakeUp");
    if let Some(var_4221) = &input.wake_up {
        scope_4220.boolean(*var_4221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("DryRun");
    if let Some(var_4223) = &input.dry_run {
        scope_4222.boolean(*var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("InstanceFamily");
    if let Some(var_4225) = &input.instance_family {
        scope_4224.string(var_4225.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("DryRun");
    if let Some(var_4227) = &input.dry_run {
        scope_4226.boolean(*var_4227);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("DryRun");
    if let Some(var_4229) = &input.dry_run {
        scope_4228.boolean(*var_4229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("DryRun");
    if let Some(var_4231) = &input.dry_run {
        scope_4230.boolean(*var_4231);
    }
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("FlowLogId");
    if let Some(var_4233) = &input.flow_log_id {
        scope_4232.string(var_4233);
    }
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4235) = &input.config_delivery_s3_destination_arn {
        scope_4234.string(var_4235);
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("IntegrateService");
    if let Some(var_4237) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4236, var_4237)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("CapacityReservationId");
    if let Some(var_4239) = &input.capacity_reservation_id {
        scope_4238.string(var_4239);
    }
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("NextToken");
    if let Some(var_4241) = &input.next_token {
        scope_4240.string(var_4241);
    }
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("MaxResults");
    if let Some(var_4243) = &input.max_results {
        scope_4242.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4243).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4244 = writer.prefix("DryRun");
    if let Some(var_4245) = &input.dry_run {
        scope_4244.boolean(*var_4245);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4246 = writer.prefix("HostIdSet");
    if let Some(var_4247) = &input.host_id_set {
        let mut list_4249 = scope_4246.start_list(true, Some("item"));
        for item_4248 in var_4247 {
            #[allow(unused_mut)]
            let mut entry_4250 = list_4249.entry();
            entry_4250.string(item_4248);
        }
        list_4249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4251 = writer.prefix("OfferingId");
    if let Some(var_4252) = &input.offering_id {
        scope_4251.string(var_4252);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4253 = writer.prefix("DryRun");
    if let Some(var_4254) = &input.dry_run {
        scope_4253.boolean(*var_4254);
    }
    #[allow(unused_mut)]
    let mut scope_4255 = writer.prefix("ArchitectureType");
    if let Some(var_4256) = &input.architecture_types {
        let mut list_4258 = scope_4255.start_list(true, Some("item"));
        for item_4257 in var_4256 {
            #[allow(unused_mut)]
            let mut entry_4259 = list_4258.entry();
            entry_4259.string(item_4257.as_str());
        }
        list_4258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("VirtualizationType");
    if let Some(var_4261) = &input.virtualization_types {
        let mut list_4263 = scope_4260.start_list(true, Some("item"));
        for item_4262 in var_4261 {
            #[allow(unused_mut)]
            let mut entry_4264 = list_4263.entry();
            entry_4264.string(item_4262.as_str());
        }
        list_4263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4265 = writer.prefix("InstanceRequirements");
    if let Some(var_4266) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4265, var_4266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4267 = writer.prefix("MaxResults");
    if let Some(var_4268) = &input.max_results {
        scope_4267.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4268).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4269 = writer.prefix("NextToken");
    if let Some(var_4270) = &input.next_token {
        scope_4269.string(var_4270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(
    input: &crate::input::GetInstanceUefiDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4271 = writer.prefix("InstanceId");
    if let Some(var_4272) = &input.instance_id {
        scope_4271.string(var_4272);
    }
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("DryRun");
    if let Some(var_4274) = &input.dry_run {
        scope_4273.boolean(*var_4274);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("DryRun");
    if let Some(var_4276) = &input.dry_run {
        scope_4275.boolean(*var_4276);
    }
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("Cidr");
    if let Some(var_4278) = &input.cidr {
        scope_4277.string(var_4278);
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("IpamScopeId");
    if let Some(var_4280) = &input.ipam_scope_id {
        scope_4279.string(var_4280);
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("VpcId");
    if let Some(var_4282) = &input.vpc_id {
        scope_4281.string(var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("StartTime");
    if let Some(var_4284) = &input.start_time {
        scope_4283.date_time(var_4284, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("EndTime");
    if let Some(var_4286) = &input.end_time {
        scope_4285.date_time(var_4286, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("MaxResults");
    if let Some(var_4288) = &input.max_results {
        scope_4287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("NextToken");
    if let Some(var_4290) = &input.next_token {
        scope_4289.string(var_4290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("DryRun");
    if let Some(var_4292) = &input.dry_run {
        scope_4291.boolean(*var_4292);
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("IpamPoolId");
    if let Some(var_4294) = &input.ipam_pool_id {
        scope_4293.string(var_4294);
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4296) = &input.ipam_pool_allocation_id {
        scope_4295.string(var_4296);
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("Filter");
    if let Some(var_4298) = &input.filters {
        let mut list_4300 = scope_4297.start_list(true, Some("Filter"));
        for item_4299 in var_4298 {
            #[allow(unused_mut)]
            let mut entry_4301 = list_4300.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4301, item_4299)?;
        }
        list_4300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("MaxResults");
    if let Some(var_4303) = &input.max_results {
        scope_4302.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("NextToken");
    if let Some(var_4305) = &input.next_token {
        scope_4304.string(var_4305);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("DryRun");
    if let Some(var_4307) = &input.dry_run {
        scope_4306.boolean(*var_4307);
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("IpamPoolId");
    if let Some(var_4309) = &input.ipam_pool_id {
        scope_4308.string(var_4309);
    }
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("Filter");
    if let Some(var_4311) = &input.filters {
        let mut list_4313 = scope_4310.start_list(true, Some("Filter"));
        for item_4312 in var_4311 {
            #[allow(unused_mut)]
            let mut entry_4314 = list_4313.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4314, item_4312)?;
        }
        list_4313.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4315 = writer.prefix("MaxResults");
    if let Some(var_4316) = &input.max_results {
        scope_4315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4316).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4317 = writer.prefix("NextToken");
    if let Some(var_4318) = &input.next_token {
        scope_4317.string(var_4318);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("DryRun");
    if let Some(var_4320) = &input.dry_run {
        scope_4319.boolean(*var_4320);
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("Filter");
    if let Some(var_4322) = &input.filters {
        let mut list_4324 = scope_4321.start_list(true, Some("Filter"));
        for item_4323 in var_4322 {
            #[allow(unused_mut)]
            let mut entry_4325 = list_4324.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4325, item_4323)?;
        }
        list_4324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4326 = writer.prefix("MaxResults");
    if let Some(var_4327) = &input.max_results {
        scope_4326.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4328 = writer.prefix("NextToken");
    if let Some(var_4329) = &input.next_token {
        scope_4328.string(var_4329);
    }
    #[allow(unused_mut)]
    let mut scope_4330 = writer.prefix("IpamScopeId");
    if let Some(var_4331) = &input.ipam_scope_id {
        scope_4330.string(var_4331);
    }
    #[allow(unused_mut)]
    let mut scope_4332 = writer.prefix("IpamPoolId");
    if let Some(var_4333) = &input.ipam_pool_id {
        scope_4332.string(var_4333);
    }
    #[allow(unused_mut)]
    let mut scope_4334 = writer.prefix("ResourceId");
    if let Some(var_4335) = &input.resource_id {
        scope_4334.string(var_4335);
    }
    #[allow(unused_mut)]
    let mut scope_4336 = writer.prefix("ResourceType");
    if let Some(var_4337) = &input.resource_type {
        scope_4336.string(var_4337.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4338 = writer.prefix("ResourceTag");
    if let Some(var_4339) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4338, var_4339,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4340 = writer.prefix("ResourceOwner");
    if let Some(var_4341) = &input.resource_owner {
        scope_4340.string(var_4341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4342 = writer.prefix("DryRun");
    if let Some(var_4343) = &input.dry_run {
        scope_4342.boolean(*var_4343);
    }
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("InstanceId");
    if let Some(var_4345) = &input.instance_id {
        scope_4344.string(var_4345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4346 = writer.prefix("DryRun");
    if let Some(var_4347) = &input.dry_run {
        scope_4346.boolean(*var_4347);
    }
    #[allow(unused_mut)]
    let mut scope_4348 = writer.prefix("PrefixListId");
    if let Some(var_4349) = &input.prefix_list_id {
        scope_4348.string(var_4349);
    }
    #[allow(unused_mut)]
    let mut scope_4350 = writer.prefix("MaxResults");
    if let Some(var_4351) = &input.max_results {
        scope_4350.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4351).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4352 = writer.prefix("NextToken");
    if let Some(var_4353) = &input.next_token {
        scope_4352.string(var_4353);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4354 = writer.prefix("DryRun");
    if let Some(var_4355) = &input.dry_run {
        scope_4354.boolean(*var_4355);
    }
    #[allow(unused_mut)]
    let mut scope_4356 = writer.prefix("PrefixListId");
    if let Some(var_4357) = &input.prefix_list_id {
        scope_4356.string(var_4357);
    }
    #[allow(unused_mut)]
    let mut scope_4358 = writer.prefix("TargetVersion");
    if let Some(var_4359) = &input.target_version {
        scope_4358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4359).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4360 = writer.prefix("MaxResults");
    if let Some(var_4361) = &input.max_results {
        scope_4360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4361).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4362 = writer.prefix("NextToken");
    if let Some(var_4363) = &input.next_token {
        scope_4362.string(var_4363);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4365) = &input.network_insights_access_scope_analysis_id {
        scope_4364.string(var_4365);
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("MaxResults");
    if let Some(var_4367) = &input.max_results {
        scope_4366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4367).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("NextToken");
    if let Some(var_4369) = &input.next_token {
        scope_4368.string(var_4369);
    }
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("DryRun");
    if let Some(var_4371) = &input.dry_run {
        scope_4370.boolean(*var_4371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4372 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4373) = &input.network_insights_access_scope_id {
        scope_4372.string(var_4373);
    }
    #[allow(unused_mut)]
    let mut scope_4374 = writer.prefix("DryRun");
    if let Some(var_4375) = &input.dry_run {
        scope_4374.boolean(*var_4375);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4376 = writer.prefix("InstanceId");
    if let Some(var_4377) = &input.instance_id {
        scope_4376.string(var_4377);
    }
    #[allow(unused_mut)]
    let mut scope_4378 = writer.prefix("DryRun");
    if let Some(var_4379) = &input.dry_run {
        scope_4378.boolean(*var_4379);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("DryRun");
    if let Some(var_4381) = &input.dry_run {
        scope_4380.boolean(*var_4381);
    }
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("ReservedInstanceId");
    if let Some(var_4383) = &input.reserved_instance_ids {
        let mut list_4385 = scope_4382.start_list(true, Some("ReservedInstanceId"));
        for item_4384 in var_4383 {
            #[allow(unused_mut)]
            let mut entry_4386 = list_4385.entry();
            entry_4386.string(item_4384);
        }
        list_4385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4387 = writer.prefix("TargetConfiguration");
    if let Some(var_4388) = &input.target_configurations {
        let mut list_4390 = scope_4387.start_list(true, Some("TargetConfigurationRequest"));
        for item_4389 in var_4388 {
            #[allow(unused_mut)]
            let mut entry_4391 = list_4390.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4391, item_4389,
            )?;
        }
        list_4390.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4392 = writer.prefix("DryRun");
    if let Some(var_4393) = &input.dry_run {
        scope_4392.boolean(*var_4393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4394 = writer.prefix("InstanceType");
    if let Some(var_4395) = &input.instance_types {
        let mut list_4397 = scope_4394.start_list(true, None);
        for item_4396 in var_4395 {
            #[allow(unused_mut)]
            let mut entry_4398 = list_4397.entry();
            entry_4398.string(item_4396);
        }
        list_4397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4399 = writer.prefix("TargetCapacity");
    if let Some(var_4400) = &input.target_capacity {
        scope_4399.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4400).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4401 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4402) = &input.target_capacity_unit_type {
        scope_4401.string(var_4402.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4404) = &input.single_availability_zone {
        scope_4403.boolean(*var_4404);
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("RegionName");
    if let Some(var_4406) = &input.region_names {
        let mut list_4408 = scope_4405.start_list(true, None);
        for item_4407 in var_4406 {
            #[allow(unused_mut)]
            let mut entry_4409 = list_4408.entry();
            entry_4409.string(item_4407);
        }
        list_4408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4411) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4410, var_4411)?;
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("DryRun");
    if let Some(var_4413) = &input.dry_run {
        scope_4412.boolean(*var_4413);
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("MaxResults");
    if let Some(var_4415) = &input.max_results {
        scope_4414.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4415).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("NextToken");
    if let Some(var_4417) = &input.next_token {
        scope_4416.string(var_4417);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("Filter");
    if let Some(var_4419) = &input.filters {
        let mut list_4421 = scope_4418.start_list(true, Some("Filter"));
        for item_4420 in var_4419 {
            #[allow(unused_mut)]
            let mut entry_4422 = list_4421.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4422, item_4420)?;
        }
        list_4421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4423 = writer.prefix("SubnetId");
    if let Some(var_4424) = &input.subnet_id {
        scope_4423.string(var_4424);
    }
    #[allow(unused_mut)]
    let mut scope_4425 = writer.prefix("DryRun");
    if let Some(var_4426) = &input.dry_run {
        scope_4425.boolean(*var_4426);
    }
    #[allow(unused_mut)]
    let mut scope_4427 = writer.prefix("NextToken");
    if let Some(var_4428) = &input.next_token {
        scope_4427.string(var_4428);
    }
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("MaxResults");
    if let Some(var_4430) = &input.max_results {
        scope_4429.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4430).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4432) = &input.transit_gateway_attachment_id {
        scope_4431.string(var_4432);
    }
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("Filter");
    if let Some(var_4434) = &input.filters {
        let mut list_4436 = scope_4433.start_list(true, Some("Filter"));
        for item_4435 in var_4434 {
            #[allow(unused_mut)]
            let mut entry_4437 = list_4436.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4437, item_4435)?;
        }
        list_4436.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("MaxResults");
    if let Some(var_4439) = &input.max_results {
        scope_4438.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4439).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("NextToken");
    if let Some(var_4441) = &input.next_token {
        scope_4440.string(var_4441);
    }
    #[allow(unused_mut)]
    let mut scope_4442 = writer.prefix("DryRun");
    if let Some(var_4443) = &input.dry_run {
        scope_4442.boolean(*var_4443);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4445) = &input.transit_gateway_multicast_domain_id {
        scope_4444.string(var_4445);
    }
    #[allow(unused_mut)]
    let mut scope_4446 = writer.prefix("Filter");
    if let Some(var_4447) = &input.filters {
        let mut list_4449 = scope_4446.start_list(true, Some("Filter"));
        for item_4448 in var_4447 {
            #[allow(unused_mut)]
            let mut entry_4450 = list_4449.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4450, item_4448)?;
        }
        list_4449.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4451 = writer.prefix("MaxResults");
    if let Some(var_4452) = &input.max_results {
        scope_4451.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4452).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4453 = writer.prefix("NextToken");
    if let Some(var_4454) = &input.next_token {
        scope_4453.string(var_4454);
    }
    #[allow(unused_mut)]
    let mut scope_4455 = writer.prefix("DryRun");
    if let Some(var_4456) = &input.dry_run {
        scope_4455.boolean(*var_4456);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4458) = &input.transit_gateway_route_table_id {
        scope_4457.string(var_4458);
    }
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("Filter");
    if let Some(var_4460) = &input.filters {
        let mut list_4462 = scope_4459.start_list(true, Some("Filter"));
        for item_4461 in var_4460 {
            #[allow(unused_mut)]
            let mut entry_4463 = list_4462.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4463, item_4461)?;
        }
        list_4462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("MaxResults");
    if let Some(var_4465) = &input.max_results {
        scope_4464.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4465).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("NextToken");
    if let Some(var_4467) = &input.next_token {
        scope_4466.string(var_4467);
    }
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("DryRun");
    if let Some(var_4469) = &input.dry_run {
        scope_4468.boolean(*var_4469);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4471) = &input.transit_gateway_route_table_id {
        scope_4470.string(var_4471);
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("Filter");
    if let Some(var_4473) = &input.filters {
        let mut list_4475 = scope_4472.start_list(true, Some("Filter"));
        for item_4474 in var_4473 {
            #[allow(unused_mut)]
            let mut entry_4476 = list_4475.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4476, item_4474)?;
        }
        list_4475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4477 = writer.prefix("MaxResults");
    if let Some(var_4478) = &input.max_results {
        scope_4477.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4478).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("NextToken");
    if let Some(var_4480) = &input.next_token {
        scope_4479.string(var_4480);
    }
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("DryRun");
    if let Some(var_4482) = &input.dry_run {
        scope_4481.boolean(*var_4482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4484) = &input.transit_gateway_route_table_id {
        scope_4483.string(var_4484);
    }
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("Filter");
    if let Some(var_4486) = &input.filters {
        let mut list_4488 = scope_4485.start_list(true, Some("Filter"));
        for item_4487 in var_4486 {
            #[allow(unused_mut)]
            let mut entry_4489 = list_4488.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4489, item_4487)?;
        }
        list_4488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4490 = writer.prefix("MaxResults");
    if let Some(var_4491) = &input.max_results {
        scope_4490.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4491).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("NextToken");
    if let Some(var_4493) = &input.next_token {
        scope_4492.string(var_4493);
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("DryRun");
    if let Some(var_4495) = &input.dry_run {
        scope_4494.boolean(*var_4495);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("VpnConnectionId");
    if let Some(var_4497) = &input.vpn_connection_id {
        scope_4496.string(var_4497);
    }
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4499) = &input.vpn_connection_device_type_id {
        scope_4498.string(var_4499);
    }
    #[allow(unused_mut)]
    let mut scope_4500 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4501) = &input.internet_key_exchange_version {
        scope_4500.string(var_4501);
    }
    #[allow(unused_mut)]
    let mut scope_4502 = writer.prefix("DryRun");
    if let Some(var_4503) = &input.dry_run {
        scope_4502.boolean(*var_4503);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4504 = writer.prefix("MaxResults");
    if let Some(var_4505) = &input.max_results {
        scope_4504.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4505).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4506 = writer.prefix("NextToken");
    if let Some(var_4507) = &input.next_token {
        scope_4506.string(var_4507);
    }
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("DryRun");
    if let Some(var_4509) = &input.dry_run {
        scope_4508.boolean(*var_4509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4511) = &input.client_vpn_endpoint_id {
        scope_4510.string(var_4511);
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("CertificateRevocationList");
    if let Some(var_4513) = &input.certificate_revocation_list {
        scope_4512.string(var_4513);
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("DryRun");
    if let Some(var_4515) = &input.dry_run {
        scope_4514.boolean(*var_4515);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("Architecture");
    if let Some(var_4517) = &input.architecture {
        scope_4516.string(var_4517);
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("ClientData");
    if let Some(var_4519) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4518, var_4519)?;
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("ClientToken");
    if let Some(var_4521) = &input.client_token {
        scope_4520.string(var_4521);
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("Description");
    if let Some(var_4523) = &input.description {
        scope_4522.string(var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("DiskContainer");
    if let Some(var_4525) = &input.disk_containers {
        let mut list_4527 = scope_4524.start_list(true, Some("item"));
        for item_4526 in var_4525 {
            #[allow(unused_mut)]
            let mut entry_4528 = list_4527.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4528, item_4526,
            )?;
        }
        list_4527.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4529 = writer.prefix("DryRun");
    if let Some(var_4530) = &input.dry_run {
        scope_4529.boolean(*var_4530);
    }
    #[allow(unused_mut)]
    let mut scope_4531 = writer.prefix("Encrypted");
    if let Some(var_4532) = &input.encrypted {
        scope_4531.boolean(*var_4532);
    }
    #[allow(unused_mut)]
    let mut scope_4533 = writer.prefix("Hypervisor");
    if let Some(var_4534) = &input.hypervisor {
        scope_4533.string(var_4534);
    }
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("KmsKeyId");
    if let Some(var_4536) = &input.kms_key_id {
        scope_4535.string(var_4536);
    }
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("LicenseType");
    if let Some(var_4538) = &input.license_type {
        scope_4537.string(var_4538);
    }
    #[allow(unused_mut)]
    let mut scope_4539 = writer.prefix("Platform");
    if let Some(var_4540) = &input.platform {
        scope_4539.string(var_4540);
    }
    #[allow(unused_mut)]
    let mut scope_4541 = writer.prefix("RoleName");
    if let Some(var_4542) = &input.role_name {
        scope_4541.string(var_4542);
    }
    #[allow(unused_mut)]
    let mut scope_4543 = writer.prefix("LicenseSpecifications");
    if let Some(var_4544) = &input.license_specifications {
        let mut list_4546 = scope_4543.start_list(true, Some("item"));
        for item_4545 in var_4544 {
            #[allow(unused_mut)]
            let mut entry_4547 = list_4546.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4547, item_4545)?;
        }
        list_4546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4548 = writer.prefix("TagSpecification");
    if let Some(var_4549) = &input.tag_specifications {
        let mut list_4551 = scope_4548.start_list(true, Some("item"));
        for item_4550 in var_4549 {
            #[allow(unused_mut)]
            let mut entry_4552 = list_4551.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4552, item_4550,
            )?;
        }
        list_4551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("UsageOperation");
    if let Some(var_4554) = &input.usage_operation {
        scope_4553.string(var_4554);
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("BootMode");
    if let Some(var_4556) = &input.boot_mode {
        scope_4555.string(var_4556.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("Description");
    if let Some(var_4558) = &input.description {
        scope_4557.string(var_4558);
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("DiskImage");
    if let Some(var_4560) = &input.disk_images {
        let mut list_4562 = scope_4559.start_list(true, None);
        for item_4561 in var_4560 {
            #[allow(unused_mut)]
            let mut entry_4563 = list_4562.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4563, item_4561)?;
        }
        list_4562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("DryRun");
    if let Some(var_4565) = &input.dry_run {
        scope_4564.boolean(*var_4565);
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("LaunchSpecification");
    if let Some(var_4567) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4566, var_4567,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("Platform");
    if let Some(var_4569) = &input.platform {
        scope_4568.string(var_4569.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("DryRun");
    if let Some(var_4571) = &input.dry_run {
        scope_4570.boolean(*var_4571);
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("KeyName");
    if let Some(var_4573) = &input.key_name {
        scope_4572.string(var_4573);
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4575) = &input.public_key_material {
        scope_4574.string(&aws_smithy_types::base64::encode(var_4575));
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("TagSpecification");
    if let Some(var_4577) = &input.tag_specifications {
        let mut list_4579 = scope_4576.start_list(true, Some("item"));
        for item_4578 in var_4577 {
            #[allow(unused_mut)]
            let mut entry_4580 = list_4579.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4580, item_4578,
            )?;
        }
        list_4579.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4581 = writer.prefix("ClientData");
    if let Some(var_4582) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4581, var_4582)?;
    }
    #[allow(unused_mut)]
    let mut scope_4583 = writer.prefix("ClientToken");
    if let Some(var_4584) = &input.client_token {
        scope_4583.string(var_4584);
    }
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("Description");
    if let Some(var_4586) = &input.description {
        scope_4585.string(var_4586);
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("DiskContainer");
    if let Some(var_4588) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4587, var_4588,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("DryRun");
    if let Some(var_4590) = &input.dry_run {
        scope_4589.boolean(*var_4590);
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("Encrypted");
    if let Some(var_4592) = &input.encrypted {
        scope_4591.boolean(*var_4592);
    }
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("KmsKeyId");
    if let Some(var_4594) = &input.kms_key_id {
        scope_4593.string(var_4594);
    }
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("RoleName");
    if let Some(var_4596) = &input.role_name {
        scope_4595.string(var_4596);
    }
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("TagSpecification");
    if let Some(var_4598) = &input.tag_specifications {
        let mut list_4600 = scope_4597.start_list(true, Some("item"));
        for item_4599 in var_4598 {
            #[allow(unused_mut)]
            let mut entry_4601 = list_4600.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4601, item_4599,
            )?;
        }
        list_4600.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("AvailabilityZone");
    if let Some(var_4603) = &input.availability_zone {
        scope_4602.string(var_4603);
    }
    #[allow(unused_mut)]
    let mut scope_4604 = writer.prefix("Description");
    if let Some(var_4605) = &input.description {
        scope_4604.string(var_4605);
    }
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("DryRun");
    if let Some(var_4607) = &input.dry_run {
        scope_4606.boolean(*var_4607);
    }
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("Image");
    if let Some(var_4609) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4608, var_4609)?;
    }
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("Volume");
    if let Some(var_4611) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4610, var_4611)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("ImageId");
    if let Some(var_4613) = &input.image_ids {
        let mut list_4615 = scope_4612.start_list(true, Some("ImageId"));
        for item_4614 in var_4613 {
            #[allow(unused_mut)]
            let mut entry_4616 = list_4615.entry();
            entry_4616.string(item_4614);
        }
        list_4615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("NextToken");
    if let Some(var_4618) = &input.next_token {
        scope_4617.string(var_4618);
    }
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("MaxResults");
    if let Some(var_4620) = &input.max_results {
        scope_4619.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4620).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("DryRun");
    if let Some(var_4622) = &input.dry_run {
        scope_4621.boolean(*var_4622);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("MaxResults");
    if let Some(var_4624) = &input.max_results {
        scope_4623.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4624).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("NextToken");
    if let Some(var_4626) = &input.next_token {
        scope_4625.string(var_4626);
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("SnapshotId");
    if let Some(var_4628) = &input.snapshot_ids {
        let mut list_4630 = scope_4627.start_list(true, Some("SnapshotId"));
        for item_4629 in var_4628 {
            #[allow(unused_mut)]
            let mut entry_4631 = list_4630.entry();
            entry_4631.string(item_4629);
        }
        list_4630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4632 = writer.prefix("DryRun");
    if let Some(var_4633) = &input.dry_run {
        scope_4632.boolean(*var_4633);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4634 = writer.prefix("AllocationId");
    if let Some(var_4635) = &input.allocation_id {
        scope_4634.string(var_4635);
    }
    #[allow(unused_mut)]
    let mut scope_4636 = writer.prefix("DomainName");
    if let Some(var_4637) = &input.domain_name {
        scope_4636.string(var_4637);
    }
    #[allow(unused_mut)]
    let mut scope_4638 = writer.prefix("DryRun");
    if let Some(var_4639) = &input.dry_run {
        scope_4638.boolean(*var_4639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4640 = writer.prefix("GroupName");
    if let Some(var_4641) = &input.group_name {
        scope_4640.string(var_4641);
    }
    #[allow(unused_mut)]
    let mut scope_4642 = writer.prefix("OptInStatus");
    if let Some(var_4643) = &input.opt_in_status {
        scope_4642.string(var_4643.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4644 = writer.prefix("DryRun");
    if let Some(var_4645) = &input.dry_run {
        scope_4644.boolean(*var_4645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("CapacityReservationId");
    if let Some(var_4647) = &input.capacity_reservation_id {
        scope_4646.string(var_4647);
    }
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("InstanceCount");
    if let Some(var_4649) = &input.instance_count {
        scope_4648.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4649).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("EndDate");
    if let Some(var_4651) = &input.end_date {
        scope_4650.date_time(var_4651, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("EndDateType");
    if let Some(var_4653) = &input.end_date_type {
        scope_4652.string(var_4653.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("Accept");
    if let Some(var_4655) = &input.accept {
        scope_4654.boolean(*var_4655);
    }
    #[allow(unused_mut)]
    let mut scope_4656 = writer.prefix("DryRun");
    if let Some(var_4657) = &input.dry_run {
        scope_4656.boolean(*var_4657);
    }
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("AdditionalInfo");
    if let Some(var_4659) = &input.additional_info {
        scope_4658.string(var_4659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4660 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4661) = &input.capacity_reservation_fleet_id {
        scope_4660.string(var_4661);
    }
    #[allow(unused_mut)]
    let mut scope_4662 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4663) = &input.total_target_capacity {
        scope_4662.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4663).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4664 = writer.prefix("EndDate");
    if let Some(var_4665) = &input.end_date {
        scope_4664.date_time(var_4665, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4666 = writer.prefix("DryRun");
    if let Some(var_4667) = &input.dry_run {
        scope_4666.boolean(*var_4667);
    }
    #[allow(unused_mut)]
    let mut scope_4668 = writer.prefix("RemoveEndDate");
    if let Some(var_4669) = &input.remove_end_date {
        scope_4668.boolean(*var_4669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4670 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4671) = &input.client_vpn_endpoint_id {
        scope_4670.string(var_4671);
    }
    #[allow(unused_mut)]
    let mut scope_4672 = writer.prefix("ServerCertificateArn");
    if let Some(var_4673) = &input.server_certificate_arn {
        scope_4672.string(var_4673);
    }
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4675) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4674, var_4675,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("DnsServers");
    if let Some(var_4677) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4676, var_4677,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("VpnPort");
    if let Some(var_4679) = &input.vpn_port {
        scope_4678.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4679).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("Description");
    if let Some(var_4681) = &input.description {
        scope_4680.string(var_4681);
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("SplitTunnel");
    if let Some(var_4683) = &input.split_tunnel {
        scope_4682.boolean(*var_4683);
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("DryRun");
    if let Some(var_4685) = &input.dry_run {
        scope_4684.boolean(*var_4685);
    }
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("SecurityGroupId");
    if let Some(var_4687) = &input.security_group_ids {
        let mut list_4689 = scope_4686.start_list(true, Some("item"));
        for item_4688 in var_4687 {
            #[allow(unused_mut)]
            let mut entry_4690 = list_4689.entry();
            entry_4690.string(item_4688);
        }
        list_4689.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4691 = writer.prefix("VpcId");
    if let Some(var_4692) = &input.vpc_id {
        scope_4691.string(var_4692);
    }
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("SelfServicePortal");
    if let Some(var_4694) = &input.self_service_portal {
        scope_4693.string(var_4694.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("ClientConnectOptions");
    if let Some(var_4696) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4695, var_4696,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4698) = &input.session_timeout_hours {
        scope_4697.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4698).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4700) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4699, var_4700,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("DryRun");
    if let Some(var_4702) = &input.dry_run {
        scope_4701.boolean(*var_4702);
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("InstanceFamily");
    if let Some(var_4704) = &input.instance_family {
        scope_4703.string(var_4704.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("CpuCredits");
    if let Some(var_4706) = &input.cpu_credits {
        scope_4705.string(var_4706);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("KmsKeyId");
    if let Some(var_4708) = &input.kms_key_id {
        scope_4707.string(var_4708);
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("DryRun");
    if let Some(var_4710) = &input.dry_run {
        scope_4709.boolean(*var_4710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("DryRun");
    if let Some(var_4712) = &input.dry_run {
        scope_4711.boolean(*var_4712);
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4714) = &input.excess_capacity_termination_policy {
        scope_4713.string(var_4714.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4716) = &input.launch_template_configs {
        let mut list_4718 = scope_4715.start_list(true, Some("item"));
        for item_4717 in var_4716 {
            #[allow(unused_mut)]
            let mut entry_4719 = list_4718.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4719, item_4717,
            )?;
        }
        list_4718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4720 = writer.prefix("FleetId");
    if let Some(var_4721) = &input.fleet_id {
        scope_4720.string(var_4721);
    }
    #[allow(unused_mut)]
    let mut scope_4722 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4723) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4722, var_4723,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("Context");
    if let Some(var_4725) = &input.context {
        scope_4724.string(var_4725);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("DryRun");
    if let Some(var_4727) = &input.dry_run {
        scope_4726.boolean(*var_4727);
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("FpgaImageId");
    if let Some(var_4729) = &input.fpga_image_id {
        scope_4728.string(var_4729);
    }
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("Attribute");
    if let Some(var_4731) = &input.attribute {
        scope_4730.string(var_4731.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("OperationType");
    if let Some(var_4733) = &input.operation_type {
        scope_4732.string(var_4733.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("UserId");
    if let Some(var_4735) = &input.user_ids {
        let mut list_4737 = scope_4734.start_list(true, Some("UserId"));
        for item_4736 in var_4735 {
            #[allow(unused_mut)]
            let mut entry_4738 = list_4737.entry();
            entry_4738.string(item_4736);
        }
        list_4737.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4739 = writer.prefix("UserGroup");
    if let Some(var_4740) = &input.user_groups {
        let mut list_4742 = scope_4739.start_list(true, Some("UserGroup"));
        for item_4741 in var_4740 {
            #[allow(unused_mut)]
            let mut entry_4743 = list_4742.entry();
            entry_4743.string(item_4741);
        }
        list_4742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4744 = writer.prefix("ProductCode");
    if let Some(var_4745) = &input.product_codes {
        let mut list_4747 = scope_4744.start_list(true, Some("ProductCode"));
        for item_4746 in var_4745 {
            #[allow(unused_mut)]
            let mut entry_4748 = list_4747.entry();
            entry_4748.string(item_4746);
        }
        list_4747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4749 = writer.prefix("LoadPermission");
    if let Some(var_4750) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4749, var_4750,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4751 = writer.prefix("Description");
    if let Some(var_4752) = &input.description {
        scope_4751.string(var_4752);
    }
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("Name");
    if let Some(var_4754) = &input.name {
        scope_4753.string(var_4754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("AutoPlacement");
    if let Some(var_4756) = &input.auto_placement {
        scope_4755.string(var_4756.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("HostId");
    if let Some(var_4758) = &input.host_ids {
        let mut list_4760 = scope_4757.start_list(true, Some("item"));
        for item_4759 in var_4758 {
            #[allow(unused_mut)]
            let mut entry_4761 = list_4760.entry();
            entry_4761.string(item_4759);
        }
        list_4760.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4762 = writer.prefix("HostRecovery");
    if let Some(var_4763) = &input.host_recovery {
        scope_4762.string(var_4763.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4764 = writer.prefix("InstanceType");
    if let Some(var_4765) = &input.instance_type {
        scope_4764.string(var_4765);
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("InstanceFamily");
    if let Some(var_4767) = &input.instance_family {
        scope_4766.string(var_4767);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("PrincipalArn");
    if let Some(var_4769) = &input.principal_arn {
        scope_4768.string(var_4769);
    }
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("Resource");
    if let Some(var_4771) = &input.resource {
        scope_4770.string(var_4771);
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("UseLongIds");
    if let Some(var_4773) = &input.use_long_ids {
        scope_4772.boolean(*var_4773);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("Resource");
    if let Some(var_4775) = &input.resource {
        scope_4774.string(var_4775);
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("UseLongIds");
    if let Some(var_4777) = &input.use_long_ids {
        scope_4776.boolean(*var_4777);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("Attribute");
    if let Some(var_4779) = &input.attribute {
        scope_4778.string(var_4779);
    }
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("Description");
    if let Some(var_4781) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4780, var_4781)?;
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("ImageId");
    if let Some(var_4783) = &input.image_id {
        scope_4782.string(var_4783);
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("LaunchPermission");
    if let Some(var_4785) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4784, var_4785,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("OperationType");
    if let Some(var_4787) = &input.operation_type {
        scope_4786.string(var_4787.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("ProductCode");
    if let Some(var_4789) = &input.product_codes {
        let mut list_4791 = scope_4788.start_list(true, Some("ProductCode"));
        for item_4790 in var_4789 {
            #[allow(unused_mut)]
            let mut entry_4792 = list_4791.entry();
            entry_4792.string(item_4790);
        }
        list_4791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4793 = writer.prefix("UserGroup");
    if let Some(var_4794) = &input.user_groups {
        let mut list_4796 = scope_4793.start_list(true, Some("UserGroup"));
        for item_4795 in var_4794 {
            #[allow(unused_mut)]
            let mut entry_4797 = list_4796.entry();
            entry_4797.string(item_4795);
        }
        list_4796.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("UserId");
    if let Some(var_4799) = &input.user_ids {
        let mut list_4801 = scope_4798.start_list(true, Some("UserId"));
        for item_4800 in var_4799 {
            #[allow(unused_mut)]
            let mut entry_4802 = list_4801.entry();
            entry_4802.string(item_4800);
        }
        list_4801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4803 = writer.prefix("Value");
    if let Some(var_4804) = &input.value {
        scope_4803.string(var_4804);
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("DryRun");
    if let Some(var_4806) = &input.dry_run {
        scope_4805.boolean(*var_4806);
    }
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("OrganizationArn");
    if let Some(var_4808) = &input.organization_arns {
        let mut list_4810 = scope_4807.start_list(true, Some("OrganizationArn"));
        for item_4809 in var_4808 {
            #[allow(unused_mut)]
            let mut entry_4811 = list_4810.entry();
            entry_4811.string(item_4809);
        }
        list_4810.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4812 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4813) = &input.organizational_unit_arns {
        let mut list_4815 = scope_4812.start_list(true, Some("OrganizationalUnitArn"));
        for item_4814 in var_4813 {
            #[allow(unused_mut)]
            let mut entry_4816 = list_4815.entry();
            entry_4816.string(item_4814);
        }
        list_4815.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("SourceDestCheck");
    if let Some(var_4818) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4817, var_4818,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("Attribute");
    if let Some(var_4820) = &input.attribute {
        scope_4819.string(var_4820.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4822) = &input.block_device_mappings {
        let mut list_4824 = scope_4821.start_list(true, Some("item"));
        for item_4823 in var_4822 {
            #[allow(unused_mut)]
            let mut entry_4825 = list_4824.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4825, item_4823)?;
        }
        list_4824.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("DisableApiTermination");
    if let Some(var_4827) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4826, var_4827,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("DryRun");
    if let Some(var_4829) = &input.dry_run {
        scope_4828.boolean(*var_4829);
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("EbsOptimized");
    if let Some(var_4831) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4830, var_4831,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("EnaSupport");
    if let Some(var_4833) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4832, var_4833,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("GroupId");
    if let Some(var_4835) = &input.groups {
        let mut list_4837 = scope_4834.start_list(true, Some("groupId"));
        for item_4836 in var_4835 {
            #[allow(unused_mut)]
            let mut entry_4838 = list_4837.entry();
            entry_4838.string(item_4836);
        }
        list_4837.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4839 = writer.prefix("InstanceId");
    if let Some(var_4840) = &input.instance_id {
        scope_4839.string(var_4840);
    }
    #[allow(unused_mut)]
    let mut scope_4841 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4842) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4841, var_4842)?;
    }
    #[allow(unused_mut)]
    let mut scope_4843 = writer.prefix("InstanceType");
    if let Some(var_4844) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4843, var_4844)?;
    }
    #[allow(unused_mut)]
    let mut scope_4845 = writer.prefix("Kernel");
    if let Some(var_4846) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4845, var_4846)?;
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("Ramdisk");
    if let Some(var_4848) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4847, var_4848)?;
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("SriovNetSupport");
    if let Some(var_4850) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4849, var_4850)?;
    }
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("UserData");
    if let Some(var_4852) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4851, var_4852,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("Value");
    if let Some(var_4854) = &input.value {
        scope_4853.string(var_4854);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("InstanceId");
    if let Some(var_4856) = &input.instance_id {
        scope_4855.string(var_4856);
    }
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4858) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4857, var_4858,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("DryRun");
    if let Some(var_4860) = &input.dry_run {
        scope_4859.boolean(*var_4860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("DryRun");
    if let Some(var_4862) = &input.dry_run {
        scope_4861.boolean(*var_4862);
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("ClientToken");
    if let Some(var_4864) = &input.client_token {
        scope_4863.string(var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4866) = &input.instance_credit_specifications {
        let mut list_4868 = scope_4865.start_list(true, Some("item"));
        for item_4867 in var_4866 {
            #[allow(unused_mut)]
            let mut entry_4869 = list_4868.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4869, item_4867)?;
        }
        list_4868.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4870 = writer.prefix("DryRun");
    if let Some(var_4871) = &input.dry_run {
        scope_4870.boolean(*var_4871);
    }
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("InstanceId");
    if let Some(var_4873) = &input.instance_id {
        scope_4872.string(var_4873);
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("InstanceEventId");
    if let Some(var_4875) = &input.instance_event_id {
        scope_4874.string(var_4875);
    }
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("NotBefore");
    if let Some(var_4877) = &input.not_before {
        scope_4876.date_time(var_4877, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("DryRun");
    if let Some(var_4879) = &input.dry_run {
        scope_4878.boolean(*var_4879);
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("Name");
    if let Some(var_4881) = &input.name {
        scope_4880.string(var_4881);
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4883) = &input.instance_event_window_id {
        scope_4882.string(var_4883);
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("TimeRange");
    if let Some(var_4885) = &input.time_ranges {
        let mut list_4887 = scope_4884.start_list(true, None);
        for item_4886 in var_4885 {
            #[allow(unused_mut)]
            let mut entry_4888 = list_4887.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4888, item_4886)?;
        }
        list_4887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4889 = writer.prefix("CronExpression");
    if let Some(var_4890) = &input.cron_expression {
        scope_4889.string(var_4890);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4891 = writer.prefix("InstanceId");
    if let Some(var_4892) = &input.instance_id {
        scope_4891.string(var_4892);
    }
    #[allow(unused_mut)]
    let mut scope_4893 = writer.prefix("AutoRecovery");
    if let Some(var_4894) = &input.auto_recovery {
        scope_4893.string(var_4894.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4895 = writer.prefix("DryRun");
    if let Some(var_4896) = &input.dry_run {
        scope_4895.boolean(*var_4896);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("InstanceId");
    if let Some(var_4898) = &input.instance_id {
        scope_4897.string(var_4898);
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("HttpTokens");
    if let Some(var_4900) = &input.http_tokens {
        scope_4899.string(var_4900.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4902) = &input.http_put_response_hop_limit {
        scope_4901.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4902).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("HttpEndpoint");
    if let Some(var_4904) = &input.http_endpoint {
        scope_4903.string(var_4904.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4905 = writer.prefix("DryRun");
    if let Some(var_4906) = &input.dry_run {
        scope_4905.boolean(*var_4906);
    }
    #[allow(unused_mut)]
    let mut scope_4907 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4908) = &input.http_protocol_ipv6 {
        scope_4907.string(var_4908.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4909 = writer.prefix("InstanceMetadataTags");
    if let Some(var_4910) = &input.instance_metadata_tags {
        scope_4909.string(var_4910.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4911 = writer.prefix("Affinity");
    if let Some(var_4912) = &input.affinity {
        scope_4911.string(var_4912.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("GroupName");
    if let Some(var_4914) = &input.group_name {
        scope_4913.string(var_4914);
    }
    #[allow(unused_mut)]
    let mut scope_4915 = writer.prefix("HostId");
    if let Some(var_4916) = &input.host_id {
        scope_4915.string(var_4916);
    }
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("InstanceId");
    if let Some(var_4918) = &input.instance_id {
        scope_4917.string(var_4918);
    }
    #[allow(unused_mut)]
    let mut scope_4919 = writer.prefix("Tenancy");
    if let Some(var_4920) = &input.tenancy {
        scope_4919.string(var_4920.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("PartitionNumber");
    if let Some(var_4922) = &input.partition_number {
        scope_4921.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4922).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4923 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4924) = &input.host_resource_group_arn {
        scope_4923.string(var_4924);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4925 = writer.prefix("DryRun");
    if let Some(var_4926) = &input.dry_run {
        scope_4925.boolean(*var_4926);
    }
    #[allow(unused_mut)]
    let mut scope_4927 = writer.prefix("IpamId");
    if let Some(var_4928) = &input.ipam_id {
        scope_4927.string(var_4928);
    }
    #[allow(unused_mut)]
    let mut scope_4929 = writer.prefix("Description");
    if let Some(var_4930) = &input.description {
        scope_4929.string(var_4930);
    }
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("AddOperatingRegion");
    if let Some(var_4932) = &input.add_operating_regions {
        let mut list_4934 = scope_4931.start_list(true, None);
        for item_4933 in var_4932 {
            #[allow(unused_mut)]
            let mut entry_4935 = list_4934.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4935, item_4933,
            )?;
        }
        list_4934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4937) = &input.remove_operating_regions {
        let mut list_4939 = scope_4936.start_list(true, None);
        for item_4938 in var_4937 {
            #[allow(unused_mut)]
            let mut entry_4940 = list_4939.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4940, item_4938,
            )?;
        }
        list_4939.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4941 = writer.prefix("DryRun");
    if let Some(var_4942) = &input.dry_run {
        scope_4941.boolean(*var_4942);
    }
    #[allow(unused_mut)]
    let mut scope_4943 = writer.prefix("IpamPoolId");
    if let Some(var_4944) = &input.ipam_pool_id {
        scope_4943.string(var_4944);
    }
    #[allow(unused_mut)]
    let mut scope_4945 = writer.prefix("Description");
    if let Some(var_4946) = &input.description {
        scope_4945.string(var_4946);
    }
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("AutoImport");
    if let Some(var_4948) = &input.auto_import {
        scope_4947.boolean(*var_4948);
    }
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4950) = &input.allocation_min_netmask_length {
        scope_4949.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4950).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4952) = &input.allocation_max_netmask_length {
        scope_4951.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4952).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4954) = &input.allocation_default_netmask_length {
        scope_4953.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4954).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4956) = &input.clear_allocation_default_netmask_length {
        scope_4955.boolean(*var_4956);
    }
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4958) = &input.add_allocation_resource_tags {
        let mut list_4960 = scope_4957.start_list(true, Some("item"));
        for item_4959 in var_4958 {
            #[allow(unused_mut)]
            let mut entry_4961 = list_4960.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4961, item_4959,
            )?;
        }
        list_4960.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4963) = &input.remove_allocation_resource_tags {
        let mut list_4965 = scope_4962.start_list(true, Some("item"));
        for item_4964 in var_4963 {
            #[allow(unused_mut)]
            let mut entry_4966 = list_4965.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4966, item_4964,
            )?;
        }
        list_4965.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4967 = writer.prefix("DryRun");
    if let Some(var_4968) = &input.dry_run {
        scope_4967.boolean(*var_4968);
    }
    #[allow(unused_mut)]
    let mut scope_4969 = writer.prefix("ResourceId");
    if let Some(var_4970) = &input.resource_id {
        scope_4969.string(var_4970);
    }
    #[allow(unused_mut)]
    let mut scope_4971 = writer.prefix("ResourceCidr");
    if let Some(var_4972) = &input.resource_cidr {
        scope_4971.string(var_4972);
    }
    #[allow(unused_mut)]
    let mut scope_4973 = writer.prefix("ResourceRegion");
    if let Some(var_4974) = &input.resource_region {
        scope_4973.string(var_4974);
    }
    #[allow(unused_mut)]
    let mut scope_4975 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4976) = &input.current_ipam_scope_id {
        scope_4975.string(var_4976);
    }
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4978) = &input.destination_ipam_scope_id {
        scope_4977.string(var_4978);
    }
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("Monitored");
    if let Some(var_4980) = &input.monitored {
        scope_4979.boolean(*var_4980);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("DryRun");
    if let Some(var_4982) = &input.dry_run {
        scope_4981.boolean(*var_4982);
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("IpamScopeId");
    if let Some(var_4984) = &input.ipam_scope_id {
        scope_4983.string(var_4984);
    }
    #[allow(unused_mut)]
    let mut scope_4985 = writer.prefix("Description");
    if let Some(var_4986) = &input.description {
        scope_4985.string(var_4986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4987 = writer.prefix("DryRun");
    if let Some(var_4988) = &input.dry_run {
        scope_4987.boolean(*var_4988);
    }
    #[allow(unused_mut)]
    let mut scope_4989 = writer.prefix("ClientToken");
    if let Some(var_4990) = &input.client_token {
        scope_4989.string(var_4990);
    }
    #[allow(unused_mut)]
    let mut scope_4991 = writer.prefix("LaunchTemplateId");
    if let Some(var_4992) = &input.launch_template_id {
        scope_4991.string(var_4992);
    }
    #[allow(unused_mut)]
    let mut scope_4993 = writer.prefix("LaunchTemplateName");
    if let Some(var_4994) = &input.launch_template_name {
        scope_4993.string(var_4994);
    }
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("SetDefaultVersion");
    if let Some(var_4996) = &input.default_version {
        scope_4995.string(var_4996);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("DryRun");
    if let Some(var_4998) = &input.dry_run {
        scope_4997.boolean(*var_4998);
    }
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("PrefixListId");
    if let Some(var_5000) = &input.prefix_list_id {
        scope_4999.string(var_5000);
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("CurrentVersion");
    if let Some(var_5002) = &input.current_version {
        scope_5001.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5002).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("PrefixListName");
    if let Some(var_5004) = &input.prefix_list_name {
        scope_5003.string(var_5004);
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("AddEntry");
    if let Some(var_5006) = &input.add_entries {
        let mut list_5008 = scope_5005.start_list(true, None);
        for item_5007 in var_5006 {
            #[allow(unused_mut)]
            let mut entry_5009 = list_5008.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_5009, item_5007,
            )?;
        }
        list_5008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5010 = writer.prefix("RemoveEntry");
    if let Some(var_5011) = &input.remove_entries {
        let mut list_5013 = scope_5010.start_list(true, None);
        for item_5012 in var_5011 {
            #[allow(unused_mut)]
            let mut entry_5014 = list_5013.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_5014, item_5012,
            )?;
        }
        list_5013.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("MaxEntries");
    if let Some(var_5016) = &input.max_entries {
        scope_5015.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5016).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5017 = writer.prefix("Attachment");
    if let Some(var_5018) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_5017, var_5018,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5019 = writer.prefix("Description");
    if let Some(var_5020) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5019, var_5020)?;
    }
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("DryRun");
    if let Some(var_5022) = &input.dry_run {
        scope_5021.boolean(*var_5022);
    }
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("SecurityGroupId");
    if let Some(var_5024) = &input.groups {
        let mut list_5026 = scope_5023.start_list(true, Some("SecurityGroupId"));
        for item_5025 in var_5024 {
            #[allow(unused_mut)]
            let mut entry_5027 = list_5026.entry();
            entry_5027.string(item_5025);
        }
        list_5026.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5029) = &input.network_interface_id {
        scope_5028.string(var_5029);
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("SourceDestCheck");
    if let Some(var_5031) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5030, var_5031,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5032 = writer.prefix("DryRun");
    if let Some(var_5033) = &input.dry_run {
        scope_5032.boolean(*var_5033);
    }
    #[allow(unused_mut)]
    let mut scope_5034 = writer.prefix("InstanceId");
    if let Some(var_5035) = &input.instance_id {
        scope_5034.string(var_5035);
    }
    #[allow(unused_mut)]
    let mut scope_5036 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5037) = &input.private_dns_hostname_type {
        scope_5036.string(var_5037.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5038 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5039) = &input.enable_resource_name_dns_a_record {
        scope_5038.boolean(*var_5039);
    }
    #[allow(unused_mut)]
    let mut scope_5040 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5041) = &input.enable_resource_name_dns_aaaa_record {
        scope_5040.boolean(*var_5041);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5042 = writer.prefix("ReservedInstancesId");
    if let Some(var_5043) = &input.reserved_instances_ids {
        let mut list_5045 = scope_5042.start_list(true, Some("ReservedInstancesId"));
        for item_5044 in var_5043 {
            #[allow(unused_mut)]
            let mut entry_5046 = list_5045.entry();
            entry_5046.string(item_5044);
        }
        list_5045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("ClientToken");
    if let Some(var_5048) = &input.client_token {
        scope_5047.string(var_5048);
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5050) = &input.target_configurations {
        let mut list_5052 = scope_5049.start_list(true, Some("item"));
        for item_5051 in var_5050 {
            #[allow(unused_mut)]
            let mut entry_5053 = list_5052.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5053, item_5051,
            )?;
        }
        list_5052.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5054 = writer.prefix("GroupId");
    if let Some(var_5055) = &input.group_id {
        scope_5054.string(var_5055);
    }
    #[allow(unused_mut)]
    let mut scope_5056 = writer.prefix("SecurityGroupRule");
    if let Some(var_5057) = &input.security_group_rules {
        let mut list_5059 = scope_5056.start_list(true, Some("item"));
        for item_5058 in var_5057 {
            #[allow(unused_mut)]
            let mut entry_5060 = list_5059.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5060, item_5058,
            )?;
        }
        list_5059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("DryRun");
    if let Some(var_5062) = &input.dry_run {
        scope_5061.boolean(*var_5062);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("Attribute");
    if let Some(var_5064) = &input.attribute {
        scope_5063.string(var_5064.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("CreateVolumePermission");
    if let Some(var_5066) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5065, var_5066,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("UserGroup");
    if let Some(var_5068) = &input.group_names {
        let mut list_5070 = scope_5067.start_list(true, Some("GroupName"));
        for item_5069 in var_5068 {
            #[allow(unused_mut)]
            let mut entry_5071 = list_5070.entry();
            entry_5071.string(item_5069);
        }
        list_5070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5072 = writer.prefix("OperationType");
    if let Some(var_5073) = &input.operation_type {
        scope_5072.string(var_5073.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5074 = writer.prefix("SnapshotId");
    if let Some(var_5075) = &input.snapshot_id {
        scope_5074.string(var_5075);
    }
    #[allow(unused_mut)]
    let mut scope_5076 = writer.prefix("UserId");
    if let Some(var_5077) = &input.user_ids {
        let mut list_5079 = scope_5076.start_list(true, Some("UserId"));
        for item_5078 in var_5077 {
            #[allow(unused_mut)]
            let mut entry_5080 = list_5079.entry();
            entry_5080.string(item_5078);
        }
        list_5079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("DryRun");
    if let Some(var_5082) = &input.dry_run {
        scope_5081.boolean(*var_5082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("SnapshotId");
    if let Some(var_5084) = &input.snapshot_id {
        scope_5083.string(var_5084);
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("StorageTier");
    if let Some(var_5086) = &input.storage_tier {
        scope_5085.string(var_5086.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("DryRun");
    if let Some(var_5088) = &input.dry_run {
        scope_5087.boolean(*var_5088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5090) = &input.excess_capacity_termination_policy {
        scope_5089.string(var_5090.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5092) = &input.launch_template_configs {
        let mut list_5094 = scope_5091.start_list(true, Some("item"));
        for item_5093 in var_5092 {
            #[allow(unused_mut)]
            let mut entry_5095 = list_5094.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5095, item_5093,
            )?;
        }
        list_5094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5096 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5097) = &input.spot_fleet_request_id {
        scope_5096.string(var_5097);
    }
    #[allow(unused_mut)]
    let mut scope_5098 = writer.prefix("TargetCapacity");
    if let Some(var_5099) = &input.target_capacity {
        scope_5098.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5099).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5100 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5101) = &input.on_demand_target_capacity {
        scope_5100.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5101).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5102 = writer.prefix("Context");
    if let Some(var_5103) = &input.context {
        scope_5102.string(var_5103);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5104 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5105) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5104, var_5105,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5107) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5106, var_5107,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5108 = writer.prefix("SubnetId");
    if let Some(var_5109) = &input.subnet_id {
        scope_5108.string(var_5109);
    }
    #[allow(unused_mut)]
    let mut scope_5110 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5111) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5110, var_5111,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5112 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5113) = &input.customer_owned_ipv4_pool {
        scope_5112.string(var_5113);
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("EnableDns64");
    if let Some(var_5115) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5114, var_5115,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5117) = &input.private_dns_hostname_type_on_launch {
        scope_5116.string(var_5117.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5119) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5118, var_5119,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5121) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5120, var_5121,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5123) = &input.enable_lni_at_device_index {
        scope_5122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5125) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5124, var_5125,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5127) = &input.traffic_mirror_filter_id {
        scope_5126.string(var_5127);
    }
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("AddNetworkService");
    if let Some(var_5129) = &input.add_network_services {
        let mut list_5131 = scope_5128.start_list(true, Some("item"));
        for item_5130 in var_5129 {
            #[allow(unused_mut)]
            let mut entry_5132 = list_5131.entry();
            entry_5132.string(item_5130.as_str());
        }
        list_5131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("RemoveNetworkService");
    if let Some(var_5134) = &input.remove_network_services {
        let mut list_5136 = scope_5133.start_list(true, Some("item"));
        for item_5135 in var_5134 {
            #[allow(unused_mut)]
            let mut entry_5137 = list_5136.entry();
            entry_5137.string(item_5135.as_str());
        }
        list_5136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("DryRun");
    if let Some(var_5139) = &input.dry_run {
        scope_5138.boolean(*var_5139);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5141) = &input.traffic_mirror_filter_rule_id {
        scope_5140.string(var_5141);
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("TrafficDirection");
    if let Some(var_5143) = &input.traffic_direction {
        scope_5142.string(var_5143.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("RuleNumber");
    if let Some(var_5145) = &input.rule_number {
        scope_5144.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5145).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("RuleAction");
    if let Some(var_5147) = &input.rule_action {
        scope_5146.string(var_5147.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("DestinationPortRange");
    if let Some(var_5149) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5148, var_5149,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("SourcePortRange");
    if let Some(var_5151) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5150, var_5151,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("Protocol");
    if let Some(var_5153) = &input.protocol {
        scope_5152.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5153).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5155) = &input.destination_cidr_block {
        scope_5154.string(var_5155);
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("SourceCidrBlock");
    if let Some(var_5157) = &input.source_cidr_block {
        scope_5156.string(var_5157);
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("Description");
    if let Some(var_5159) = &input.description {
        scope_5158.string(var_5159);
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("RemoveField");
    if let Some(var_5161) = &input.remove_fields {
        let mut list_5163 = scope_5160.start_list(true, None);
        for item_5162 in var_5161 {
            #[allow(unused_mut)]
            let mut entry_5164 = list_5163.entry();
            entry_5164.string(item_5162.as_str());
        }
        list_5163.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5165 = writer.prefix("DryRun");
    if let Some(var_5166) = &input.dry_run {
        scope_5165.boolean(*var_5166);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5167 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5168) = &input.traffic_mirror_session_id {
        scope_5167.string(var_5168);
    }
    #[allow(unused_mut)]
    let mut scope_5169 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5170) = &input.traffic_mirror_target_id {
        scope_5169.string(var_5170);
    }
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5172) = &input.traffic_mirror_filter_id {
        scope_5171.string(var_5172);
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("PacketLength");
    if let Some(var_5174) = &input.packet_length {
        scope_5173.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5174).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("SessionNumber");
    if let Some(var_5176) = &input.session_number {
        scope_5175.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5176).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("VirtualNetworkId");
    if let Some(var_5178) = &input.virtual_network_id {
        scope_5177.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5178).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("Description");
    if let Some(var_5180) = &input.description {
        scope_5179.string(var_5180);
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("RemoveField");
    if let Some(var_5182) = &input.remove_fields {
        let mut list_5184 = scope_5181.start_list(true, None);
        for item_5183 in var_5182 {
            #[allow(unused_mut)]
            let mut entry_5185 = list_5184.entry();
            entry_5185.string(item_5183.as_str());
        }
        list_5184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("DryRun");
    if let Some(var_5187) = &input.dry_run {
        scope_5186.boolean(*var_5187);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5188 = writer.prefix("TransitGatewayId");
    if let Some(var_5189) = &input.transit_gateway_id {
        scope_5188.string(var_5189);
    }
    #[allow(unused_mut)]
    let mut scope_5190 = writer.prefix("Description");
    if let Some(var_5191) = &input.description {
        scope_5190.string(var_5191);
    }
    #[allow(unused_mut)]
    let mut scope_5192 = writer.prefix("Options");
    if let Some(var_5193) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5192, var_5193,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("DryRun");
    if let Some(var_5195) = &input.dry_run {
        scope_5194.boolean(*var_5195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5197) = &input.transit_gateway_route_table_id {
        scope_5196.string(var_5197);
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("PrefixListId");
    if let Some(var_5199) = &input.prefix_list_id {
        scope_5198.string(var_5199);
    }
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5201) = &input.transit_gateway_attachment_id {
        scope_5200.string(var_5201);
    }
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("Blackhole");
    if let Some(var_5203) = &input.blackhole {
        scope_5202.boolean(*var_5203);
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("DryRun");
    if let Some(var_5205) = &input.dry_run {
        scope_5204.boolean(*var_5205);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5207) = &input.transit_gateway_attachment_id {
        scope_5206.string(var_5207);
    }
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("AddSubnetIds");
    if let Some(var_5209) = &input.add_subnet_ids {
        let mut list_5211 = scope_5208.start_list(true, Some("item"));
        for item_5210 in var_5209 {
            #[allow(unused_mut)]
            let mut entry_5212 = list_5211.entry();
            entry_5212.string(item_5210);
        }
        list_5211.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5213 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5214) = &input.remove_subnet_ids {
        let mut list_5216 = scope_5213.start_list(true, Some("item"));
        for item_5215 in var_5214 {
            #[allow(unused_mut)]
            let mut entry_5217 = list_5216.entry();
            entry_5217.string(item_5215);
        }
        list_5216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5218 = writer.prefix("Options");
    if let Some(var_5219) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5218, var_5219)?;
    }
    #[allow(unused_mut)]
    let mut scope_5220 = writer.prefix("DryRun");
    if let Some(var_5221) = &input.dry_run {
        scope_5220.boolean(*var_5221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5222 = writer.prefix("DryRun");
    if let Some(var_5223) = &input.dry_run {
        scope_5222.boolean(*var_5223);
    }
    #[allow(unused_mut)]
    let mut scope_5224 = writer.prefix("VolumeId");
    if let Some(var_5225) = &input.volume_id {
        scope_5224.string(var_5225);
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("Size");
    if let Some(var_5227) = &input.size {
        scope_5226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("VolumeType");
    if let Some(var_5229) = &input.volume_type {
        scope_5228.string(var_5229.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("Iops");
    if let Some(var_5231) = &input.iops {
        scope_5230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5232 = writer.prefix("Throughput");
    if let Some(var_5233) = &input.throughput {
        scope_5232.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5233).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5234 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5235) = &input.multi_attach_enabled {
        scope_5234.boolean(*var_5235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5236 = writer.prefix("AutoEnableIO");
    if let Some(var_5237) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5236, var_5237,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("VolumeId");
    if let Some(var_5239) = &input.volume_id {
        scope_5238.string(var_5239);
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("DryRun");
    if let Some(var_5241) = &input.dry_run {
        scope_5240.boolean(*var_5241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5243) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5242, var_5243,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("EnableDnsSupport");
    if let Some(var_5245) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5244, var_5245,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("VpcId");
    if let Some(var_5247) = &input.vpc_id {
        scope_5246.string(var_5247);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("DryRun");
    if let Some(var_5249) = &input.dry_run {
        scope_5248.boolean(*var_5249);
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("VpcEndpointId");
    if let Some(var_5251) = &input.vpc_endpoint_id {
        scope_5250.string(var_5251);
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("ResetPolicy");
    if let Some(var_5253) = &input.reset_policy {
        scope_5252.boolean(*var_5253);
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("PolicyDocument");
    if let Some(var_5255) = &input.policy_document {
        scope_5254.string(var_5255);
    }
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("AddRouteTableId");
    if let Some(var_5257) = &input.add_route_table_ids {
        let mut list_5259 = scope_5256.start_list(true, Some("item"));
        for item_5258 in var_5257 {
            #[allow(unused_mut)]
            let mut entry_5260 = list_5259.entry();
            entry_5260.string(item_5258);
        }
        list_5259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5261 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5262) = &input.remove_route_table_ids {
        let mut list_5264 = scope_5261.start_list(true, Some("item"));
        for item_5263 in var_5262 {
            #[allow(unused_mut)]
            let mut entry_5265 = list_5264.entry();
            entry_5265.string(item_5263);
        }
        list_5264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5266 = writer.prefix("AddSubnetId");
    if let Some(var_5267) = &input.add_subnet_ids {
        let mut list_5269 = scope_5266.start_list(true, Some("item"));
        for item_5268 in var_5267 {
            #[allow(unused_mut)]
            let mut entry_5270 = list_5269.entry();
            entry_5270.string(item_5268);
        }
        list_5269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5271 = writer.prefix("RemoveSubnetId");
    if let Some(var_5272) = &input.remove_subnet_ids {
        let mut list_5274 = scope_5271.start_list(true, Some("item"));
        for item_5273 in var_5272 {
            #[allow(unused_mut)]
            let mut entry_5275 = list_5274.entry();
            entry_5275.string(item_5273);
        }
        list_5274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5276 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5277) = &input.add_security_group_ids {
        let mut list_5279 = scope_5276.start_list(true, Some("item"));
        for item_5278 in var_5277 {
            #[allow(unused_mut)]
            let mut entry_5280 = list_5279.entry();
            entry_5280.string(item_5278);
        }
        list_5279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5281 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5282) = &input.remove_security_group_ids {
        let mut list_5284 = scope_5281.start_list(true, Some("item"));
        for item_5283 in var_5282 {
            #[allow(unused_mut)]
            let mut entry_5285 = list_5284.entry();
            entry_5285.string(item_5283);
        }
        list_5284.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5286 = writer.prefix("IpAddressType");
    if let Some(var_5287) = &input.ip_address_type {
        scope_5286.string(var_5287.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5288 = writer.prefix("DnsOptions");
    if let Some(var_5289) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_5288, var_5289,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5290 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5291) = &input.private_dns_enabled {
        scope_5290.boolean(*var_5291);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5292 = writer.prefix("DryRun");
    if let Some(var_5293) = &input.dry_run {
        scope_5292.boolean(*var_5293);
    }
    #[allow(unused_mut)]
    let mut scope_5294 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5295) = &input.connection_notification_id {
        scope_5294.string(var_5295);
    }
    #[allow(unused_mut)]
    let mut scope_5296 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5297) = &input.connection_notification_arn {
        scope_5296.string(var_5297);
    }
    #[allow(unused_mut)]
    let mut scope_5298 = writer.prefix("ConnectionEvents");
    if let Some(var_5299) = &input.connection_events {
        let mut list_5301 = scope_5298.start_list(true, Some("item"));
        for item_5300 in var_5299 {
            #[allow(unused_mut)]
            let mut entry_5302 = list_5301.entry();
            entry_5302.string(item_5300);
        }
        list_5301.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5303 = writer.prefix("DryRun");
    if let Some(var_5304) = &input.dry_run {
        scope_5303.boolean(*var_5304);
    }
    #[allow(unused_mut)]
    let mut scope_5305 = writer.prefix("ServiceId");
    if let Some(var_5306) = &input.service_id {
        scope_5305.string(var_5306);
    }
    #[allow(unused_mut)]
    let mut scope_5307 = writer.prefix("PrivateDnsName");
    if let Some(var_5308) = &input.private_dns_name {
        scope_5307.string(var_5308);
    }
    #[allow(unused_mut)]
    let mut scope_5309 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5310) = &input.remove_private_dns_name {
        scope_5309.boolean(*var_5310);
    }
    #[allow(unused_mut)]
    let mut scope_5311 = writer.prefix("AcceptanceRequired");
    if let Some(var_5312) = &input.acceptance_required {
        scope_5311.boolean(*var_5312);
    }
    #[allow(unused_mut)]
    let mut scope_5313 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5314) = &input.add_network_load_balancer_arns {
        let mut list_5316 = scope_5313.start_list(true, Some("item"));
        for item_5315 in var_5314 {
            #[allow(unused_mut)]
            let mut entry_5317 = list_5316.entry();
            entry_5317.string(item_5315);
        }
        list_5316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5318 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5319) = &input.remove_network_load_balancer_arns {
        let mut list_5321 = scope_5318.start_list(true, Some("item"));
        for item_5320 in var_5319 {
            #[allow(unused_mut)]
            let mut entry_5322 = list_5321.entry();
            entry_5322.string(item_5320);
        }
        list_5321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5323 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5324) = &input.add_gateway_load_balancer_arns {
        let mut list_5326 = scope_5323.start_list(true, Some("item"));
        for item_5325 in var_5324 {
            #[allow(unused_mut)]
            let mut entry_5327 = list_5326.entry();
            entry_5327.string(item_5325);
        }
        list_5326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5328 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5329) = &input.remove_gateway_load_balancer_arns {
        let mut list_5331 = scope_5328.start_list(true, Some("item"));
        for item_5330 in var_5329 {
            #[allow(unused_mut)]
            let mut entry_5332 = list_5331.entry();
            entry_5332.string(item_5330);
        }
        list_5331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5333 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5334) = &input.add_supported_ip_address_types {
        let mut list_5336 = scope_5333.start_list(true, Some("item"));
        for item_5335 in var_5334 {
            #[allow(unused_mut)]
            let mut entry_5337 = list_5336.entry();
            entry_5337.string(item_5335);
        }
        list_5336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5338 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5339) = &input.remove_supported_ip_address_types {
        let mut list_5341 = scope_5338.start_list(true, Some("item"));
        for item_5340 in var_5339 {
            #[allow(unused_mut)]
            let mut entry_5342 = list_5341.entry();
            entry_5342.string(item_5340);
        }
        list_5341.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5343 = writer.prefix("DryRun");
    if let Some(var_5344) = &input.dry_run {
        scope_5343.boolean(*var_5344);
    }
    #[allow(unused_mut)]
    let mut scope_5345 = writer.prefix("ServiceId");
    if let Some(var_5346) = &input.service_id {
        scope_5345.string(var_5346);
    }
    #[allow(unused_mut)]
    let mut scope_5347 = writer.prefix("PayerResponsibility");
    if let Some(var_5348) = &input.payer_responsibility {
        scope_5347.string(var_5348.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5349 = writer.prefix("DryRun");
    if let Some(var_5350) = &input.dry_run {
        scope_5349.boolean(*var_5350);
    }
    #[allow(unused_mut)]
    let mut scope_5351 = writer.prefix("ServiceId");
    if let Some(var_5352) = &input.service_id {
        scope_5351.string(var_5352);
    }
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5354) = &input.add_allowed_principals {
        let mut list_5356 = scope_5353.start_list(true, Some("item"));
        for item_5355 in var_5354 {
            #[allow(unused_mut)]
            let mut entry_5357 = list_5356.entry();
            entry_5357.string(item_5355);
        }
        list_5356.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5359) = &input.remove_allowed_principals {
        let mut list_5361 = scope_5358.start_list(true, Some("item"));
        for item_5360 in var_5359 {
            #[allow(unused_mut)]
            let mut entry_5362 = list_5361.entry();
            entry_5362.string(item_5360);
        }
        list_5361.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5363 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5364) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5363, var_5364,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5365 = writer.prefix("DryRun");
    if let Some(var_5366) = &input.dry_run {
        scope_5365.boolean(*var_5366);
    }
    #[allow(unused_mut)]
    let mut scope_5367 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5368) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5367, var_5368,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5369 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5370) = &input.vpc_peering_connection_id {
        scope_5369.string(var_5370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5371 = writer.prefix("VpcId");
    if let Some(var_5372) = &input.vpc_id {
        scope_5371.string(var_5372);
    }
    #[allow(unused_mut)]
    let mut scope_5373 = writer.prefix("InstanceTenancy");
    if let Some(var_5374) = &input.instance_tenancy {
        scope_5373.string(var_5374.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5375 = writer.prefix("DryRun");
    if let Some(var_5376) = &input.dry_run {
        scope_5375.boolean(*var_5376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("VpnConnectionId");
    if let Some(var_5378) = &input.vpn_connection_id {
        scope_5377.string(var_5378);
    }
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("TransitGatewayId");
    if let Some(var_5380) = &input.transit_gateway_id {
        scope_5379.string(var_5380);
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("CustomerGatewayId");
    if let Some(var_5382) = &input.customer_gateway_id {
        scope_5381.string(var_5382);
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("VpnGatewayId");
    if let Some(var_5384) = &input.vpn_gateway_id {
        scope_5383.string(var_5384);
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("DryRun");
    if let Some(var_5386) = &input.dry_run {
        scope_5385.boolean(*var_5386);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("VpnConnectionId");
    if let Some(var_5388) = &input.vpn_connection_id {
        scope_5387.string(var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5390) = &input.local_ipv4_network_cidr {
        scope_5389.string(var_5390);
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5392) = &input.remote_ipv4_network_cidr {
        scope_5391.string(var_5392);
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5394) = &input.local_ipv6_network_cidr {
        scope_5393.string(var_5394);
    }
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5396) = &input.remote_ipv6_network_cidr {
        scope_5395.string(var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("DryRun");
    if let Some(var_5398) = &input.dry_run {
        scope_5397.boolean(*var_5398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("VpnConnectionId");
    if let Some(var_5400) = &input.vpn_connection_id {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5402) = &input.vpn_tunnel_outside_ip_address {
        scope_5401.string(var_5402);
    }
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("DryRun");
    if let Some(var_5404) = &input.dry_run {
        scope_5403.boolean(*var_5404);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("VpnConnectionId");
    if let Some(var_5406) = &input.vpn_connection_id {
        scope_5405.string(var_5406);
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5408) = &input.vpn_tunnel_outside_ip_address {
        scope_5407.string(var_5408);
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("TunnelOptions");
    if let Some(var_5410) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5409, var_5410,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("DryRun");
    if let Some(var_5412) = &input.dry_run {
        scope_5411.boolean(*var_5412);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("InstanceId");
    if let Some(var_5414) = &input.instance_ids {
        let mut list_5416 = scope_5413.start_list(true, Some("InstanceId"));
        for item_5415 in var_5414 {
            #[allow(unused_mut)]
            let mut entry_5417 = list_5416.entry();
            entry_5417.string(item_5415);
        }
        list_5416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5418 = writer.prefix("DryRun");
    if let Some(var_5419) = &input.dry_run {
        scope_5418.boolean(*var_5419);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5420 = writer.prefix("DryRun");
    if let Some(var_5421) = &input.dry_run {
        scope_5420.boolean(*var_5421);
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("PublicIp");
    if let Some(var_5423) = &input.public_ip {
        scope_5422.string(var_5423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("DryRun");
    if let Some(var_5425) = &input.dry_run {
        scope_5424.boolean(*var_5425);
    }
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("Cidr");
    if let Some(var_5427) = &input.cidr {
        scope_5426.string(var_5427);
    }
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("IpamPoolId");
    if let Some(var_5429) = &input.ipam_pool_id {
        scope_5428.string(var_5429);
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("IpamPoolOwner");
    if let Some(var_5431) = &input.ipam_pool_owner {
        scope_5430.string(var_5431);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5432 = writer.prefix("Cidr");
    if let Some(var_5433) = &input.cidr {
        scope_5432.string(var_5433);
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5435) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5434, var_5435,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5436 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5437) = &input.publicly_advertisable {
        scope_5436.boolean(*var_5437);
    }
    #[allow(unused_mut)]
    let mut scope_5438 = writer.prefix("Description");
    if let Some(var_5439) = &input.description {
        scope_5438.string(var_5439);
    }
    #[allow(unused_mut)]
    let mut scope_5440 = writer.prefix("DryRun");
    if let Some(var_5441) = &input.dry_run {
        scope_5440.boolean(*var_5441);
    }
    #[allow(unused_mut)]
    let mut scope_5442 = writer.prefix("PoolTagSpecification");
    if let Some(var_5443) = &input.pool_tag_specifications {
        let mut list_5445 = scope_5442.start_list(true, Some("item"));
        for item_5444 in var_5443 {
            #[allow(unused_mut)]
            let mut entry_5446 = list_5445.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5446, item_5444,
            )?;
        }
        list_5445.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5447 = writer.prefix("MultiRegion");
    if let Some(var_5448) = &input.multi_region {
        scope_5447.boolean(*var_5448);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5449 = writer.prefix("DryRun");
    if let Some(var_5450) = &input.dry_run {
        scope_5449.boolean(*var_5450);
    }
    #[allow(unused_mut)]
    let mut scope_5451 = writer.prefix("IpamPoolId");
    if let Some(var_5452) = &input.ipam_pool_id {
        scope_5451.string(var_5452);
    }
    #[allow(unused_mut)]
    let mut scope_5453 = writer.prefix("Cidr");
    if let Some(var_5454) = &input.cidr {
        scope_5453.string(var_5454);
    }
    #[allow(unused_mut)]
    let mut scope_5455 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5456) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5455, var_5456,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5457 = writer.prefix("DryRun");
    if let Some(var_5458) = &input.dry_run {
        scope_5457.boolean(*var_5458);
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("IpamPoolId");
    if let Some(var_5460) = &input.ipam_pool_id {
        scope_5459.string(var_5460);
    }
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("PoolId");
    if let Some(var_5462) = &input.pool_id {
        scope_5461.string(var_5462);
    }
    #[allow(unused_mut)]
    let mut scope_5463 = writer.prefix("NetmaskLength");
    if let Some(var_5464) = &input.netmask_length {
        scope_5463.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5464).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5465 = writer.prefix("ClientToken");
    if let Some(var_5466) = &input.client_token {
        scope_5465.string(var_5466);
    }
    #[allow(unused_mut)]
    let mut scope_5467 = writer.prefix("CurrencyCode");
    if let Some(var_5468) = &input.currency_code {
        scope_5467.string(var_5468.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("HostIdSet");
    if let Some(var_5470) = &input.host_id_set {
        let mut list_5472 = scope_5469.start_list(true, Some("item"));
        for item_5471 in var_5470 {
            #[allow(unused_mut)]
            let mut entry_5473 = list_5472.entry();
            entry_5473.string(item_5471);
        }
        list_5472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5474 = writer.prefix("LimitPrice");
    if let Some(var_5475) = &input.limit_price {
        scope_5474.string(var_5475);
    }
    #[allow(unused_mut)]
    let mut scope_5476 = writer.prefix("OfferingId");
    if let Some(var_5477) = &input.offering_id {
        scope_5476.string(var_5477);
    }
    #[allow(unused_mut)]
    let mut scope_5478 = writer.prefix("TagSpecification");
    if let Some(var_5479) = &input.tag_specifications {
        let mut list_5481 = scope_5478.start_list(true, Some("item"));
        for item_5480 in var_5479 {
            #[allow(unused_mut)]
            let mut entry_5482 = list_5481.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5482, item_5480,
            )?;
        }
        list_5481.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5483 = writer.prefix("InstanceCount");
    if let Some(var_5484) = &input.instance_count {
        scope_5483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5485 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5486) = &input.reserved_instances_offering_id {
        scope_5485.string(var_5486);
    }
    #[allow(unused_mut)]
    let mut scope_5487 = writer.prefix("DryRun");
    if let Some(var_5488) = &input.dry_run {
        scope_5487.boolean(*var_5488);
    }
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("LimitPrice");
    if let Some(var_5490) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5489, var_5490,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("PurchaseTime");
    if let Some(var_5492) = &input.purchase_time {
        scope_5491.date_time(var_5492, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("ClientToken");
    if let Some(var_5494) = &input.client_token {
        scope_5493.string(var_5494);
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("DryRun");
    if let Some(var_5496) = &input.dry_run {
        scope_5495.boolean(*var_5496);
    }
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("PurchaseRequest");
    if let Some(var_5498) = &input.purchase_requests {
        let mut list_5500 = scope_5497.start_list(true, Some("PurchaseRequest"));
        for item_5499 in var_5498 {
            #[allow(unused_mut)]
            let mut entry_5501 = list_5500.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5501, item_5499,
            )?;
        }
        list_5500.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5502 = writer.prefix("InstanceId");
    if let Some(var_5503) = &input.instance_ids {
        let mut list_5505 = scope_5502.start_list(true, Some("InstanceId"));
        for item_5504 in var_5503 {
            #[allow(unused_mut)]
            let mut entry_5506 = list_5505.entry();
            entry_5506.string(item_5504);
        }
        list_5505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5507 = writer.prefix("DryRun");
    if let Some(var_5508) = &input.dry_run {
        scope_5507.boolean(*var_5508);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5509 = writer.prefix("ImageLocation");
    if let Some(var_5510) = &input.image_location {
        scope_5509.string(var_5510);
    }
    #[allow(unused_mut)]
    let mut scope_5511 = writer.prefix("Architecture");
    if let Some(var_5512) = &input.architecture {
        scope_5511.string(var_5512.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5513 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5514) = &input.block_device_mappings {
        let mut list_5516 = scope_5513.start_list(true, Some("BlockDeviceMapping"));
        for item_5515 in var_5514 {
            #[allow(unused_mut)]
            let mut entry_5517 = list_5516.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5517, item_5515,
            )?;
        }
        list_5516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5518 = writer.prefix("Description");
    if let Some(var_5519) = &input.description {
        scope_5518.string(var_5519);
    }
    #[allow(unused_mut)]
    let mut scope_5520 = writer.prefix("DryRun");
    if let Some(var_5521) = &input.dry_run {
        scope_5520.boolean(*var_5521);
    }
    #[allow(unused_mut)]
    let mut scope_5522 = writer.prefix("EnaSupport");
    if let Some(var_5523) = &input.ena_support {
        scope_5522.boolean(*var_5523);
    }
    #[allow(unused_mut)]
    let mut scope_5524 = writer.prefix("KernelId");
    if let Some(var_5525) = &input.kernel_id {
        scope_5524.string(var_5525);
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("Name");
    if let Some(var_5527) = &input.name {
        scope_5526.string(var_5527);
    }
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("BillingProduct");
    if let Some(var_5529) = &input.billing_products {
        let mut list_5531 = scope_5528.start_list(true, Some("item"));
        for item_5530 in var_5529 {
            #[allow(unused_mut)]
            let mut entry_5532 = list_5531.entry();
            entry_5532.string(item_5530);
        }
        list_5531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5533 = writer.prefix("RamdiskId");
    if let Some(var_5534) = &input.ramdisk_id {
        scope_5533.string(var_5534);
    }
    #[allow(unused_mut)]
    let mut scope_5535 = writer.prefix("RootDeviceName");
    if let Some(var_5536) = &input.root_device_name {
        scope_5535.string(var_5536);
    }
    #[allow(unused_mut)]
    let mut scope_5537 = writer.prefix("SriovNetSupport");
    if let Some(var_5538) = &input.sriov_net_support {
        scope_5537.string(var_5538);
    }
    #[allow(unused_mut)]
    let mut scope_5539 = writer.prefix("VirtualizationType");
    if let Some(var_5540) = &input.virtualization_type {
        scope_5539.string(var_5540);
    }
    #[allow(unused_mut)]
    let mut scope_5541 = writer.prefix("BootMode");
    if let Some(var_5542) = &input.boot_mode {
        scope_5541.string(var_5542.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5543 = writer.prefix("TpmSupport");
    if let Some(var_5544) = &input.tpm_support {
        scope_5543.string(var_5544.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5545 = writer.prefix("UefiData");
    if let Some(var_5546) = &input.uefi_data {
        scope_5545.string(var_5546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5547 = writer.prefix("DryRun");
    if let Some(var_5548) = &input.dry_run {
        scope_5547.boolean(*var_5548);
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5550) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5549, var_5550,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5551 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5552) = &input.transit_gateway_multicast_domain_id {
        scope_5551.string(var_5552);
    }
    #[allow(unused_mut)]
    let mut scope_5553 = writer.prefix("GroupIpAddress");
    if let Some(var_5554) = &input.group_ip_address {
        scope_5553.string(var_5554);
    }
    #[allow(unused_mut)]
    let mut scope_5555 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5556) = &input.network_interface_ids {
        let mut list_5558 = scope_5555.start_list(true, Some("item"));
        for item_5557 in var_5556 {
            #[allow(unused_mut)]
            let mut entry_5559 = list_5558.entry();
            entry_5559.string(item_5557);
        }
        list_5558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5560 = writer.prefix("DryRun");
    if let Some(var_5561) = &input.dry_run {
        scope_5560.boolean(*var_5561);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5562 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5563) = &input.transit_gateway_multicast_domain_id {
        scope_5562.string(var_5563);
    }
    #[allow(unused_mut)]
    let mut scope_5564 = writer.prefix("GroupIpAddress");
    if let Some(var_5565) = &input.group_ip_address {
        scope_5564.string(var_5565);
    }
    #[allow(unused_mut)]
    let mut scope_5566 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5567) = &input.network_interface_ids {
        let mut list_5569 = scope_5566.start_list(true, Some("item"));
        for item_5568 in var_5567 {
            #[allow(unused_mut)]
            let mut entry_5570 = list_5569.entry();
            entry_5570.string(item_5568);
        }
        list_5569.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5571 = writer.prefix("DryRun");
    if let Some(var_5572) = &input.dry_run {
        scope_5571.boolean(*var_5572);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5573 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5574) = &input.transit_gateway_multicast_domain_id {
        scope_5573.string(var_5574);
    }
    #[allow(unused_mut)]
    let mut scope_5575 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5576) = &input.transit_gateway_attachment_id {
        scope_5575.string(var_5576);
    }
    #[allow(unused_mut)]
    let mut scope_5577 = writer.prefix("SubnetIds");
    if let Some(var_5578) = &input.subnet_ids {
        let mut list_5580 = scope_5577.start_list(true, Some("item"));
        for item_5579 in var_5578 {
            #[allow(unused_mut)]
            let mut entry_5581 = list_5580.entry();
            entry_5581.string(item_5579);
        }
        list_5580.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5582 = writer.prefix("DryRun");
    if let Some(var_5583) = &input.dry_run {
        scope_5582.boolean(*var_5583);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5584 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5585) = &input.transit_gateway_attachment_id {
        scope_5584.string(var_5585);
    }
    #[allow(unused_mut)]
    let mut scope_5586 = writer.prefix("DryRun");
    if let Some(var_5587) = &input.dry_run {
        scope_5586.boolean(*var_5587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5588 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5589) = &input.transit_gateway_attachment_id {
        scope_5588.string(var_5589);
    }
    #[allow(unused_mut)]
    let mut scope_5590 = writer.prefix("DryRun");
    if let Some(var_5591) = &input.dry_run {
        scope_5590.boolean(*var_5591);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5592 = writer.prefix("DryRun");
    if let Some(var_5593) = &input.dry_run {
        scope_5592.boolean(*var_5593);
    }
    #[allow(unused_mut)]
    let mut scope_5594 = writer.prefix("ServiceId");
    if let Some(var_5595) = &input.service_id {
        scope_5594.string(var_5595);
    }
    #[allow(unused_mut)]
    let mut scope_5596 = writer.prefix("VpcEndpointId");
    if let Some(var_5597) = &input.vpc_endpoint_ids {
        let mut list_5599 = scope_5596.start_list(true, Some("item"));
        for item_5598 in var_5597 {
            #[allow(unused_mut)]
            let mut entry_5600 = list_5599.entry();
            entry_5600.string(item_5598);
        }
        list_5599.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5601 = writer.prefix("DryRun");
    if let Some(var_5602) = &input.dry_run {
        scope_5601.boolean(*var_5602);
    }
    #[allow(unused_mut)]
    let mut scope_5603 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5604) = &input.vpc_peering_connection_id {
        scope_5603.string(var_5604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5605 = writer.prefix("AllocationId");
    if let Some(var_5606) = &input.allocation_id {
        scope_5605.string(var_5606);
    }
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("PublicIp");
    if let Some(var_5608) = &input.public_ip {
        scope_5607.string(var_5608);
    }
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5610) = &input.network_border_group {
        scope_5609.string(var_5610);
    }
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("DryRun");
    if let Some(var_5612) = &input.dry_run {
        scope_5611.boolean(*var_5612);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("HostId");
    if let Some(var_5614) = &input.host_ids {
        let mut list_5616 = scope_5613.start_list(true, Some("item"));
        for item_5615 in var_5614 {
            #[allow(unused_mut)]
            let mut entry_5617 = list_5616.entry();
            entry_5617.string(item_5615);
        }
        list_5616.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5618 = writer.prefix("DryRun");
    if let Some(var_5619) = &input.dry_run {
        scope_5618.boolean(*var_5619);
    }
    #[allow(unused_mut)]
    let mut scope_5620 = writer.prefix("IpamPoolId");
    if let Some(var_5621) = &input.ipam_pool_id {
        scope_5620.string(var_5621);
    }
    #[allow(unused_mut)]
    let mut scope_5622 = writer.prefix("Cidr");
    if let Some(var_5623) = &input.cidr {
        scope_5622.string(var_5623);
    }
    #[allow(unused_mut)]
    let mut scope_5624 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5625) = &input.ipam_pool_allocation_id {
        scope_5624.string(var_5625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5626 = writer.prefix("IamInstanceProfile");
    if let Some(var_5627) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5626, var_5627,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5628 = writer.prefix("AssociationId");
    if let Some(var_5629) = &input.association_id {
        scope_5628.string(var_5629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5630 = writer.prefix("AssociationId");
    if let Some(var_5631) = &input.association_id {
        scope_5630.string(var_5631);
    }
    #[allow(unused_mut)]
    let mut scope_5632 = writer.prefix("DryRun");
    if let Some(var_5633) = &input.dry_run {
        scope_5632.boolean(*var_5633);
    }
    #[allow(unused_mut)]
    let mut scope_5634 = writer.prefix("NetworkAclId");
    if let Some(var_5635) = &input.network_acl_id {
        scope_5634.string(var_5635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("CidrBlock");
    if let Some(var_5637) = &input.cidr_block {
        scope_5636.string(var_5637);
    }
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("DryRun");
    if let Some(var_5639) = &input.dry_run {
        scope_5638.boolean(*var_5639);
    }
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("Egress");
    if let Some(var_5641) = &input.egress {
        scope_5640.boolean(*var_5641);
    }
    #[allow(unused_mut)]
    let mut scope_5642 = writer.prefix("Icmp");
    if let Some(var_5643) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5642, var_5643)?;
    }
    #[allow(unused_mut)]
    let mut scope_5644 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5645) = &input.ipv6_cidr_block {
        scope_5644.string(var_5645);
    }
    #[allow(unused_mut)]
    let mut scope_5646 = writer.prefix("NetworkAclId");
    if let Some(var_5647) = &input.network_acl_id {
        scope_5646.string(var_5647);
    }
    #[allow(unused_mut)]
    let mut scope_5648 = writer.prefix("PortRange");
    if let Some(var_5649) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5648, var_5649)?;
    }
    #[allow(unused_mut)]
    let mut scope_5650 = writer.prefix("Protocol");
    if let Some(var_5651) = &input.protocol {
        scope_5650.string(var_5651);
    }
    #[allow(unused_mut)]
    let mut scope_5652 = writer.prefix("RuleAction");
    if let Some(var_5653) = &input.rule_action {
        scope_5652.string(var_5653.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5654 = writer.prefix("RuleNumber");
    if let Some(var_5655) = &input.rule_number {
        scope_5654.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5655).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5656 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5657) = &input.destination_cidr_block {
        scope_5656.string(var_5657);
    }
    #[allow(unused_mut)]
    let mut scope_5658 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5659) = &input.destination_ipv6_cidr_block {
        scope_5658.string(var_5659);
    }
    #[allow(unused_mut)]
    let mut scope_5660 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5661) = &input.destination_prefix_list_id {
        scope_5660.string(var_5661);
    }
    #[allow(unused_mut)]
    let mut scope_5662 = writer.prefix("DryRun");
    if let Some(var_5663) = &input.dry_run {
        scope_5662.boolean(*var_5663);
    }
    #[allow(unused_mut)]
    let mut scope_5664 = writer.prefix("VpcEndpointId");
    if let Some(var_5665) = &input.vpc_endpoint_id {
        scope_5664.string(var_5665);
    }
    #[allow(unused_mut)]
    let mut scope_5666 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5667) = &input.egress_only_internet_gateway_id {
        scope_5666.string(var_5667);
    }
    #[allow(unused_mut)]
    let mut scope_5668 = writer.prefix("GatewayId");
    if let Some(var_5669) = &input.gateway_id {
        scope_5668.string(var_5669);
    }
    #[allow(unused_mut)]
    let mut scope_5670 = writer.prefix("InstanceId");
    if let Some(var_5671) = &input.instance_id {
        scope_5670.string(var_5671);
    }
    #[allow(unused_mut)]
    let mut scope_5672 = writer.prefix("LocalTarget");
    if let Some(var_5673) = &input.local_target {
        scope_5672.boolean(*var_5673);
    }
    #[allow(unused_mut)]
    let mut scope_5674 = writer.prefix("NatGatewayId");
    if let Some(var_5675) = &input.nat_gateway_id {
        scope_5674.string(var_5675);
    }
    #[allow(unused_mut)]
    let mut scope_5676 = writer.prefix("TransitGatewayId");
    if let Some(var_5677) = &input.transit_gateway_id {
        scope_5676.string(var_5677);
    }
    #[allow(unused_mut)]
    let mut scope_5678 = writer.prefix("LocalGatewayId");
    if let Some(var_5679) = &input.local_gateway_id {
        scope_5678.string(var_5679);
    }
    #[allow(unused_mut)]
    let mut scope_5680 = writer.prefix("CarrierGatewayId");
    if let Some(var_5681) = &input.carrier_gateway_id {
        scope_5680.string(var_5681);
    }
    #[allow(unused_mut)]
    let mut scope_5682 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5683) = &input.network_interface_id {
        scope_5682.string(var_5683);
    }
    #[allow(unused_mut)]
    let mut scope_5684 = writer.prefix("RouteTableId");
    if let Some(var_5685) = &input.route_table_id {
        scope_5684.string(var_5685);
    }
    #[allow(unused_mut)]
    let mut scope_5686 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5687) = &input.vpc_peering_connection_id {
        scope_5686.string(var_5687);
    }
    #[allow(unused_mut)]
    let mut scope_5688 = writer.prefix("CoreNetworkArn");
    if let Some(var_5689) = &input.core_network_arn {
        scope_5688.string(var_5689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5690 = writer.prefix("AssociationId");
    if let Some(var_5691) = &input.association_id {
        scope_5690.string(var_5691);
    }
    #[allow(unused_mut)]
    let mut scope_5692 = writer.prefix("DryRun");
    if let Some(var_5693) = &input.dry_run {
        scope_5692.boolean(*var_5693);
    }
    #[allow(unused_mut)]
    let mut scope_5694 = writer.prefix("RouteTableId");
    if let Some(var_5695) = &input.route_table_id {
        scope_5694.string(var_5695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5696 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5697) = &input.destination_cidr_block {
        scope_5696.string(var_5697);
    }
    #[allow(unused_mut)]
    let mut scope_5698 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5699) = &input.transit_gateway_route_table_id {
        scope_5698.string(var_5699);
    }
    #[allow(unused_mut)]
    let mut scope_5700 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5701) = &input.transit_gateway_attachment_id {
        scope_5700.string(var_5701);
    }
    #[allow(unused_mut)]
    let mut scope_5702 = writer.prefix("Blackhole");
    if let Some(var_5703) = &input.blackhole {
        scope_5702.boolean(*var_5703);
    }
    #[allow(unused_mut)]
    let mut scope_5704 = writer.prefix("DryRun");
    if let Some(var_5705) = &input.dry_run {
        scope_5704.boolean(*var_5705);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5706 = writer.prefix("Description");
    if let Some(var_5707) = &input.description {
        scope_5706.string(var_5707);
    }
    #[allow(unused_mut)]
    let mut scope_5708 = writer.prefix("DryRun");
    if let Some(var_5709) = &input.dry_run {
        scope_5708.boolean(*var_5709);
    }
    #[allow(unused_mut)]
    let mut scope_5710 = writer.prefix("EndTime");
    if let Some(var_5711) = &input.end_time {
        scope_5710.date_time(var_5711, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5712 = writer.prefix("InstanceId");
    if let Some(var_5713) = &input.instances {
        let mut list_5715 = scope_5712.start_list(true, Some("InstanceId"));
        for item_5714 in var_5713 {
            #[allow(unused_mut)]
            let mut entry_5716 = list_5715.entry();
            entry_5716.string(item_5714);
        }
        list_5715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5717 = writer.prefix("ReasonCode");
    if let Some(var_5718) = &input.reason_codes {
        let mut list_5720 = scope_5717.start_list(true, Some("item"));
        for item_5719 in var_5718 {
            #[allow(unused_mut)]
            let mut entry_5721 = list_5720.entry();
            entry_5721.string(item_5719.as_str());
        }
        list_5720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5722 = writer.prefix("StartTime");
    if let Some(var_5723) = &input.start_time {
        scope_5722.date_time(var_5723, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5724 = writer.prefix("Status");
    if let Some(var_5725) = &input.status {
        scope_5724.string(var_5725.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5726 = writer.prefix("DryRun");
    if let Some(var_5727) = &input.dry_run {
        scope_5726.boolean(*var_5727);
    }
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5729) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5728, var_5729,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5731) = &input.availability_zone_group {
        scope_5730.string(var_5731);
    }
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5733) = &input.block_duration_minutes {
        scope_5732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5733).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("ClientToken");
    if let Some(var_5735) = &input.client_token {
        scope_5734.string(var_5735);
    }
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("DryRun");
    if let Some(var_5737) = &input.dry_run {
        scope_5736.boolean(*var_5737);
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("InstanceCount");
    if let Some(var_5739) = &input.instance_count {
        scope_5738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5739).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("LaunchGroup");
    if let Some(var_5741) = &input.launch_group {
        scope_5740.string(var_5741);
    }
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("LaunchSpecification");
    if let Some(var_5743) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5742, var_5743,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("SpotPrice");
    if let Some(var_5745) = &input.spot_price {
        scope_5744.string(var_5745);
    }
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("Type");
    if let Some(var_5747) = &input.r#type {
        scope_5746.string(var_5747.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("ValidFrom");
    if let Some(var_5749) = &input.valid_from {
        scope_5748.date_time(var_5749, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("ValidUntil");
    if let Some(var_5751) = &input.valid_until {
        scope_5750.date_time(var_5751, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("TagSpecification");
    if let Some(var_5753) = &input.tag_specifications {
        let mut list_5755 = scope_5752.start_list(true, Some("item"));
        for item_5754 in var_5753 {
            #[allow(unused_mut)]
            let mut entry_5756 = list_5755.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5756, item_5754,
            )?;
        }
        list_5755.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5757 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5758) = &input.instance_interruption_behavior {
        scope_5757.string(var_5758.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5759 = writer.prefix("AllocationId");
    if let Some(var_5760) = &input.allocation_id {
        scope_5759.string(var_5760);
    }
    #[allow(unused_mut)]
    let mut scope_5761 = writer.prefix("Attribute");
    if let Some(var_5762) = &input.attribute {
        scope_5761.string(var_5762.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5763 = writer.prefix("DryRun");
    if let Some(var_5764) = &input.dry_run {
        scope_5763.boolean(*var_5764);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5765 = writer.prefix("DryRun");
    if let Some(var_5766) = &input.dry_run {
        scope_5765.boolean(*var_5766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5767 = writer.prefix("DryRun");
    if let Some(var_5768) = &input.dry_run {
        scope_5767.boolean(*var_5768);
    }
    #[allow(unused_mut)]
    let mut scope_5769 = writer.prefix("FpgaImageId");
    if let Some(var_5770) = &input.fpga_image_id {
        scope_5769.string(var_5770);
    }
    #[allow(unused_mut)]
    let mut scope_5771 = writer.prefix("Attribute");
    if let Some(var_5772) = &input.attribute {
        scope_5771.string(var_5772.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5773 = writer.prefix("Attribute");
    if let Some(var_5774) = &input.attribute {
        scope_5773.string(var_5774.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5775 = writer.prefix("ImageId");
    if let Some(var_5776) = &input.image_id {
        scope_5775.string(var_5776);
    }
    #[allow(unused_mut)]
    let mut scope_5777 = writer.prefix("DryRun");
    if let Some(var_5778) = &input.dry_run {
        scope_5777.boolean(*var_5778);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5779 = writer.prefix("Attribute");
    if let Some(var_5780) = &input.attribute {
        scope_5779.string(var_5780.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5781 = writer.prefix("DryRun");
    if let Some(var_5782) = &input.dry_run {
        scope_5781.boolean(*var_5782);
    }
    #[allow(unused_mut)]
    let mut scope_5783 = writer.prefix("InstanceId");
    if let Some(var_5784) = &input.instance_id {
        scope_5783.string(var_5784);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5785 = writer.prefix("DryRun");
    if let Some(var_5786) = &input.dry_run {
        scope_5785.boolean(*var_5786);
    }
    #[allow(unused_mut)]
    let mut scope_5787 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5788) = &input.network_interface_id {
        scope_5787.string(var_5788);
    }
    #[allow(unused_mut)]
    let mut scope_5789 = writer.prefix("SourceDestCheck");
    if let Some(var_5790) = &input.source_dest_check {
        scope_5789.string(var_5790);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5791 = writer.prefix("Attribute");
    if let Some(var_5792) = &input.attribute {
        scope_5791.string(var_5792.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5793 = writer.prefix("SnapshotId");
    if let Some(var_5794) = &input.snapshot_id {
        scope_5793.string(var_5794);
    }
    #[allow(unused_mut)]
    let mut scope_5795 = writer.prefix("DryRun");
    if let Some(var_5796) = &input.dry_run {
        scope_5795.boolean(*var_5796);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5797 = writer.prefix("DryRun");
    if let Some(var_5798) = &input.dry_run {
        scope_5797.boolean(*var_5798);
    }
    #[allow(unused_mut)]
    let mut scope_5799 = writer.prefix("PublicIp");
    if let Some(var_5800) = &input.public_ip {
        scope_5799.string(var_5800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5801 = writer.prefix("ImageId");
    if let Some(var_5802) = &input.image_id {
        scope_5801.string(var_5802);
    }
    #[allow(unused_mut)]
    let mut scope_5803 = writer.prefix("DryRun");
    if let Some(var_5804) = &input.dry_run {
        scope_5803.boolean(*var_5804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5805 = writer.prefix("DryRun");
    if let Some(var_5806) = &input.dry_run {
        scope_5805.boolean(*var_5806);
    }
    #[allow(unused_mut)]
    let mut scope_5807 = writer.prefix("PrefixListId");
    if let Some(var_5808) = &input.prefix_list_id {
        scope_5807.string(var_5808);
    }
    #[allow(unused_mut)]
    let mut scope_5809 = writer.prefix("PreviousVersion");
    if let Some(var_5810) = &input.previous_version {
        scope_5809.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5810).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5811 = writer.prefix("CurrentVersion");
    if let Some(var_5812) = &input.current_version {
        scope_5811.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5812).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5813 = writer.prefix("SnapshotId");
    if let Some(var_5814) = &input.snapshot_id {
        scope_5813.string(var_5814);
    }
    #[allow(unused_mut)]
    let mut scope_5815 = writer.prefix("DryRun");
    if let Some(var_5816) = &input.dry_run {
        scope_5815.boolean(*var_5816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5817 = writer.prefix("SnapshotId");
    if let Some(var_5818) = &input.snapshot_id {
        scope_5817.string(var_5818);
    }
    #[allow(unused_mut)]
    let mut scope_5819 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5820) = &input.temporary_restore_days {
        scope_5819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5820).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5821 = writer.prefix("PermanentRestore");
    if let Some(var_5822) = &input.permanent_restore {
        scope_5821.boolean(*var_5822);
    }
    #[allow(unused_mut)]
    let mut scope_5823 = writer.prefix("DryRun");
    if let Some(var_5824) = &input.dry_run {
        scope_5823.boolean(*var_5824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5825 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5826) = &input.client_vpn_endpoint_id {
        scope_5825.string(var_5826);
    }
    #[allow(unused_mut)]
    let mut scope_5827 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5828) = &input.target_network_cidr {
        scope_5827.string(var_5828);
    }
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("AccessGroupId");
    if let Some(var_5830) = &input.access_group_id {
        scope_5829.string(var_5830);
    }
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("RevokeAllGroups");
    if let Some(var_5832) = &input.revoke_all_groups {
        scope_5831.boolean(*var_5832);
    }
    #[allow(unused_mut)]
    let mut scope_5833 = writer.prefix("DryRun");
    if let Some(var_5834) = &input.dry_run {
        scope_5833.boolean(*var_5834);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5835 = writer.prefix("DryRun");
    if let Some(var_5836) = &input.dry_run {
        scope_5835.boolean(*var_5836);
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("GroupId");
    if let Some(var_5838) = &input.group_id {
        scope_5837.string(var_5838);
    }
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("IpPermissions");
    if let Some(var_5840) = &input.ip_permissions {
        let mut list_5842 = scope_5839.start_list(true, Some("item"));
        for item_5841 in var_5840 {
            #[allow(unused_mut)]
            let mut entry_5843 = list_5842.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5843, item_5841)?;
        }
        list_5842.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5844 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5845) = &input.security_group_rule_ids {
        let mut list_5847 = scope_5844.start_list(true, Some("item"));
        for item_5846 in var_5845 {
            #[allow(unused_mut)]
            let mut entry_5848 = list_5847.entry();
            entry_5848.string(item_5846);
        }
        list_5847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5849 = writer.prefix("CidrIp");
    if let Some(var_5850) = &input.cidr_ip {
        scope_5849.string(var_5850);
    }
    #[allow(unused_mut)]
    let mut scope_5851 = writer.prefix("FromPort");
    if let Some(var_5852) = &input.from_port {
        scope_5851.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5852).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5853 = writer.prefix("IpProtocol");
    if let Some(var_5854) = &input.ip_protocol {
        scope_5853.string(var_5854);
    }
    #[allow(unused_mut)]
    let mut scope_5855 = writer.prefix("ToPort");
    if let Some(var_5856) = &input.to_port {
        scope_5855.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5856).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5857 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5858) = &input.source_security_group_name {
        scope_5857.string(var_5858);
    }
    #[allow(unused_mut)]
    let mut scope_5859 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5860) = &input.source_security_group_owner_id {
        scope_5859.string(var_5860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5861 = writer.prefix("CidrIp");
    if let Some(var_5862) = &input.cidr_ip {
        scope_5861.string(var_5862);
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("FromPort");
    if let Some(var_5864) = &input.from_port {
        scope_5863.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5864).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5865 = writer.prefix("GroupId");
    if let Some(var_5866) = &input.group_id {
        scope_5865.string(var_5866);
    }
    #[allow(unused_mut)]
    let mut scope_5867 = writer.prefix("GroupName");
    if let Some(var_5868) = &input.group_name {
        scope_5867.string(var_5868);
    }
    #[allow(unused_mut)]
    let mut scope_5869 = writer.prefix("IpPermissions");
    if let Some(var_5870) = &input.ip_permissions {
        let mut list_5872 = scope_5869.start_list(true, Some("item"));
        for item_5871 in var_5870 {
            #[allow(unused_mut)]
            let mut entry_5873 = list_5872.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5873, item_5871)?;
        }
        list_5872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5874 = writer.prefix("IpProtocol");
    if let Some(var_5875) = &input.ip_protocol {
        scope_5874.string(var_5875);
    }
    #[allow(unused_mut)]
    let mut scope_5876 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5877) = &input.source_security_group_name {
        scope_5876.string(var_5877);
    }
    #[allow(unused_mut)]
    let mut scope_5878 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5879) = &input.source_security_group_owner_id {
        scope_5878.string(var_5879);
    }
    #[allow(unused_mut)]
    let mut scope_5880 = writer.prefix("ToPort");
    if let Some(var_5881) = &input.to_port {
        scope_5880.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5881).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5882 = writer.prefix("DryRun");
    if let Some(var_5883) = &input.dry_run {
        scope_5882.boolean(*var_5883);
    }
    #[allow(unused_mut)]
    let mut scope_5884 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5885) = &input.security_group_rule_ids {
        let mut list_5887 = scope_5884.start_list(true, Some("item"));
        for item_5886 in var_5885 {
            #[allow(unused_mut)]
            let mut entry_5888 = list_5887.entry();
            entry_5888.string(item_5886);
        }
        list_5887.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5889 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5890) = &input.block_device_mappings {
        let mut list_5892 = scope_5889.start_list(true, Some("BlockDeviceMapping"));
        for item_5891 in var_5890 {
            #[allow(unused_mut)]
            let mut entry_5893 = list_5892.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5893, item_5891,
            )?;
        }
        list_5892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5894 = writer.prefix("ImageId");
    if let Some(var_5895) = &input.image_id {
        scope_5894.string(var_5895);
    }
    #[allow(unused_mut)]
    let mut scope_5896 = writer.prefix("InstanceType");
    if let Some(var_5897) = &input.instance_type {
        scope_5896.string(var_5897.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5898 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5899) = &input.ipv6_address_count {
        scope_5898.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5899).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5900 = writer.prefix("Ipv6Address");
    if let Some(var_5901) = &input.ipv6_addresses {
        let mut list_5903 = scope_5900.start_list(true, Some("item"));
        for item_5902 in var_5901 {
            #[allow(unused_mut)]
            let mut entry_5904 = list_5903.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5904, item_5902,
            )?;
        }
        list_5903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5905 = writer.prefix("KernelId");
    if let Some(var_5906) = &input.kernel_id {
        scope_5905.string(var_5906);
    }
    #[allow(unused_mut)]
    let mut scope_5907 = writer.prefix("KeyName");
    if let Some(var_5908) = &input.key_name {
        scope_5907.string(var_5908);
    }
    #[allow(unused_mut)]
    let mut scope_5909 = writer.prefix("MaxCount");
    if let Some(var_5910) = &input.max_count {
        scope_5909.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5910).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5911 = writer.prefix("MinCount");
    if let Some(var_5912) = &input.min_count {
        scope_5911.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5912).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5913 = writer.prefix("Monitoring");
    if let Some(var_5914) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5913, var_5914,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("Placement");
    if let Some(var_5916) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5915, var_5916)?;
    }
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("RamdiskId");
    if let Some(var_5918) = &input.ramdisk_id {
        scope_5917.string(var_5918);
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("SecurityGroupId");
    if let Some(var_5920) = &input.security_group_ids {
        let mut list_5922 = scope_5919.start_list(true, Some("SecurityGroupId"));
        for item_5921 in var_5920 {
            #[allow(unused_mut)]
            let mut entry_5923 = list_5922.entry();
            entry_5923.string(item_5921);
        }
        list_5922.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5924 = writer.prefix("SecurityGroup");
    if let Some(var_5925) = &input.security_groups {
        let mut list_5927 = scope_5924.start_list(true, Some("SecurityGroup"));
        for item_5926 in var_5925 {
            #[allow(unused_mut)]
            let mut entry_5928 = list_5927.entry();
            entry_5928.string(item_5926);
        }
        list_5927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5929 = writer.prefix("SubnetId");
    if let Some(var_5930) = &input.subnet_id {
        scope_5929.string(var_5930);
    }
    #[allow(unused_mut)]
    let mut scope_5931 = writer.prefix("UserData");
    if let Some(var_5932) = &input.user_data {
        scope_5931.string(var_5932);
    }
    #[allow(unused_mut)]
    let mut scope_5933 = writer.prefix("AdditionalInfo");
    if let Some(var_5934) = &input.additional_info {
        scope_5933.string(var_5934);
    }
    #[allow(unused_mut)]
    let mut scope_5935 = writer.prefix("ClientToken");
    if let Some(var_5936) = &input.client_token {
        scope_5935.string(var_5936);
    }
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("DisableApiTermination");
    if let Some(var_5938) = &input.disable_api_termination {
        scope_5937.boolean(*var_5938);
    }
    #[allow(unused_mut)]
    let mut scope_5939 = writer.prefix("DryRun");
    if let Some(var_5940) = &input.dry_run {
        scope_5939.boolean(*var_5940);
    }
    #[allow(unused_mut)]
    let mut scope_5941 = writer.prefix("EbsOptimized");
    if let Some(var_5942) = &input.ebs_optimized {
        scope_5941.boolean(*var_5942);
    }
    #[allow(unused_mut)]
    let mut scope_5943 = writer.prefix("IamInstanceProfile");
    if let Some(var_5944) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5943, var_5944,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5945 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5946) = &input.instance_initiated_shutdown_behavior {
        scope_5945.string(var_5946.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5947 = writer.prefix("NetworkInterface");
    if let Some(var_5948) = &input.network_interfaces {
        let mut list_5950 = scope_5947.start_list(true, Some("item"));
        for item_5949 in var_5948 {
            #[allow(unused_mut)]
            let mut entry_5951 = list_5950.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5951, item_5949)?;
        }
        list_5950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5952 = writer.prefix("PrivateIpAddress");
    if let Some(var_5953) = &input.private_ip_address {
        scope_5952.string(var_5953);
    }
    #[allow(unused_mut)]
    let mut scope_5954 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5955) = &input.elastic_gpu_specification {
        let mut list_5957 = scope_5954.start_list(true, Some("item"));
        for item_5956 in var_5955 {
            #[allow(unused_mut)]
            let mut entry_5958 = list_5957.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5958, item_5956,
            )?;
        }
        list_5957.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5959 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5960) = &input.elastic_inference_accelerators {
        let mut list_5962 = scope_5959.start_list(true, Some("item"));
        for item_5961 in var_5960 {
            #[allow(unused_mut)]
            let mut entry_5963 = list_5962.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5963, item_5961,
            )?;
        }
        list_5962.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5964 = writer.prefix("TagSpecification");
    if let Some(var_5965) = &input.tag_specifications {
        let mut list_5967 = scope_5964.start_list(true, Some("item"));
        for item_5966 in var_5965 {
            #[allow(unused_mut)]
            let mut entry_5968 = list_5967.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5968, item_5966,
            )?;
        }
        list_5967.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5969 = writer.prefix("LaunchTemplate");
    if let Some(var_5970) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5969, var_5970,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5971 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5972) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5971, var_5972,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5973 = writer.prefix("CreditSpecification");
    if let Some(var_5974) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5973, var_5974,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5975 = writer.prefix("CpuOptions");
    if let Some(var_5976) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5975, var_5976,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5978) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5977, var_5978,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5979 = writer.prefix("HibernationOptions");
    if let Some(var_5980) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5979, var_5980,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5981 = writer.prefix("LicenseSpecification");
    if let Some(var_5982) = &input.license_specifications {
        let mut list_5984 = scope_5981.start_list(true, Some("item"));
        for item_5983 in var_5982 {
            #[allow(unused_mut)]
            let mut entry_5985 = list_5984.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5985, item_5983,
            )?;
        }
        list_5984.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5986 = writer.prefix("MetadataOptions");
    if let Some(var_5987) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5986, var_5987,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5988 = writer.prefix("EnclaveOptions");
    if let Some(var_5989) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5988, var_5989,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5990 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5991) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5990, var_5991,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("MaintenanceOptions");
    if let Some(var_5993) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_5992, var_5993,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("ClientToken");
    if let Some(var_5995) = &input.client_token {
        scope_5994.string(var_5995);
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("DryRun");
    if let Some(var_5997) = &input.dry_run {
        scope_5996.boolean(*var_5997);
    }
    #[allow(unused_mut)]
    let mut scope_5998 = writer.prefix("InstanceCount");
    if let Some(var_5999) = &input.instance_count {
        scope_5998.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5999).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6000 = writer.prefix("LaunchSpecification");
    if let Some(var_6001) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_6000, var_6001,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6002 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6003) = &input.scheduled_instance_id {
        scope_6002.string(var_6003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6005) = &input.local_gateway_route_table_id {
        scope_6004.string(var_6005);
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("Filter");
    if let Some(var_6007) = &input.filters {
        let mut list_6009 = scope_6006.start_list(true, Some("Filter"));
        for item_6008 in var_6007 {
            #[allow(unused_mut)]
            let mut entry_6010 = list_6009.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6010, item_6008)?;
        }
        list_6009.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6011 = writer.prefix("MaxResults");
    if let Some(var_6012) = &input.max_results {
        scope_6011.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6012).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6013 = writer.prefix("NextToken");
    if let Some(var_6014) = &input.next_token {
        scope_6013.string(var_6014);
    }
    #[allow(unused_mut)]
    let mut scope_6015 = writer.prefix("DryRun");
    if let Some(var_6016) = &input.dry_run {
        scope_6015.boolean(*var_6016);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6017 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6018) = &input.transit_gateway_multicast_domain_id {
        scope_6017.string(var_6018);
    }
    #[allow(unused_mut)]
    let mut scope_6019 = writer.prefix("Filter");
    if let Some(var_6020) = &input.filters {
        let mut list_6022 = scope_6019.start_list(true, Some("Filter"));
        for item_6021 in var_6020 {
            #[allow(unused_mut)]
            let mut entry_6023 = list_6022.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6023, item_6021)?;
        }
        list_6022.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6024 = writer.prefix("MaxResults");
    if let Some(var_6025) = &input.max_results {
        scope_6024.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6025).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6026 = writer.prefix("NextToken");
    if let Some(var_6027) = &input.next_token {
        scope_6026.string(var_6027);
    }
    #[allow(unused_mut)]
    let mut scope_6028 = writer.prefix("DryRun");
    if let Some(var_6029) = &input.dry_run {
        scope_6028.boolean(*var_6029);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6030 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6031) = &input.transit_gateway_route_table_id {
        scope_6030.string(var_6031);
    }
    #[allow(unused_mut)]
    let mut scope_6032 = writer.prefix("Filter");
    if let Some(var_6033) = &input.filters {
        let mut list_6035 = scope_6032.start_list(true, Some("Filter"));
        for item_6034 in var_6033 {
            #[allow(unused_mut)]
            let mut entry_6036 = list_6035.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6036, item_6034)?;
        }
        list_6035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6037 = writer.prefix("MaxResults");
    if let Some(var_6038) = &input.max_results {
        scope_6037.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6038).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6039 = writer.prefix("DryRun");
    if let Some(var_6040) = &input.dry_run {
        scope_6039.boolean(*var_6040);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6041 = writer.prefix("InstanceId");
    if let Some(var_6042) = &input.instance_id {
        scope_6041.string(var_6042);
    }
    #[allow(unused_mut)]
    let mut scope_6043 = writer.prefix("DryRun");
    if let Some(var_6044) = &input.dry_run {
        scope_6043.boolean(*var_6044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6045 = writer.prefix("InstanceId");
    if let Some(var_6046) = &input.instance_ids {
        let mut list_6048 = scope_6045.start_list(true, Some("InstanceId"));
        for item_6047 in var_6046 {
            #[allow(unused_mut)]
            let mut entry_6049 = list_6048.entry();
            entry_6049.string(item_6047);
        }
        list_6048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6050 = writer.prefix("AdditionalInfo");
    if let Some(var_6051) = &input.additional_info {
        scope_6050.string(var_6051);
    }
    #[allow(unused_mut)]
    let mut scope_6052 = writer.prefix("DryRun");
    if let Some(var_6053) = &input.dry_run {
        scope_6052.boolean(*var_6053);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6054 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6055) = &input.network_insights_access_scope_id {
        scope_6054.string(var_6055);
    }
    #[allow(unused_mut)]
    let mut scope_6056 = writer.prefix("DryRun");
    if let Some(var_6057) = &input.dry_run {
        scope_6056.boolean(*var_6057);
    }
    #[allow(unused_mut)]
    let mut scope_6058 = writer.prefix("TagSpecification");
    if let Some(var_6059) = &input.tag_specifications {
        let mut list_6061 = scope_6058.start_list(true, Some("item"));
        for item_6060 in var_6059 {
            #[allow(unused_mut)]
            let mut entry_6062 = list_6061.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6062, item_6060,
            )?;
        }
        list_6061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6063 = writer.prefix("ClientToken");
    if let Some(var_6064) = &input.client_token {
        scope_6063.string(var_6064);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6065 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6066) = &input.network_insights_path_id {
        scope_6065.string(var_6066);
    }
    #[allow(unused_mut)]
    let mut scope_6067 = writer.prefix("FilterInArn");
    if let Some(var_6068) = &input.filter_in_arns {
        let mut list_6070 = scope_6067.start_list(true, Some("item"));
        for item_6069 in var_6068 {
            #[allow(unused_mut)]
            let mut entry_6071 = list_6070.entry();
            entry_6071.string(item_6069);
        }
        list_6070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6072 = writer.prefix("DryRun");
    if let Some(var_6073) = &input.dry_run {
        scope_6072.boolean(*var_6073);
    }
    #[allow(unused_mut)]
    let mut scope_6074 = writer.prefix("TagSpecification");
    if let Some(var_6075) = &input.tag_specifications {
        let mut list_6077 = scope_6074.start_list(true, Some("item"));
        for item_6076 in var_6075 {
            #[allow(unused_mut)]
            let mut entry_6078 = list_6077.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6078, item_6076,
            )?;
        }
        list_6077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6079 = writer.prefix("ClientToken");
    if let Some(var_6080) = &input.client_token {
        scope_6079.string(var_6080);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6081 = writer.prefix("DryRun");
    if let Some(var_6082) = &input.dry_run {
        scope_6081.boolean(*var_6082);
    }
    #[allow(unused_mut)]
    let mut scope_6083 = writer.prefix("ServiceId");
    if let Some(var_6084) = &input.service_id {
        scope_6083.string(var_6084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6085 = writer.prefix("InstanceId");
    if let Some(var_6086) = &input.instance_ids {
        let mut list_6088 = scope_6085.start_list(true, Some("InstanceId"));
        for item_6087 in var_6086 {
            #[allow(unused_mut)]
            let mut entry_6089 = list_6088.entry();
            entry_6089.string(item_6087);
        }
        list_6088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6090 = writer.prefix("Hibernate");
    if let Some(var_6091) = &input.hibernate {
        scope_6090.boolean(*var_6091);
    }
    #[allow(unused_mut)]
    let mut scope_6092 = writer.prefix("DryRun");
    if let Some(var_6093) = &input.dry_run {
        scope_6092.boolean(*var_6093);
    }
    #[allow(unused_mut)]
    let mut scope_6094 = writer.prefix("Force");
    if let Some(var_6095) = &input.force {
        scope_6094.boolean(*var_6095);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6096 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6097) = &input.client_vpn_endpoint_id {
        scope_6096.string(var_6097);
    }
    #[allow(unused_mut)]
    let mut scope_6098 = writer.prefix("ConnectionId");
    if let Some(var_6099) = &input.connection_id {
        scope_6098.string(var_6099);
    }
    #[allow(unused_mut)]
    let mut scope_6100 = writer.prefix("Username");
    if let Some(var_6101) = &input.username {
        scope_6100.string(var_6101);
    }
    #[allow(unused_mut)]
    let mut scope_6102 = writer.prefix("DryRun");
    if let Some(var_6103) = &input.dry_run {
        scope_6102.boolean(*var_6103);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6104 = writer.prefix("InstanceId");
    if let Some(var_6105) = &input.instance_ids {
        let mut list_6107 = scope_6104.start_list(true, Some("InstanceId"));
        for item_6106 in var_6105 {
            #[allow(unused_mut)]
            let mut entry_6108 = list_6107.entry();
            entry_6108.string(item_6106);
        }
        list_6107.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6109 = writer.prefix("DryRun");
    if let Some(var_6110) = &input.dry_run {
        scope_6109.boolean(*var_6110);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6111 = writer.prefix("Ipv6Addresses");
    if let Some(var_6112) = &input.ipv6_addresses {
        let mut list_6114 = scope_6111.start_list(true, Some("item"));
        for item_6113 in var_6112 {
            #[allow(unused_mut)]
            let mut entry_6115 = list_6114.entry();
            entry_6115.string(item_6113);
        }
        list_6114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6116 = writer.prefix("Ipv6Prefix");
    if let Some(var_6117) = &input.ipv6_prefixes {
        let mut list_6119 = scope_6116.start_list(true, Some("item"));
        for item_6118 in var_6117 {
            #[allow(unused_mut)]
            let mut entry_6120 = list_6119.entry();
            entry_6120.string(item_6118);
        }
        list_6119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6121 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6122) = &input.network_interface_id {
        scope_6121.string(var_6122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6123 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6124) = &input.network_interface_id {
        scope_6123.string(var_6124);
    }
    #[allow(unused_mut)]
    let mut scope_6125 = writer.prefix("PrivateIpAddress");
    if let Some(var_6126) = &input.private_ip_addresses {
        let mut list_6128 = scope_6125.start_list(true, Some("PrivateIpAddress"));
        for item_6127 in var_6126 {
            #[allow(unused_mut)]
            let mut entry_6129 = list_6128.entry();
            entry_6129.string(item_6127);
        }
        list_6128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6130 = writer.prefix("Ipv4Prefix");
    if let Some(var_6131) = &input.ipv4_prefixes {
        let mut list_6133 = scope_6130.start_list(true, Some("item"));
        for item_6132 in var_6131 {
            #[allow(unused_mut)]
            let mut entry_6134 = list_6133.entry();
            entry_6134.string(item_6132);
        }
        list_6133.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6135 = writer.prefix("InstanceId");
    if let Some(var_6136) = &input.instance_ids {
        let mut list_6138 = scope_6135.start_list(true, Some("InstanceId"));
        for item_6137 in var_6136 {
            #[allow(unused_mut)]
            let mut entry_6139 = list_6138.entry();
            entry_6139.string(item_6137);
        }
        list_6138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6140 = writer.prefix("DryRun");
    if let Some(var_6141) = &input.dry_run {
        scope_6140.boolean(*var_6141);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6142 = writer.prefix("DryRun");
    if let Some(var_6143) = &input.dry_run {
        scope_6142.boolean(*var_6143);
    }
    #[allow(unused_mut)]
    let mut scope_6144 = writer.prefix("GroupId");
    if let Some(var_6145) = &input.group_id {
        scope_6144.string(var_6145);
    }
    #[allow(unused_mut)]
    let mut scope_6146 = writer.prefix("GroupName");
    if let Some(var_6147) = &input.group_name {
        scope_6146.string(var_6147);
    }
    #[allow(unused_mut)]
    let mut scope_6148 = writer.prefix("IpPermissions");
    if let Some(var_6149) = &input.ip_permissions {
        let mut list_6151 = scope_6148.start_list(true, Some("item"));
        for item_6150 in var_6149 {
            #[allow(unused_mut)]
            let mut entry_6152 = list_6151.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6152, item_6150)?;
        }
        list_6151.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6153 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6154) = &input.security_group_rule_descriptions {
        let mut list_6156 = scope_6153.start_list(true, Some("item"));
        for item_6155 in var_6154 {
            #[allow(unused_mut)]
            let mut entry_6157 = list_6156.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6157, item_6155,
            )?;
        }
        list_6156.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6158 = writer.prefix("DryRun");
    if let Some(var_6159) = &input.dry_run {
        scope_6158.boolean(*var_6159);
    }
    #[allow(unused_mut)]
    let mut scope_6160 = writer.prefix("GroupId");
    if let Some(var_6161) = &input.group_id {
        scope_6160.string(var_6161);
    }
    #[allow(unused_mut)]
    let mut scope_6162 = writer.prefix("GroupName");
    if let Some(var_6163) = &input.group_name {
        scope_6162.string(var_6163);
    }
    #[allow(unused_mut)]
    let mut scope_6164 = writer.prefix("IpPermissions");
    if let Some(var_6165) = &input.ip_permissions {
        let mut list_6167 = scope_6164.start_list(true, Some("item"));
        for item_6166 in var_6165 {
            #[allow(unused_mut)]
            let mut entry_6168 = list_6167.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6168, item_6166)?;
        }
        list_6167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6169 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6170) = &input.security_group_rule_descriptions {
        let mut list_6172 = scope_6169.start_list(true, Some("item"));
        for item_6171 in var_6170 {
            #[allow(unused_mut)]
            let mut entry_6173 = list_6172.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6173, item_6171,
            )?;
        }
        list_6172.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6174 = writer.prefix("Cidr");
    if let Some(var_6175) = &input.cidr {
        scope_6174.string(var_6175);
    }
    #[allow(unused_mut)]
    let mut scope_6176 = writer.prefix("DryRun");
    if let Some(var_6177) = &input.dry_run {
        scope_6176.boolean(*var_6177);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
