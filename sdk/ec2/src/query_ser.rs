// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(
                entry_56, item_54,
            )?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservationFleetInstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_75, var_76,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_77, var_78,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_79, var_80,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_login_banner_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientLoginBannerOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Enabled");
    if let Some(var_92) = &input.enabled {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("BannerText");
    if let Some(var_94) = &input.banner_text {
        scope_93.string(var_94);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Key");
    if let Some(var_96) = &input.key {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Value");
    if let Some(var_98) = &input.values {
        let mut list_100 = scope_97.start_list(true, Some("item"));
        for item_99 in var_98 {
            #[allow(unused_mut)]
            let mut entry_101 = list_100.entry();
            entry_101.string(item_99);
        }
        list_100.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("AllocationStrategy");
    if let Some(var_103) = &input.allocation_strategy {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("MaintenanceStrategies");
    if let Some(var_105) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_104, var_105)?;
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_107) = &input.instance_interruption_behavior {
        scope_106.string(var_107.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_109) = &input.instance_pools_to_use_count {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SingleInstanceType");
    if let Some(var_111) = &input.single_instance_type {
        scope_110.boolean(*var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_113) = &input.single_availability_zone {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("MinTargetCapacity");
    if let Some(var_115) = &input.min_target_capacity {
        scope_114.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("MaxTotalPrice");
    if let Some(var_117) = &input.max_total_price {
        scope_116.string(var_117);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("AllocationStrategy");
    if let Some(var_119) = &input.allocation_strategy {
        scope_118.string(var_119.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("CapacityReservationOptions");
    if let Some(var_121) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_120, var_121,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("SingleInstanceType");
    if let Some(var_123) = &input.single_instance_type {
        scope_122.boolean(*var_123);
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_125) = &input.single_availability_zone {
        scope_124.boolean(*var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("MinTargetCapacity");
    if let Some(var_127) = &input.min_target_capacity {
        scope_126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("MaxTotalPrice");
    if let Some(var_129) = &input.max_total_price {
        scope_128.string(var_129);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_131) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_130, var_131)?;
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("Overrides");
    if let Some(var_133) = &input.overrides {
        let mut list_135 = scope_132.start_list(true, Some("item"));
        for item_134 in var_133 {
            #[allow(unused_mut)]
            let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_136, item_134)?;
        }
        list_135.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("TotalTargetCapacity");
    if let Some(var_138) = &input.total_target_capacity {
        scope_137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_140) = &input.on_demand_target_capacity {
        scope_139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("SpotTargetCapacity");
    if let Some(var_142) = &input.spot_target_capacity {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_144) = &input.default_target_capacity_type {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_146) = &input.target_capacity_unit_type {
        scope_145.string(var_146.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DestinationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("FileFormat");
    if let Some(var_148) = &input.file_format {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_150) = &input.hive_compatible_partitions {
        scope_149.boolean(*var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("PerHourPartition");
    if let Some(var_152) = &input.per_hour_partition {
        scope_151.boolean(*var_152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("Bucket");
    if let Some(var_154) = &input.bucket {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("Key");
    if let Some(var_156) = &input.key {
        scope_155.string(var_156);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DeviceName");
    if let Some(var_158) = &input.device_name {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("VirtualName");
    if let Some(var_160) = &input.virtual_name {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Ebs");
    if let Some(var_162) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_161, var_162)?;
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("NoDevice");
    if let Some(var_164) = &input.no_device {
        scope_163.string(var_164);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("StartWeekDay");
    if let Some(var_166) = &input.start_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("StartHour");
    if let Some(var_168) = &input.start_hour {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("EndWeekDay");
    if let Some(var_170) = &input.end_week_day {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("EndHour");
    if let Some(var_172) = &input.end_hour {
        scope_171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ContainerFormat");
    if let Some(var_174) = &input.container_format {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DiskImageFormat");
    if let Some(var_176) = &input.disk_image_format {
        scope_175.string(var_176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("S3Bucket");
    if let Some(var_178) = &input.s3_bucket {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("S3Prefix");
    if let Some(var_180) = &input.s3_prefix {
        scope_179.string(var_180);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RegionName");
    if let Some(var_182) = &input.region_name {
        scope_181.string(var_182);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_ipam_resource_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestIpamResourceTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("Key");
    if let Some(var_184) = &input.key {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("Value");
    if let Some(var_186) = &input.value {
        scope_185.string(var_186);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("KernelId");
    if let Some(var_188) = &input.kernel_id {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("EbsOptimized");
    if let Some(var_190) = &input.ebs_optimized {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("IamInstanceProfile");
    if let Some(var_192) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_191, var_192)?;
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("BlockDeviceMapping");
    if let Some(var_194) = &input.block_device_mappings {
        let mut list_196 = scope_193.start_list(true, Some("BlockDeviceMapping"));
        for item_195 in var_194 {
            #[allow(unused_mut)]
            let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_197, item_195)?;
        }
        list_196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("NetworkInterface");
    if let Some(var_199) = &input.network_interfaces {
        let mut list_201 =
            scope_198.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_200 in var_199 {
            #[allow(unused_mut)]
            let mut entry_202 = list_201.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_202, item_200)?;
        }
        list_201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("ImageId");
    if let Some(var_204) = &input.image_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("InstanceType");
    if let Some(var_206) = &input.instance_type {
        scope_205.string(var_206.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("KeyName");
    if let Some(var_208) = &input.key_name {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("Monitoring");
    if let Some(var_210) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_209, var_210,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("Placement");
    if let Some(var_212) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_211, var_212,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("RamDiskId");
    if let Some(var_214) = &input.ram_disk_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("DisableApiTermination");
    if let Some(var_216) = &input.disable_api_termination {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_218) = &input.instance_initiated_shutdown_behavior {
        scope_217.string(var_218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("UserData");
    if let Some(var_220) = &input.user_data {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("TagSpecification");
    if let Some(var_222) = &input.tag_specifications {
        let mut list_224 =
            scope_221.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_223 in var_222 {
            #[allow(unused_mut)]
            let mut entry_225 = list_224.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_225, item_223)?;
        }
        list_224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_227) = &input.elastic_gpu_specifications {
        let mut list_229 = scope_226.start_list(true, Some("ElasticGpuSpecification"));
        for item_228 in var_227 {
            #[allow(unused_mut)]
            let mut entry_230 = list_229.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_230, item_228,
            )?;
        }
        list_229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_232) = &input.elastic_inference_accelerators {
        let mut list_234 = scope_231.start_list(true, Some("item"));
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_235, item_233)?;
        }
        list_234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("SecurityGroupId");
    if let Some(var_237) = &input.security_group_ids {
        let mut list_239 = scope_236.start_list(true, Some("SecurityGroupId"));
        for item_238 in var_237 {
            #[allow(unused_mut)]
            let mut entry_240 = list_239.entry();
            entry_240.string(item_238);
        }
        list_239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("SecurityGroup");
    if let Some(var_242) = &input.security_groups {
        let mut list_244 = scope_241.start_list(true, Some("SecurityGroup"));
        for item_243 in var_242 {
            #[allow(unused_mut)]
            let mut entry_245 = list_244.entry();
            entry_245.string(item_243);
        }
        list_244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("InstanceMarketOptions");
    if let Some(var_247) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_246, var_247)?;
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("CreditSpecification");
    if let Some(var_249) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_248, var_249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("CpuOptions");
    if let Some(var_251) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_250, var_251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_253) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_252, var_253)?;
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LicenseSpecification");
    if let Some(var_255) = &input.license_specifications {
        let mut list_257 = scope_254.start_list(true, Some("item"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_258, item_256)?;
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("HibernationOptions");
    if let Some(var_260) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_259, var_260)?;
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("MetadataOptions");
    if let Some(var_262) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_261, var_262)?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("EnclaveOptions");
    if let Some(var_264) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_263, var_264,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("InstanceRequirements");
    if let Some(var_266) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_265, var_266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_268) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_267, var_268)?;
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("MaintenanceOptions");
    if let Some(var_270) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_maintenance_options_request(scope_269, var_270)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Cidr");
    if let Some(var_272) = &input.cidr {
        scope_271.string(var_272);
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Description");
    if let Some(var_274) = &input.description {
        scope_273.string(var_274);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("Code");
    if let Some(var_276) = &input.code {
        scope_275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("Type");
    if let Some(var_278) = &input.r#type {
        scope_277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("From");
    if let Some(var_280) = &input.from {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("To");
    if let Some(var_282) = &input.to {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_access_scope_path_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AccessScopePathRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Source");
    if let Some(var_284) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_283, var_284,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("Destination");
    if let Some(var_286) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_285, var_286,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("ThroughResource");
    if let Some(var_288) = &input.through_resources {
        let mut list_290 = scope_287.start_list(true, Some("item"));
        for item_289 in var_288 {
            #[allow(unused_mut)]
            let mut entry_291 = list_290.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(
                entry_291, item_289,
            )?;
        }
        list_290.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("Ipv6Address");
    if let Some(var_293) = &input.ipv6_address {
        scope_292.string(var_293);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Primary");
    if let Some(var_295) = &input.primary {
        scope_294.boolean(*var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("PrivateIpAddress");
    if let Some(var_297) = &input.private_ip_address {
        scope_296.string(var_297);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Ipv4Prefix");
    if let Some(var_299) = &input.ipv4_prefix {
        scope_298.string(var_299);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Ipv6Prefix");
    if let Some(var_301) = &input.ipv6_prefix {
        scope_300.string(var_301);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("CurrencyCode");
    if let Some(var_303) = &input.currency_code {
        scope_302.string(var_303.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("Price");
    if let Some(var_305) = &input.price {
        scope_304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_305).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("Term");
    if let Some(var_307) = &input.term {
        scope_306.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_307).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("InstanceId");
    if let Some(var_309) = &input.instance_id {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("ExcludeBootVolume");
    if let Some(var_311) = &input.exclude_boot_volume {
        scope_310.boolean(*var_311);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("Key");
    if let Some(var_313) = &input.key {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Value");
    if let Some(var_315) = &input.value {
        scope_314.string(var_315);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Key");
    if let Some(var_317) = &input.key {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("Value");
    if let Some(var_319) = &input.value {
        scope_318.string(var_319);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("FromPort");
    if let Some(var_321) = &input.from_port {
        scope_320.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_321).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("ToPort");
    if let Some(var_323) = &input.to_port {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("AmazonSideAsn");
    if let Some(var_325) = &input.amazon_side_asn {
        scope_324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_327) = &input.auto_accept_shared_attachments {
        scope_326.string(var_327.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_329) = &input.default_route_table_association {
        scope_328.string(var_329.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_331) = &input.default_route_table_propagation {
        scope_330.string(var_331.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("VpnEcmpSupport");
    if let Some(var_333) = &input.vpn_ecmp_support {
        scope_332.string(var_333.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("DnsSupport");
    if let Some(var_335) = &input.dns_support {
        scope_334.string(var_335.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("MulticastSupport");
    if let Some(var_337) = &input.multicast_support {
        scope_336.string(var_337.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_339) = &input.transit_gateway_cidr_blocks {
        let mut list_341 = scope_338.start_list(true, Some("item"));
        for item_340 in var_339 {
            #[allow(unused_mut)]
            let mut entry_342 = list_341.entry();
            entry_342.string(item_340);
        }
        list_341.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("Protocol");
    if let Some(var_344) = &input.protocol {
        scope_343.string(var_344.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("PeerAsn");
    if let Some(var_346) = &input.peer_asn {
        scope_345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("Igmpv2Support");
    if let Some(var_348) = &input.igmpv2_support {
        scope_347.string(var_348.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("StaticSourcesSupport");
    if let Some(var_350) = &input.static_sources_support {
        scope_349.string(var_350.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_352) = &input.auto_accept_shared_associations {
        scope_351.string(var_352.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("DnsSupport");
    if let Some(var_354) = &input.dns_support {
        scope_353.string(var_354.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("Ipv6Support");
    if let Some(var_356) = &input.ipv6_support {
        scope_355.string(var_356.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("ApplianceModeSupport");
    if let Some(var_358) = &input.appliance_mode_support {
        scope_357.string(var_358.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("DnsRecordIpType");
    if let Some(var_360) = &input.dns_record_ip_type {
        scope_359.string(var_360.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("EnableAcceleration");
    if let Some(var_362) = &input.enable_acceleration {
        scope_361.boolean(*var_362);
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("StaticRoutesOnly");
    if let Some(var_364) = &input.static_routes_only {
        scope_363.boolean(*var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_366) = &input.tunnel_inside_ip_version {
        scope_365.string(var_366.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("TunnelOptions");
    if let Some(var_368) = &input.tunnel_options {
        let mut list_370 = scope_367.start_list(true, None);
        for item_369 in var_368 {
            #[allow(unused_mut)]
            let mut entry_371 = list_370.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_371, item_369,
            )?;
        }
        list_370.finish();
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_373) = &input.local_ipv4_network_cidr {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_375) = &input.remote_ipv4_network_cidr {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_377) = &input.local_ipv6_network_cidr {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_379) = &input.remote_ipv6_network_cidr {
        scope_378.string(var_379);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_381) = &input.include_all_tags_of_instance {
        scope_380.boolean(*var_381);
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("InstanceTagKey");
    if let Some(var_383) = &input.instance_tag_keys {
        let mut list_385 = scope_382.start_list(true, Some("item"));
        for item_384 in var_383 {
            #[allow(unused_mut)]
            let mut entry_386 = list_385.entry();
            entry_386.string(item_384);
        }
        list_385.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("Name");
    if let Some(var_388) = &input.name {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("Value");
    if let Some(var_390) = &input.values {
        let mut list_392 = scope_389.start_list(true, Some("item"));
        for item_391 in var_390 {
            #[allow(unused_mut)]
            let mut entry_393 = list_392.entry();
            entry_393.string(item_391);
        }
        list_392.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("EarliestTime");
    if let Some(var_395) = &input.earliest_time {
        scope_394.date_time(var_395, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("LatestTime");
    if let Some(var_397) = &input.latest_time {
        scope_396.date_time(var_397, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("Frequency");
    if let Some(var_399) = &input.frequency {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("Interval");
    if let Some(var_401) = &input.interval {
        scope_400.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_401).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("OccurrenceDay");
    if let Some(var_403) = &input.occurrence_days {
        let mut list_405 = scope_402.start_list(true, Some("OccurenceDay"));
        for item_404 in var_403 {
            #[allow(unused_mut)]
            let mut entry_406 = list_405.entry();
            entry_406.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_404).into()),
            );
        }
        list_405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_408) = &input.occurrence_relative_to_end {
        scope_407.boolean(*var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("OccurrenceUnit");
    if let Some(var_410) = &input.occurrence_unit {
        scope_409.string(var_410);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("EarliestTime");
    if let Some(var_412) = &input.earliest_time {
        scope_411.date_time(var_412, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("LatestTime");
    if let Some(var_414) = &input.latest_time {
        scope_413.date_time(var_414, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("InstanceId");
    if let Some(var_416) = &input.instance_ids {
        let mut list_418 = scope_415.start_list(true, Some("item"));
        for item_417 in var_416 {
            #[allow(unused_mut)]
            let mut entry_419 = list_418.entry();
            entry_419.string(item_417);
        }
        list_418.finish();
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("InstanceTag");
    if let Some(var_421) = &input.instance_tags {
        let mut list_423 = scope_420.start_list(true, Some("item"));
        for item_422 in var_421 {
            #[allow(unused_mut)]
            let mut entry_424 = list_423.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_424, item_422)?;
        }
        list_423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("DedicatedHostId");
    if let Some(var_426) = &input.dedicated_host_ids {
        let mut list_428 = scope_425.start_list(true, Some("item"));
        for item_427 in var_426 {
            #[allow(unused_mut)]
            let mut entry_429 = list_428.entry();
            entry_429.string(item_427);
        }
        list_428.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_snapshot_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchSnapshotConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("TargetResourceCount");
    if let Some(var_431) = &input.target_resource_count {
        scope_430.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_431).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("LaunchTemplateId");
    if let Some(var_433) = &input.launch_template_id {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("LaunchTemplateName");
    if let Some(var_435) = &input.launch_template_name {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Version");
    if let Some(var_437) = &input.version {
        scope_436.string(var_437);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("S3Bucket");
    if let Some(var_439) = &input.s3_bucket {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("S3Prefix");
    if let Some(var_441) = &input.s3_prefix {
        scope_440.string(var_441);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("AthenaIntegration");
    if let Some(var_443) = &input.athena_integrations {
        let mut list_445 = scope_442.start_list(true, Some("item"));
        for item_444 in var_443 {
            #[allow(unused_mut)]
            let mut entry_446 = list_445.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_446, item_444,
            )?;
        }
        list_445.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("VCpuCount");
    if let Some(var_448) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(
            scope_447, var_448,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("MemoryMiB");
    if let Some(var_450) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_449, var_450)?;
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("CpuManufacturer");
    if let Some(var_452) = &input.cpu_manufacturers {
        let mut list_454 = scope_451.start_list(true, Some("item"));
        for item_453 in var_452 {
            #[allow(unused_mut)]
            let mut entry_455 = list_454.entry();
            entry_455.string(item_453.as_str());
        }
        list_454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_457) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_456, var_457,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("ExcludedInstanceType");
    if let Some(var_459) = &input.excluded_instance_types {
        let mut list_461 = scope_458.start_list(true, Some("item"));
        for item_460 in var_459 {
            #[allow(unused_mut)]
            let mut entry_462 = list_461.entry();
            entry_462.string(item_460);
        }
        list_461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("InstanceGeneration");
    if let Some(var_464) = &input.instance_generations {
        let mut list_466 = scope_463.start_list(true, Some("item"));
        for item_465 in var_464 {
            #[allow(unused_mut)]
            let mut entry_467 = list_466.entry();
            entry_467.string(item_465.as_str());
        }
        list_466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_469) = &input.spot_max_price_percentage_over_lowest_price {
        scope_468.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_471) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("BareMetal");
    if let Some(var_473) = &input.bare_metal {
        scope_472.string(var_473.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("BurstablePerformance");
    if let Some(var_475) = &input.burstable_performance {
        scope_474.string(var_475.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("RequireHibernateSupport");
    if let Some(var_477) = &input.require_hibernate_support {
        scope_476.boolean(*var_477);
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_479) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_478, var_479,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("LocalStorage");
    if let Some(var_481) = &input.local_storage {
        scope_480.string(var_481.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("LocalStorageType");
    if let Some(var_483) = &input.local_storage_types {
        let mut list_485 = scope_482.start_list(true, Some("item"));
        for item_484 in var_483 {
            #[allow(unused_mut)]
            let mut entry_486 = list_485.entry();
            entry_486.string(item_484.as_str());
        }
        list_485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_488) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_487, var_488,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_490) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_489, var_490,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("AcceleratorType");
    if let Some(var_492) = &input.accelerator_types {
        let mut list_494 = scope_491.start_list(true, Some("item"));
        for item_493 in var_492 {
            #[allow(unused_mut)]
            let mut entry_495 = list_494.entry();
            entry_495.string(item_493.as_str());
        }
        list_494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("AcceleratorCount");
    if let Some(var_497) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_496, var_497,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_499) = &input.accelerator_manufacturers {
        let mut list_501 = scope_498.start_list(true, Some("item"));
        for item_500 in var_499 {
            #[allow(unused_mut)]
            let mut entry_502 = list_501.entry();
            entry_502.string(item_500.as_str());
        }
        list_501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("AcceleratorName");
    if let Some(var_504) = &input.accelerator_names {
        let mut list_506 = scope_503.start_list(true, Some("item"));
        for item_505 in var_504 {
            #[allow(unused_mut)]
            let mut entry_507 = list_506.entry();
            entry_507.string(item_505.as_str());
        }
        list_506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_509) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_508, var_509,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsWithMetadataRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("ArchitectureType");
    if let Some(var_511) = &input.architecture_types {
        let mut list_513 = scope_510.start_list(true, Some("item"));
        for item_512 in var_511 {
            #[allow(unused_mut)]
            let mut entry_514 = list_513.entry();
            entry_514.string(item_512.as_str());
        }
        list_513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("VirtualizationType");
    if let Some(var_516) = &input.virtualization_types {
        let mut list_518 = scope_515.start_list(true, Some("item"));
        for item_517 in var_516 {
            #[allow(unused_mut)]
            let mut entry_519 = list_518.entry();
            entry_519.string(item_517.as_str());
        }
        list_518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("InstanceRequirements");
    if let Some(var_521) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_520, var_521,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("Comment");
    if let Some(var_523) = &input.comment {
        scope_522.string(var_523);
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("UploadEnd");
    if let Some(var_525) = &input.upload_end {
        scope_524.date_time(var_525, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("UploadSize");
    if let Some(var_527) = &input.upload_size {
        scope_526.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_527).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("UploadStart");
    if let Some(var_529) = &input.upload_start {
        scope_528.date_time(var_529, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("Description");
    if let Some(var_531) = &input.description {
        scope_530.string(var_531);
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("DeviceName");
    if let Some(var_533) = &input.device_name {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("Format");
    if let Some(var_535) = &input.format {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("SnapshotId");
    if let Some(var_537) = &input.snapshot_id {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("Url");
    if let Some(var_539) = &input.url {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("UserBucket");
    if let Some(var_541) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_540, var_541)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_543) = &input.license_configuration_arn {
        scope_542.string(var_543);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("Description");
    if let Some(var_545) = &input.description {
        scope_544.string(var_545);
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("Image");
    if let Some(var_547) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_546, var_547)?;
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("Volume");
    if let Some(var_549) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_548, var_549)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("AdditionalInfo");
    if let Some(var_551) = &input.additional_info {
        scope_550.string(var_551);
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("Architecture");
    if let Some(var_553) = &input.architecture {
        scope_552.string(var_553.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("GroupId");
    if let Some(var_555) = &input.group_ids {
        let mut list_557 = scope_554.start_list(true, Some("SecurityGroupId"));
        for item_556 in var_555 {
            #[allow(unused_mut)]
            let mut entry_558 = list_557.entry();
            entry_558.string(item_556);
        }
        list_557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("GroupName");
    if let Some(var_560) = &input.group_names {
        let mut list_562 = scope_559.start_list(true, Some("SecurityGroup"));
        for item_561 in var_560 {
            #[allow(unused_mut)]
            let mut entry_563 = list_562.entry();
            entry_563.string(item_561);
        }
        list_562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_565) = &input.instance_initiated_shutdown_behavior {
        scope_564.string(var_565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("InstanceType");
    if let Some(var_567) = &input.instance_type {
        scope_566.string(var_567.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("Monitoring");
    if let Some(var_569) = &input.monitoring {
        scope_568.boolean(*var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("Placement");
    if let Some(var_571) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_570, var_571)?;
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("PrivateIpAddress");
    if let Some(var_573) = &input.private_ip_address {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("SubnetId");
    if let Some(var_575) = &input.subnet_id {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("UserData");
    if let Some(var_577) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_576, var_577)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Description");
    if let Some(var_579) = &input.description {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("Format");
    if let Some(var_581) = &input.format {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("Url");
    if let Some(var_583) = &input.url {
        scope_582.string(var_583);
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("UserBucket");
    if let Some(var_585) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_584, var_585)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("Bytes");
    if let Some(var_587) = &input.bytes {
        scope_586.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_587).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Format");
    if let Some(var_589) = &input.format {
        scope_588.string(var_589.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("ImportManifestUrl");
    if let Some(var_591) = &input.import_manifest_url {
        scope_590.string(var_591);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("Size");
    if let Some(var_593) = &input.size {
        scope_592.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_593).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("CustomDnsServers");
    if let Some(var_595) = &input.custom_dns_servers {
        let mut list_597 = scope_594.start_list(true, Some("item"));
        for item_596 in var_595 {
            #[allow(unused_mut)]
            let mut entry_598 = list_597.entry();
            entry_598.string(item_596);
        }
        list_597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Enabled");
    if let Some(var_600) = &input.enabled {
        scope_599.boolean(*var_600);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("Add");
    if let Some(var_602) = &input.add {
        let mut list_604 = scope_601.start_list(true, Some("item"));
        for item_603 in var_602 {
            #[allow(unused_mut)]
            let mut entry_605 = list_604.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_605, item_603,
            )?;
        }
        list_604.finish();
    }
    #[allow(unused_mut)]
    let mut scope_606 = writer.prefix("Remove");
    if let Some(var_607) = &input.remove {
        let mut list_609 = scope_606.start_list(true, Some("item"));
        for item_608 in var_607 {
            #[allow(unused_mut)]
            let mut entry_610 = list_609.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_610, item_608,
            )?;
        }
        list_609.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Value");
    if let Some(var_612) = &input.value {
        scope_611.string(var_612);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Add");
    if let Some(var_614) = &input.add {
        let mut list_616 = scope_613.start_list(true, Some("item"));
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_617, item_615,
            )?;
        }
        list_616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("Remove");
    if let Some(var_619) = &input.remove {
        let mut list_621 = scope_618.start_list(true, Some("item"));
        for item_620 in var_619 {
            #[allow(unused_mut)]
            let mut entry_622 = list_621.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_622, item_620,
            )?;
        }
        list_621.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("Value");
    if let Some(var_624) = &input.value {
        scope_623.boolean(*var_624);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("DeviceName");
    if let Some(var_626) = &input.device_name {
        scope_625.string(var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("Ebs");
    if let Some(var_628) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_627, var_628,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("NoDevice");
    if let Some(var_630) = &input.no_device {
        scope_629.string(var_630);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("VirtualName");
    if let Some(var_632) = &input.virtual_name {
        scope_631.string(var_632);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("Value");
    if let Some(var_634) = &input.value {
        scope_633.string(&aws_smithy_types::base64::encode(var_634));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("CapacityReservationPreference");
    if let Some(var_636) = &input.capacity_reservation_preference {
        scope_635.string(var_636.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("CapacityReservationTarget");
    if let Some(var_638) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_637, var_638,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("InstanceId");
    if let Some(var_640) = &input.instance_id {
        scope_639.string(var_640);
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("CpuCredits");
    if let Some(var_642) = &input.cpu_credits {
        scope_641.string(var_642);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemoveIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("RegionName");
    if let Some(var_644) = &input.region_name {
        scope_643.string(var_644);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("Cidr");
    if let Some(var_646) = &input.cidr {
        scope_645.string(var_646);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("AttachmentId");
    if let Some(var_648) = &input.attachment_id {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("DeleteOnTermination");
    if let Some(var_650) = &input.delete_on_termination {
        scope_649.boolean(*var_650);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("AvailabilityZone");
    if let Some(var_652) = &input.availability_zone {
        scope_651.string(var_652);
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("InstanceCount");
    if let Some(var_654) = &input.instance_count {
        scope_653.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_654).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("InstanceType");
    if let Some(var_656) = &input.instance_type {
        scope_655.string(var_656.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("Platform");
    if let Some(var_658) = &input.platform {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("Scope");
    if let Some(var_660) = &input.scope {
        scope_659.string(var_660.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_662) = &input.security_group_rule_id {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("SecurityGroupRule");
    if let Some(var_664) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_663, var_664,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("Add");
    if let Some(var_666) = &input.add {
        let mut list_668 = scope_665.start_list(true, Some("item"));
        for item_667 in var_666 {
            #[allow(unused_mut)]
            let mut entry_669 = list_668.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_669, item_667,
            )?;
        }
        list_668.finish();
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("Remove");
    if let Some(var_671) = &input.remove {
        let mut list_673 = scope_670.start_list(true, Some("item"));
        for item_672 in var_671 {
            #[allow(unused_mut)]
            let mut entry_674 = list_673.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_674, item_672,
            )?;
        }
        list_673.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_676) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_675, var_676,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("Overrides");
    if let Some(var_678) = &input.overrides {
        let mut list_680 = scope_677.start_list(true, Some("item"));
        for item_679 in var_678 {
            #[allow(unused_mut)]
            let mut entry_681 = list_680.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_681, item_679,
            )?;
        }
        list_680.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_683) = &input.add_transit_gateway_cidr_blocks {
        let mut list_685 = scope_682.start_list(true, Some("item"));
        for item_684 in var_683 {
            #[allow(unused_mut)]
            let mut entry_686 = list_685.entry();
            entry_686.string(item_684);
        }
        list_685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_688) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_690 = scope_687.start_list(true, Some("item"));
        for item_689 in var_688 {
            #[allow(unused_mut)]
            let mut entry_691 = list_690.entry();
            entry_691.string(item_689);
        }
        list_690.finish();
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("VpnEcmpSupport");
    if let Some(var_693) = &input.vpn_ecmp_support {
        scope_692.string(var_693.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("DnsSupport");
    if let Some(var_695) = &input.dns_support {
        scope_694.string(var_695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_697) = &input.auto_accept_shared_attachments {
        scope_696.string(var_697.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_699) = &input.default_route_table_association {
        scope_698.string(var_699.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_701) = &input.association_default_route_table_id {
        scope_700.string(var_701);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_703) = &input.default_route_table_propagation {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_705) = &input.propagation_default_route_table_id {
        scope_704.string(var_705);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("DnsSupport");
    if let Some(var_707) = &input.dns_support {
        scope_706.string(var_707.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("Ipv6Support");
    if let Some(var_709) = &input.ipv6_support {
        scope_708.string(var_709.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("ApplianceModeSupport");
    if let Some(var_711) = &input.appliance_mode_support {
        scope_710.string(var_711.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_713) = &input.allow_dns_resolution_from_remote_vpc {
        scope_712.boolean(*var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_715) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_714.boolean(*var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_717) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_716.boolean(*var_717);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("TunnelInsideCidr");
    if let Some(var_719) = &input.tunnel_inside_cidr {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_721) = &input.tunnel_inside_ipv6_cidr {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("PreSharedKey");
    if let Some(var_723) = &input.pre_shared_key {
        scope_722.string(var_723);
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_725) = &input.phase1_lifetime_seconds {
        scope_724.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_725).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_727) = &input.phase2_lifetime_seconds {
        scope_726.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_727).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_729) = &input.rekey_margin_time_seconds {
        scope_728.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_731) = &input.rekey_fuzz_percentage {
        scope_730.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_731).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("ReplayWindowSize");
    if let Some(var_733) = &input.replay_window_size {
        scope_732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_733).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_735) = &input.dpd_timeout_seconds {
        scope_734.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_735).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("DPDTimeoutAction");
    if let Some(var_737) = &input.dpd_timeout_action {
        scope_736.string(var_737);
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_739) = &input.phase1_encryption_algorithms {
        let mut list_741 = scope_738.start_list(true, Some("item"));
        for item_740 in var_739 {
            #[allow(unused_mut)]
            let mut entry_742 = list_741.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_742, item_740)?;
        }
        list_741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_744) = &input.phase2_encryption_algorithms {
        let mut list_746 = scope_743.start_list(true, Some("item"));
        for item_745 in var_744 {
            #[allow(unused_mut)]
            let mut entry_747 = list_746.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_747, item_745)?;
        }
        list_746.finish();
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_749) = &input.phase1_integrity_algorithms {
        let mut list_751 = scope_748.start_list(true, Some("item"));
        for item_750 in var_749 {
            #[allow(unused_mut)]
            let mut entry_752 = list_751.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_752, item_750)?;
        }
        list_751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_754) = &input.phase2_integrity_algorithms {
        let mut list_756 = scope_753.start_list(true, Some("item"));
        for item_755 in var_754 {
            #[allow(unused_mut)]
            let mut entry_757 = list_756.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_757, item_755)?;
        }
        list_756.finish();
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_759) = &input.phase1_dh_group_numbers {
        let mut list_761 = scope_758.start_list(true, Some("item"));
        for item_760 in var_759 {
            #[allow(unused_mut)]
            let mut entry_762 = list_761.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_762, item_760)?;
        }
        list_761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_764) = &input.phase2_dh_group_numbers {
        let mut list_766 = scope_763.start_list(true, Some("item"));
        for item_765 in var_764 {
            #[allow(unused_mut)]
            let mut entry_767 = list_766.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_767, item_765)?;
        }
        list_766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("IKEVersion");
    if let Some(var_769) = &input.ike_versions {
        let mut list_771 = scope_768.start_list(true, Some("item"));
        for item_770 in var_769 {
            #[allow(unused_mut)]
            let mut entry_772 = list_771.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_772, item_770,
            )?;
        }
        list_771.finish();
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("StartupAction");
    if let Some(var_774) = &input.startup_action {
        scope_773.string(var_774);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("Message");
    if let Some(var_776) = &input.message {
        scope_775.string(var_776);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("Signature");
    if let Some(var_778) = &input.signature {
        scope_777.string(var_778);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpamCidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Message");
    if let Some(var_780) = &input.message {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("Signature");
    if let Some(var_782) = &input.signature {
        scope_781.string(var_782);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("Amount");
    if let Some(var_784) = &input.amount {
        scope_783.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_784).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("CurrencyCode");
    if let Some(var_786) = &input.currency_code {
        scope_785.string(var_786.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("InstanceCount");
    if let Some(var_788) = &input.instance_count {
        scope_787.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_788).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("PurchaseToken");
    if let Some(var_790) = &input.purchase_token {
        scope_789.string(var_790);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_792) = &input.include_all_tags_of_instance {
        scope_791.boolean(*var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("InstanceTagKey");
    if let Some(var_794) = &input.instance_tag_keys {
        let mut list_796 = scope_793.start_list(true, Some("item"));
        for item_795 in var_794 {
            #[allow(unused_mut)]
            let mut entry_797 = list_796.entry();
            entry_797.string(item_795);
        }
        list_796.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("AllocationStrategy");
    if let Some(var_799) = &input.allocation_strategy {
        scope_798.string(var_799.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_801) = &input.on_demand_allocation_strategy {
        scope_800.string(var_801.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_803) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_802, var_803,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("ClientToken");
    if let Some(var_805) = &input.client_token {
        scope_804.string(var_805);
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_807) = &input.excess_capacity_termination_policy {
        scope_806.string(var_807.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("FulfilledCapacity");
    if let Some(var_809) = &input.fulfilled_capacity {
        scope_808.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_809).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_811) = &input.on_demand_fulfilled_capacity {
        scope_810.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("IamFleetRole");
    if let Some(var_813) = &input.iam_fleet_role {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("LaunchSpecifications");
    if let Some(var_815) = &input.launch_specifications {
        let mut list_817 = scope_814.start_list(true, Some("item"));
        for item_816 in var_815 {
            #[allow(unused_mut)]
            let mut entry_818 = list_817.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_818, item_816,
            )?;
        }
        list_817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_820) = &input.launch_template_configs {
        let mut list_822 = scope_819.start_list(true, Some("item"));
        for item_821 in var_820 {
            #[allow(unused_mut)]
            let mut entry_823 = list_822.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_823, item_821,
            )?;
        }
        list_822.finish();
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("SpotPrice");
    if let Some(var_825) = &input.spot_price {
        scope_824.string(var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("TargetCapacity");
    if let Some(var_827) = &input.target_capacity {
        scope_826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_829) = &input.on_demand_target_capacity {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_831) = &input.on_demand_max_total_price {
        scope_830.string(var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_833) = &input.spot_max_total_price {
        scope_832.string(var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_835) = &input.terminate_instances_with_expiration {
        scope_834.boolean(*var_835);
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("Type");
    if let Some(var_837) = &input.r#type {
        scope_836.string(var_837.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("ValidFrom");
    if let Some(var_839) = &input.valid_from {
        scope_838.date_time(var_839, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("ValidUntil");
    if let Some(var_841) = &input.valid_until {
        scope_840.date_time(var_841, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_843) = &input.replace_unhealthy_instances {
        scope_842.boolean(*var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_845) = &input.instance_interruption_behavior {
        scope_844.string(var_845.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("LoadBalancersConfig");
    if let Some(var_847) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(
            scope_846, var_847,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_849) = &input.instance_pools_to_use_count {
        scope_848.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_849).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("Context");
    if let Some(var_851) = &input.context {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_853) = &input.target_capacity_unit_type {
        scope_852.string(var_853.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("TagSpecification");
    if let Some(var_855) = &input.tag_specifications {
        let mut list_857 = scope_854.start_list(true, Some("item"));
        for item_856 in var_855 {
            #[allow(unused_mut)]
            let mut entry_858 = list_857.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_858, item_856,
            )?;
        }
        list_857.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("SecurityGroupId");
    if let Some(var_860) = &input.security_group_ids {
        let mut list_862 = scope_859.start_list(true, Some("item"));
        for item_861 in var_860 {
            #[allow(unused_mut)]
            let mut entry_863 = list_862.entry();
            entry_863.string(item_861);
        }
        list_862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("SecurityGroup");
    if let Some(var_865) = &input.security_groups {
        let mut list_867 = scope_864.start_list(true, Some("item"));
        for item_866 in var_865 {
            #[allow(unused_mut)]
            let mut entry_868 = list_867.entry();
            entry_868.string(item_866);
        }
        list_867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("AddressingType");
    if let Some(var_870) = &input.addressing_type {
        scope_869.string(var_870);
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("BlockDeviceMapping");
    if let Some(var_872) = &input.block_device_mappings {
        let mut list_874 = scope_871.start_list(true, Some("item"));
        for item_873 in var_872 {
            #[allow(unused_mut)]
            let mut entry_875 = list_874.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_875, item_873,
            )?;
        }
        list_874.finish();
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("EbsOptimized");
    if let Some(var_877) = &input.ebs_optimized {
        scope_876.boolean(*var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("IamInstanceProfile");
    if let Some(var_879) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_878, var_879,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("ImageId");
    if let Some(var_881) = &input.image_id {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("InstanceType");
    if let Some(var_883) = &input.instance_type {
        scope_882.string(var_883.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("KernelId");
    if let Some(var_885) = &input.kernel_id {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("KeyName");
    if let Some(var_887) = &input.key_name {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("Monitoring");
    if let Some(var_889) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_888, var_889,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("NetworkInterface");
    if let Some(var_891) = &input.network_interfaces {
        let mut list_893 = scope_890.start_list(true, Some("item"));
        for item_892 in var_891 {
            #[allow(unused_mut)]
            let mut entry_894 = list_893.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_894, item_892)?;
        }
        list_893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("Placement");
    if let Some(var_896) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_895, var_896)?;
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("RamdiskId");
    if let Some(var_898) = &input.ramdisk_id {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("SubnetId");
    if let Some(var_900) = &input.subnet_id {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("UserData");
    if let Some(var_902) = &input.user_data {
        scope_901.string(var_902);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("Enabled");
    if let Some(var_904) = &input.enabled {
        scope_903.boolean(*var_904);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("AvailabilityZone");
    if let Some(var_906) = &input.availability_zone {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("Affinity");
    if let Some(var_908) = &input.affinity {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("GroupName");
    if let Some(var_910) = &input.group_name {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("PartitionNumber");
    if let Some(var_912) = &input.partition_number {
        scope_911.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_912).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("HostId");
    if let Some(var_914) = &input.host_id {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("Tenancy");
    if let Some(var_916) = &input.tenancy {
        scope_915.string(var_916.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("SpreadDomain");
    if let Some(var_918) = &input.spread_domain {
        scope_917.string(var_918);
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("HostResourceGroupArn");
    if let Some(var_920) = &input.host_resource_group_arn {
        scope_919.string(var_920);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_922) = &input.associate_public_ip_address {
        scope_921.boolean(*var_922);
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("DeleteOnTermination");
    if let Some(var_924) = &input.delete_on_termination {
        scope_923.boolean(*var_924);
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("Description");
    if let Some(var_926) = &input.description {
        scope_925.string(var_926);
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("DeviceIndex");
    if let Some(var_928) = &input.device_index {
        scope_927.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_928).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("SecurityGroupId");
    if let Some(var_930) = &input.groups {
        let mut list_932 = scope_929.start_list(true, Some("SecurityGroupId"));
        for item_931 in var_930 {
            #[allow(unused_mut)]
            let mut entry_933 = list_932.entry();
            entry_933.string(item_931);
        }
        list_932.finish();
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("Ipv6AddressCount");
    if let Some(var_935) = &input.ipv6_address_count {
        scope_934.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("Ipv6Addresses");
    if let Some(var_937) = &input.ipv6_addresses {
        let mut list_939 = scope_936.start_list(true, Some("item"));
        for item_938 in var_937 {
            #[allow(unused_mut)]
            let mut entry_940 = list_939.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_940, item_938,
            )?;
        }
        list_939.finish();
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("NetworkInterfaceId");
    if let Some(var_942) = &input.network_interface_id {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("PrivateIpAddress");
    if let Some(var_944) = &input.private_ip_address {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("PrivateIpAddresses");
    if let Some(var_946) = &input.private_ip_addresses {
        let mut list_948 = scope_945.start_list(true, Some("item"));
        for item_947 in var_946 {
            #[allow(unused_mut)]
            let mut entry_949 = list_948.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_949, item_947,
            )?;
        }
        list_948.finish();
    }
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_951) = &input.secondary_private_ip_address_count {
        scope_950.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_951).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("SubnetId");
    if let Some(var_953) = &input.subnet_id {
        scope_952.string(var_953);
    }
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_955) = &input.associate_carrier_ip_address {
        scope_954.boolean(*var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("InterfaceType");
    if let Some(var_957) = &input.interface_type {
        scope_956.string(var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("NetworkCardIndex");
    if let Some(var_959) = &input.network_card_index {
        scope_958.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_959).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("Ipv4Prefix");
    if let Some(var_961) = &input.ipv4_prefixes {
        let mut list_963 = scope_960.start_list(true, Some("item"));
        for item_962 in var_961 {
            #[allow(unused_mut)]
            let mut entry_964 = list_963.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_964, item_962,
            )?;
        }
        list_963.finish();
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_966) = &input.ipv4_prefix_count {
        scope_965.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_966).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("Ipv6Prefix");
    if let Some(var_968) = &input.ipv6_prefixes {
        let mut list_970 = scope_967.start_list(true, Some("item"));
        for item_969 in var_968 {
            #[allow(unused_mut)]
            let mut entry_971 = list_970.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_971, item_969,
            )?;
        }
        list_970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_973) = &input.ipv6_prefix_count {
        scope_972.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_973).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Type");
    if let Some(var_975) = &input.r#type {
        scope_974.string(var_975);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("Type");
    if let Some(var_977) = &input.r#type {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("Count");
    if let Some(var_979) = &input.count {
        scope_978.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_979).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("LaunchTemplateId");
    if let Some(var_981) = &input.launch_template_id {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("LaunchTemplateName");
    if let Some(var_983) = &input.launch_template_name {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("Version");
    if let Some(var_985) = &input.version {
        scope_984.string(var_985);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("MarketType");
    if let Some(var_987) = &input.market_type {
        scope_986.string(var_987.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("SpotOptions");
    if let Some(var_989) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_988, var_989)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("CpuCredits");
    if let Some(var_991) = &input.cpu_credits {
        scope_990.string(var_991);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("CoreCount");
    if let Some(var_993) = &input.core_count {
        scope_992.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_993).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("ThreadsPerCore");
    if let Some(var_995) = &input.threads_per_core {
        scope_994.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_995).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("Configured");
    if let Some(var_997) = &input.configured {
        scope_996.boolean(*var_997);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_999) = &input.license_configuration_arn {
        scope_998.string(var_999);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("HttpTokens");
    if let Some(var_1001) = &input.http_tokens {
        scope_1000.string(var_1001.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1003) = &input.http_put_response_hop_limit {
        scope_1002.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1003).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("HttpEndpoint");
    if let Some(var_1005) = &input.http_endpoint {
        scope_1004.string(var_1005.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1007) = &input.http_protocol_ipv6 {
        scope_1006.string(var_1007.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1009) = &input.instance_metadata_tags {
        scope_1008.string(var_1009.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("Enabled");
    if let Some(var_1011) = &input.enabled {
        scope_1010.boolean(*var_1011);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("HostnameType");
    if let Some(var_1013) = &input.hostname_type {
        scope_1012.string(var_1013.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1015) = &input.enable_resource_name_dns_a_record {
        scope_1014.boolean(*var_1015);
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1017) = &input.enable_resource_name_dns_aaaa_record {
        scope_1016.boolean(*var_1017);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("AutoRecovery");
    if let Some(var_1019) = &input.auto_recovery {
        scope_1018.string(var_1019.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1021) = &input.block_device_mappings {
        let mut list_1023 = scope_1020.start_list(true, Some("BlockDeviceMapping"));
        for item_1022 in var_1021 {
            #[allow(unused_mut)]
            let mut entry_1024 = list_1023.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1024, item_1022)?;
        }
        list_1023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("EbsOptimized");
    if let Some(var_1026) = &input.ebs_optimized {
        scope_1025.boolean(*var_1026);
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("IamInstanceProfile");
    if let Some(var_1028) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_1027, var_1028,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("ImageId");
    if let Some(var_1030) = &input.image_id {
        scope_1029.string(var_1030);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("InstanceType");
    if let Some(var_1032) = &input.instance_type {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("KernelId");
    if let Some(var_1034) = &input.kernel_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("KeyName");
    if let Some(var_1036) = &input.key_name {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("Monitoring");
    if let Some(var_1038) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_1037, var_1038,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("NetworkInterface");
    if let Some(var_1040) = &input.network_interfaces {
        let mut list_1042 = scope_1039.start_list(true, Some("NetworkInterface"));
        for item_1041 in var_1040 {
            #[allow(unused_mut)]
            let mut entry_1043 = list_1042.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1043, item_1041)?;
        }
        list_1042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("Placement");
    if let Some(var_1045) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_1044, var_1045,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("RamdiskId");
    if let Some(var_1047) = &input.ramdisk_id {
        scope_1046.string(var_1047);
    }
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("SecurityGroupId");
    if let Some(var_1049) = &input.security_group_ids {
        let mut list_1051 = scope_1048.start_list(true, Some("SecurityGroupId"));
        for item_1050 in var_1049 {
            #[allow(unused_mut)]
            let mut entry_1052 = list_1051.entry();
            entry_1052.string(item_1050);
        }
        list_1051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("SubnetId");
    if let Some(var_1054) = &input.subnet_id {
        scope_1053.string(var_1054);
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("UserData");
    if let Some(var_1056) = &input.user_data {
        scope_1055.string(var_1056);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1058) = &input.security_group_rule_id {
        scope_1057.string(var_1058);
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("Description");
    if let Some(var_1060) = &input.description {
        scope_1059.string(var_1060);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("CidrIp");
    if let Some(var_1062) = &input.cidr_ip {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Description");
    if let Some(var_1064) = &input.description {
        scope_1063.string(var_1064);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("CidrIpv6");
    if let Some(var_1066) = &input.cidr_ipv6 {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("Description");
    if let Some(var_1068) = &input.description {
        scope_1067.string(var_1068);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("Description");
    if let Some(var_1070) = &input.description {
        scope_1069.string(var_1070);
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("PrefixListId");
    if let Some(var_1072) = &input.prefix_list_id {
        scope_1071.string(var_1072);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("Description");
    if let Some(var_1074) = &input.description {
        scope_1073.string(var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("GroupId");
    if let Some(var_1076) = &input.group_id {
        scope_1075.string(var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("GroupName");
    if let Some(var_1078) = &input.group_name {
        scope_1077.string(var_1078);
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("PeeringStatus");
    if let Some(var_1080) = &input.peering_status {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("UserId");
    if let Some(var_1082) = &input.user_id {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("VpcId");
    if let Some(var_1084) = &input.vpc_id {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1086) = &input.vpc_peering_connection_id {
        scope_1085.string(var_1086);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1088) = &input.aws_access_key_id {
        scope_1087.string(var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("Bucket");
    if let Some(var_1090) = &input.bucket {
        scope_1089.string(var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("Prefix");
    if let Some(var_1092) = &input.prefix {
        scope_1091.string(var_1092);
    }
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("UploadPolicy");
    if let Some(var_1094) = &input.upload_policy {
        scope_1093.string(&aws_smithy_types::base64::encode(var_1094));
    }
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("UploadPolicySignature");
    if let Some(var_1096) = &input.upload_policy_signature {
        scope_1095.string(var_1096);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("DirectoryId");
    if let Some(var_1098) = &input.directory_id {
        scope_1097.string(var_1098);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1100) = &input.client_root_certificate_chain_arn {
        scope_1099.string(var_1100);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("SAMLProviderArn");
    if let Some(var_1102) = &input.saml_provider_arn {
        scope_1101.string(var_1102);
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1104) = &input.self_service_saml_provider_arn {
        scope_1103.string(var_1104);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("CapacityRebalance");
    if let Some(var_1106) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_1105, var_1106,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("UsageStrategy");
    if let Some(var_1108) = &input.usage_strategy {
        scope_1107.string(var_1108.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("LaunchTemplateId");
    if let Some(var_1110) = &input.launch_template_id {
        scope_1109.string(var_1110);
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("LaunchTemplateName");
    if let Some(var_1112) = &input.launch_template_name {
        scope_1111.string(var_1112);
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("Version");
    if let Some(var_1114) = &input.version {
        scope_1113.string(var_1114);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("InstanceType");
    if let Some(var_1116) = &input.instance_type {
        scope_1115.string(var_1116.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("MaxPrice");
    if let Some(var_1118) = &input.max_price {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("SubnetId");
    if let Some(var_1120) = &input.subnet_id {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("AvailabilityZone");
    if let Some(var_1122) = &input.availability_zone {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("WeightedCapacity");
    if let Some(var_1124) = &input.weighted_capacity {
        scope_1123.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1124).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("Priority");
    if let Some(var_1126) = &input.priority {
        scope_1125.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1126).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("Placement");
    if let Some(var_1128) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1127, var_1128)?;
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("InstanceRequirements");
    if let Some(var_1130) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_1129, var_1130,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("DeleteOnTermination");
    if let Some(var_1132) = &input.delete_on_termination {
        scope_1131.boolean(*var_1132);
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("Iops");
    if let Some(var_1134) = &input.iops {
        scope_1133.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1134).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("SnapshotId");
    if let Some(var_1136) = &input.snapshot_id {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("VolumeSize");
    if let Some(var_1138) = &input.volume_size {
        scope_1137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("VolumeType");
    if let Some(var_1140) = &input.volume_type {
        scope_1139.string(var_1140.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("KmsKeyId");
    if let Some(var_1142) = &input.kms_key_id {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("Throughput");
    if let Some(var_1144) = &input.throughput {
        scope_1143.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1144).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("OutpostArn");
    if let Some(var_1146) = &input.outpost_arn {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("Encrypted");
    if let Some(var_1148) = &input.encrypted {
        scope_1147.boolean(*var_1148);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("Arn");
    if let Some(var_1150) = &input.arn {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("Name");
    if let Some(var_1152) = &input.name {
        scope_1151.string(var_1152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("DeviceName");
    if let Some(var_1154) = &input.device_name {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("VirtualName");
    if let Some(var_1156) = &input.virtual_name {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("Ebs");
    if let Some(var_1158) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1157, var_1158,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("NoDevice");
    if let Some(var_1160) = &input.no_device {
        scope_1159.string(var_1160);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1162) = &input.associate_carrier_ip_address {
        scope_1161.boolean(*var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1164) = &input.associate_public_ip_address {
        scope_1163.boolean(*var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("DeleteOnTermination");
    if let Some(var_1166) = &input.delete_on_termination {
        scope_1165.boolean(*var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("Description");
    if let Some(var_1168) = &input.description {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("DeviceIndex");
    if let Some(var_1170) = &input.device_index {
        scope_1169.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("SecurityGroupId");
    if let Some(var_1172) = &input.groups {
        let mut list_1174 = scope_1171.start_list(true, Some("SecurityGroupId"));
        for item_1173 in var_1172 {
            #[allow(unused_mut)]
            let mut entry_1175 = list_1174.entry();
            entry_1175.string(item_1173);
        }
        list_1174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("InterfaceType");
    if let Some(var_1177) = &input.interface_type {
        scope_1176.string(var_1177);
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1179) = &input.ipv6_address_count {
        scope_1178.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1179).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("Ipv6Addresses");
    if let Some(var_1181) = &input.ipv6_addresses {
        let mut list_1183 = scope_1180.start_list(true, Some("InstanceIpv6Address"));
        for item_1182 in var_1181 {
            #[allow(unused_mut)]
            let mut entry_1184 = list_1183.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1184, item_1182,
            )?;
        }
        list_1183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1186) = &input.network_interface_id {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("PrivateIpAddress");
    if let Some(var_1188) = &input.private_ip_address {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1190) = &input.private_ip_addresses {
        let mut list_1192 = scope_1189.start_list(true, Some("item"));
        for item_1191 in var_1190 {
            #[allow(unused_mut)]
            let mut entry_1193 = list_1192.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1193, item_1191,
            )?;
        }
        list_1192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1195) = &input.secondary_private_ip_address_count {
        scope_1194.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1195).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("SubnetId");
    if let Some(var_1197) = &input.subnet_id {
        scope_1196.string(var_1197);
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("NetworkCardIndex");
    if let Some(var_1199) = &input.network_card_index {
        scope_1198.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1199).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("Ipv4Prefix");
    if let Some(var_1201) = &input.ipv4_prefixes {
        let mut list_1203 = scope_1200.start_list(true, Some("item"));
        for item_1202 in var_1201 {
            #[allow(unused_mut)]
            let mut entry_1204 = list_1203.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1204, item_1202,
            )?;
        }
        list_1203.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1206) = &input.ipv4_prefix_count {
        scope_1205.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1206).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1207 = writer.prefix("Ipv6Prefix");
    if let Some(var_1208) = &input.ipv6_prefixes {
        let mut list_1210 = scope_1207.start_list(true, Some("item"));
        for item_1209 in var_1208 {
            #[allow(unused_mut)]
            let mut entry_1211 = list_1210.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1211, item_1209,
            )?;
        }
        list_1210.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1213) = &input.ipv6_prefix_count {
        scope_1212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1213).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("Enabled");
    if let Some(var_1215) = &input.enabled {
        scope_1214.boolean(*var_1215);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("AvailabilityZone");
    if let Some(var_1217) = &input.availability_zone {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("Affinity");
    if let Some(var_1219) = &input.affinity {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("GroupName");
    if let Some(var_1221) = &input.group_name {
        scope_1220.string(var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("HostId");
    if let Some(var_1223) = &input.host_id {
        scope_1222.string(var_1223);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("Tenancy");
    if let Some(var_1225) = &input.tenancy {
        scope_1224.string(var_1225.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("SpreadDomain");
    if let Some(var_1227) = &input.spread_domain {
        scope_1226.string(var_1227);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1229) = &input.host_resource_group_arn {
        scope_1228.string(var_1229);
    }
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("PartitionNumber");
    if let Some(var_1231) = &input.partition_number {
        scope_1230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1231).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("ResourceType");
    if let Some(var_1233) = &input.resource_type {
        scope_1232.string(var_1233.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("Tag");
    if let Some(var_1235) = &input.tags {
        let mut list_1237 = scope_1234.start_list(true, Some("item"));
        for item_1236 in var_1235 {
            #[allow(unused_mut)]
            let mut entry_1238 = list_1237.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1238, item_1236)?;
        }
        list_1237.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("Type");
    if let Some(var_1240) = &input.r#type {
        scope_1239.string(var_1240);
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("Count");
    if let Some(var_1242) = &input.count {
        scope_1241.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1242).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("MarketType");
    if let Some(var_1244) = &input.market_type {
        scope_1243.string(var_1244.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("SpotOptions");
    if let Some(var_1246) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1245, var_1246)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("CoreCount");
    if let Some(var_1248) = &input.core_count {
        scope_1247.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1248).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("ThreadsPerCore");
    if let Some(var_1250) = &input.threads_per_core {
        scope_1249.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1250).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1252) = &input.capacity_reservation_preference {
        scope_1251.string(var_1252.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1254) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1253, var_1254,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1256) = &input.license_configuration_arn {
        scope_1255.string(var_1256);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("Configured");
    if let Some(var_1258) = &input.configured {
        scope_1257.boolean(*var_1258);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("HttpTokens");
    if let Some(var_1260) = &input.http_tokens {
        scope_1259.string(var_1260.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1262) = &input.http_put_response_hop_limit {
        scope_1261.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1262).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("HttpEndpoint");
    if let Some(var_1264) = &input.http_endpoint {
        scope_1263.string(var_1264.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1266) = &input.http_protocol_ipv6 {
        scope_1265.string(var_1266.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1268) = &input.instance_metadata_tags {
        scope_1267.string(var_1268.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("Enabled");
    if let Some(var_1270) = &input.enabled {
        scope_1269.boolean(*var_1270);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("HostnameType");
    if let Some(var_1272) = &input.hostname_type {
        scope_1271.string(var_1272.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1274) = &input.enable_resource_name_dns_a_record {
        scope_1273.boolean(*var_1274);
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1276) = &input.enable_resource_name_dns_aaaa_record {
        scope_1275.boolean(*var_1276);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("AutoRecovery");
    if let Some(var_1278) = &input.auto_recovery {
        scope_1277.string(var_1278.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_path_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PathStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1280) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(
            scope_1279, var_1280,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("ResourceStatement");
    if let Some(var_1282) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1281, var_1282,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_through_resources_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ThroughResourcesStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("ResourceStatement");
    if let Some(var_1284) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1283, var_1284,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1286) = &input.tunnel_inside_cidr {
        scope_1285.string(var_1286);
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1288) = &input.tunnel_inside_ipv6_cidr {
        scope_1287.string(var_1288);
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("PreSharedKey");
    if let Some(var_1290) = &input.pre_shared_key {
        scope_1289.string(var_1290);
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1292) = &input.phase1_lifetime_seconds {
        scope_1291.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1292).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1294) = &input.phase2_lifetime_seconds {
        scope_1293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1296) = &input.rekey_margin_time_seconds {
        scope_1295.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1296).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1298) = &input.rekey_fuzz_percentage {
        scope_1297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1298).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("ReplayWindowSize");
    if let Some(var_1300) = &input.replay_window_size {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1302) = &input.dpd_timeout_seconds {
        scope_1301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1304) = &input.dpd_timeout_action {
        scope_1303.string(var_1304);
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1306) = &input.phase1_encryption_algorithms {
        let mut list_1308 = scope_1305.start_list(true, Some("item"));
        for item_1307 in var_1306 {
            #[allow(unused_mut)]
            let mut entry_1309 = list_1308.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1309, item_1307)?;
        }
        list_1308.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1310 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1311) = &input.phase2_encryption_algorithms {
        let mut list_1313 = scope_1310.start_list(true, Some("item"));
        for item_1312 in var_1311 {
            #[allow(unused_mut)]
            let mut entry_1314 = list_1313.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1314, item_1312)?;
        }
        list_1313.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1316) = &input.phase1_integrity_algorithms {
        let mut list_1318 = scope_1315.start_list(true, Some("item"));
        for item_1317 in var_1316 {
            #[allow(unused_mut)]
            let mut entry_1319 = list_1318.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1319, item_1317)?;
        }
        list_1318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1321) = &input.phase2_integrity_algorithms {
        let mut list_1323 = scope_1320.start_list(true, Some("item"));
        for item_1322 in var_1321 {
            #[allow(unused_mut)]
            let mut entry_1324 = list_1323.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1324, item_1322)?;
        }
        list_1323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1326) = &input.phase1_dh_group_numbers {
        let mut list_1328 = scope_1325.start_list(true, Some("item"));
        for item_1327 in var_1326 {
            #[allow(unused_mut)]
            let mut entry_1329 = list_1328.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1329, item_1327)?;
        }
        list_1328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1331) = &input.phase2_dh_group_numbers {
        let mut list_1333 = scope_1330.start_list(true, Some("item"));
        for item_1332 in var_1331 {
            #[allow(unused_mut)]
            let mut entry_1334 = list_1333.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1334, item_1332)?;
        }
        list_1333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("IKEVersion");
    if let Some(var_1336) = &input.ike_versions {
        let mut list_1338 = scope_1335.start_list(true, Some("item"));
        for item_1337 in var_1336 {
            #[allow(unused_mut)]
            let mut entry_1339 = list_1338.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1339, item_1337,
            )?;
        }
        list_1338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("StartupAction");
    if let Some(var_1341) = &input.startup_action {
        scope_1340.string(var_1341);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1343) = &input.integration_result_s3_destination_arn {
        scope_1342.string(var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1345) = &input.partition_load_frequency {
        scope_1344.string(var_1345.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("PartitionStartDate");
    if let Some(var_1347) = &input.partition_start_date {
        scope_1346.date_time(var_1347, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("PartitionEndDate");
    if let Some(var_1349) = &input.partition_end_date {
        scope_1348.date_time(var_1349, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Min");
    if let Some(var_1351) = &input.min {
        scope_1350.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1351).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Max");
    if let Some(var_1353) = &input.max {
        scope_1352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1353).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("Min");
    if let Some(var_1355) = &input.min {
        scope_1354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("Max");
    if let Some(var_1357) = &input.max {
        scope_1356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1357).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("Min");
    if let Some(var_1359) = &input.min {
        scope_1358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1359).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("Max");
    if let Some(var_1361) = &input.max {
        scope_1360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1361).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("Min");
    if let Some(var_1363) = &input.min {
        scope_1362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("Max");
    if let Some(var_1365) = &input.max {
        scope_1364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1365).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("Min");
    if let Some(var_1367) = &input.min {
        scope_1366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1367).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("Max");
    if let Some(var_1369) = &input.max {
        scope_1368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1369).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Min");
    if let Some(var_1371) = &input.min {
        scope_1370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1371).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("Max");
    if let Some(var_1373) = &input.max {
        scope_1372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1373).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("Min");
    if let Some(var_1375) = &input.min {
        scope_1374.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1375).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("Max");
    if let Some(var_1377) = &input.max {
        scope_1376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1377).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("Min");
    if let Some(var_1379) = &input.min {
        scope_1378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1379).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("Max");
    if let Some(var_1381) = &input.max {
        scope_1380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1381).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("S3Bucket");
    if let Some(var_1383) = &input.s3_bucket {
        scope_1382.string(var_1383);
    }
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("S3Key");
    if let Some(var_1385) = &input.s3_key {
        scope_1384.string(var_1385);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("Data");
    if let Some(var_1387) = &input.data {
        scope_1386.string(var_1387);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("Group");
    if let Some(var_1389) = &input.group {
        scope_1388.string(var_1389.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("UserId");
    if let Some(var_1391) = &input.user_id {
        scope_1390.string(var_1391);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("Group");
    if let Some(var_1393) = &input.group {
        scope_1392.string(var_1393.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("UserId");
    if let Some(var_1395) = &input.user_id {
        scope_1394.string(var_1395);
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("OrganizationArn");
    if let Some(var_1397) = &input.organization_arn {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1399) = &input.organizational_unit_arn {
        scope_1398.string(var_1399);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("DeleteOnTermination");
    if let Some(var_1401) = &input.delete_on_termination {
        scope_1400.boolean(*var_1401);
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("VolumeId");
    if let Some(var_1403) = &input.volume_id {
        scope_1402.string(var_1403);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("CapacityReservationId");
    if let Some(var_1405) = &input.capacity_reservation_id {
        scope_1404.string(var_1405);
    }
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1407) = &input.capacity_reservation_resource_group_arn {
        scope_1406.string(var_1407);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("IpProtocol");
    if let Some(var_1409) = &input.ip_protocol {
        scope_1408.string(var_1409);
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("FromPort");
    if let Some(var_1411) = &input.from_port {
        scope_1410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("ToPort");
    if let Some(var_1413) = &input.to_port {
        scope_1412.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1413).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("CidrIpv4");
    if let Some(var_1415) = &input.cidr_ipv4 {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("CidrIpv6");
    if let Some(var_1417) = &input.cidr_ipv6 {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("PrefixListId");
    if let Some(var_1419) = &input.prefix_list_id {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("ReferencedGroupId");
    if let Some(var_1421) = &input.referenced_group_id {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("Description");
    if let Some(var_1423) = &input.description {
        scope_1422.string(var_1423);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("Group");
    if let Some(var_1425) = &input.group {
        scope_1424.string(var_1425.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("UserId");
    if let Some(var_1427) = &input.user_id {
        scope_1426.string(var_1427);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("LaunchTemplateId");
    if let Some(var_1429) = &input.launch_template_id {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("LaunchTemplateName");
    if let Some(var_1431) = &input.launch_template_name {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("Version");
    if let Some(var_1433) = &input.version {
        scope_1432.string(var_1433);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("InstanceType");
    if let Some(var_1435) = &input.instance_type {
        scope_1434.string(var_1435.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("SpotPrice");
    if let Some(var_1437) = &input.spot_price {
        scope_1436.string(var_1437);
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("SubnetId");
    if let Some(var_1439) = &input.subnet_id {
        scope_1438.string(var_1439);
    }
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("AvailabilityZone");
    if let Some(var_1441) = &input.availability_zone {
        scope_1440.string(var_1441);
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("WeightedCapacity");
    if let Some(var_1443) = &input.weighted_capacity {
        scope_1442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("Priority");
    if let Some(var_1445) = &input.priority {
        scope_1444.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1445).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("InstanceRequirements");
    if let Some(var_1447) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1446, var_1447,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("Value");
    if let Some(var_1449) = &input.value {
        scope_1448.string(var_1449);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("Value");
    if let Some(var_1451) = &input.value {
        scope_1450.string(var_1451);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("Value");
    if let Some(var_1453) = &input.value {
        scope_1452.string(var_1453);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("Value");
    if let Some(var_1455) = &input.value {
        scope_1454.string(var_1455);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("Value");
    if let Some(var_1457) = &input.value {
        scope_1456.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1457).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Value");
    if let Some(var_1459) = &input.value {
        scope_1458.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1459).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("Value");
    if let Some(var_1461) = &input.value {
        scope_1460.string(var_1461);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("CapacityRebalance");
    if let Some(var_1463) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1462, var_1463,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("GroupSet");
    if let Some(var_1465) = &input.security_groups {
        let mut list_1467 = scope_1464.start_list(true, Some("item"));
        for item_1466 in var_1465 {
            #[allow(unused_mut)]
            let mut entry_1468 = list_1467.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1468, item_1466,
            )?;
        }
        list_1467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("AddressingType");
    if let Some(var_1470) = &input.addressing_type {
        scope_1469.string(var_1470);
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1472) = &input.block_device_mappings {
        let mut list_1474 = scope_1471.start_list(true, Some("item"));
        for item_1473 in var_1472 {
            #[allow(unused_mut)]
            let mut entry_1475 = list_1474.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1475, item_1473,
            )?;
        }
        list_1474.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("EbsOptimized");
    if let Some(var_1477) = &input.ebs_optimized {
        scope_1476.boolean(*var_1477);
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("IamInstanceProfile");
    if let Some(var_1479) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1478, var_1479,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("ImageId");
    if let Some(var_1481) = &input.image_id {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("InstanceType");
    if let Some(var_1483) = &input.instance_type {
        scope_1482.string(var_1483.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("KernelId");
    if let Some(var_1485) = &input.kernel_id {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("KeyName");
    if let Some(var_1487) = &input.key_name {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("Monitoring");
    if let Some(var_1489) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1488, var_1489,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1491) = &input.network_interfaces {
        let mut list_1493 = scope_1490.start_list(true, Some("item"));
        for item_1492 in var_1491 {
            #[allow(unused_mut)]
            let mut entry_1494 = list_1493.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1494, item_1492)?;
        }
        list_1493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1495 = writer.prefix("Placement");
    if let Some(var_1496) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1495, var_1496)?;
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("RamdiskId");
    if let Some(var_1498) = &input.ramdisk_id {
        scope_1497.string(var_1498);
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("SpotPrice");
    if let Some(var_1500) = &input.spot_price {
        scope_1499.string(var_1500);
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("SubnetId");
    if let Some(var_1502) = &input.subnet_id {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("UserData");
    if let Some(var_1504) = &input.user_data {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("WeightedCapacity");
    if let Some(var_1506) = &input.weighted_capacity {
        scope_1505.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("TagSpecificationSet");
    if let Some(var_1508) = &input.tag_specifications {
        let mut list_1510 = scope_1507.start_list(true, Some("item"));
        for item_1509 in var_1508 {
            #[allow(unused_mut)]
            let mut entry_1511 = list_1510.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1511, item_1509,
            )?;
        }
        list_1510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("InstanceRequirements");
    if let Some(var_1513) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1512, var_1513,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1515) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1514, var_1515,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1517) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1516, var_1517,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("AvailabilityZone");
    if let Some(var_1519) = &input.availability_zone {
        scope_1518.string(var_1519);
    }
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("GroupName");
    if let Some(var_1521) = &input.group_name {
        scope_1520.string(var_1521);
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("Tenancy");
    if let Some(var_1523) = &input.tenancy {
        scope_1522.string(var_1523.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("MaxPrice");
    if let Some(var_1525) = &input.max_price {
        scope_1524.string(var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("SpotInstanceType");
    if let Some(var_1527) = &input.spot_instance_type {
        scope_1526.string(var_1527.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1529) = &input.block_duration_minutes {
        scope_1528.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1529).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("ValidUntil");
    if let Some(var_1531) = &input.valid_until {
        scope_1530.date_time(var_1531, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1533) = &input.instance_interruption_behavior {
        scope_1532.string(var_1533.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("DeviceName");
    if let Some(var_1535) = &input.device_name {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("Ebs");
    if let Some(var_1537) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1536, var_1537,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("NoDevice");
    if let Some(var_1539) = &input.no_device {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("VirtualName");
    if let Some(var_1541) = &input.virtual_name {
        scope_1540.string(var_1541);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("Arn");
    if let Some(var_1543) = &input.arn {
        scope_1542.string(var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("Name");
    if let Some(var_1545) = &input.name {
        scope_1544.string(var_1545);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("Enabled");
    if let Some(var_1547) = &input.enabled {
        scope_1546.boolean(*var_1547);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1549) = &input.associate_public_ip_address {
        scope_1548.boolean(*var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("DeleteOnTermination");
    if let Some(var_1551) = &input.delete_on_termination {
        scope_1550.boolean(*var_1551);
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("Description");
    if let Some(var_1553) = &input.description {
        scope_1552.string(var_1553);
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("DeviceIndex");
    if let Some(var_1555) = &input.device_index {
        scope_1554.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1555).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("Group");
    if let Some(var_1557) = &input.groups {
        let mut list_1559 = scope_1556.start_list(true, Some("SecurityGroupId"));
        for item_1558 in var_1557 {
            #[allow(unused_mut)]
            let mut entry_1560 = list_1559.entry();
            entry_1560.string(item_1558);
        }
        list_1559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1562) = &input.ipv6_address_count {
        scope_1561.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1562).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("Ipv6Address");
    if let Some(var_1564) = &input.ipv6_addresses {
        let mut list_1566 = scope_1563.start_list(true, Some("Ipv6Address"));
        for item_1565 in var_1564 {
            #[allow(unused_mut)]
            let mut entry_1567 = list_1566.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1567, item_1565,
            )?;
        }
        list_1566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1569) = &input.network_interface_id {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("PrivateIpAddress");
    if let Some(var_1571) = &input.private_ip_address {
        scope_1570.string(var_1571);
    }
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1573) = &input.private_ip_address_configs {
        let mut list_1575 = scope_1572.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1574 in var_1573 {
            #[allow(unused_mut)]
            let mut entry_1576 = list_1575.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1576, item_1574)?;
        }
        list_1575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1578) = &input.secondary_private_ip_address_count {
        scope_1577.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("SubnetId");
    if let Some(var_1580) = &input.subnet_id {
        scope_1579.string(var_1580);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("AvailabilityZone");
    if let Some(var_1582) = &input.availability_zone {
        scope_1581.string(var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("GroupName");
    if let Some(var_1584) = &input.group_name {
        scope_1583.string(var_1584);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("ReplacementStrategy");
    if let Some(var_1586) = &input.replacement_strategy {
        scope_1585.string(var_1586.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("TerminationDelay");
    if let Some(var_1588) = &input.termination_delay {
        scope_1587.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1588).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("Encrypted");
    if let Some(var_1590) = &input.encrypted {
        scope_1589.boolean(*var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("DeleteOnTermination");
    if let Some(var_1592) = &input.delete_on_termination {
        scope_1591.boolean(*var_1592);
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("Iops");
    if let Some(var_1594) = &input.iops {
        scope_1593.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1594).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("KmsKeyId");
    if let Some(var_1596) = &input.kms_key_id {
        scope_1595.string(var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("SnapshotId");
    if let Some(var_1598) = &input.snapshot_id {
        scope_1597.string(var_1598);
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("VolumeSize");
    if let Some(var_1600) = &input.volume_size {
        scope_1599.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1600).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("VolumeType");
    if let Some(var_1602) = &input.volume_type {
        scope_1601.string(var_1602.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("Throughput");
    if let Some(var_1604) = &input.throughput {
        scope_1603.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1604).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("Ipv6Address");
    if let Some(var_1606) = &input.ipv6_address {
        scope_1605.string(var_1606);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("MaxPrice");
    if let Some(var_1608) = &input.max_price {
        scope_1607.string(var_1608);
    }
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("SpotInstanceType");
    if let Some(var_1610) = &input.spot_instance_type {
        scope_1609.string(var_1610.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1612) = &input.block_duration_minutes {
        scope_1611.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1612).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("ValidUntil");
    if let Some(var_1614) = &input.valid_until {
        scope_1613.date_time(var_1614, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1616) = &input.instance_interruption_behavior {
        scope_1615.string(var_1616.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_packet_header_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PacketHeaderStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("SourceAddress");
    if let Some(var_1618) = &input.source_addresses {
        let mut list_1620 = scope_1617.start_list(true, Some("item"));
        for item_1619 in var_1618 {
            #[allow(unused_mut)]
            let mut entry_1621 = list_1620.entry();
            entry_1621.string(item_1619);
        }
        list_1620.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("DestinationAddress");
    if let Some(var_1623) = &input.destination_addresses {
        let mut list_1625 = scope_1622.start_list(true, Some("item"));
        for item_1624 in var_1623 {
            #[allow(unused_mut)]
            let mut entry_1626 = list_1625.entry();
            entry_1626.string(item_1624);
        }
        list_1625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("SourcePort");
    if let Some(var_1628) = &input.source_ports {
        let mut list_1630 = scope_1627.start_list(true, Some("item"));
        for item_1629 in var_1628 {
            #[allow(unused_mut)]
            let mut entry_1631 = list_1630.entry();
            entry_1631.string(item_1629);
        }
        list_1630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("DestinationPort");
    if let Some(var_1633) = &input.destination_ports {
        let mut list_1635 = scope_1632.start_list(true, Some("item"));
        for item_1634 in var_1633 {
            #[allow(unused_mut)]
            let mut entry_1636 = list_1635.entry();
            entry_1636.string(item_1634);
        }
        list_1635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1637 = writer.prefix("SourcePrefixList");
    if let Some(var_1638) = &input.source_prefix_lists {
        let mut list_1640 = scope_1637.start_list(true, Some("item"));
        for item_1639 in var_1638 {
            #[allow(unused_mut)]
            let mut entry_1641 = list_1640.entry();
            entry_1641.string(item_1639);
        }
        list_1640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("DestinationPrefixList");
    if let Some(var_1643) = &input.destination_prefix_lists {
        let mut list_1645 = scope_1642.start_list(true, Some("item"));
        for item_1644 in var_1643 {
            #[allow(unused_mut)]
            let mut entry_1646 = list_1645.entry();
            entry_1646.string(item_1644);
        }
        list_1645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("Protocol");
    if let Some(var_1648) = &input.protocols {
        let mut list_1650 = scope_1647.start_list(true, Some("item"));
        for item_1649 in var_1648 {
            #[allow(unused_mut)]
            let mut entry_1651 = list_1650.entry();
            entry_1651.string(item_1649.as_str());
        }
        list_1650.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_resource_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ResourceStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("Resource");
    if let Some(var_1653) = &input.resources {
        let mut list_1655 = scope_1652.start_list(true, Some("item"));
        for item_1654 in var_1653 {
            #[allow(unused_mut)]
            let mut entry_1656 = list_1655.entry();
            entry_1656.string(item_1654);
        }
        list_1655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("ResourceType");
    if let Some(var_1658) = &input.resource_types {
        let mut list_1660 = scope_1657.start_list(true, Some("item"));
        for item_1659 in var_1658 {
            #[allow(unused_mut)]
            let mut entry_1661 = list_1660.entry();
            entry_1661.string(item_1659);
        }
        list_1660.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("VCpuCount");
    if let Some(var_1663) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1662, var_1663)?;
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("MemoryMiB");
    if let Some(var_1665) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1664, var_1665)?;
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1667) = &input.cpu_manufacturers {
        let mut list_1669 = scope_1666.start_list(true, Some("item"));
        for item_1668 in var_1667 {
            #[allow(unused_mut)]
            let mut entry_1670 = list_1669.entry();
            entry_1670.string(item_1668.as_str());
        }
        list_1669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1672) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(
            scope_1671, var_1672,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1674) = &input.excluded_instance_types {
        let mut list_1676 = scope_1673.start_list(true, Some("item"));
        for item_1675 in var_1674 {
            #[allow(unused_mut)]
            let mut entry_1677 = list_1676.entry();
            entry_1677.string(item_1675);
        }
        list_1676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1679) = &input.instance_generations {
        let mut list_1681 = scope_1678.start_list(true, Some("item"));
        for item_1680 in var_1679 {
            #[allow(unused_mut)]
            let mut entry_1682 = list_1681.entry();
            entry_1682.string(item_1680.as_str());
        }
        list_1681.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1684) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1683.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1684).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1686) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1685.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1686).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("BareMetal");
    if let Some(var_1688) = &input.bare_metal {
        scope_1687.string(var_1688.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("BurstablePerformance");
    if let Some(var_1690) = &input.burstable_performance {
        scope_1689.string(var_1690.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1691 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1692) = &input.require_hibernate_support {
        scope_1691.boolean(*var_1692);
    }
    #[allow(unused_mut)]
    let mut scope_1693 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1694) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(
            scope_1693, var_1694,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("LocalStorage");
    if let Some(var_1696) = &input.local_storage {
        scope_1695.string(var_1696.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1698) = &input.local_storage_types {
        let mut list_1700 = scope_1697.start_list(true, Some("item"));
        for item_1699 in var_1698 {
            #[allow(unused_mut)]
            let mut entry_1701 = list_1700.entry();
            entry_1701.string(item_1699.as_str());
        }
        list_1700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1703) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(
            scope_1702, var_1703,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1705) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
            scope_1704, var_1705,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1707) = &input.accelerator_types {
        let mut list_1709 = scope_1706.start_list(true, Some("item"));
        for item_1708 in var_1707 {
            #[allow(unused_mut)]
            let mut entry_1710 = list_1709.entry();
            entry_1710.string(item_1708.as_str());
        }
        list_1709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("AcceleratorCount");
    if let Some(var_1712) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1711, var_1712)?;
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1714) = &input.accelerator_manufacturers {
        let mut list_1716 = scope_1713.start_list(true, Some("item"));
        for item_1715 in var_1714 {
            #[allow(unused_mut)]
            let mut entry_1717 = list_1716.entry();
            entry_1717.string(item_1715.as_str());
        }
        list_1716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1719) = &input.accelerator_names {
        let mut list_1721 = scope_1718.start_list(true, Some("item"));
        for item_1720 in var_1719 {
            #[allow(unused_mut)]
            let mut entry_1722 = list_1721.entry();
            entry_1722.string(item_1720.as_str());
        }
        list_1721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1724) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(
            scope_1723, var_1724,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("ReplacementStrategy");
    if let Some(var_1726) = &input.replacement_strategy {
        scope_1725.string(var_1726.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("TerminationDelay");
    if let Some(var_1728) = &input.termination_delay {
        scope_1727.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1728).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("GroupName");
    if let Some(var_1730) = &input.group_name {
        scope_1729.string(var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("GroupId");
    if let Some(var_1732) = &input.group_id {
        scope_1731.string(var_1732);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("Enabled");
    if let Some(var_1734) = &input.enabled {
        scope_1733.boolean(*var_1734);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("ResourceType");
    if let Some(var_1736) = &input.resource_type {
        scope_1735.string(var_1736.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("Tag");
    if let Some(var_1738) = &input.tags {
        let mut list_1740 = scope_1737.start_list(true, Some("item"));
        for item_1739 in var_1738 {
            #[allow(unused_mut)]
            let mut entry_1741 = list_1740.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1741, item_1739)?;
        }
        list_1740.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1743) = &input.classic_load_balancers {
        let mut list_1745 = scope_1742.start_list(true, Some("item"));
        for item_1744 in var_1743 {
            #[allow(unused_mut)]
            let mut entry_1746 = list_1745.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1746, item_1744,
            )?;
        }
        list_1745.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1747 = writer.prefix("TargetGroups");
    if let Some(var_1748) = &input.target_groups {
        let mut list_1750 = scope_1747.start_list(true, Some("item"));
        for item_1749 in var_1748 {
            #[allow(unused_mut)]
            let mut entry_1751 = list_1750.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1751, item_1749)?;
        }
        list_1750.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("DeleteOnTermination");
    if let Some(var_1753) = &input.delete_on_termination {
        scope_1752.boolean(*var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("Encrypted");
    if let Some(var_1755) = &input.encrypted {
        scope_1754.boolean(*var_1755);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("Iops");
    if let Some(var_1757) = &input.iops {
        scope_1756.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1757).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("SnapshotId");
    if let Some(var_1759) = &input.snapshot_id {
        scope_1758.string(var_1759);
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("VolumeSize");
    if let Some(var_1761) = &input.volume_size {
        scope_1760.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1761).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("VolumeType");
    if let Some(var_1763) = &input.volume_type {
        scope_1762.string(var_1763);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("Ipv6Address");
    if let Some(var_1765) = &input.ipv6_address {
        scope_1764.string(var_1765);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("Primary");
    if let Some(var_1767) = &input.primary {
        scope_1766.boolean(*var_1767);
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("PrivateIpAddress");
    if let Some(var_1769) = &input.private_ip_address {
        scope_1768.string(var_1769);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("Min");
    if let Some(var_1771) = &input.min {
        scope_1770.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1771).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("Max");
    if let Some(var_1773) = &input.max {
        scope_1772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1773).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("Min");
    if let Some(var_1775) = &input.min {
        scope_1774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1775).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("Max");
    if let Some(var_1777) = &input.max {
        scope_1776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1777).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpu,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("Min");
    if let Some(var_1779) = &input.min {
        scope_1778.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1779).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("Max");
    if let Some(var_1781) = &input.max {
        scope_1780.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1781).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("Min");
    if let Some(var_1783) = &input.min {
        scope_1782.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1783).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("Max");
    if let Some(var_1785) = &input.max {
        scope_1784.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1785).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGb,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("Min");
    if let Some(var_1787) = &input.min {
        scope_1786.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1787).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("Max");
    if let Some(var_1789) = &input.max {
        scope_1788.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1789).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbps,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("Min");
    if let Some(var_1791) = &input.min {
        scope_1790.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1791).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("Max");
    if let Some(var_1793) = &input.max {
        scope_1792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1793).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("Min");
    if let Some(var_1795) = &input.min {
        scope_1794.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1795).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("Max");
    if let Some(var_1797) = &input.max {
        scope_1796.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1797).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("Min");
    if let Some(var_1799) = &input.min {
        scope_1798.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1799).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("Max");
    if let Some(var_1801) = &input.max {
        scope_1800.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1801).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("Name");
    if let Some(var_1803) = &input.name {
        scope_1802.string(var_1803);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("Arn");
    if let Some(var_1805) = &input.arn {
        scope_1804.string(var_1805);
    }
    Ok(())
}
