// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ResourceName");
    if let Some(var_2) = &input.resource_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Tags");
    if let Some(var_4) = &input.tags {
        let mut list_6 = scope_3.start_list(false, Some("Tag"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_7, item_5)?;
        }
        list_6.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_cache_security_group_ingress(
    input: &crate::input::AuthorizeCacheSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeCacheSecurityGroupIngress",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_9) = &input.cache_security_group_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_11) = &input.ec2_security_group_name {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_13) = &input.ec2_security_group_owner_id {
        scope_12.string(var_13);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_apply_update_action(
    input: &crate::input::BatchApplyUpdateActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchApplyUpdateAction", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ReplicationGroupIds");
    if let Some(var_15) = &input.replication_group_ids {
        let mut list_17 = scope_14.start_list(false, None);
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("CacheClusterIds");
    if let Some(var_20) = &input.cache_cluster_ids {
        let mut list_22 = scope_19.start_list(false, None);
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            entry_23.string(item_21);
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ServiceUpdateName");
    if let Some(var_25) = &input.service_update_name {
        scope_24.string(var_25);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_stop_update_action(
    input: &crate::input::BatchStopUpdateActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchStopUpdateAction", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ReplicationGroupIds");
    if let Some(var_27) = &input.replication_group_ids {
        let mut list_29 = scope_26.start_list(false, None);
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("CacheClusterIds");
    if let Some(var_32) = &input.cache_cluster_ids {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            entry_35.string(item_33);
        }
        list_34.finish();
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("ServiceUpdateName");
    if let Some(var_37) = &input.service_update_name {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_complete_migration(
    input: &crate::input::CompleteMigrationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CompleteMigration", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("ReplicationGroupId");
    if let Some(var_39) = &input.replication_group_id {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Force");
    if input.force {
        scope_40.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("SourceSnapshotName");
    if let Some(var_42) = &input.source_snapshot_name {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("TargetSnapshotName");
    if let Some(var_44) = &input.target_snapshot_name {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("TargetBucket");
    if let Some(var_46) = &input.target_bucket {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("KmsKeyId");
    if let Some(var_48) = &input.kms_key_id {
        scope_47.string(var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Tags");
    if let Some(var_50) = &input.tags {
        let mut list_52 = scope_49.start_list(false, Some("Tag"));
        for item_51 in var_50 {
            #[allow(unused_mut)]
            let mut entry_53 = list_52.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_53, item_51)?;
        }
        list_52.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_cluster(
    input: &crate::input::CreateCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("CacheClusterId");
    if let Some(var_55) = &input.cache_cluster_id {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("ReplicationGroupId");
    if let Some(var_57) = &input.replication_group_id {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("AZMode");
    if let Some(var_59) = &input.az_mode {
        scope_58.string(var_59.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("PreferredAvailabilityZone");
    if let Some(var_61) = &input.preferred_availability_zone {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("PreferredAvailabilityZones");
    if let Some(var_63) = &input.preferred_availability_zones {
        let mut list_65 = scope_62.start_list(false, Some("PreferredAvailabilityZone"));
        for item_64 in var_63 {
            #[allow(unused_mut)]
            let mut entry_66 = list_65.entry();
            entry_66.string(item_64);
        }
        list_65.finish();
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("NumCacheNodes");
    if let Some(var_68) = &input.num_cache_nodes {
        scope_67.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_68).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CacheNodeType");
    if let Some(var_70) = &input.cache_node_type {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Engine");
    if let Some(var_72) = &input.engine {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("EngineVersion");
    if let Some(var_74) = &input.engine_version {
        scope_73.string(var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("CacheParameterGroupName");
    if let Some(var_76) = &input.cache_parameter_group_name {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_78) = &input.cache_subnet_group_name {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_80) = &input.cache_security_group_names {
        let mut list_82 = scope_79.start_list(false, Some("CacheSecurityGroupName"));
        for item_81 in var_80 {
            #[allow(unused_mut)]
            let mut entry_83 = list_82.entry();
            entry_83.string(item_81);
        }
        list_82.finish();
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("SecurityGroupIds");
    if let Some(var_85) = &input.security_group_ids {
        let mut list_87 = scope_84.start_list(false, Some("SecurityGroupId"));
        for item_86 in var_85 {
            #[allow(unused_mut)]
            let mut entry_88 = list_87.entry();
            entry_88.string(item_86);
        }
        list_87.finish();
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Tags");
    if let Some(var_90) = &input.tags {
        let mut list_92 = scope_89.start_list(false, Some("Tag"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_93, item_91)?;
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("SnapshotArns");
    if let Some(var_95) = &input.snapshot_arns {
        let mut list_97 = scope_94.start_list(false, Some("SnapshotArn"));
        for item_96 in var_95 {
            #[allow(unused_mut)]
            let mut entry_98 = list_97.entry();
            entry_98.string(item_96);
        }
        list_97.finish();
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("SnapshotName");
    if let Some(var_100) = &input.snapshot_name {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_102) = &input.preferred_maintenance_window {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Port");
    if let Some(var_104) = &input.port {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("NotificationTopicArn");
    if let Some(var_106) = &input.notification_topic_arn {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_108) = &input.auto_minor_version_upgrade {
        scope_107.boolean(*var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_110) = &input.snapshot_retention_limit {
        scope_109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("SnapshotWindow");
    if let Some(var_112) = &input.snapshot_window {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("AuthToken");
    if let Some(var_114) = &input.auth_token {
        scope_113.string(var_114);
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("OutpostMode");
    if let Some(var_116) = &input.outpost_mode {
        scope_115.string(var_116.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("PreferredOutpostArn");
    if let Some(var_118) = &input.preferred_outpost_arn {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("PreferredOutpostArns");
    if let Some(var_120) = &input.preferred_outpost_arns {
        let mut list_122 = scope_119.start_list(false, Some("PreferredOutpostArn"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_125) = &input.log_delivery_configurations {
        let mut list_127 = scope_124.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_126 in var_125 {
            #[allow(unused_mut)]
            let mut entry_128 = list_127.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_128, item_126,
            )?;
        }
        list_127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("TransitEncryptionEnabled");
    if let Some(var_130) = &input.transit_encryption_enabled {
        scope_129.boolean(*var_130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_parameter_group(
    input: &crate::input::CreateCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("CacheParameterGroupName");
    if let Some(var_132) = &input.cache_parameter_group_name {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_134) = &input.cache_parameter_group_family {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("Description");
    if let Some(var_136) = &input.description {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("Tags");
    if let Some(var_138) = &input.tags {
        let mut list_140 = scope_137.start_list(false, Some("Tag"));
        for item_139 in var_138 {
            #[allow(unused_mut)]
            let mut entry_141 = list_140.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_141, item_139)?;
        }
        list_140.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_security_group(
    input: &crate::input::CreateCacheSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_143) = &input.cache_security_group_name {
        scope_142.string(var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Description");
    if let Some(var_145) = &input.description {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("Tags");
    if let Some(var_147) = &input.tags {
        let mut list_149 = scope_146.start_list(false, Some("Tag"));
        for item_148 in var_147 {
            #[allow(unused_mut)]
            let mut entry_150 = list_149.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_150, item_148)?;
        }
        list_149.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_subnet_group(
    input: &crate::input::CreateCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_152) = &input.cache_subnet_group_name {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_154) = &input.cache_subnet_group_description {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("SubnetIds");
    if let Some(var_156) = &input.subnet_ids {
        let mut list_158 = scope_155.start_list(false, Some("SubnetIdentifier"));
        for item_157 in var_156 {
            #[allow(unused_mut)]
            let mut entry_159 = list_158.entry();
            entry_159.string(item_157);
        }
        list_158.finish();
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("Tags");
    if let Some(var_161) = &input.tags {
        let mut list_163 = scope_160.start_list(false, Some("Tag"));
        for item_162 in var_161 {
            #[allow(unused_mut)]
            let mut entry_164 = list_163.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_164, item_162)?;
        }
        list_163.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_replication_group(
    input: &crate::input::CreateGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("GlobalReplicationGroupIdSuffix");
    if let Some(var_166) = &input.global_replication_group_id_suffix {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_168) = &input.global_replication_group_description {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_170) = &input.primary_replication_group_id {
        scope_169.string(var_170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replication_group(
    input: &crate::input::CreateReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("ReplicationGroupId");
    if let Some(var_172) = &input.replication_group_id {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_174) = &input.replication_group_description {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_176) = &input.global_replication_group_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("PrimaryClusterId");
    if let Some(var_178) = &input.primary_cluster_id {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_180) = &input.automatic_failover_enabled {
        scope_179.boolean(*var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("MultiAZEnabled");
    if let Some(var_182) = &input.multi_az_enabled {
        scope_181.boolean(*var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("NumCacheClusters");
    if let Some(var_184) = &input.num_cache_clusters {
        scope_183.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("PreferredCacheClusterAZs");
    if let Some(var_186) = &input.preferred_cache_cluster_a_zs {
        let mut list_188 = scope_185.start_list(false, Some("AvailabilityZone"));
        for item_187 in var_186 {
            #[allow(unused_mut)]
            let mut entry_189 = list_188.entry();
            entry_189.string(item_187);
        }
        list_188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("NumNodeGroups");
    if let Some(var_191) = &input.num_node_groups {
        scope_190.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("ReplicasPerNodeGroup");
    if let Some(var_193) = &input.replicas_per_node_group {
        scope_192.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("NodeGroupConfiguration");
    if let Some(var_195) = &input.node_group_configuration {
        let mut list_197 = scope_194.start_list(false, Some("NodeGroupConfiguration"));
        for item_196 in var_195 {
            #[allow(unused_mut)]
            let mut entry_198 = list_197.entry();
            crate::query_ser::serialize_structure_crate_model_node_group_configuration(
                entry_198, item_196,
            )?;
        }
        list_197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("CacheNodeType");
    if let Some(var_200) = &input.cache_node_type {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("Engine");
    if let Some(var_202) = &input.engine {
        scope_201.string(var_202);
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("EngineVersion");
    if let Some(var_204) = &input.engine_version {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("CacheParameterGroupName");
    if let Some(var_206) = &input.cache_parameter_group_name {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_208) = &input.cache_subnet_group_name {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_210) = &input.cache_security_group_names {
        let mut list_212 = scope_209.start_list(false, Some("CacheSecurityGroupName"));
        for item_211 in var_210 {
            #[allow(unused_mut)]
            let mut entry_213 = list_212.entry();
            entry_213.string(item_211);
        }
        list_212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("SecurityGroupIds");
    if let Some(var_215) = &input.security_group_ids {
        let mut list_217 = scope_214.start_list(false, Some("SecurityGroupId"));
        for item_216 in var_215 {
            #[allow(unused_mut)]
            let mut entry_218 = list_217.entry();
            entry_218.string(item_216);
        }
        list_217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("Tags");
    if let Some(var_220) = &input.tags {
        let mut list_222 = scope_219.start_list(false, Some("Tag"));
        for item_221 in var_220 {
            #[allow(unused_mut)]
            let mut entry_223 = list_222.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_223, item_221)?;
        }
        list_222.finish();
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("SnapshotArns");
    if let Some(var_225) = &input.snapshot_arns {
        let mut list_227 = scope_224.start_list(false, Some("SnapshotArn"));
        for item_226 in var_225 {
            #[allow(unused_mut)]
            let mut entry_228 = list_227.entry();
            entry_228.string(item_226);
        }
        list_227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("SnapshotName");
    if let Some(var_230) = &input.snapshot_name {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_232) = &input.preferred_maintenance_window {
        scope_231.string(var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("Port");
    if let Some(var_234) = &input.port {
        scope_233.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_234).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("NotificationTopicArn");
    if let Some(var_236) = &input.notification_topic_arn {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_238) = &input.auto_minor_version_upgrade {
        scope_237.boolean(*var_238);
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_240) = &input.snapshot_retention_limit {
        scope_239.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("SnapshotWindow");
    if let Some(var_242) = &input.snapshot_window {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("AuthToken");
    if let Some(var_244) = &input.auth_token {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("TransitEncryptionEnabled");
    if let Some(var_246) = &input.transit_encryption_enabled {
        scope_245.boolean(*var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("AtRestEncryptionEnabled");
    if let Some(var_248) = &input.at_rest_encryption_enabled {
        scope_247.boolean(*var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("KmsKeyId");
    if let Some(var_250) = &input.kms_key_id {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("UserGroupIds");
    if let Some(var_252) = &input.user_group_ids {
        let mut list_254 = scope_251.start_list(false, None);
        for item_253 in var_252 {
            #[allow(unused_mut)]
            let mut entry_255 = list_254.entry();
            entry_255.string(item_253);
        }
        list_254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_257) = &input.log_delivery_configurations {
        let mut list_259 = scope_256.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_258 in var_257 {
            #[allow(unused_mut)]
            let mut entry_260 = list_259.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_260, item_258,
            )?;
        }
        list_259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("DataTieringEnabled");
    if let Some(var_262) = &input.data_tiering_enabled {
        scope_261.boolean(*var_262);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("ReplicationGroupId");
    if let Some(var_264) = &input.replication_group_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("CacheClusterId");
    if let Some(var_266) = &input.cache_cluster_id {
        scope_265.string(var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("SnapshotName");
    if let Some(var_268) = &input.snapshot_name {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("KmsKeyId");
    if let Some(var_270) = &input.kms_key_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Tags");
    if let Some(var_272) = &input.tags {
        let mut list_274 = scope_271.start_list(false, Some("Tag"));
        for item_273 in var_272 {
            #[allow(unused_mut)]
            let mut entry_275 = list_274.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_275, item_273)?;
        }
        list_274.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user(
    input: &crate::input::CreateUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("UserId");
    if let Some(var_277) = &input.user_id {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("UserName");
    if let Some(var_279) = &input.user_name {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("Engine");
    if let Some(var_281) = &input.engine {
        scope_280.string(var_281);
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("Passwords");
    if let Some(var_283) = &input.passwords {
        let mut list_285 = scope_282.start_list(false, None);
        for item_284 in var_283 {
            #[allow(unused_mut)]
            let mut entry_286 = list_285.entry();
            entry_286.string(item_284);
        }
        list_285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("AccessString");
    if let Some(var_288) = &input.access_string {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("NoPasswordRequired");
    if let Some(var_290) = &input.no_password_required {
        scope_289.boolean(*var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("Tags");
    if let Some(var_292) = &input.tags {
        let mut list_294 = scope_291.start_list(false, Some("Tag"));
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_295, item_293)?;
        }
        list_294.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user_group(
    input: &crate::input::CreateUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("UserGroupId");
    if let Some(var_297) = &input.user_group_id {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Engine");
    if let Some(var_299) = &input.engine {
        scope_298.string(var_299);
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("UserIds");
    if let Some(var_301) = &input.user_ids {
        let mut list_303 = scope_300.start_list(false, None);
        for item_302 in var_301 {
            #[allow(unused_mut)]
            let mut entry_304 = list_303.entry();
            entry_304.string(item_302);
        }
        list_303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Tags");
    if let Some(var_306) = &input.tags {
        let mut list_308 = scope_305.start_list(false, Some("Tag"));
        for item_307 in var_306 {
            #[allow(unused_mut)]
            let mut entry_309 = list_308.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_309, item_307)?;
        }
        list_308.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_node_groups_in_global_replication_group(
    input: &crate::input::DecreaseNodeGroupsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DecreaseNodeGroupsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_311) = &input.global_replication_group_id {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("NodeGroupCount");
    {
        scope_312.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("GlobalNodeGroupsToRemove");
    if let Some(var_314) = &input.global_node_groups_to_remove {
        let mut list_316 = scope_313.start_list(false, Some("GlobalNodeGroupId"));
        for item_315 in var_314 {
            #[allow(unused_mut)]
            let mut entry_317 = list_316.entry();
            entry_317.string(item_315);
        }
        list_316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("GlobalNodeGroupsToRetain");
    if let Some(var_319) = &input.global_node_groups_to_retain {
        let mut list_321 = scope_318.start_list(false, Some("GlobalNodeGroupId"));
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            entry_322.string(item_320);
        }
        list_321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("ApplyImmediately");
    {
        scope_323.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_replica_count(
    input: &crate::input::DecreaseReplicaCountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DecreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("ReplicationGroupId");
    if let Some(var_325) = &input.replication_group_id {
        scope_324.string(var_325);
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("NewReplicaCount");
    if let Some(var_327) = &input.new_replica_count {
        scope_326.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("ReplicaConfiguration");
    if let Some(var_329) = &input.replica_configuration {
        let mut list_331 = scope_328.start_list(false, Some("ConfigureShard"));
        for item_330 in var_329 {
            #[allow(unused_mut)]
            let mut entry_332 = list_331.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_332, item_330)?;
        }
        list_331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("ReplicasToRemove");
    if let Some(var_334) = &input.replicas_to_remove {
        let mut list_336 = scope_333.start_list(false, None);
        for item_335 in var_334 {
            #[allow(unused_mut)]
            let mut entry_337 = list_336.entry();
            entry_337.string(item_335);
        }
        list_336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("ApplyImmediately");
    {
        scope_338.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_cluster(
    input: &crate::input::DeleteCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("CacheClusterId");
    if let Some(var_340) = &input.cache_cluster_id {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_342) = &input.final_snapshot_identifier {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_parameter_group(
    input: &crate::input::DeleteCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("CacheParameterGroupName");
    if let Some(var_344) = &input.cache_parameter_group_name {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_security_group(
    input: &crate::input::DeleteCacheSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_346) = &input.cache_security_group_name {
        scope_345.string(var_346);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_subnet_group(
    input: &crate::input::DeleteCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_348) = &input.cache_subnet_group_name {
        scope_347.string(var_348);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_replication_group(
    input: &crate::input::DeleteGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_350) = &input.global_replication_group_id {
        scope_349.string(var_350);
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("RetainPrimaryReplicationGroup");
    {
        scope_351.boolean(input.retain_primary_replication_group);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_replication_group(
    input: &crate::input::DeleteReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("ReplicationGroupId");
    if let Some(var_353) = &input.replication_group_id {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("RetainPrimaryCluster");
    if let Some(var_355) = &input.retain_primary_cluster {
        scope_354.boolean(*var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_357) = &input.final_snapshot_identifier {
        scope_356.string(var_357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("SnapshotName");
    if let Some(var_359) = &input.snapshot_name {
        scope_358.string(var_359);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user(
    input: &crate::input::DeleteUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("UserId");
    if let Some(var_361) = &input.user_id {
        scope_360.string(var_361);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user_group(
    input: &crate::input::DeleteUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("UserGroupId");
    if let Some(var_363) = &input.user_group_id {
        scope_362.string(var_363);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_clusters(
    input: &crate::input::DescribeCacheClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheClusters", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("CacheClusterId");
    if let Some(var_365) = &input.cache_cluster_id {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("MaxRecords");
    if let Some(var_367) = &input.max_records {
        scope_366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_367).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("Marker");
    if let Some(var_369) = &input.marker {
        scope_368.string(var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("ShowCacheNodeInfo");
    if let Some(var_371) = &input.show_cache_node_info {
        scope_370.boolean(*var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("ShowCacheClustersNotInReplicationGroups");
    if let Some(var_373) = &input.show_cache_clusters_not_in_replication_groups {
        scope_372.boolean(*var_373);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_engine_versions(
    input: &crate::input::DescribeCacheEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheEngineVersions", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("Engine");
    if let Some(var_375) = &input.engine {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("EngineVersion");
    if let Some(var_377) = &input.engine_version {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_379) = &input.cache_parameter_group_family {
        scope_378.string(var_379);
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("MaxRecords");
    if let Some(var_381) = &input.max_records {
        scope_380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_381).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("Marker");
    if let Some(var_383) = &input.marker {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_384.boolean(input.default_only);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameter_groups(
    input: &crate::input::DescribeCacheParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameterGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("CacheParameterGroupName");
    if let Some(var_386) = &input.cache_parameter_group_name {
        scope_385.string(var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("MaxRecords");
    if let Some(var_388) = &input.max_records {
        scope_387.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_388).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("Marker");
    if let Some(var_390) = &input.marker {
        scope_389.string(var_390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameters(
    input: &crate::input::DescribeCacheParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameters", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("CacheParameterGroupName");
    if let Some(var_392) = &input.cache_parameter_group_name {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("Source");
    if let Some(var_394) = &input.source {
        scope_393.string(var_394);
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("MaxRecords");
    if let Some(var_396) = &input.max_records {
        scope_395.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_396).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("Marker");
    if let Some(var_398) = &input.marker {
        scope_397.string(var_398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_security_groups(
    input: &crate::input::DescribeCacheSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSecurityGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_400) = &input.cache_security_group_name {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("MaxRecords");
    if let Some(var_402) = &input.max_records {
        scope_401.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_402).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("Marker");
    if let Some(var_404) = &input.marker {
        scope_403.string(var_404);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_subnet_groups(
    input: &crate::input::DescribeCacheSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSubnetGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_406) = &input.cache_subnet_group_name {
        scope_405.string(var_406);
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("MaxRecords");
    if let Some(var_408) = &input.max_records {
        scope_407.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_408).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("Marker");
    if let Some(var_410) = &input.marker {
        scope_409.string(var_410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_412) = &input.cache_parameter_group_family {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("MaxRecords");
    if let Some(var_414) = &input.max_records {
        scope_413.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_414).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("Marker");
    if let Some(var_416) = &input.marker {
        scope_415.string(var_416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("SourceIdentifier");
    if let Some(var_418) = &input.source_identifier {
        scope_417.string(var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("SourceType");
    if let Some(var_420) = &input.source_type {
        scope_419.string(var_420.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("StartTime");
    if let Some(var_422) = &input.start_time {
        scope_421.date_time(var_422, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("EndTime");
    if let Some(var_424) = &input.end_time {
        scope_423.date_time(var_424, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("Duration");
    if let Some(var_426) = &input.duration {
        scope_425.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_426).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("MaxRecords");
    if let Some(var_428) = &input.max_records {
        scope_427.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_428).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("Marker");
    if let Some(var_430) = &input.marker {
        scope_429.string(var_430);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_replication_groups(
    input: &crate::input::DescribeGlobalReplicationGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeGlobalReplicationGroups",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_432) = &input.global_replication_group_id {
        scope_431.string(var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("MaxRecords");
    if let Some(var_434) = &input.max_records {
        scope_433.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("Marker");
    if let Some(var_436) = &input.marker {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("ShowMemberInfo");
    if let Some(var_438) = &input.show_member_info {
        scope_437.boolean(*var_438);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replication_groups(
    input: &crate::input::DescribeReplicationGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReplicationGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("ReplicationGroupId");
    if let Some(var_440) = &input.replication_group_id {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("MaxRecords");
    if let Some(var_442) = &input.max_records {
        scope_441.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("Marker");
    if let Some(var_444) = &input.marker {
        scope_443.string(var_444);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes(
    input: &crate::input::DescribeReservedCacheNodesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedCacheNodes", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_446) = &input.reserved_cache_node_id {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_448) = &input.reserved_cache_nodes_offering_id {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("CacheNodeType");
    if let Some(var_450) = &input.cache_node_type {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("Duration");
    if let Some(var_452) = &input.duration {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("ProductDescription");
    if let Some(var_454) = &input.product_description {
        scope_453.string(var_454);
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("OfferingType");
    if let Some(var_456) = &input.offering_type {
        scope_455.string(var_456);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("MaxRecords");
    if let Some(var_458) = &input.max_records {
        scope_457.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_458).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("Marker");
    if let Some(var_460) = &input.marker {
        scope_459.string(var_460);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes_offerings(
    input: &crate::input::DescribeReservedCacheNodesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedCacheNodesOfferings",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_462) = &input.reserved_cache_nodes_offering_id {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("CacheNodeType");
    if let Some(var_464) = &input.cache_node_type {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("Duration");
    if let Some(var_466) = &input.duration {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("ProductDescription");
    if let Some(var_468) = &input.product_description {
        scope_467.string(var_468);
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("OfferingType");
    if let Some(var_470) = &input.offering_type {
        scope_469.string(var_470);
    }
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("MaxRecords");
    if let Some(var_472) = &input.max_records {
        scope_471.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_472).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("Marker");
    if let Some(var_474) = &input.marker {
        scope_473.string(var_474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_service_updates(
    input: &crate::input::DescribeServiceUpdatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeServiceUpdates", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("ServiceUpdateName");
    if let Some(var_476) = &input.service_update_name {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_478) = &input.service_update_status {
        let mut list_480 = scope_477.start_list(false, None);
        for item_479 in var_478 {
            #[allow(unused_mut)]
            let mut entry_481 = list_480.entry();
            entry_481.string(item_479.as_str());
        }
        list_480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("MaxRecords");
    if let Some(var_483) = &input.max_records {
        scope_482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("Marker");
    if let Some(var_485) = &input.marker {
        scope_484.string(var_485);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("ReplicationGroupId");
    if let Some(var_487) = &input.replication_group_id {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("CacheClusterId");
    if let Some(var_489) = &input.cache_cluster_id {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("SnapshotName");
    if let Some(var_491) = &input.snapshot_name {
        scope_490.string(var_491);
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("SnapshotSource");
    if let Some(var_493) = &input.snapshot_source {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("Marker");
    if let Some(var_495) = &input.marker {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("MaxRecords");
    if let Some(var_497) = &input.max_records {
        scope_496.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_497).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("ShowNodeGroupConfig");
    if let Some(var_499) = &input.show_node_group_config {
        scope_498.boolean(*var_499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_update_actions(
    input: &crate::input::DescribeUpdateActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUpdateActions", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("ServiceUpdateName");
    if let Some(var_501) = &input.service_update_name {
        scope_500.string(var_501);
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("ReplicationGroupIds");
    if let Some(var_503) = &input.replication_group_ids {
        let mut list_505 = scope_502.start_list(false, None);
        for item_504 in var_503 {
            #[allow(unused_mut)]
            let mut entry_506 = list_505.entry();
            entry_506.string(item_504);
        }
        list_505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("CacheClusterIds");
    if let Some(var_508) = &input.cache_cluster_ids {
        let mut list_510 = scope_507.start_list(false, None);
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            entry_511.string(item_509);
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("Engine");
    if let Some(var_513) = &input.engine {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_515) = &input.service_update_status {
        let mut list_517 = scope_514.start_list(false, None);
        for item_516 in var_515 {
            #[allow(unused_mut)]
            let mut entry_518 = list_517.entry();
            entry_518.string(item_516.as_str());
        }
        list_517.finish();
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("ServiceUpdateTimeRange");
    if let Some(var_520) = &input.service_update_time_range {
        crate::query_ser::serialize_structure_crate_model_time_range_filter(scope_519, var_520)?;
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("UpdateActionStatus");
    if let Some(var_522) = &input.update_action_status {
        let mut list_524 = scope_521.start_list(false, None);
        for item_523 in var_522 {
            #[allow(unused_mut)]
            let mut entry_525 = list_524.entry();
            entry_525.string(item_523.as_str());
        }
        list_524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("ShowNodeLevelUpdateStatus");
    if let Some(var_527) = &input.show_node_level_update_status {
        scope_526.boolean(*var_527);
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("MaxRecords");
    if let Some(var_529) = &input.max_records {
        scope_528.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_529).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("Marker");
    if let Some(var_531) = &input.marker {
        scope_530.string(var_531);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_user_groups(
    input: &crate::input::DescribeUserGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUserGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("UserGroupId");
    if let Some(var_533) = &input.user_group_id {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("MaxRecords");
    if let Some(var_535) = &input.max_records {
        scope_534.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Marker");
    if let Some(var_537) = &input.marker {
        scope_536.string(var_537);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_users(
    input: &crate::input::DescribeUsersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeUsers", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("Engine");
    if let Some(var_539) = &input.engine {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("UserId");
    if let Some(var_541) = &input.user_id {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("Filters");
    if let Some(var_543) = &input.filters {
        let mut list_545 = scope_542.start_list(false, None);
        for item_544 in var_543 {
            #[allow(unused_mut)]
            let mut entry_546 = list_545.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_546, item_544)?;
        }
        list_545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("MaxRecords");
    if let Some(var_548) = &input.max_records {
        scope_547.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_548).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("Marker");
    if let Some(var_550) = &input.marker {
        scope_549.string(var_550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_global_replication_group(
    input: &crate::input::DisassociateGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_552) = &input.global_replication_group_id {
        scope_551.string(var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("ReplicationGroupId");
    if let Some(var_554) = &input.replication_group_id {
        scope_553.string(var_554);
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("ReplicationGroupRegion");
    if let Some(var_556) = &input.replication_group_region {
        scope_555.string(var_556);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_replication_group(
    input: &crate::input::FailoverGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "FailoverGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_558) = &input.global_replication_group_id {
        scope_557.string(var_558);
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("PrimaryRegion");
    if let Some(var_560) = &input.primary_region {
        scope_559.string(var_560);
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_562) = &input.primary_replication_group_id {
        scope_561.string(var_562);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_node_groups_in_global_replication_group(
    input: &crate::input::IncreaseNodeGroupsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "IncreaseNodeGroupsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_564) = &input.global_replication_group_id {
        scope_563.string(var_564);
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("NodeGroupCount");
    {
        scope_565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("RegionalConfigurations");
    if let Some(var_567) = &input.regional_configurations {
        let mut list_569 = scope_566.start_list(false, Some("RegionalConfiguration"));
        for item_568 in var_567 {
            #[allow(unused_mut)]
            let mut entry_570 = list_569.entry();
            crate::query_ser::serialize_structure_crate_model_regional_configuration(
                entry_570, item_568,
            )?;
        }
        list_569.finish();
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("ApplyImmediately");
    {
        scope_571.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_replica_count(
    input: &crate::input::IncreaseReplicaCountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "IncreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("ReplicationGroupId");
    if let Some(var_573) = &input.replication_group_id {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("NewReplicaCount");
    if let Some(var_575) = &input.new_replica_count {
        scope_574.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_575).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("ReplicaConfiguration");
    if let Some(var_577) = &input.replica_configuration {
        let mut list_579 = scope_576.start_list(false, Some("ConfigureShard"));
        for item_578 in var_577 {
            #[allow(unused_mut)]
            let mut entry_580 = list_579.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_580, item_578)?;
        }
        list_579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("ApplyImmediately");
    {
        scope_581.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_allowed_node_type_modifications(
    input: &crate::input::ListAllowedNodeTypeModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ListAllowedNodeTypeModifications",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("CacheClusterId");
    if let Some(var_583) = &input.cache_cluster_id {
        scope_582.string(var_583);
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("ReplicationGroupId");
    if let Some(var_585) = &input.replication_group_id {
        scope_584.string(var_585);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("ResourceName");
    if let Some(var_587) = &input.resource_name {
        scope_586.string(var_587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_cluster(
    input: &crate::input::ModifyCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("CacheClusterId");
    if let Some(var_589) = &input.cache_cluster_id {
        scope_588.string(var_589);
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("NumCacheNodes");
    if let Some(var_591) = &input.num_cache_nodes {
        scope_590.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_591).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("CacheNodeIdsToRemove");
    if let Some(var_593) = &input.cache_node_ids_to_remove {
        let mut list_595 = scope_592.start_list(false, Some("CacheNodeId"));
        for item_594 in var_593 {
            #[allow(unused_mut)]
            let mut entry_596 = list_595.entry();
            entry_596.string(item_594);
        }
        list_595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("AZMode");
    if let Some(var_598) = &input.az_mode {
        scope_597.string(var_598.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("NewAvailabilityZones");
    if let Some(var_600) = &input.new_availability_zones {
        let mut list_602 = scope_599.start_list(false, Some("PreferredAvailabilityZone"));
        for item_601 in var_600 {
            #[allow(unused_mut)]
            let mut entry_603 = list_602.entry();
            entry_603.string(item_601);
        }
        list_602.finish();
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_605) = &input.cache_security_group_names {
        let mut list_607 = scope_604.start_list(false, Some("CacheSecurityGroupName"));
        for item_606 in var_605 {
            #[allow(unused_mut)]
            let mut entry_608 = list_607.entry();
            entry_608.string(item_606);
        }
        list_607.finish();
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("SecurityGroupIds");
    if let Some(var_610) = &input.security_group_ids {
        let mut list_612 = scope_609.start_list(false, Some("SecurityGroupId"));
        for item_611 in var_610 {
            #[allow(unused_mut)]
            let mut entry_613 = list_612.entry();
            entry_613.string(item_611);
        }
        list_612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_615) = &input.preferred_maintenance_window {
        scope_614.string(var_615);
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("NotificationTopicArn");
    if let Some(var_617) = &input.notification_topic_arn {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("CacheParameterGroupName");
    if let Some(var_619) = &input.cache_parameter_group_name {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("NotificationTopicStatus");
    if let Some(var_621) = &input.notification_topic_status {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_622.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("EngineVersion");
    if let Some(var_624) = &input.engine_version {
        scope_623.string(var_624);
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_626) = &input.auto_minor_version_upgrade {
        scope_625.boolean(*var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_628) = &input.snapshot_retention_limit {
        scope_627.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_628).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("SnapshotWindow");
    if let Some(var_630) = &input.snapshot_window {
        scope_629.string(var_630);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("CacheNodeType");
    if let Some(var_632) = &input.cache_node_type {
        scope_631.string(var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("AuthToken");
    if let Some(var_634) = &input.auth_token {
        scope_633.string(var_634);
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_636) = &input.auth_token_update_strategy {
        scope_635.string(var_636.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_638) = &input.log_delivery_configurations {
        let mut list_640 = scope_637.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_639 in var_638 {
            #[allow(unused_mut)]
            let mut entry_641 = list_640.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_641, item_639,
            )?;
        }
        list_640.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_parameter_group(
    input: &crate::input::ModifyCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("CacheParameterGroupName");
    if let Some(var_643) = &input.cache_parameter_group_name {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("ParameterNameValues");
    if let Some(var_645) = &input.parameter_name_values {
        let mut list_647 = scope_644.start_list(false, Some("ParameterNameValue"));
        for item_646 in var_645 {
            #[allow(unused_mut)]
            let mut entry_648 = list_647.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(
                entry_648, item_646,
            )?;
        }
        list_647.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_subnet_group(
    input: &crate::input::ModifyCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_650) = &input.cache_subnet_group_name {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_652) = &input.cache_subnet_group_description {
        scope_651.string(var_652);
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("SubnetIds");
    if let Some(var_654) = &input.subnet_ids {
        let mut list_656 = scope_653.start_list(false, Some("SubnetIdentifier"));
        for item_655 in var_654 {
            #[allow(unused_mut)]
            let mut entry_657 = list_656.entry();
            entry_657.string(item_655);
        }
        list_656.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_replication_group(
    input: &crate::input::ModifyGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_659) = &input.global_replication_group_id {
        scope_658.string(var_659);
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("ApplyImmediately");
    {
        scope_660.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("CacheNodeType");
    if let Some(var_662) = &input.cache_node_type {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("EngineVersion");
    if let Some(var_664) = &input.engine_version {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("CacheParameterGroupName");
    if let Some(var_666) = &input.cache_parameter_group_name {
        scope_665.string(var_666);
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_668) = &input.global_replication_group_description {
        scope_667.string(var_668);
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_670) = &input.automatic_failover_enabled {
        scope_669.boolean(*var_670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group(
    input: &crate::input::ModifyReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("ReplicationGroupId");
    if let Some(var_672) = &input.replication_group_id {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_674) = &input.replication_group_description {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("PrimaryClusterId");
    if let Some(var_676) = &input.primary_cluster_id {
        scope_675.string(var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("SnapshottingClusterId");
    if let Some(var_678) = &input.snapshotting_cluster_id {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_680) = &input.automatic_failover_enabled {
        scope_679.boolean(*var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("MultiAZEnabled");
    if let Some(var_682) = &input.multi_az_enabled {
        scope_681.boolean(*var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("NodeGroupId");
    if let Some(var_684) = &input.node_group_id {
        scope_683.string(var_684);
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_686) = &input.cache_security_group_names {
        let mut list_688 = scope_685.start_list(false, Some("CacheSecurityGroupName"));
        for item_687 in var_686 {
            #[allow(unused_mut)]
            let mut entry_689 = list_688.entry();
            entry_689.string(item_687);
        }
        list_688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("SecurityGroupIds");
    if let Some(var_691) = &input.security_group_ids {
        let mut list_693 = scope_690.start_list(false, Some("SecurityGroupId"));
        for item_692 in var_691 {
            #[allow(unused_mut)]
            let mut entry_694 = list_693.entry();
            entry_694.string(item_692);
        }
        list_693.finish();
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_696) = &input.preferred_maintenance_window {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("NotificationTopicArn");
    if let Some(var_698) = &input.notification_topic_arn {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("CacheParameterGroupName");
    if let Some(var_700) = &input.cache_parameter_group_name {
        scope_699.string(var_700);
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("NotificationTopicStatus");
    if let Some(var_702) = &input.notification_topic_status {
        scope_701.string(var_702);
    }
    #[allow(unused_mut)]
    let mut scope_703 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_703.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("EngineVersion");
    if let Some(var_705) = &input.engine_version {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_707) = &input.auto_minor_version_upgrade {
        scope_706.boolean(*var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_709) = &input.snapshot_retention_limit {
        scope_708.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_709).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("SnapshotWindow");
    if let Some(var_711) = &input.snapshot_window {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("CacheNodeType");
    if let Some(var_713) = &input.cache_node_type {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("AuthToken");
    if let Some(var_715) = &input.auth_token {
        scope_714.string(var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_717) = &input.auth_token_update_strategy {
        scope_716.string(var_717.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("UserGroupIdsToAdd");
    if let Some(var_719) = &input.user_group_ids_to_add {
        let mut list_721 = scope_718.start_list(false, None);
        for item_720 in var_719 {
            #[allow(unused_mut)]
            let mut entry_722 = list_721.entry();
            entry_722.string(item_720);
        }
        list_721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("UserGroupIdsToRemove");
    if let Some(var_724) = &input.user_group_ids_to_remove {
        let mut list_726 = scope_723.start_list(false, None);
        for item_725 in var_724 {
            #[allow(unused_mut)]
            let mut entry_727 = list_726.entry();
            entry_727.string(item_725);
        }
        list_726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("RemoveUserGroups");
    if let Some(var_729) = &input.remove_user_groups {
        scope_728.boolean(*var_729);
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_731) = &input.log_delivery_configurations {
        let mut list_733 = scope_730.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_732 in var_731 {
            #[allow(unused_mut)]
            let mut entry_734 = list_733.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_734, item_732,
            )?;
        }
        list_733.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group_shard_configuration(
    input: &crate::input::ModifyReplicationGroupShardConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyReplicationGroupShardConfiguration",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("ReplicationGroupId");
    if let Some(var_736) = &input.replication_group_id {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("NodeGroupCount");
    {
        scope_737.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("ApplyImmediately");
    {
        scope_738.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("ReshardingConfiguration");
    if let Some(var_740) = &input.resharding_configuration {
        let mut list_742 = scope_739.start_list(false, Some("ReshardingConfiguration"));
        for item_741 in var_740 {
            #[allow(unused_mut)]
            let mut entry_743 = list_742.entry();
            crate::query_ser::serialize_structure_crate_model_resharding_configuration(
                entry_743, item_741,
            )?;
        }
        list_742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("NodeGroupsToRemove");
    if let Some(var_745) = &input.node_groups_to_remove {
        let mut list_747 = scope_744.start_list(false, Some("NodeGroupToRemove"));
        for item_746 in var_745 {
            #[allow(unused_mut)]
            let mut entry_748 = list_747.entry();
            entry_748.string(item_746);
        }
        list_747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("NodeGroupsToRetain");
    if let Some(var_750) = &input.node_groups_to_retain {
        let mut list_752 = scope_749.start_list(false, Some("NodeGroupToRetain"));
        for item_751 in var_750 {
            #[allow(unused_mut)]
            let mut entry_753 = list_752.entry();
            entry_753.string(item_751);
        }
        list_752.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user(
    input: &crate::input::ModifyUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("UserId");
    if let Some(var_755) = &input.user_id {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("AccessString");
    if let Some(var_757) = &input.access_string {
        scope_756.string(var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("AppendAccessString");
    if let Some(var_759) = &input.append_access_string {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("Passwords");
    if let Some(var_761) = &input.passwords {
        let mut list_763 = scope_760.start_list(false, None);
        for item_762 in var_761 {
            #[allow(unused_mut)]
            let mut entry_764 = list_763.entry();
            entry_764.string(item_762);
        }
        list_763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("NoPasswordRequired");
    if let Some(var_766) = &input.no_password_required {
        scope_765.boolean(*var_766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user_group(
    input: &crate::input::ModifyUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("UserGroupId");
    if let Some(var_768) = &input.user_group_id {
        scope_767.string(var_768);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("UserIdsToAdd");
    if let Some(var_770) = &input.user_ids_to_add {
        let mut list_772 = scope_769.start_list(false, None);
        for item_771 in var_770 {
            #[allow(unused_mut)]
            let mut entry_773 = list_772.entry();
            entry_773.string(item_771);
        }
        list_772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("UserIdsToRemove");
    if let Some(var_775) = &input.user_ids_to_remove {
        let mut list_777 = scope_774.start_list(false, None);
        for item_776 in var_775 {
            #[allow(unused_mut)]
            let mut entry_778 = list_777.entry();
            entry_778.string(item_776);
        }
        list_777.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_cache_nodes_offering(
    input: &crate::input::PurchaseReservedCacheNodesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedCacheNodesOffering",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_780) = &input.reserved_cache_nodes_offering_id {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_782) = &input.reserved_cache_node_id {
        scope_781.string(var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("CacheNodeCount");
    if let Some(var_784) = &input.cache_node_count {
        scope_783.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_784).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("Tags");
    if let Some(var_786) = &input.tags {
        let mut list_788 = scope_785.start_list(false, Some("Tag"));
        for item_787 in var_786 {
            #[allow(unused_mut)]
            let mut entry_789 = list_788.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_789, item_787)?;
        }
        list_788.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rebalance_slots_in_global_replication_group(
    input: &crate::input::RebalanceSlotsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RebalanceSlotsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_791) = &input.global_replication_group_id {
        scope_790.string(var_791);
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("ApplyImmediately");
    {
        scope_792.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_cache_cluster(
    input: &crate::input::RebootCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RebootCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("CacheClusterId");
    if let Some(var_794) = &input.cache_cluster_id {
        scope_793.string(var_794);
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("CacheNodeIdsToReboot");
    if let Some(var_796) = &input.cache_node_ids_to_reboot {
        let mut list_798 = scope_795.start_list(false, Some("CacheNodeId"));
        for item_797 in var_796 {
            #[allow(unused_mut)]
            let mut entry_799 = list_798.entry();
            entry_799.string(item_797);
        }
        list_798.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("ResourceName");
    if let Some(var_801) = &input.resource_name {
        scope_800.string(var_801);
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("TagKeys");
    if let Some(var_803) = &input.tag_keys {
        let mut list_805 = scope_802.start_list(false, None);
        for item_804 in var_803 {
            #[allow(unused_mut)]
            let mut entry_806 = list_805.entry();
            entry_806.string(item_804);
        }
        list_805.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_cache_parameter_group(
    input: &crate::input::ResetCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("CacheParameterGroupName");
    if let Some(var_808) = &input.cache_parameter_group_name {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_809.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("ParameterNameValues");
    if let Some(var_811) = &input.parameter_name_values {
        let mut list_813 = scope_810.start_list(false, Some("ParameterNameValue"));
        for item_812 in var_811 {
            #[allow(unused_mut)]
            let mut entry_814 = list_813.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(
                entry_814, item_812,
            )?;
        }
        list_813.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_cache_security_group_ingress(
    input: &crate::input::RevokeCacheSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RevokeCacheSecurityGroupIngress",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_816) = &input.cache_security_group_name {
        scope_815.string(var_816);
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_818) = &input.ec2_security_group_name {
        scope_817.string(var_818);
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_820) = &input.ec2_security_group_owner_id {
        scope_819.string(var_820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_migration(
    input: &crate::input::StartMigrationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartMigration", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("ReplicationGroupId");
    if let Some(var_822) = &input.replication_group_id {
        scope_821.string(var_822);
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("CustomerNodeEndpointList");
    if let Some(var_824) = &input.customer_node_endpoint_list {
        let mut list_826 = scope_823.start_list(false, None);
        for item_825 in var_824 {
            #[allow(unused_mut)]
            let mut entry_827 = list_826.entry();
            crate::query_ser::serialize_structure_crate_model_customer_node_endpoint(
                entry_827, item_825,
            )?;
        }
        list_826.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_test_failover(
    input: &crate::input::TestFailoverInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TestFailover", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("ReplicationGroupId");
    if let Some(var_829) = &input.replication_group_id {
        scope_828.string(var_829);
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("NodeGroupId");
    if let Some(var_831) = &input.node_group_id {
        scope_830.string(var_831);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
