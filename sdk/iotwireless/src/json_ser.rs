// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_aws_account_with_partner_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateAwsAccountWithPartnerAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.sidewalk {
        let mut object_3 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_account_info(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.tags {
        let mut array_5 = object.key("Tags").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_multicast_group_with_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateMulticastGroupWithFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.multicast_group_id {
        object.key("MulticastGroupId").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.wireless_device_id {
        object.key("WirelessDeviceId").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.wireless_device_id {
        object.key("WirelessDeviceId").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.thing_arn {
        object.key("ThingArn").string(var_11.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_gateway_with_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessGatewayWithCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.iot_certificate_id {
        object.key("IotCertificateId").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_gateway_with_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessGatewayWithThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.thing_arn {
        object.key("ThingArn").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15.as_str());
    }
    if let Some(var_16) = &input.expression {
        object.key("Expression").string(var_16.as_str());
    }
    if let Some(var_17) = &input.expression_type {
        object.key("ExpressionType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.name {
        object.key("Name").string(var_18.as_str());
    }
    if let Some(var_19) = &input.role_arn {
        object.key("RoleArn").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_device_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_24.as_str());
    }
    if let Some(var_25) = &input.lo_ra_wan {
        let mut object_26 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_device_profile(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27.as_str());
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_32.as_str());
    }
    if let Some(var_33) = &input.description {
        object.key("Description").string(var_33.as_str());
    }
    if let Some(var_34) = &input.firmware_update_image {
        object.key("FirmwareUpdateImage").string(var_34.as_str());
    }
    if let Some(var_35) = &input.firmware_update_role {
        object.key("FirmwareUpdateRole").string(var_35.as_str());
    }
    if let Some(var_36) = &input.lo_ra_wan {
        let mut object_37 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_fuota_task(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.name {
        object.key("Name").string(var_38.as_str());
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_43.as_str());
    }
    if let Some(var_44) = &input.description {
        object.key("Description").string(var_44.as_str());
    }
    if let Some(var_45) = &input.lo_ra_wan {
        let mut object_46 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.name {
        object.key("Name").string(var_47.as_str());
    }
    if let Some(var_48) = &input.tags {
        let mut array_49 = object.key("Tags").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_51, item_50)?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_network_analyzer_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNetworkAnalyzerConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_52.as_str());
    }
    if let Some(var_53) = &input.description {
        object.key("Description").string(var_53.as_str());
    }
    if let Some(var_54) = &input.name {
        object.key("Name").string(var_54.as_str());
    }
    if let Some(var_55) = &input.tags {
        let mut array_56 = object.key("Tags").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.trace_content {
        let mut object_60 = object.key("TraceContent").start_object();
        crate::json_ser::serialize_structure_crate_model_trace_content(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.wireless_devices {
        let mut array_62 = object.key("WirelessDevices").start_array();
        for item_63 in var_61 {
            {
                array_62.value().string(item_63.as_str());
            }
        }
        array_62.finish();
    }
    if let Some(var_64) = &input.wireless_gateways {
        let mut array_65 = object.key("WirelessGateways").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66.as_str());
            }
        }
        array_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.lo_ra_wan {
        let mut object_69 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_service_profile(
            &mut object_69,
            var_68,
        )?;
        object_69.finish();
    }
    if let Some(var_70) = &input.name {
        object.key("Name").string(var_70.as_str());
    }
    if let Some(var_71) = &input.tags {
        let mut array_72 = object.key("Tags").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_74, item_73)?;
                object_74.finish();
            }
        }
        array_72.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.description {
        object.key("Description").string(var_76.as_str());
    }
    if let Some(var_77) = &input.destination_name {
        object.key("DestinationName").string(var_77.as_str());
    }
    if let Some(var_78) = &input.lo_ra_wan {
        let mut object_79 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_device(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80.as_str());
    }
    if let Some(var_81) = &input.tags {
        let mut array_82 = object.key("Tags").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_84, item_83)?;
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.r#type {
        object.key("Type").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_86.as_str());
    }
    if let Some(var_87) = &input.description {
        object.key("Description").string(var_87.as_str());
    }
    if let Some(var_88) = &input.lo_ra_wan {
        let mut object_89 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway(&mut object_89, var_88)?;
        object_89.finish();
    }
    if let Some(var_90) = &input.name {
        object.key("Name").string(var_90.as_str());
    }
    if let Some(var_91) = &input.tags {
        let mut array_92 = object.key("Tags").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_94, item_93)?;
                object_94.finish();
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.wireless_gateway_task_definition_id {
        object
            .key("WirelessGatewayTaskDefinitionId")
            .string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_task_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayTaskDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("AutoCreateTasks")
            .boolean(input.auto_create_tasks);
    }
    if let Some(var_96) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_96.as_str());
    }
    if let Some(var_97) = &input.name {
        object.key("Name").string(var_97.as_str());
    }
    if let Some(var_98) = &input.tags {
        let mut array_99 = object.key("Tags").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_101, item_100)?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    if let Some(var_102) = &input.update {
        let mut object_103 = object.key("Update").start_object();
        crate::json_ser::serialize_structure_crate_model_update_wireless_gateway_task_create(
            &mut object_103,
            var_102,
        )?;
        object_103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_position_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPositionConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.destination {
        object.key("Destination").string(var_104.as_str());
    }
    if let Some(var_105) = &input.solvers {
        let mut object_106 = object.key("Solvers").start_object();
        crate::json_ser::serialize_structure_crate_model_position_solver_configurations(
            &mut object_106,
            var_105,
        )?;
        object_106.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_log_level_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourceLogLevelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.log_level {
        object.key("LogLevel").string(var_107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_data_to_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendDataToMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.payload_data {
        object.key("PayloadData").string(var_108.as_str());
    }
    if let Some(var_109) = &input.wireless_metadata {
        let mut object_110 = object.key("WirelessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_multicast_wireless_metadata(
            &mut object_110,
            var_109,
        )?;
        object_110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_data_to_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendDataToWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.payload_data {
        object.key("PayloadData").string(var_111.as_str());
    }
    if let Some(var_112) = &input.transmit_mode {
        object.key("TransmitMode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_112).into()),
        );
    }
    if let Some(var_113) = &input.wireless_metadata {
        let mut object_114 = object.key("WirelessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_wireless_metadata(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bulk_associate_wireless_device_with_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBulkAssociateWirelessDeviceWithMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.query_string {
        object.key("QueryString").string(var_115.as_str());
    }
    if let Some(var_116) = &input.tags {
        let mut array_117 = object.key("Tags").start_array();
        for item_118 in var_116 {
            {
                let mut object_119 = array_117.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_119, item_118)?;
                object_119.finish();
            }
        }
        array_117.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bulk_disassociate_wireless_device_from_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBulkDisassociateWirelessDeviceFromMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.query_string {
        object.key("QueryString").string(var_120.as_str());
    }
    if let Some(var_121) = &input.tags {
        let mut array_122 = object.key("Tags").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_124, item_123)?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.lo_ra_wan {
        let mut object_126 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_start_fuota_task(
            &mut object_126,
            var_125,
        )?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_multicast_group_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMulticastGroupSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.lo_ra_wan {
        let mut object_128 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast_session(
            &mut object_128,
            var_127,
        )?;
        object_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.tags {
        let mut array_130 = object.key("Tags").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_132, item_131)?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.description {
        object.key("Description").string(var_133.as_str());
    }
    if let Some(var_134) = &input.expression {
        object.key("Expression").string(var_134.as_str());
    }
    if let Some(var_135) = &input.expression_type {
        object.key("ExpressionType").string(var_135.as_str());
    }
    if let Some(var_136) = &input.role_arn {
        object.key("RoleArn").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_event_configuration_by_resource_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventConfigurationByResourceTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.connection_status {
        let mut object_138 = object.key("ConnectionStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_status_resource_type_event_configuration(&mut object_138, var_137)?;
        object_138.finish();
    }
    if let Some(var_139) = &input.device_registration_state {
        let mut object_140 = object.key("DeviceRegistrationState").start_object();
        crate::json_ser::serialize_structure_crate_model_device_registration_state_resource_type_event_configuration(&mut object_140, var_139)?;
        object_140.finish();
    }
    if let Some(var_141) = &input.join {
        let mut object_142 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join_resource_type_event_configuration(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.proximity {
        let mut object_144 = object.key("Proximity").start_object();
        crate::json_ser::serialize_structure_crate_model_proximity_resource_type_event_configuration(&mut object_144, var_143)?;
        object_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.description {
        object.key("Description").string(var_145.as_str());
    }
    if let Some(var_146) = &input.firmware_update_image {
        object.key("FirmwareUpdateImage").string(var_146.as_str());
    }
    if let Some(var_147) = &input.firmware_update_role {
        object.key("FirmwareUpdateRole").string(var_147.as_str());
    }
    if let Some(var_148) = &input.lo_ra_wan {
        let mut object_149 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_fuota_task(
            &mut object_149,
            var_148,
        )?;
        object_149.finish();
    }
    if let Some(var_150) = &input.name {
        object.key("Name").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_log_levels_by_resource_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLogLevelsByResourceTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.default_log_level {
        object.key("DefaultLogLevel").string(var_151.as_str());
    }
    if let Some(var_152) = &input.wireless_device_log_options {
        let mut array_153 = object.key("WirelessDeviceLogOptions").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_device_log_option(
                    &mut object_155,
                    item_154,
                )?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.wireless_gateway_log_options {
        let mut array_157 = object.key("WirelessGatewayLogOptions").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_gateway_log_option(
                    &mut object_159,
                    item_158,
                )?;
                object_159.finish();
            }
        }
        array_157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.description {
        object.key("Description").string(var_160.as_str());
    }
    if let Some(var_161) = &input.lo_ra_wan {
        let mut object_162 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast(
            &mut object_162,
            var_161,
        )?;
        object_162.finish();
    }
    if let Some(var_163) = &input.name {
        object.key("Name").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_network_analyzer_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNetworkAnalyzerConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.description {
        object.key("Description").string(var_164.as_str());
    }
    if let Some(var_165) = &input.trace_content {
        let mut object_166 = object.key("TraceContent").start_object();
        crate::json_ser::serialize_structure_crate_model_trace_content(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.wireless_devices_to_add {
        let mut array_168 = object.key("WirelessDevicesToAdd").start_array();
        for item_169 in var_167 {
            {
                array_168.value().string(item_169.as_str());
            }
        }
        array_168.finish();
    }
    if let Some(var_170) = &input.wireless_devices_to_remove {
        let mut array_171 = object.key("WirelessDevicesToRemove").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172.as_str());
            }
        }
        array_171.finish();
    }
    if let Some(var_173) = &input.wireless_gateways_to_add {
        let mut array_174 = object.key("WirelessGatewaysToAdd").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175.as_str());
            }
        }
        array_174.finish();
    }
    if let Some(var_176) = &input.wireless_gateways_to_remove {
        let mut array_177 = object.key("WirelessGatewaysToRemove").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178.as_str());
            }
        }
        array_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partner_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartnerAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.sidewalk {
        let mut object_180 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_update_account(
            &mut object_180,
            var_179,
        )?;
        object_180.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_position_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePositionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.position {
        let mut array_182 = object.key("Position").start_array();
        for item_183 in var_181 {
            {
                array_182.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_183).into()),
                );
            }
        }
        array_182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_event_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceEventConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.connection_status {
        let mut object_185 = object.key("ConnectionStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_status_event_configuration(
            &mut object_185,
            var_184,
        )?;
        object_185.finish();
    }
    if let Some(var_186) = &input.device_registration_state {
        let mut object_187 = object.key("DeviceRegistrationState").start_object();
        crate::json_ser::serialize_structure_crate_model_device_registration_state_event_configuration(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.join {
        let mut object_189 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join_event_configuration(
            &mut object_189,
            var_188,
        )?;
        object_189.finish();
    }
    if let Some(var_190) = &input.proximity {
        let mut object_191 = object.key("Proximity").start_object();
        crate::json_ser::serialize_structure_crate_model_proximity_event_configuration(
            &mut object_191,
            var_190,
        )?;
        object_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.description {
        object.key("Description").string(var_192.as_str());
    }
    if let Some(var_193) = &input.destination_name {
        object.key("DestinationName").string(var_193.as_str());
    }
    if let Some(var_194) = &input.lo_ra_wan {
        let mut object_195 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_update_device(
            &mut object_195,
            var_194,
        )?;
        object_195.finish();
    }
    if let Some(var_196) = &input.name {
        object.key("Name").string(var_196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_wireless_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWirelessGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.description {
        object.key("Description").string(var_197.as_str());
    }
    if let Some(var_198) = &input.join_eui_filters {
        let mut array_199 = object.key("JoinEuiFilters").start_array();
        for item_200 in var_198 {
            {
                let mut array_201 = array_199.value().start_array();
                for item_202 in item_200 {
                    {
                        array_201.value().string(item_202.as_str());
                    }
                }
                array_201.finish();
            }
        }
        array_199.finish();
    }
    if let Some(var_203) = &input.name {
        object.key("Name").string(var_203.as_str());
    }
    if let Some(var_204) = &input.net_id_filters {
        let mut array_205 = object.key("NetIdFilters").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206.as_str());
            }
        }
        array_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_account_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkAccountInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.amazon_id {
        object.key("AmazonId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.app_server_private_key {
        object.key("AppServerPrivateKey").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.key {
        object.key("Key").string(var_209.as_str());
    }
    if let Some(var_210) = &input.value {
        object.key("Value").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_device_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanDeviceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.supports_class_b {
        object.key("SupportsClassB").boolean(input.supports_class_b);
    }
    if let Some(var_211) = &input.class_b_timeout {
        object.key("ClassBTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.ping_slot_period {
        object.key("PingSlotPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.ping_slot_dr {
        object.key("PingSlotDr").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.ping_slot_freq {
        object.key("PingSlotFreq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_214).into()),
        );
    }
    if input.supports_class_c {
        object.key("SupportsClassC").boolean(input.supports_class_c);
    }
    if let Some(var_215) = &input.class_c_timeout {
        object.key("ClassCTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    if let Some(var_216) = &input.mac_version {
        object.key("MacVersion").string(var_216.as_str());
    }
    if let Some(var_217) = &input.reg_params_revision {
        object.key("RegParamsRevision").string(var_217.as_str());
    }
    if let Some(var_218) = &input.rx_delay1 {
        object.key("RxDelay1").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    if let Some(var_219) = &input.rx_dr_offset1 {
        object.key("RxDrOffset1").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.rx_data_rate2 {
        object.key("RxDataRate2").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_220).into()),
        );
    }
    if let Some(var_221) = &input.rx_freq2 {
        object.key("RxFreq2").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.factory_preset_freqs_list {
        let mut array_223 = object.key("FactoryPresetFreqsList").start_array();
        for item_224 in var_222 {
            {
                array_223.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_224).into()),
                );
            }
        }
        array_223.finish();
    }
    if let Some(var_225) = &input.max_eirp {
        object.key("MaxEirp").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_225).into()),
        );
    }
    if let Some(var_226) = &input.max_duty_cycle {
        object.key("MaxDutyCycle").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_226).into()),
        );
    }
    if let Some(var_227) = &input.rf_region {
        object.key("RfRegion").string(var_227.as_str());
    }
    if let Some(var_228) = &input.supports_join {
        object.key("SupportsJoin").boolean(*var_228);
    }
    if input.supports32_bit_f_cnt {
        object
            .key("Supports32BitFCnt")
            .boolean(input.supports32_bit_f_cnt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_fuota_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanFuotaTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.rf_region {
        object.key("RfRegion").string(var_229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticast,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.rf_region {
        object.key("RfRegion").string(var_230.as_str());
    }
    if let Some(var_231) = &input.dl_class {
        object.key("DlClass").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trace_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TraceContent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.wireless_device_frame_info {
        object
            .key("WirelessDeviceFrameInfo")
            .string(var_232.as_str());
    }
    if let Some(var_233) = &input.log_level {
        object.key("LogLevel").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_service_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanServiceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.add_gw_metadata {
        object.key("AddGwMetadata").boolean(input.add_gw_metadata);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.dev_eui {
        object.key("DevEui").string(var_234.as_str());
    }
    if let Some(var_235) = &input.device_profile_id {
        object.key("DeviceProfileId").string(var_235.as_str());
    }
    if let Some(var_236) = &input.service_profile_id {
        object.key("ServiceProfileId").string(var_236.as_str());
    }
    if let Some(var_237) = &input.otaa_v1_1 {
        let mut object_238 = object.key("OtaaV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_otaa_v11(&mut object_238, var_237)?;
        object_238.finish();
    }
    if let Some(var_239) = &input.otaa_v1_0_x {
        let mut object_240 = object.key("OtaaV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_otaa_v10_x(&mut object_240, var_239)?;
        object_240.finish();
    }
    if let Some(var_241) = &input.abp_v1_1 {
        let mut object_242 = object.key("AbpV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_abp_v11(&mut object_242, var_241)?;
        object_242.finish();
    }
    if let Some(var_243) = &input.abp_v1_0_x {
        let mut object_244 = object.key("AbpV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_abp_v10_x(&mut object_244, var_243)?;
        object_244.finish();
    }
    if let Some(var_245) = &input.f_ports {
        let mut object_246 = object.key("FPorts").start_object();
        crate::json_ser::serialize_structure_crate_model_f_ports(&mut object_246, var_245)?;
        object_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_gateway(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanGateway,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.gateway_eui {
        object.key("GatewayEui").string(var_247.as_str());
    }
    if let Some(var_248) = &input.rf_region {
        object.key("RfRegion").string(var_248.as_str());
    }
    if let Some(var_249) = &input.join_eui_filters {
        let mut array_250 = object.key("JoinEuiFilters").start_array();
        for item_251 in var_249 {
            {
                let mut array_252 = array_250.value().start_array();
                for item_253 in item_251 {
                    {
                        array_252.value().string(item_253.as_str());
                    }
                }
                array_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_254) = &input.net_id_filters {
        let mut array_255 = object.key("NetIdFilters").start_array();
        for item_256 in var_254 {
            {
                array_255.value().string(item_256.as_str());
            }
        }
        array_255.finish();
    }
    if let Some(var_257) = &input.sub_bands {
        let mut array_258 = object.key("SubBands").start_array();
        for item_259 in var_257 {
            {
                array_258.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_259).into()),
                );
            }
        }
        array_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_wireless_gateway_task_create(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateWirelessGatewayTaskCreate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.update_data_source {
        object.key("UpdateDataSource").string(var_260.as_str());
    }
    if let Some(var_261) = &input.update_data_role {
        object.key("UpdateDataRole").string(var_261.as_str());
    }
    if let Some(var_262) = &input.lo_ra_wan {
        let mut object_263 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_update_gateway_task_create(
            &mut object_263,
            var_262,
        )?;
        object_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_position_solver_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PositionSolverConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.semtech_gnss {
        let mut object_265 = object.key("SemtechGnss").start_object();
        crate::json_ser::serialize_structure_crate_model_semtech_gnss_configuration(
            &mut object_265,
            var_264,
        )?;
        object_265.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multicast_wireless_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MulticastWirelessMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.lo_ra_wan {
        let mut object_267 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast_metadata(
            &mut object_267,
            var_266,
        )?;
        object_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.lo_ra_wan {
        let mut object_269 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_send_data_to_device(
            &mut object_269,
            var_268,
        )?;
        object_269.finish();
    }
    if let Some(var_270) = &input.sidewalk {
        let mut object_271 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_send_data_to_device(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_start_fuota_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanStartFuotaTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_272, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast_session(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticastSession,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.dl_dr {
        object.key("DlDr").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_273).into()),
        );
    }
    if let Some(var_274) = &input.dl_freq {
        object.key("DlFreq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    if let Some(var_275) = &input.session_start_time {
        object
            .key("SessionStartTime")
            .date_time(var_275, aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_276) = &input.session_timeout {
        object.key("SessionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_status_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionStatusResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.lo_ra_wan {
        let mut object_278 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_connection_status_resource_type_event_configuration(&mut object_278, var_277)?;
        object_278.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_registration_state_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceRegistrationStateResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.sidewalk {
        let mut object_280 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_resource_type_event_configuration(&mut object_280, var_279)?;
        object_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.lo_ra_wan {
        let mut object_282 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_join_resource_type_event_configuration(&mut object_282, var_281)?;
        object_282.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proximity_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProximityResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.sidewalk {
        let mut object_284 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_resource_type_event_configuration(&mut object_284, var_283)?;
        object_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_device_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessDeviceLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.r#type {
        object.key("Type").string(var_285.as_str());
    }
    if let Some(var_286) = &input.log_level {
        object.key("LogLevel").string(var_286.as_str());
    }
    if let Some(var_287) = &input.events {
        let mut array_288 = object.key("Events").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_device_event_log_option(
                    &mut object_290,
                    item_289,
                )?;
                object_290.finish();
            }
        }
        array_288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_gateway_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessGatewayLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.r#type {
        object.key("Type").string(var_291.as_str());
    }
    if let Some(var_292) = &input.log_level {
        object.key("LogLevel").string(var_292.as_str());
    }
    if let Some(var_293) = &input.events {
        let mut array_294 = object.key("Events").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_gateway_event_log_option(
                    &mut object_296,
                    item_295,
                )?;
                object_296.finish();
            }
        }
        array_294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_update_account(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkUpdateAccount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.app_server_private_key {
        object.key("AppServerPrivateKey").string(var_297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_status_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionStatusEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.lo_ra_wan {
        let mut object_299 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_connection_status_event_notification_configurations(&mut object_299, var_298)?;
        object_299.finish();
    }
    if let Some(var_300) = &input.wireless_gateway_id_event_topic {
        object
            .key("WirelessGatewayIdEventTopic")
            .string(var_300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_registration_state_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceRegistrationStateEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.sidewalk {
        let mut object_302 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_event_notification_configurations(&mut object_302, var_301)?;
        object_302.finish();
    }
    if let Some(var_303) = &input.wireless_device_id_event_topic {
        object
            .key("WirelessDeviceIdEventTopic")
            .string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.lo_ra_wan {
        let mut object_305 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_join_event_notification_configurations(&mut object_305, var_304)?;
        object_305.finish();
    }
    if let Some(var_306) = &input.wireless_device_id_event_topic {
        object
            .key("WirelessDeviceIdEventTopic")
            .string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proximity_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProximityEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.sidewalk {
        let mut object_308 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_event_notification_configurations(&mut object_308, var_307)?;
        object_308.finish();
    }
    if let Some(var_309) = &input.wireless_device_id_event_topic {
        object
            .key("WirelessDeviceIdEventTopic")
            .string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_update_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanUpdateDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.device_profile_id {
        object.key("DeviceProfileId").string(var_310.as_str());
    }
    if let Some(var_311) = &input.service_profile_id {
        object.key("ServiceProfileId").string(var_311.as_str());
    }
    if let Some(var_312) = &input.abp_v1_1 {
        let mut object_313 = object.key("AbpV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_update_abp_v11(&mut object_313, var_312)?;
        object_313.finish();
    }
    if let Some(var_314) = &input.abp_v1_0_x {
        let mut object_315 = object.key("AbpV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_update_abp_v10_x(
            &mut object_315,
            var_314,
        )?;
        object_315.finish();
    }
    if let Some(var_316) = &input.f_ports {
        let mut object_317 = object.key("FPorts").start_object();
        crate::json_ser::serialize_structure_crate_model_update_f_ports(&mut object_317, var_316)?;
        object_317.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_otaa_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaaV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.app_key {
        object.key("AppKey").string(var_318.as_str());
    }
    if let Some(var_319) = &input.nwk_key {
        object.key("NwkKey").string(var_319.as_str());
    }
    if let Some(var_320) = &input.join_eui {
        object.key("JoinEui").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_otaa_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaaV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.app_key {
        object.key("AppKey").string(var_321.as_str());
    }
    if let Some(var_322) = &input.app_eui {
        object.key("AppEui").string(var_322.as_str());
    }
    if let Some(var_323) = &input.gen_app_key {
        object.key("GenAppKey").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.dev_addr {
        object.key("DevAddr").string(var_324.as_str());
    }
    if let Some(var_325) = &input.session_keys {
        let mut object_326 = object.key("SessionKeys").start_object();
        crate::json_ser::serialize_structure_crate_model_session_keys_abp_v11(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    if let Some(var_327) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.dev_addr {
        object.key("DevAddr").string(var_328.as_str());
    }
    if let Some(var_329) = &input.session_keys {
        let mut object_330 = object.key("SessionKeys").start_object();
        crate::json_ser::serialize_structure_crate_model_session_keys_abp_v10_x(
            &mut object_330,
            var_329,
        )?;
        object_330.finish();
    }
    if let Some(var_331) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_f_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FPorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.fuota {
        object.key("Fuota").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    if let Some(var_333) = &input.multicast {
        object.key("Multicast").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_333).into()),
        );
    }
    if let Some(var_334) = &input.clock_sync {
        object.key("ClockSync").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_334).into()),
        );
    }
    if let Some(var_335) = &input.positioning {
        let mut object_336 = object.key("Positioning").start_object();
        crate::json_ser::serialize_structure_crate_model_positioning(&mut object_336, var_335)?;
        object_336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_update_gateway_task_create(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanUpdateGatewayTaskCreate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.update_signature {
        object.key("UpdateSignature").string(var_337.as_str());
    }
    if let Some(var_338) = &input.sig_key_crc {
        object.key("SigKeyCrc").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    if let Some(var_339) = &input.current_version {
        let mut object_340 = object.key("CurrentVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway_version(
            &mut object_340,
            var_339,
        )?;
        object_340.finish();
    }
    if let Some(var_341) = &input.update_version {
        let mut object_342 = object.key("UpdateVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway_version(
            &mut object_342,
            var_341,
        )?;
        object_342.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_semtech_gnss_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SemtechGnssConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.status {
        object.key("Status").string(var_343.as_str());
    }
    if let Some(var_344) = &input.fec {
        object.key("Fec").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticastMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.f_port {
        object.key("FPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_345).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_send_data_to_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanSendDataToDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.f_port {
        object.key("FPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_send_data_to_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkSendDataToDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.seq {
        object.key("Seq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_347).into()),
        );
    }
    if let Some(var_348) = &input.message_type {
        object.key("MessageType").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_connection_status_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanConnectionStatusResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.wireless_gateway_event_topic {
        object
            .key("WirelessGatewayEventTopic")
            .string(var_349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.wireless_device_event_topic {
        object
            .key("WirelessDeviceEventTopic")
            .string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_join_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanJoinResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.wireless_device_event_topic {
        object
            .key("WirelessDeviceEventTopic")
            .string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_device_event_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessDeviceEventLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.event {
        object.key("Event").string(var_352.as_str());
    }
    if let Some(var_353) = &input.log_level {
        object.key("LogLevel").string(var_353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_gateway_event_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessGatewayEventLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.event {
        object.key("Event").string(var_354.as_str());
    }
    if let Some(var_355) = &input.log_level {
        object.key("LogLevel").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_connection_status_event_notification_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanConnectionStatusEventNotificationConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.gateway_eui_event_topic {
        object.key("GatewayEuiEventTopic").string(var_356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_event_notification_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkEventNotificationConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.amazon_id_event_topic {
        object.key("AmazonIdEventTopic").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_join_event_notification_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanJoinEventNotificationConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.dev_eui_event_topic {
        object.key("DevEuiEventTopic").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_359).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_360).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_f_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFPorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.positioning {
        let mut object_362 = object.key("Positioning").start_object();
        crate::json_ser::serialize_structure_crate_model_positioning(&mut object_362, var_361)?;
        object_362.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_keys_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionKeysAbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.f_nwk_s_int_key {
        object.key("FNwkSIntKey").string(var_363.as_str());
    }
    if let Some(var_364) = &input.s_nwk_s_int_key {
        object.key("SNwkSIntKey").string(var_364.as_str());
    }
    if let Some(var_365) = &input.nwk_s_enc_key {
        object.key("NwkSEncKey").string(var_365.as_str());
    }
    if let Some(var_366) = &input.app_s_key {
        object.key("AppSKey").string(var_366.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_keys_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionKeysAbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.nwk_s_key {
        object.key("NwkSKey").string(var_367.as_str());
    }
    if let Some(var_368) = &input.app_s_key {
        object.key("AppSKey").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_positioning(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Positioning,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.clock_sync {
        object.key("ClockSync").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_369).into()),
        );
    }
    if let Some(var_370) = &input.stream {
        object.key("Stream").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_370).into()),
        );
    }
    if let Some(var_371) = &input.gnss {
        object.key("Gnss").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_371).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_gateway_version(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanGatewayVersion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.package_version {
        object.key("PackageVersion").string(var_372.as_str());
    }
    if let Some(var_373) = &input.model {
        object.key("Model").string(var_373.as_str());
    }
    if let Some(var_374) = &input.station {
        object.key("Station").string(var_374.as_str());
    }
    Ok(())
}
