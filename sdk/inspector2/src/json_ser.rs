// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_member_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateMemberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.account_id {
        object.key("accountId").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_account_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetAccountStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.account_ids {
        let mut array_3 = object.key("accountIds").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_free_trial_info_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetFreeTrialInfoInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.account_ids {
        let mut array_6 = object.key("accountIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_findings_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelFindingsReportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.report_id {
        object.key("reportId").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.action {
        object.key("action").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.filter_criteria {
        let mut object_12 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13.as_str());
    }
    if let Some(var_14) = &input.reason {
        object.key("reason").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        let mut object_16 = object.key("tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_findings_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFindingsReportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.filter_criteria {
        let mut object_20 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.report_format {
        object.key("reportFormat").string(var_21.as_str());
    }
    if let Some(var_22) = &input.s3_destination {
        let mut object_23 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_destination(&mut object_23, var_22)?;
        object_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.arn {
        object.key("arn").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.account_ids {
        let mut array_26 = object.key("accountIds").start_array();
        for item_27 in var_25 {
            {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.resource_types {
        let mut array_29 = object.key("resourceTypes").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_delegated_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableDelegatedAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.delegated_admin_account_id {
        object
            .key("delegatedAdminAccountId")
            .string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_member_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMemberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.account_id {
        object.key("accountId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.account_ids {
        let mut array_34 = object.key("accountIds").start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35.as_str());
            }
        }
        array_34.finish();
    }
    if let Some(var_36) = &input.client_token {
        object.key("clientToken").string(var_36.as_str());
    }
    if let Some(var_37) = &input.resource_types {
        let mut array_38 = object.key("resourceTypes").start_array();
        for item_39 in var_37 {
            {
                array_38.value().string(item_39.as_str());
            }
        }
        array_38.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_delegated_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableDelegatedAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.client_token {
        object.key("clientToken").string(var_40.as_str());
    }
    if let Some(var_41) = &input.delegated_admin_account_id {
        object
            .key("delegatedAdminAccountId")
            .string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_report_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsReportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.report_id {
        object.key("reportId").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_member_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMemberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.account_id {
        object.key("accountId").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_44).into()),
        );
    }
    if let Some(var_45) = &input.next_token {
        object.key("nextToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.service {
        object.key("service").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_coverage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCoverageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.filter_criteria {
        let mut object_48 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_coverage_filter_criteria(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    if let Some(var_50) = &input.next_token {
        object.key("nextToken").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_coverage_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCoverageStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.filter_criteria {
        let mut object_52 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_coverage_filter_criteria(
            &mut object_52,
            var_51,
        )?;
        object_52.finish();
    }
    if let Some(var_53) = &input.group_by {
        object.key("groupBy").string(var_53.as_str());
    }
    if let Some(var_54) = &input.next_token {
        object.key("nextToken").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_delegated_admin_accounts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDelegatedAdminAccountsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_55).into()),
        );
    }
    if let Some(var_56) = &input.next_token {
        object.key("nextToken").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_filters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFiltersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.action {
        object.key("action").string(var_57.as_str());
    }
    if let Some(var_58) = &input.arns {
        let mut array_59 = object.key("arns").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    if let Some(var_62) = &input.next_token {
        object.key("nextToken").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_finding_aggregations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFindingAggregationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.account_ids {
        let mut array_64 = object.key("accountIds").start_array();
        for item_65 in var_63 {
            {
                let mut object_66 = array_64.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_66,
                    item_65,
                )?;
                object_66.finish();
            }
        }
        array_64.finish();
    }
    if let Some(var_67) = &input.aggregation_request {
        let mut object_68 = object.key("aggregationRequest").start_object();
        crate::json_ser::serialize_union_crate_model_aggregation_request(&mut object_68, var_67)?;
        object_68.finish();
    }
    if let Some(var_69) = &input.aggregation_type {
        object.key("aggregationType").string(var_69.as_str());
    }
    if let Some(var_70) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_70).into()),
        );
    }
    if let Some(var_71) = &input.next_token {
        object.key("nextToken").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.filter_criteria {
        let mut object_73 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_73, var_72)?;
        object_73.finish();
    }
    if let Some(var_74) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_74).into()),
        );
    }
    if let Some(var_75) = &input.next_token {
        object.key("nextToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.sort_criteria {
        let mut object_77 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_77, var_76)?;
        object_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_78).into()),
        );
    }
    if let Some(var_79) = &input.next_token {
        object.key("nextToken").string(var_79.as_str());
    }
    if let Some(var_80) = &input.only_associated {
        object.key("onlyAssociated").boolean(*var_80);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_usage_totals_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsageTotalsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.account_ids {
        let mut array_82 = object.key("accountIds").start_array();
        for item_83 in var_81 {
            {
                array_82.value().string(item_83.as_str());
            }
        }
        array_82.finish();
    }
    if let Some(var_84) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    if let Some(var_85) = &input.next_token {
        object.key("nextToken").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.tags {
        let mut object_87 = object.key("tags").start_object();
        for (key_88, value_89) in var_86 {
            {
                object_87.key(key_88).string(value_89.as_str());
            }
        }
        object_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.ecr_configuration {
        let mut object_91 = object.key("ecrConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_ecr_configuration(&mut object_91, var_90)?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.action {
        object.key("action").string(var_92.as_str());
    }
    if let Some(var_93) = &input.description {
        object.key("description").string(var_93.as_str());
    }
    if let Some(var_94) = &input.filter_arn {
        object.key("filterArn").string(var_94.as_str());
    }
    if let Some(var_95) = &input.filter_criteria {
        let mut object_96 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.name {
        object.key("name").string(var_97.as_str());
    }
    if let Some(var_98) = &input.reason {
        object.key("reason").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.auto_enable {
        let mut object_100 = object.key("autoEnable").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_enable(&mut object_100, var_99)?;
        object_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.finding_arn {
        let mut array_102 = object.key("findingArn").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_104,
                    item_103,
                )?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.aws_account_id {
        let mut array_106 = object.key("awsAccountId").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_108,
                    item_107,
                )?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.finding_type {
        let mut array_110 = object.key("findingType").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.severity {
        let mut array_114 = object.key("severity").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_116,
                    item_115,
                )?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.first_observed_at {
        let mut array_118 = object.key("firstObservedAt").start_array();
        for item_119 in var_117 {
            {
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_120,
                    item_119,
                )?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.last_observed_at {
        let mut array_122 = object.key("lastObservedAt").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_124,
                    item_123,
                )?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.updated_at {
        let mut array_126 = object.key("updatedAt").start_array();
        for item_127 in var_125 {
            {
                let mut object_128 = array_126.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_128,
                    item_127,
                )?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.finding_status {
        let mut array_130 = object.key("findingStatus").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.title {
        let mut array_134 = object.key("title").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_136,
                    item_135,
                )?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.inspector_score {
        let mut array_138 = object.key("inspectorScore").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_140,
                    item_139,
                )?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    if let Some(var_141) = &input.resource_type {
        let mut array_142 = object.key("resourceType").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_144,
                    item_143,
                )?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    if let Some(var_145) = &input.resource_id {
        let mut array_146 = object.key("resourceId").start_array();
        for item_147 in var_145 {
            {
                let mut object_148 = array_146.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_148,
                    item_147,
                )?;
                object_148.finish();
            }
        }
        array_146.finish();
    }
    if let Some(var_149) = &input.resource_tags {
        let mut array_150 = object.key("resourceTags").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_152,
                    item_151,
                )?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.ec2_instance_image_id {
        let mut array_154 = object.key("ec2InstanceImageId").start_array();
        for item_155 in var_153 {
            {
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_156,
                    item_155,
                )?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.ec2_instance_vpc_id {
        let mut array_158 = object.key("ec2InstanceVpcId").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_160,
                    item_159,
                )?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.ec2_instance_subnet_id {
        let mut array_162 = object.key("ec2InstanceSubnetId").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.ecr_image_pushed_at {
        let mut array_166 = object.key("ecrImagePushedAt").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_168,
                    item_167,
                )?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.ecr_image_architecture {
        let mut array_170 = object.key("ecrImageArchitecture").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_172,
                    item_171,
                )?;
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.ecr_image_registry {
        let mut array_174 = object.key("ecrImageRegistry").start_array();
        for item_175 in var_173 {
            {
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_176,
                    item_175,
                )?;
                object_176.finish();
            }
        }
        array_174.finish();
    }
    if let Some(var_177) = &input.ecr_image_repository_name {
        let mut array_178 = object.key("ecrImageRepositoryName").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_180,
                    item_179,
                )?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.ecr_image_tags {
        let mut array_182 = object.key("ecrImageTags").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.ecr_image_hash {
        let mut array_186 = object.key("ecrImageHash").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_188,
                    item_187,
                )?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.port_range {
        let mut array_190 = object.key("portRange").start_array();
        for item_191 in var_189 {
            {
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range_filter(
                    &mut object_192,
                    item_191,
                )?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    if let Some(var_193) = &input.network_protocol {
        let mut array_194 = object.key("networkProtocol").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_196,
                    item_195,
                )?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.component_id {
        let mut array_198 = object.key("componentId").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_200,
                    item_199,
                )?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    if let Some(var_201) = &input.component_type {
        let mut array_202 = object.key("componentType").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.vulnerability_id {
        let mut array_206 = object.key("vulnerabilityId").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_208,
                    item_207,
                )?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.vulnerability_source {
        let mut array_210 = object.key("vulnerabilitySource").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_212,
                    item_211,
                )?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.vendor_severity {
        let mut array_214 = object.key("vendorSeverity").start_array();
        for item_215 in var_213 {
            {
                let mut object_216 = array_214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_216,
                    item_215,
                )?;
                object_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_217) = &input.vulnerable_packages {
        let mut array_218 = object.key("vulnerablePackages").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_package_filter(
                    &mut object_220,
                    item_219,
                )?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.related_vulnerabilities {
        let mut array_222 = object.key("relatedVulnerabilities").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_224,
                    item_223,
                )?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.bucket_name {
        object.key("bucketName").string(var_225.as_str());
    }
    if let Some(var_226) = &input.key_prefix {
        object.key("keyPrefix").string(var_226.as_str());
    }
    if let Some(var_227) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CoverageFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.scan_status_code {
        let mut array_229 = object.key("scanStatusCode").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_231,
                    item_230,
                )?;
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.scan_status_reason {
        let mut array_233 = object.key("scanStatusReason").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_235,
                    item_234,
                )?;
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.account_id {
        let mut array_237 = object.key("accountId").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_239,
                    item_238,
                )?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.resource_id {
        let mut array_241 = object.key("resourceId").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.resource_type {
        let mut array_245 = object.key("resourceType").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_247,
                    item_246,
                )?;
                object_247.finish();
            }
        }
        array_245.finish();
    }
    if let Some(var_248) = &input.scan_type {
        let mut array_249 = object.key("scanType").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_251,
                    item_250,
                )?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.ecr_repository_name {
        let mut array_253 = object.key("ecrRepositoryName").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_255,
                    item_254,
                )?;
                object_255.finish();
            }
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.ecr_image_tags {
        let mut array_257 = object.key("ecrImageTags").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_259,
                    item_258,
                )?;
                object_259.finish();
            }
        }
        array_257.finish();
    }
    if let Some(var_260) = &input.ec2_instance_tags {
        let mut array_261 = object.key("ec2InstanceTags").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_map_filter(
                    &mut object_263,
                    item_262,
                )?;
                object_263.finish();
            }
        }
        array_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.comparison {
        object.key("comparison").string(var_264.as_str());
    }
    if let Some(var_265) = &input.value {
        object.key("value").string(var_265.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_aggregation_request(
    object_68: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::AggregationRequest::AccountAggregation(inner) => {
            let mut object_266 = object_68.key("accountAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_account_aggregation(
                &mut object_266,
                inner,
            )?;
            object_266.finish();
        }
        crate::model::AggregationRequest::AmiAggregation(inner) => {
            let mut object_267 = object_68.key("amiAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_ami_aggregation(
                &mut object_267,
                inner,
            )?;
            object_267.finish();
        }
        crate::model::AggregationRequest::AwsEcrContainerAggregation(inner) => {
            let mut object_268 = object_68.key("awsEcrContainerAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_aws_ecr_container_aggregation(
                &mut object_268,
                inner,
            )?;
            object_268.finish();
        }
        crate::model::AggregationRequest::Ec2InstanceAggregation(inner) => {
            let mut object_269 = object_68.key("ec2InstanceAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_ec2_instance_aggregation(
                &mut object_269,
                inner,
            )?;
            object_269.finish();
        }
        crate::model::AggregationRequest::FindingTypeAggregation(inner) => {
            let mut object_270 = object_68.key("findingTypeAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_finding_type_aggregation(
                &mut object_270,
                inner,
            )?;
            object_270.finish();
        }
        crate::model::AggregationRequest::ImageLayerAggregation(inner) => {
            let mut object_271 = object_68.key("imageLayerAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_image_layer_aggregation(
                &mut object_271,
                inner,
            )?;
            object_271.finish();
        }
        crate::model::AggregationRequest::PackageAggregation(inner) => {
            let mut object_272 = object_68.key("packageAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_package_aggregation(
                &mut object_272,
                inner,
            )?;
            object_272.finish();
        }
        crate::model::AggregationRequest::RepositoryAggregation(inner) => {
            let mut object_273 = object_68.key("repositoryAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_repository_aggregation(
                &mut object_273,
                inner,
            )?;
            object_273.finish();
        }
        crate::model::AggregationRequest::TitleAggregation(inner) => {
            let mut object_274 = object_68.key("titleAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_title_aggregation(
                &mut object_274,
                inner,
            )?;
            object_274.finish();
        }
        crate::model::AggregationRequest::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "AggregationRequest",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.field {
        object.key("field").string(var_275.as_str());
    }
    if let Some(var_276) = &input.sort_order {
        object.key("sortOrder").string(var_276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ecr_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EcrConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.rescan_duration {
        object.key("rescanDuration").string(var_277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_enable(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoEnable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.ec2 {
        object.key("ec2").boolean(*var_278);
    }
    if let Some(var_279) = &input.ecr {
        object.key("ecr").boolean(*var_279);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.start_inclusive {
        object
            .key("startInclusive")
            .date_time(var_280, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_281) = &input.end_inclusive {
        object
            .key("endInclusive")
            .date_time(var_281, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.upper_inclusive {
        object.key("upperInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_282).into()),
        );
    }
    if let Some(var_283) = &input.lower_inclusive {
        object.key("lowerInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_283).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_map_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MapFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.comparison {
        object.key("comparison").string(var_284.as_str());
    }
    if let Some(var_285) = &input.key {
        object.key("key").string(var_285.as_str());
    }
    if let Some(var_286) = &input.value {
        object.key("value").string(var_286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRangeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.begin_inclusive {
        object.key("beginInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_287).into()),
        );
    }
    if let Some(var_288) = &input.end_inclusive {
        object.key("endInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_package_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PackageFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.name {
        let mut object_290 = object.key("name").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.version {
        let mut object_292 = object.key("version").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_292, var_291)?;
        object_292.finish();
    }
    if let Some(var_293) = &input.epoch {
        let mut object_294 = object.key("epoch").start_object();
        crate::json_ser::serialize_structure_crate_model_number_filter(&mut object_294, var_293)?;
        object_294.finish();
    }
    if let Some(var_295) = &input.release {
        let mut object_296 = object.key("release").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_296, var_295)?;
        object_296.finish();
    }
    if let Some(var_297) = &input.architecture {
        let mut object_298 = object.key("architecture").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_298, var_297)?;
        object_298.finish();
    }
    if let Some(var_299) = &input.source_layer_hash {
        let mut object_300 = object.key("sourceLayerHash").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_300, var_299)?;
        object_300.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CoverageStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.comparison {
        object.key("comparison").string(var_301.as_str());
    }
    if let Some(var_302) = &input.value {
        object.key("value").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_map_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CoverageMapFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.comparison {
        object.key("comparison").string(var_303.as_str());
    }
    if let Some(var_304) = &input.key {
        object.key("key").string(var_304.as_str());
    }
    if let Some(var_305) = &input.value {
        object.key("value").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.finding_type {
        object.key("findingType").string(var_306.as_str());
    }
    if let Some(var_307) = &input.resource_type {
        object.key("resourceType").string(var_307.as_str());
    }
    if let Some(var_308) = &input.sort_order {
        object.key("sortOrder").string(var_308.as_str());
    }
    if let Some(var_309) = &input.sort_by {
        object.key("sortBy").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ami_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmiAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.amis {
        let mut array_311 = object.key("amis").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_313,
                    item_312,
                )?;
                object_313.finish();
            }
        }
        array_311.finish();
    }
    if let Some(var_314) = &input.sort_order {
        object.key("sortOrder").string(var_314.as_str());
    }
    if let Some(var_315) = &input.sort_by {
        object.key("sortBy").string(var_315.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_container_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrContainerAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.resource_ids {
        let mut array_317 = object.key("resourceIds").start_array();
        for item_318 in var_316 {
            {
                let mut object_319 = array_317.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_319,
                    item_318,
                )?;
                object_319.finish();
            }
        }
        array_317.finish();
    }
    if let Some(var_320) = &input.image_shas {
        let mut array_321 = object.key("imageShas").start_array();
        for item_322 in var_320 {
            {
                let mut object_323 = array_321.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_323,
                    item_322,
                )?;
                object_323.finish();
            }
        }
        array_321.finish();
    }
    if let Some(var_324) = &input.repositories {
        let mut array_325 = object.key("repositories").start_array();
        for item_326 in var_324 {
            {
                let mut object_327 = array_325.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_327,
                    item_326,
                )?;
                object_327.finish();
            }
        }
        array_325.finish();
    }
    if let Some(var_328) = &input.architectures {
        let mut array_329 = object.key("architectures").start_array();
        for item_330 in var_328 {
            {
                let mut object_331 = array_329.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_331,
                    item_330,
                )?;
                object_331.finish();
            }
        }
        array_329.finish();
    }
    if let Some(var_332) = &input.image_tags {
        let mut array_333 = object.key("imageTags").start_array();
        for item_334 in var_332 {
            {
                let mut object_335 = array_333.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_335,
                    item_334,
                )?;
                object_335.finish();
            }
        }
        array_333.finish();
    }
    if let Some(var_336) = &input.sort_order {
        object.key("sortOrder").string(var_336.as_str());
    }
    if let Some(var_337) = &input.sort_by {
        object.key("sortBy").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ec2_instance_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ec2InstanceAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.amis {
        let mut array_339 = object.key("amis").start_array();
        for item_340 in var_338 {
            {
                let mut object_341 = array_339.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_341,
                    item_340,
                )?;
                object_341.finish();
            }
        }
        array_339.finish();
    }
    if let Some(var_342) = &input.operating_systems {
        let mut array_343 = object.key("operatingSystems").start_array();
        for item_344 in var_342 {
            {
                let mut object_345 = array_343.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_345,
                    item_344,
                )?;
                object_345.finish();
            }
        }
        array_343.finish();
    }
    if let Some(var_346) = &input.instance_ids {
        let mut array_347 = object.key("instanceIds").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_349,
                    item_348,
                )?;
                object_349.finish();
            }
        }
        array_347.finish();
    }
    if let Some(var_350) = &input.instance_tags {
        let mut array_351 = object.key("instanceTags").start_array();
        for item_352 in var_350 {
            {
                let mut object_353 = array_351.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_353,
                    item_352,
                )?;
                object_353.finish();
            }
        }
        array_351.finish();
    }
    if let Some(var_354) = &input.sort_order {
        object.key("sortOrder").string(var_354.as_str());
    }
    if let Some(var_355) = &input.sort_by {
        object.key("sortBy").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_type_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingTypeAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.finding_type {
        object.key("findingType").string(var_356.as_str());
    }
    if let Some(var_357) = &input.resource_type {
        object.key("resourceType").string(var_357.as_str());
    }
    if let Some(var_358) = &input.sort_order {
        object.key("sortOrder").string(var_358.as_str());
    }
    if let Some(var_359) = &input.sort_by {
        object.key("sortBy").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_layer_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageLayerAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.repositories {
        let mut array_361 = object.key("repositories").start_array();
        for item_362 in var_360 {
            {
                let mut object_363 = array_361.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_363,
                    item_362,
                )?;
                object_363.finish();
            }
        }
        array_361.finish();
    }
    if let Some(var_364) = &input.resource_ids {
        let mut array_365 = object.key("resourceIds").start_array();
        for item_366 in var_364 {
            {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_367,
                    item_366,
                )?;
                object_367.finish();
            }
        }
        array_365.finish();
    }
    if let Some(var_368) = &input.layer_hashes {
        let mut array_369 = object.key("layerHashes").start_array();
        for item_370 in var_368 {
            {
                let mut object_371 = array_369.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_371,
                    item_370,
                )?;
                object_371.finish();
            }
        }
        array_369.finish();
    }
    if let Some(var_372) = &input.sort_order {
        object.key("sortOrder").string(var_372.as_str());
    }
    if let Some(var_373) = &input.sort_by {
        object.key("sortBy").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_package_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PackageAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.package_names {
        let mut array_375 = object.key("packageNames").start_array();
        for item_376 in var_374 {
            {
                let mut object_377 = array_375.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_377,
                    item_376,
                )?;
                object_377.finish();
            }
        }
        array_375.finish();
    }
    if let Some(var_378) = &input.sort_order {
        object.key("sortOrder").string(var_378.as_str());
    }
    if let Some(var_379) = &input.sort_by {
        object.key("sortBy").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.repositories {
        let mut array_381 = object.key("repositories").start_array();
        for item_382 in var_380 {
            {
                let mut object_383 = array_381.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_383,
                    item_382,
                )?;
                object_383.finish();
            }
        }
        array_381.finish();
    }
    if let Some(var_384) = &input.sort_order {
        object.key("sortOrder").string(var_384.as_str());
    }
    if let Some(var_385) = &input.sort_by {
        object.key("sortBy").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_title_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TitleAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.titles {
        let mut array_387 = object.key("titles").start_array();
        for item_388 in var_386 {
            {
                let mut object_389 = array_387.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_389,
                    item_388,
                )?;
                object_389.finish();
            }
        }
        array_387.finish();
    }
    if let Some(var_390) = &input.vulnerability_ids {
        let mut array_391 = object.key("vulnerabilityIds").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_393,
                    item_392,
                )?;
                object_393.finish();
            }
        }
        array_391.finish();
    }
    if let Some(var_394) = &input.resource_type {
        object.key("resourceType").string(var_394.as_str());
    }
    if let Some(var_395) = &input.sort_order {
        object.key("sortOrder").string(var_395.as_str());
    }
    if let Some(var_396) = &input.sort_by {
        object.key("sortBy").string(var_396.as_str());
    }
    Ok(())
}
