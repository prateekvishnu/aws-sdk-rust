// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_endpoint_access_output_next_token(
    input: &crate::output::ListEndpointAccessOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_namespaces_output_next_token(
    input: &crate::output::ListNamespacesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_recovery_points_output_next_token(
    input: &crate::output::ListRecoveryPointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_snapshots_output_next_token(
    input: &crate::output::ListSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_usage_limits_output_next_token(
    input: &crate::output::ListUsageLimitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_workgroups_output_next_token(
    input: &crate::output::ListWorkgroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_endpoint_access_output_endpoints(
    input: crate::output::ListEndpointAccessOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EndpointAccess>> {
    let input = match input.endpoints {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_namespaces_output_namespaces(
    input: crate::output::ListNamespacesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Namespace>> {
    let input = match input.namespaces {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_recovery_points_output_recovery_points(
    input: crate::output::ListRecoveryPointsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RecoveryPoint>> {
    let input = match input.recovery_points {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_snapshots_output_snapshots(
    input: crate::output::ListSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Snapshot>> {
    let input = match input.snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_usage_limits_output_usage_limits(
    input: crate::output::ListUsageLimitsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UsageLimit>> {
    let input = match input.usage_limits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_workgroups_output_workgroups(
    input: crate::output::ListWorkgroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Workgroup>> {
    let input = match input.workgroups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
