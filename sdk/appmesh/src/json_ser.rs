// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_gateway_route_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGatewayRouteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.gateway_route_name {
        object.key("gatewayRouteName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.spec {
        let mut object_4 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_spec(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_mesh_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeshInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.client_token {
        object.key("clientToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.mesh_name {
        object.key("meshName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.spec {
        let mut object_12 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_mesh_spec(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.tags {
        let mut array_14 = object.key("tags").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_route_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRouteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.client_token {
        object.key("clientToken").string(var_17.as_str());
    }
    if let Some(var_18) = &input.route_name {
        object.key("routeName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.spec {
        let mut object_20 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_route_spec(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("tags").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_virtual_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVirtualGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.client_token {
        object.key("clientToken").string(var_25.as_str());
    }
    if let Some(var_26) = &input.spec {
        let mut object_27 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_spec(
            &mut object_27,
            var_26,
        )?;
        object_27.finish();
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.virtual_gateway_name {
        object.key("virtualGatewayName").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_virtual_node_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVirtualNodeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.client_token {
        object.key("clientToken").string(var_33.as_str());
    }
    if let Some(var_34) = &input.spec {
        let mut object_35 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_node_spec(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.tags {
        let mut array_37 = object.key("tags").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_39, item_38)?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.virtual_node_name {
        object.key("virtualNodeName").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_virtual_router_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVirtualRouterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.client_token {
        object.key("clientToken").string(var_41.as_str());
    }
    if let Some(var_42) = &input.spec {
        let mut object_43 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_router_spec(
            &mut object_43,
            var_42,
        )?;
        object_43.finish();
    }
    if let Some(var_44) = &input.tags {
        let mut array_45 = object.key("tags").start_array();
        for item_46 in var_44 {
            {
                let mut object_47 = array_45.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_47, item_46)?;
                object_47.finish();
            }
        }
        array_45.finish();
    }
    if let Some(var_48) = &input.virtual_router_name {
        object.key("virtualRouterName").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_virtual_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVirtualServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.client_token {
        object.key("clientToken").string(var_49.as_str());
    }
    if let Some(var_50) = &input.spec {
        let mut object_51 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_service_spec(
            &mut object_51,
            var_50,
        )?;
        object_51.finish();
    }
    if let Some(var_52) = &input.tags {
        let mut array_53 = object.key("tags").start_array();
        for item_54 in var_52 {
            {
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_55, item_54)?;
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.virtual_service_name {
        object.key("virtualServiceName").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.tags {
        let mut array_58 = object.key("tags").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_ref(&mut object_60, item_59)?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.tag_keys {
        let mut array_62 = object.key("tagKeys").start_array();
        for item_63 in var_61 {
            {
                array_62.value().string(item_63.as_str());
            }
        }
        array_62.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_gateway_route_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGatewayRouteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.client_token {
        object.key("clientToken").string(var_64.as_str());
    }
    if let Some(var_65) = &input.spec {
        let mut object_66 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_spec(
            &mut object_66,
            var_65,
        )?;
        object_66.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_mesh_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMeshInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.client_token {
        object.key("clientToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.spec {
        let mut object_69 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_mesh_spec(&mut object_69, var_68)?;
        object_69.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_route_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRouteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.client_token {
        object.key("clientToken").string(var_70.as_str());
    }
    if let Some(var_71) = &input.spec {
        let mut object_72 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_route_spec(&mut object_72, var_71)?;
        object_72.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_virtual_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVirtualGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.client_token {
        object.key("clientToken").string(var_73.as_str());
    }
    if let Some(var_74) = &input.spec {
        let mut object_75 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_spec(
            &mut object_75,
            var_74,
        )?;
        object_75.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_virtual_node_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVirtualNodeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.client_token {
        object.key("clientToken").string(var_76.as_str());
    }
    if let Some(var_77) = &input.spec {
        let mut object_78 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_node_spec(&mut object_78, var_77)?;
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_virtual_router_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVirtualRouterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.client_token {
        object.key("clientToken").string(var_79.as_str());
    }
    if let Some(var_80) = &input.spec {
        let mut object_81 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_router_spec(
            &mut object_81,
            var_80,
        )?;
        object_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_virtual_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVirtualServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.client_token {
        object.key("clientToken").string(var_82.as_str());
    }
    if let Some(var_83) = &input.spec {
        let mut object_84 = object.key("spec").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_service_spec(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gateway_route_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GatewayRouteSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_85).into()),
        );
    }
    if let Some(var_86) = &input.http_route {
        let mut object_87 = object.key("httpRoute").start_object();
        crate::json_ser::serialize_structure_crate_model_http_gateway_route(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    if let Some(var_88) = &input.http2_route {
        let mut object_89 = object.key("http2Route").start_object();
        crate::json_ser::serialize_structure_crate_model_http_gateway_route(
            &mut object_89,
            var_88,
        )?;
        object_89.finish();
    }
    if let Some(var_90) = &input.grpc_route {
        let mut object_91 = object.key("grpcRoute").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_gateway_route(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_ref(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagRef,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.key {
        object.key("key").string(var_92.as_str());
    }
    if let Some(var_93) = &input.value {
        object.key("value").string(var_93.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mesh_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MeshSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.egress_filter {
        let mut object_95 = object.key("egressFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_egress_filter(&mut object_95, var_94)?;
        object_95.finish();
    }
    if let Some(var_96) = &input.service_discovery {
        let mut object_97 = object.key("serviceDiscovery").start_object();
        crate::json_ser::serialize_structure_crate_model_mesh_service_discovery(
            &mut object_97,
            var_96,
        )?;
        object_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_route_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RouteSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_98).into()),
        );
    }
    if let Some(var_99) = &input.http_route {
        let mut object_100 = object.key("httpRoute").start_object();
        crate::json_ser::serialize_structure_crate_model_http_route(&mut object_100, var_99)?;
        object_100.finish();
    }
    if let Some(var_101) = &input.tcp_route {
        let mut object_102 = object.key("tcpRoute").start_object();
        crate::json_ser::serialize_structure_crate_model_tcp_route(&mut object_102, var_101)?;
        object_102.finish();
    }
    if let Some(var_103) = &input.http2_route {
        let mut object_104 = object.key("http2Route").start_object();
        crate::json_ser::serialize_structure_crate_model_http_route(&mut object_104, var_103)?;
        object_104.finish();
    }
    if let Some(var_105) = &input.grpc_route {
        let mut object_106 = object.key("grpcRoute").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_route(&mut object_106, var_105)?;
        object_106.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewaySpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.backend_defaults {
        let mut object_108 = object.key("backendDefaults").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_backend_defaults(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    if let Some(var_109) = &input.listeners {
        let mut array_110 = object.key("listeners").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.logging {
        let mut object_114 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_logging(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_node_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualNodeSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.service_discovery {
        let mut object_116 = object.key("serviceDiscovery").start_object();
        crate::json_ser::serialize_union_crate_model_service_discovery(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.listeners {
        let mut array_118 = object.key("listeners").start_array();
        for item_119 in var_117 {
            {
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_crate_model_listener(
                    &mut object_120,
                    item_119,
                )?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.backends {
        let mut array_122 = object.key("backends").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_union_crate_model_backend(&mut object_124, item_123)?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.backend_defaults {
        let mut object_126 = object.key("backendDefaults").start_object();
        crate::json_ser::serialize_structure_crate_model_backend_defaults(
            &mut object_126,
            var_125,
        )?;
        object_126.finish();
    }
    if let Some(var_127) = &input.logging {
        let mut object_128 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_crate_model_logging(&mut object_128, var_127)?;
        object_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_router_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualRouterSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.listeners {
        let mut array_130 = object.key("listeners").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_virtual_router_listener(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_service_spec(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualServiceSpec,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.provider {
        let mut object_134 = object.key("provider").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_service_provider(
            &mut object_134,
            var_133,
        )?;
        object_134.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_gateway_route(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpGatewayRoute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.r#match {
        let mut object_136 = object.key("match").start_object();
        crate::json_ser::serialize_structure_crate_model_http_gateway_route_match(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    if let Some(var_137) = &input.action {
        let mut object_138 = object.key("action").start_object();
        crate::json_ser::serialize_structure_crate_model_http_gateway_route_action(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_gateway_route(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcGatewayRoute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.r#match {
        let mut object_140 = object.key("match").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_gateway_route_match(
            &mut object_140,
            var_139,
        )?;
        object_140.finish();
    }
    if let Some(var_141) = &input.action {
        let mut object_142 = object.key("action").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_gateway_route_action(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_egress_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EgressFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.r#type {
        object.key("type").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mesh_service_discovery(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MeshServiceDiscovery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.ip_preference {
        object.key("ipPreference").string(var_144.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_route(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpRoute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.r#match {
        let mut object_146 = object.key("match").start_object();
        crate::json_ser::serialize_structure_crate_model_http_route_match(
            &mut object_146,
            var_145,
        )?;
        object_146.finish();
    }
    if let Some(var_147) = &input.action {
        let mut object_148 = object.key("action").start_object();
        crate::json_ser::serialize_structure_crate_model_http_route_action(
            &mut object_148,
            var_147,
        )?;
        object_148.finish();
    }
    if let Some(var_149) = &input.retry_policy {
        let mut object_150 = object.key("retryPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_http_retry_policy(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    if let Some(var_151) = &input.timeout {
        let mut object_152 = object.key("timeout").start_object();
        crate::json_ser::serialize_structure_crate_model_http_timeout(&mut object_152, var_151)?;
        object_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tcp_route(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TcpRoute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.action {
        let mut object_154 = object.key("action").start_object();
        crate::json_ser::serialize_structure_crate_model_tcp_route_action(
            &mut object_154,
            var_153,
        )?;
        object_154.finish();
    }
    if let Some(var_155) = &input.timeout {
        let mut object_156 = object.key("timeout").start_object();
        crate::json_ser::serialize_structure_crate_model_tcp_timeout(&mut object_156, var_155)?;
        object_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_route(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcRoute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.action {
        let mut object_158 = object.key("action").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_route_action(
            &mut object_158,
            var_157,
        )?;
        object_158.finish();
    }
    if let Some(var_159) = &input.r#match {
        let mut object_160 = object.key("match").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_route_match(
            &mut object_160,
            var_159,
        )?;
        object_160.finish();
    }
    if let Some(var_161) = &input.retry_policy {
        let mut object_162 = object.key("retryPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_retry_policy(
            &mut object_162,
            var_161,
        )?;
        object_162.finish();
    }
    if let Some(var_163) = &input.timeout {
        let mut object_164 = object.key("timeout").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_timeout(&mut object_164, var_163)?;
        object_164.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_backend_defaults(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayBackendDefaults,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.client_policy {
        let mut object_166 = object.key("clientPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_client_policy(
            &mut object_166,
            var_165,
        )?;
        object_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_listener(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListener,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.health_check {
        let mut object_168 = object.key("healthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_health_check_policy(
            &mut object_168,
            var_167,
        )?;
        object_168.finish();
    }
    if let Some(var_169) = &input.port_mapping {
        let mut object_170 = object.key("portMapping").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_port_mapping(
            &mut object_170,
            var_169,
        )?;
        object_170.finish();
    }
    if let Some(var_171) = &input.tls {
        let mut object_172 = object.key("tls").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener_tls(
            &mut object_172,
            var_171,
        )?;
        object_172.finish();
    }
    if let Some(var_173) = &input.connection_pool {
        let mut object_174 = object.key("connectionPool").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_gateway_connection_pool(
            &mut object_174,
            var_173,
        )?;
        object_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_logging(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayLogging,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.access_log {
        let mut object_176 = object.key("accessLog").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_gateway_access_log(
            &mut object_176,
            var_175,
        )?;
        object_176.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_service_discovery(
    object_116: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceDiscovery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ServiceDiscovery::Dns(inner) => {
            let mut object_177 = object_116.key("dns").start_object();
            crate::json_ser::serialize_structure_crate_model_dns_service_discovery(
                &mut object_177,
                inner,
            )?;
            object_177.finish();
        }
        crate::model::ServiceDiscovery::AwsCloudMap(inner) => {
            let mut object_178 = object_116.key("awsCloudMap").start_object();
            crate::json_ser::serialize_structure_crate_model_aws_cloud_map_service_discovery(
                &mut object_178,
                inner,
            )?;
            object_178.finish();
        }
        crate::model::ServiceDiscovery::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("ServiceDiscovery"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_listener(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Listener,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.port_mapping {
        let mut object_180 = object.key("portMapping").start_object();
        crate::json_ser::serialize_structure_crate_model_port_mapping(&mut object_180, var_179)?;
        object_180.finish();
    }
    if let Some(var_181) = &input.tls {
        let mut object_182 = object.key("tls").start_object();
        crate::json_ser::serialize_structure_crate_model_listener_tls(&mut object_182, var_181)?;
        object_182.finish();
    }
    if let Some(var_183) = &input.health_check {
        let mut object_184 = object.key("healthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_health_check_policy(
            &mut object_184,
            var_183,
        )?;
        object_184.finish();
    }
    if let Some(var_185) = &input.timeout {
        let mut object_186 = object.key("timeout").start_object();
        crate::json_ser::serialize_union_crate_model_listener_timeout(&mut object_186, var_185)?;
        object_186.finish();
    }
    if let Some(var_187) = &input.outlier_detection {
        let mut object_188 = object.key("outlierDetection").start_object();
        crate::json_ser::serialize_structure_crate_model_outlier_detection(
            &mut object_188,
            var_187,
        )?;
        object_188.finish();
    }
    if let Some(var_189) = &input.connection_pool {
        let mut object_190 = object.key("connectionPool").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_node_connection_pool(
            &mut object_190,
            var_189,
        )?;
        object_190.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_backend(
    object_124: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Backend,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::Backend::VirtualService(inner) => {
            let mut object_191 = object_124.key("virtualService").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_service_backend(
                &mut object_191,
                inner,
            )?;
            object_191.finish();
        }
        crate::model::Backend::Unknown => {
            return Err(aws_smithy_http::operation::SerializationError::unknown_variant("Backend"))
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_backend_defaults(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackendDefaults,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.client_policy {
        let mut object_193 = object.key("clientPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_client_policy(&mut object_193, var_192)?;
        object_193.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Logging,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.access_log {
        let mut object_195 = object.key("accessLog").start_object();
        crate::json_ser::serialize_union_crate_model_access_log(&mut object_195, var_194)?;
        object_195.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_router_listener(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualRouterListener,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.port_mapping {
        let mut object_197 = object.key("portMapping").start_object();
        crate::json_ser::serialize_structure_crate_model_port_mapping(&mut object_197, var_196)?;
        object_197.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_service_provider(
    object_134: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualServiceProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualServiceProvider::VirtualNode(inner) => {
            let mut object_198 = object_134.key("virtualNode").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_node_service_provider(
                &mut object_198,
                inner,
            )?;
            object_198.finish();
        }
        crate::model::VirtualServiceProvider::VirtualRouter(inner) => {
            let mut object_199 = object_134.key("virtualRouter").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_router_service_provider(
                &mut object_199,
                inner,
            )?;
            object_199.finish();
        }
        crate::model::VirtualServiceProvider::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualServiceProvider",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_gateway_route_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpGatewayRouteMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.prefix {
        object.key("prefix").string(var_200.as_str());
    }
    if let Some(var_201) = &input.path {
        let mut object_202 = object.key("path").start_object();
        crate::json_ser::serialize_structure_crate_model_http_path_match(&mut object_202, var_201)?;
        object_202.finish();
    }
    if let Some(var_203) = &input.query_parameters {
        let mut array_204 = object.key("queryParameters").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_query_parameter(
                    &mut object_206,
                    item_205,
                )?;
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.method {
        object.key("method").string(var_207.as_str());
    }
    if let Some(var_208) = &input.hostname {
        let mut object_209 = object.key("hostname").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_hostname_match(
            &mut object_209,
            var_208,
        )?;
        object_209.finish();
    }
    if let Some(var_210) = &input.headers {
        let mut array_211 = object.key("headers").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_gateway_route_header(
                    &mut object_213,
                    item_212,
                )?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_gateway_route_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpGatewayRouteAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.target {
        let mut object_215 = object.key("target").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_target(
            &mut object_215,
            var_214,
        )?;
        object_215.finish();
    }
    if let Some(var_216) = &input.rewrite {
        let mut object_217 = object.key("rewrite").start_object();
        crate::json_ser::serialize_structure_crate_model_http_gateway_route_rewrite(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_gateway_route_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcGatewayRouteMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.service_name {
        object.key("serviceName").string(var_218.as_str());
    }
    if let Some(var_219) = &input.hostname {
        let mut object_220 = object.key("hostname").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_hostname_match(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.metadata {
        let mut array_222 = object.key("metadata").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_grpc_gateway_route_metadata(
                    &mut object_224,
                    item_223,
                )?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_gateway_route_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcGatewayRouteAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.target {
        let mut object_226 = object.key("target").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_target(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    if let Some(var_227) = &input.rewrite {
        let mut object_228 = object.key("rewrite").start_object();
        crate::json_ser::serialize_structure_crate_model_grpc_gateway_route_rewrite(
            &mut object_228,
            var_227,
        )?;
        object_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_route_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpRouteMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.prefix {
        object.key("prefix").string(var_229.as_str());
    }
    if let Some(var_230) = &input.path {
        let mut object_231 = object.key("path").start_object();
        crate::json_ser::serialize_structure_crate_model_http_path_match(&mut object_231, var_230)?;
        object_231.finish();
    }
    if let Some(var_232) = &input.query_parameters {
        let mut array_233 = object.key("queryParameters").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_query_parameter(
                    &mut object_235,
                    item_234,
                )?;
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.method {
        object.key("method").string(var_236.as_str());
    }
    if let Some(var_237) = &input.scheme {
        object.key("scheme").string(var_237.as_str());
    }
    if let Some(var_238) = &input.headers {
        let mut array_239 = object.key("headers").start_array();
        for item_240 in var_238 {
            {
                let mut object_241 = array_239.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_route_header(
                    &mut object_241,
                    item_240,
                )?;
                object_241.finish();
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_route_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpRouteAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.weighted_targets {
        let mut array_243 = object.key("weightedTargets").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_weighted_target(
                    &mut object_245,
                    item_244,
                )?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_retry_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpRetryPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.per_retry_timeout {
        let mut object_247 = object.key("perRetryTimeout").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_247, var_246)?;
        object_247.finish();
    }
    if let Some(var_248) = &input.max_retries {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    if let Some(var_249) = &input.http_retry_events {
        let mut array_250 = object.key("httpRetryEvents").start_array();
        for item_251 in var_249 {
            {
                array_250.value().string(item_251.as_str());
            }
        }
        array_250.finish();
    }
    if let Some(var_252) = &input.tcp_retry_events {
        let mut array_253 = object.key("tcpRetryEvents").start_array();
        for item_254 in var_252 {
            {
                array_253.value().string(item_254.as_str());
            }
        }
        array_253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_timeout(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpTimeout,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.per_request {
        let mut object_256 = object.key("perRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_256, var_255)?;
        object_256.finish();
    }
    if let Some(var_257) = &input.idle {
        let mut object_258 = object.key("idle").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_258, var_257)?;
        object_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tcp_route_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TcpRouteAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.weighted_targets {
        let mut array_260 = object.key("weightedTargets").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_weighted_target(
                    &mut object_262,
                    item_261,
                )?;
                object_262.finish();
            }
        }
        array_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tcp_timeout(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TcpTimeout,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.idle {
        let mut object_264 = object.key("idle").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_264, var_263)?;
        object_264.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_route_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcRouteAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.weighted_targets {
        let mut array_266 = object.key("weightedTargets").start_array();
        for item_267 in var_265 {
            {
                let mut object_268 = array_266.value().start_object();
                crate::json_ser::serialize_structure_crate_model_weighted_target(
                    &mut object_268,
                    item_267,
                )?;
                object_268.finish();
            }
        }
        array_266.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_route_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcRouteMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.service_name {
        object.key("serviceName").string(var_269.as_str());
    }
    if let Some(var_270) = &input.method_name {
        object.key("methodName").string(var_270.as_str());
    }
    if let Some(var_271) = &input.metadata {
        let mut array_272 = object.key("metadata").start_array();
        for item_273 in var_271 {
            {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_grpc_route_metadata(
                    &mut object_274,
                    item_273,
                )?;
                object_274.finish();
            }
        }
        array_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_retry_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcRetryPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.per_retry_timeout {
        let mut object_276 = object.key("perRetryTimeout").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_276, var_275)?;
        object_276.finish();
    }
    if let Some(var_277) = &input.max_retries {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_277).into()),
        );
    }
    if let Some(var_278) = &input.http_retry_events {
        let mut array_279 = object.key("httpRetryEvents").start_array();
        for item_280 in var_278 {
            {
                array_279.value().string(item_280.as_str());
            }
        }
        array_279.finish();
    }
    if let Some(var_281) = &input.tcp_retry_events {
        let mut array_282 = object.key("tcpRetryEvents").start_array();
        for item_283 in var_281 {
            {
                array_282.value().string(item_283.as_str());
            }
        }
        array_282.finish();
    }
    if let Some(var_284) = &input.grpc_retry_events {
        let mut array_285 = object.key("grpcRetryEvents").start_array();
        for item_286 in var_284 {
            {
                array_285.value().string(item_286.as_str());
            }
        }
        array_285.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_timeout(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcTimeout,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.per_request {
        let mut object_288 = object.key("perRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_288, var_287)?;
        object_288.finish();
    }
    if let Some(var_289) = &input.idle {
        let mut object_290 = object.key("idle").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_290, var_289)?;
        object_290.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_client_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayClientPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.tls {
        let mut object_292 = object.key("tls").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_client_policy_tls(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_health_check_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayHealthCheckPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.timeout_millis {
        object.key("timeoutMillis").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_293).into()),
        );
    }
    if let Some(var_294) = &input.interval_millis {
        object.key("intervalMillis").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    if let Some(var_295) = &input.protocol {
        object.key("protocol").string(var_295.as_str());
    }
    if input.port != 0 {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_296) = &input.path {
        object.key("path").string(var_296.as_str());
    }
    {
        object.key("healthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.healthy_threshold).into()),
        );
    }
    {
        object.key("unhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.unhealthy_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_port_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayPortMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_297) = &input.protocol {
        object.key("protocol").string(var_297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_listener_tls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListenerTls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.mode {
        object.key("mode").string(var_298.as_str());
    }
    if let Some(var_299) = &input.validation {
        let mut object_300 = object.key("validation").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener_tls_validation_context(&mut object_300, var_299)?;
        object_300.finish();
    }
    if let Some(var_301) = &input.certificate {
        let mut object_302 = object.key("certificate").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_gateway_listener_tls_certificate(
            &mut object_302,
            var_301,
        )?;
        object_302.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_gateway_connection_pool(
    object_174: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualGatewayConnectionPool::Http(inner) => {
            let mut object_303 = object_174.key("http").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_http_connection_pool(
                &mut object_303,
                inner,
            )?;
            object_303.finish();
        }
        crate::model::VirtualGatewayConnectionPool::Http2(inner) => {
            let mut object_304 = object_174.key("http2").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_http2_connection_pool(
                &mut object_304,
                inner,
            )?;
            object_304.finish();
        }
        crate::model::VirtualGatewayConnectionPool::Grpc(inner) => {
            let mut object_305 = object_174.key("grpc").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_grpc_connection_pool(
                &mut object_305,
                inner,
            )?;
            object_305.finish();
        }
        crate::model::VirtualGatewayConnectionPool::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualGatewayConnectionPool",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_gateway_access_log(
    object_176: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayAccessLog,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualGatewayAccessLog::File(inner) => {
            let mut object_306 = object_176.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_file_access_log(
                &mut object_306,
                inner,
            )?;
            object_306.finish();
        }
        crate::model::VirtualGatewayAccessLog::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualGatewayAccessLog",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dns_service_discovery(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DnsServiceDiscovery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.hostname {
        object.key("hostname").string(var_307.as_str());
    }
    if let Some(var_308) = &input.response_type {
        object.key("responseType").string(var_308.as_str());
    }
    if let Some(var_309) = &input.ip_preference {
        object.key("ipPreference").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_map_service_discovery(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudMapServiceDiscovery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.namespace_name {
        object.key("namespaceName").string(var_310.as_str());
    }
    if let Some(var_311) = &input.service_name {
        object.key("serviceName").string(var_311.as_str());
    }
    if let Some(var_312) = &input.attributes {
        let mut array_313 = object.key("attributes").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_map_instance_attribute(
                    &mut object_315,
                    item_314,
                )?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    if let Some(var_316) = &input.ip_preference {
        object.key("ipPreference").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_317) = &input.protocol {
        object.key("protocol").string(var_317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_listener_tls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.mode {
        object.key("mode").string(var_318.as_str());
    }
    if let Some(var_319) = &input.certificate {
        let mut object_320 = object.key("certificate").start_object();
        crate::json_ser::serialize_union_crate_model_listener_tls_certificate(
            &mut object_320,
            var_319,
        )?;
        object_320.finish();
    }
    if let Some(var_321) = &input.validation {
        let mut object_322 = object.key("validation").start_object();
        crate::json_ser::serialize_structure_crate_model_listener_tls_validation_context(
            &mut object_322,
            var_321,
        )?;
        object_322.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_health_check_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HealthCheckPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.timeout_millis {
        object.key("timeoutMillis").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    if let Some(var_324) = &input.interval_millis {
        object.key("intervalMillis").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    if let Some(var_325) = &input.protocol {
        object.key("protocol").string(var_325.as_str());
    }
    if input.port != 0 {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_326) = &input.path {
        object.key("path").string(var_326.as_str());
    }
    {
        object.key("healthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.healthy_threshold).into()),
        );
    }
    {
        object.key("unhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.unhealthy_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_union_crate_model_listener_timeout(
    object_186: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTimeout,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ListenerTimeout::Tcp(inner) => {
            let mut object_327 = object_186.key("tcp").start_object();
            crate::json_ser::serialize_structure_crate_model_tcp_timeout(&mut object_327, inner)?;
            object_327.finish();
        }
        crate::model::ListenerTimeout::Http(inner) => {
            let mut object_328 = object_186.key("http").start_object();
            crate::json_ser::serialize_structure_crate_model_http_timeout(&mut object_328, inner)?;
            object_328.finish();
        }
        crate::model::ListenerTimeout::Http2(inner) => {
            let mut object_329 = object_186.key("http2").start_object();
            crate::json_ser::serialize_structure_crate_model_http_timeout(&mut object_329, inner)?;
            object_329.finish();
        }
        crate::model::ListenerTimeout::Grpc(inner) => {
            let mut object_330 = object_186.key("grpc").start_object();
            crate::json_ser::serialize_structure_crate_model_grpc_timeout(&mut object_330, inner)?;
            object_330.finish();
        }
        crate::model::ListenerTimeout::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("ListenerTimeout"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_outlier_detection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutlierDetection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.max_server_errors {
        object.key("maxServerErrors").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    if let Some(var_332) = &input.interval {
        let mut object_333 = object.key("interval").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_333, var_332)?;
        object_333.finish();
    }
    if let Some(var_334) = &input.base_ejection_duration {
        let mut object_335 = object.key("baseEjectionDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_335, var_334)?;
        object_335.finish();
    }
    if let Some(var_336) = &input.max_ejection_percent {
        object.key("maxEjectionPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_336).into()),
        );
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_node_connection_pool(
    object_190: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualNodeConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualNodeConnectionPool::Tcp(inner) => {
            let mut object_337 = object_190.key("tcp").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_node_tcp_connection_pool(
                &mut object_337,
                inner,
            )?;
            object_337.finish();
        }
        crate::model::VirtualNodeConnectionPool::Http(inner) => {
            let mut object_338 = object_190.key("http").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_node_http_connection_pool(
                &mut object_338,
                inner,
            )?;
            object_338.finish();
        }
        crate::model::VirtualNodeConnectionPool::Http2(inner) => {
            let mut object_339 = object_190.key("http2").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_node_http2_connection_pool(
                &mut object_339,
                inner,
            )?;
            object_339.finish();
        }
        crate::model::VirtualNodeConnectionPool::Grpc(inner) => {
            let mut object_340 = object_190.key("grpc").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_node_grpc_connection_pool(
                &mut object_340,
                inner,
            )?;
            object_340.finish();
        }
        crate::model::VirtualNodeConnectionPool::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualNodeConnectionPool",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_service_backend(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualServiceBackend,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.virtual_service_name {
        object.key("virtualServiceName").string(var_341.as_str());
    }
    if let Some(var_342) = &input.client_policy {
        let mut object_343 = object.key("clientPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_client_policy(&mut object_343, var_342)?;
        object_343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_client_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClientPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.tls {
        let mut object_345 = object.key("tls").start_object();
        crate::json_ser::serialize_structure_crate_model_client_policy_tls(
            &mut object_345,
            var_344,
        )?;
        object_345.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_access_log(
    object_195: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessLog,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::AccessLog::File(inner) => {
            let mut object_346 = object_195.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_file_access_log(
                &mut object_346,
                inner,
            )?;
            object_346.finish();
        }
        crate::model::AccessLog::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("AccessLog"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_node_service_provider(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualNodeServiceProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.virtual_node_name {
        object.key("virtualNodeName").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_router_service_provider(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualRouterServiceProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.virtual_router_name {
        object.key("virtualRouterName").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_path_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpPathMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.exact {
        object.key("exact").string(var_349.as_str());
    }
    if let Some(var_350) = &input.regex {
        object.key("regex").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_query_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpQueryParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.name {
        object.key("name").string(var_351.as_str());
    }
    if let Some(var_352) = &input.r#match {
        let mut object_353 = object.key("match").start_object();
        crate::json_ser::serialize_structure_crate_model_query_parameter_match(
            &mut object_353,
            var_352,
        )?;
        object_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gateway_route_hostname_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GatewayRouteHostnameMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.exact {
        object.key("exact").string(var_354.as_str());
    }
    if let Some(var_355) = &input.suffix {
        object.key("suffix").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_gateway_route_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpGatewayRouteHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.name {
        object.key("name").string(var_356.as_str());
    }
    if let Some(var_357) = &input.invert {
        object.key("invert").boolean(*var_357);
    }
    if let Some(var_358) = &input.r#match {
        let mut object_359 = object.key("match").start_object();
        crate::json_ser::serialize_union_crate_model_header_match_method(&mut object_359, var_358)?;
        object_359.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gateway_route_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GatewayRouteTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.virtual_service {
        let mut object_361 = object.key("virtualService").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_virtual_service(
            &mut object_361,
            var_360,
        )?;
        object_361.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_gateway_route_rewrite(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpGatewayRouteRewrite,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.prefix {
        let mut object_363 = object.key("prefix").start_object();
        crate::json_ser::serialize_structure_crate_model_http_gateway_route_prefix_rewrite(
            &mut object_363,
            var_362,
        )?;
        object_363.finish();
    }
    if let Some(var_364) = &input.path {
        let mut object_365 = object.key("path").start_object();
        crate::json_ser::serialize_structure_crate_model_http_gateway_route_path_rewrite(
            &mut object_365,
            var_364,
        )?;
        object_365.finish();
    }
    if let Some(var_366) = &input.hostname {
        let mut object_367 = object.key("hostname").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_hostname_rewrite(
            &mut object_367,
            var_366,
        )?;
        object_367.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_gateway_route_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcGatewayRouteMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.name {
        object.key("name").string(var_368.as_str());
    }
    if let Some(var_369) = &input.invert {
        object.key("invert").boolean(*var_369);
    }
    if let Some(var_370) = &input.r#match {
        let mut object_371 = object.key("match").start_object();
        crate::json_ser::serialize_union_crate_model_grpc_metadata_match_method(
            &mut object_371,
            var_370,
        )?;
        object_371.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_gateway_route_rewrite(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcGatewayRouteRewrite,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.hostname {
        let mut object_373 = object.key("hostname").start_object();
        crate::json_ser::serialize_structure_crate_model_gateway_route_hostname_rewrite(
            &mut object_373,
            var_372,
        )?;
        object_373.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_route_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpRouteHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.name {
        object.key("name").string(var_374.as_str());
    }
    if let Some(var_375) = &input.invert {
        object.key("invert").boolean(*var_375);
    }
    if let Some(var_376) = &input.r#match {
        let mut object_377 = object.key("match").start_object();
        crate::json_ser::serialize_union_crate_model_header_match_method(&mut object_377, var_376)?;
        object_377.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_weighted_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WeightedTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.virtual_node {
        object.key("virtualNode").string(var_378.as_str());
    }
    {
        object.key("weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Duration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.value {
        object.key("value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    if let Some(var_380) = &input.unit {
        object.key("unit").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grpc_route_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcRouteMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.name {
        object.key("name").string(var_381.as_str());
    }
    if let Some(var_382) = &input.invert {
        object.key("invert").boolean(*var_382);
    }
    if let Some(var_383) = &input.r#match {
        let mut object_384 = object.key("match").start_object();
        crate::json_ser::serialize_union_crate_model_grpc_route_metadata_match_method(
            &mut object_384,
            var_383,
        )?;
        object_384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_client_policy_tls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayClientPolicyTls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.enforce {
        object.key("enforce").boolean(*var_385);
    }
    if let Some(var_386) = &input.ports {
        let mut array_387 = object.key("ports").start_array();
        for item_388 in var_386 {
            {
                array_387.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_388).into()),
                );
            }
        }
        array_387.finish();
    }
    if let Some(var_389) = &input.certificate {
        let mut object_390 = object.key("certificate").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_gateway_client_tls_certificate(
            &mut object_390,
            var_389,
        )?;
        object_390.finish();
    }
    if let Some(var_391) = &input.validation {
        let mut object_392 = object.key("validation").start_object();
        crate::json_ser::serialize_structure_crate_model_virtual_gateway_tls_validation_context(
            &mut object_392,
            var_391,
        )?;
        object_392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_listener_tls_validation_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListenerTlsValidationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_393) = &input.trust {
        let mut object_394 = object.key("trust").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_gateway_listener_tls_validation_context_trust(&mut object_394, var_393)?;
        object_394.finish();
    }
    if let Some(var_395) = &input.subject_alternative_names {
        let mut object_396 = object.key("subjectAlternativeNames").start_object();
        crate::json_ser::serialize_structure_crate_model_subject_alternative_names(
            &mut object_396,
            var_395,
        )?;
        object_396.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_gateway_listener_tls_certificate(
    object_302: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListenerTlsCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualGatewayListenerTlsCertificate::Acm(inner) => {
            let mut object_397 = object_302.key("acm").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener_tls_acm_certificate(&mut object_397, inner)?;
            object_397.finish();
        }
        crate::model::VirtualGatewayListenerTlsCertificate::File(inner) => {
            let mut object_398 = object_302.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener_tls_file_certificate(&mut object_398, inner)?;
            object_398.finish();
        }
        crate::model::VirtualGatewayListenerTlsCertificate::Sds(inner) => {
            let mut object_399 = object_302.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener_tls_sds_certificate(&mut object_399, inner)?;
            object_399.finish();
        }
        crate::model::VirtualGatewayListenerTlsCertificate::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualGatewayListenerTlsCertificate",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_http_connection_pool(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayHttpConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("maxConnections").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_connections).into()),
        );
    }
    if let Some(var_400) = &input.max_pending_requests {
        object.key("maxPendingRequests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_http2_connection_pool(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayHttp2ConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("maxRequests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_requests).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_grpc_connection_pool(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayGrpcConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("maxRequests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_requests).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_file_access_log(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayFileAccessLog,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.path {
        object.key("path").string(var_401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_map_instance_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudMapInstanceAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.key {
        object.key("key").string(var_402.as_str());
    }
    if let Some(var_403) = &input.value {
        object.key("value").string(var_403.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_listener_tls_certificate(
    object_320: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTlsCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ListenerTlsCertificate::Acm(inner) => {
            let mut object_404 = object_320.key("acm").start_object();
            crate::json_ser::serialize_structure_crate_model_listener_tls_acm_certificate(
                &mut object_404,
                inner,
            )?;
            object_404.finish();
        }
        crate::model::ListenerTlsCertificate::File(inner) => {
            let mut object_405 = object_320.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_listener_tls_file_certificate(
                &mut object_405,
                inner,
            )?;
            object_405.finish();
        }
        crate::model::ListenerTlsCertificate::Sds(inner) => {
            let mut object_406 = object_320.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_listener_tls_sds_certificate(
                &mut object_406,
                inner,
            )?;
            object_406.finish();
        }
        crate::model::ListenerTlsCertificate::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ListenerTlsCertificate",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_listener_tls_validation_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTlsValidationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_407) = &input.trust {
        let mut object_408 = object.key("trust").start_object();
        crate::json_ser::serialize_union_crate_model_listener_tls_validation_context_trust(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.subject_alternative_names {
        let mut object_410 = object.key("subjectAlternativeNames").start_object();
        crate::json_ser::serialize_structure_crate_model_subject_alternative_names(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_node_tcp_connection_pool(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualNodeTcpConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("maxConnections").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_connections).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_node_http_connection_pool(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualNodeHttpConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("maxConnections").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_connections).into()),
        );
    }
    if let Some(var_411) = &input.max_pending_requests {
        object.key("maxPendingRequests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_node_http2_connection_pool(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualNodeHttp2ConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("maxRequests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_requests).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_node_grpc_connection_pool(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualNodeGrpcConnectionPool,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("maxRequests").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_requests).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_client_policy_tls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClientPolicyTls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.enforce {
        object.key("enforce").boolean(*var_412);
    }
    if let Some(var_413) = &input.ports {
        let mut array_414 = object.key("ports").start_array();
        for item_415 in var_413 {
            {
                array_414.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_415).into()),
                );
            }
        }
        array_414.finish();
    }
    if let Some(var_416) = &input.certificate {
        let mut object_417 = object.key("certificate").start_object();
        crate::json_ser::serialize_union_crate_model_client_tls_certificate(
            &mut object_417,
            var_416,
        )?;
        object_417.finish();
    }
    if let Some(var_418) = &input.validation {
        let mut object_419 = object.key("validation").start_object();
        crate::json_ser::serialize_structure_crate_model_tls_validation_context(
            &mut object_419,
            var_418,
        )?;
        object_419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_access_log(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileAccessLog,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.path {
        object.key("path").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_parameter_match(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryParameterMatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.exact {
        object.key("exact").string(var_421.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_header_match_method(
    object_359: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HeaderMatchMethod,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::HeaderMatchMethod::Exact(inner) => {
            object_359.key("exact").string(inner.as_str());
        }
        crate::model::HeaderMatchMethod::Regex(inner) => {
            object_359.key("regex").string(inner.as_str());
        }
        crate::model::HeaderMatchMethod::Range(inner) => {
            let mut object_422 = object_359.key("range").start_object();
            crate::json_ser::serialize_structure_crate_model_match_range(&mut object_422, inner)?;
            object_422.finish();
        }
        crate::model::HeaderMatchMethod::Prefix(inner) => {
            object_359.key("prefix").string(inner.as_str());
        }
        crate::model::HeaderMatchMethod::Suffix(inner) => {
            object_359.key("suffix").string(inner.as_str());
        }
        crate::model::HeaderMatchMethod::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "HeaderMatchMethod",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gateway_route_virtual_service(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GatewayRouteVirtualService,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.virtual_service_name {
        object.key("virtualServiceName").string(var_423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_gateway_route_prefix_rewrite(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpGatewayRoutePrefixRewrite,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_424) = &input.default_prefix {
        object.key("defaultPrefix").string(var_424.as_str());
    }
    if let Some(var_425) = &input.value {
        object.key("value").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_gateway_route_path_rewrite(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpGatewayRoutePathRewrite,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.exact {
        object.key("exact").string(var_426.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gateway_route_hostname_rewrite(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GatewayRouteHostnameRewrite,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.default_target_hostname {
        object.key("defaultTargetHostname").string(var_427.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_grpc_metadata_match_method(
    object_371: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcMetadataMatchMethod,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::GrpcMetadataMatchMethod::Exact(inner) => {
            object_371.key("exact").string(inner.as_str());
        }
        crate::model::GrpcMetadataMatchMethod::Regex(inner) => {
            object_371.key("regex").string(inner.as_str());
        }
        crate::model::GrpcMetadataMatchMethod::Range(inner) => {
            let mut object_428 = object_371.key("range").start_object();
            crate::json_ser::serialize_structure_crate_model_match_range(&mut object_428, inner)?;
            object_428.finish();
        }
        crate::model::GrpcMetadataMatchMethod::Prefix(inner) => {
            object_371.key("prefix").string(inner.as_str());
        }
        crate::model::GrpcMetadataMatchMethod::Suffix(inner) => {
            object_371.key("suffix").string(inner.as_str());
        }
        crate::model::GrpcMetadataMatchMethod::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "GrpcMetadataMatchMethod",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_union_crate_model_grpc_route_metadata_match_method(
    object_384: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrpcRouteMetadataMatchMethod,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::GrpcRouteMetadataMatchMethod::Exact(inner) => {
            object_384.key("exact").string(inner.as_str());
        }
        crate::model::GrpcRouteMetadataMatchMethod::Regex(inner) => {
            object_384.key("regex").string(inner.as_str());
        }
        crate::model::GrpcRouteMetadataMatchMethod::Range(inner) => {
            let mut object_429 = object_384.key("range").start_object();
            crate::json_ser::serialize_structure_crate_model_match_range(&mut object_429, inner)?;
            object_429.finish();
        }
        crate::model::GrpcRouteMetadataMatchMethod::Prefix(inner) => {
            object_384.key("prefix").string(inner.as_str());
        }
        crate::model::GrpcRouteMetadataMatchMethod::Suffix(inner) => {
            object_384.key("suffix").string(inner.as_str());
        }
        crate::model::GrpcRouteMetadataMatchMethod::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "GrpcRouteMetadataMatchMethod",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_gateway_client_tls_certificate(
    object_390: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayClientTlsCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualGatewayClientTlsCertificate::File(inner) => {
            let mut object_430 = object_390.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener_tls_file_certificate(&mut object_430, inner)?;
            object_430.finish();
        }
        crate::model::VirtualGatewayClientTlsCertificate::Sds(inner) => {
            let mut object_431 = object_390.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_listener_tls_sds_certificate(&mut object_431, inner)?;
            object_431.finish();
        }
        crate::model::VirtualGatewayClientTlsCertificate::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualGatewayClientTlsCertificate",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_tls_validation_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayTlsValidationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.trust {
        let mut object_433 = object.key("trust").start_object();
        crate::json_ser::serialize_union_crate_model_virtual_gateway_tls_validation_context_trust(
            &mut object_433,
            var_432,
        )?;
        object_433.finish();
    }
    if let Some(var_434) = &input.subject_alternative_names {
        let mut object_435 = object.key("subjectAlternativeNames").start_object();
        crate::json_ser::serialize_structure_crate_model_subject_alternative_names(
            &mut object_435,
            var_434,
        )?;
        object_435.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_gateway_listener_tls_validation_context_trust(
    object_394: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListenerTlsValidationContextTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualGatewayListenerTlsValidationContextTrust::File(inner) => {
            let mut object_436 = object_394.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_tls_validation_context_file_trust(&mut object_436, inner)?;
            object_436.finish();
        }
        crate::model::VirtualGatewayListenerTlsValidationContextTrust::Sds(inner) => {
            let mut object_437 = object_394.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_tls_validation_context_sds_trust(&mut object_437, inner)?;
            object_437.finish();
        }
        crate::model::VirtualGatewayListenerTlsValidationContextTrust::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualGatewayListenerTlsValidationContextTrust",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_subject_alternative_names(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SubjectAlternativeNames,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.r#match {
        let mut object_439 = object.key("match").start_object();
        crate::json_ser::serialize_structure_crate_model_subject_alternative_name_matchers(
            &mut object_439,
            var_438,
        )?;
        object_439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_listener_tls_acm_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListenerTlsAcmCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.certificate_arn {
        object.key("certificateArn").string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_listener_tls_file_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListenerTlsFileCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.certificate_chain {
        object.key("certificateChain").string(var_441.as_str());
    }
    if let Some(var_442) = &input.private_key {
        object.key("privateKey").string(var_442.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_listener_tls_sds_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayListenerTlsSdsCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.secret_name {
        object.key("secretName").string(var_443.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_listener_tls_acm_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTlsAcmCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.certificate_arn {
        object.key("certificateArn").string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_listener_tls_file_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTlsFileCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.certificate_chain {
        object.key("certificateChain").string(var_445.as_str());
    }
    if let Some(var_446) = &input.private_key {
        object.key("privateKey").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_listener_tls_sds_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTlsSdsCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.secret_name {
        object.key("secretName").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_listener_tls_validation_context_trust(
    object_408: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTlsValidationContextTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ListenerTlsValidationContextTrust::File(inner) => {
            let mut object_448 = object_408.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_tls_validation_context_file_trust(
                &mut object_448,
                inner,
            )?;
            object_448.finish();
        }
        crate::model::ListenerTlsValidationContextTrust::Sds(inner) => {
            let mut object_449 = object_408.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_tls_validation_context_sds_trust(
                &mut object_449,
                inner,
            )?;
            object_449.finish();
        }
        crate::model::ListenerTlsValidationContextTrust::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ListenerTlsValidationContextTrust",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_union_crate_model_client_tls_certificate(
    object_417: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClientTlsCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ClientTlsCertificate::File(inner) => {
            let mut object_450 = object_417.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_listener_tls_file_certificate(
                &mut object_450,
                inner,
            )?;
            object_450.finish();
        }
        crate::model::ClientTlsCertificate::Sds(inner) => {
            let mut object_451 = object_417.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_listener_tls_sds_certificate(
                &mut object_451,
                inner,
            )?;
            object_451.finish();
        }
        crate::model::ClientTlsCertificate::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ClientTlsCertificate",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tls_validation_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsValidationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.trust {
        let mut object_453 = object.key("trust").start_object();
        crate::json_ser::serialize_union_crate_model_tls_validation_context_trust(
            &mut object_453,
            var_452,
        )?;
        object_453.finish();
    }
    if let Some(var_454) = &input.subject_alternative_names {
        let mut object_455 = object.key("subjectAlternativeNames").start_object();
        crate::json_ser::serialize_structure_crate_model_subject_alternative_names(
            &mut object_455,
            var_454,
        )?;
        object_455.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_match_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MatchRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.start {
        object.key("start").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_456).into()),
        );
    }
    if let Some(var_457) = &input.end {
        object.key("end").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_457).into()),
        );
    }
    Ok(())
}

pub fn serialize_union_crate_model_virtual_gateway_tls_validation_context_trust(
    object_433: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayTlsValidationContextTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::VirtualGatewayTlsValidationContextTrust::Acm(inner) => {
            let mut object_458 = object_433.key("acm").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_tls_validation_context_acm_trust(&mut object_458, inner)?;
            object_458.finish();
        }
        crate::model::VirtualGatewayTlsValidationContextTrust::File(inner) => {
            let mut object_459 = object_433.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_tls_validation_context_file_trust(&mut object_459, inner)?;
            object_459.finish();
        }
        crate::model::VirtualGatewayTlsValidationContextTrust::Sds(inner) => {
            let mut object_460 = object_433.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_virtual_gateway_tls_validation_context_sds_trust(&mut object_460, inner)?;
            object_460.finish();
        }
        crate::model::VirtualGatewayTlsValidationContextTrust::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "VirtualGatewayTlsValidationContextTrust",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_tls_validation_context_file_trust(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayTlsValidationContextFileTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.certificate_chain {
        object.key("certificateChain").string(var_461.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_tls_validation_context_sds_trust(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayTlsValidationContextSdsTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.secret_name {
        object.key("secretName").string(var_462.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_subject_alternative_name_matchers(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SubjectAlternativeNameMatchers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.exact {
        let mut array_464 = object.key("exact").start_array();
        for item_465 in var_463 {
            {
                array_464.value().string(item_465.as_str());
            }
        }
        array_464.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tls_validation_context_file_trust(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsValidationContextFileTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.certificate_chain {
        object.key("certificateChain").string(var_466.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tls_validation_context_sds_trust(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsValidationContextSdsTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.secret_name {
        object.key("secretName").string(var_467.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_tls_validation_context_trust(
    object_453: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsValidationContextTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::TlsValidationContextTrust::Acm(inner) => {
            let mut object_468 = object_453.key("acm").start_object();
            crate::json_ser::serialize_structure_crate_model_tls_validation_context_acm_trust(
                &mut object_468,
                inner,
            )?;
            object_468.finish();
        }
        crate::model::TlsValidationContextTrust::File(inner) => {
            let mut object_469 = object_453.key("file").start_object();
            crate::json_ser::serialize_structure_crate_model_tls_validation_context_file_trust(
                &mut object_469,
                inner,
            )?;
            object_469.finish();
        }
        crate::model::TlsValidationContextTrust::Sds(inner) => {
            let mut object_470 = object_453.key("sds").start_object();
            crate::json_ser::serialize_structure_crate_model_tls_validation_context_sds_trust(
                &mut object_470,
                inner,
            )?;
            object_470.finish();
        }
        crate::model::TlsValidationContextTrust::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "TlsValidationContextTrust",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_virtual_gateway_tls_validation_context_acm_trust(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VirtualGatewayTlsValidationContextAcmTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.certificate_authority_arns {
        let mut array_472 = object.key("certificateAuthorityArns").start_array();
        for item_473 in var_471 {
            {
                array_472.value().string(item_473.as_str());
            }
        }
        array_472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tls_validation_context_acm_trust(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsValidationContextAcmTrust,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_474) = &input.certificate_authority_arns {
        let mut array_475 = object.key("certificateAuthorityArns").start_array();
        for item_476 in var_474 {
            {
                array_475.value().string(item_476.as_str());
            }
        }
        array_475.finish();
    }
    Ok(())
}
