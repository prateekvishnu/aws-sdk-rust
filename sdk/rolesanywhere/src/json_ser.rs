// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.duration_seconds {
        object.key("durationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.enabled {
        object.key("enabled").boolean(*var_2);
    }
    if let Some(var_3) = &input.managed_policy_arns {
        let mut array_4 = object.key("managedPolicyArns").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.require_instance_properties {
        object.key("requireInstanceProperties").boolean(*var_7);
    }
    if let Some(var_8) = &input.role_arns {
        let mut array_9 = object.key("roleArns").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.session_policy {
        object.key("sessionPolicy").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("tags").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trust_anchor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrustAnchorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.enabled {
        object.key("enabled").boolean(*var_16);
    }
    if let Some(var_17) = &input.name {
        object.key("name").string(var_17.as_str());
    }
    if let Some(var_18) = &input.source {
        let mut object_19 = object.key("source").start_object();
        crate::json_ser::serialize_structure_crate_model_source(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_crl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.crl_data {
        object
            .key("crlData")
            .string_unchecked(&aws_smithy_types::base64::encode(var_24));
    }
    if let Some(var_25) = &input.enabled {
        object.key("enabled").boolean(*var_25);
    }
    if let Some(var_26) = &input.name {
        object.key("name").string(var_26.as_str());
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.trust_anchor_arn {
        object.key("trustAnchorArn").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.resource_arn {
        object.key("resourceArn").string(var_32.as_str());
    }
    if let Some(var_33) = &input.tags {
        let mut array_34 = object.key("tags").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.resource_arn {
        object.key("resourceArn").string(var_37.as_str());
    }
    if let Some(var_38) = &input.tag_keys {
        let mut array_39 = object.key("tagKeys").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crl_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.crl_data {
        object
            .key("crlData")
            .string_unchecked(&aws_smithy_types::base64::encode(var_41));
    }
    if let Some(var_42) = &input.name {
        object.key("name").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.duration_seconds {
        object.key("durationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_43).into()),
        );
    }
    if let Some(var_44) = &input.managed_policy_arns {
        let mut array_45 = object.key("managedPolicyArns").start_array();
        for item_46 in var_44 {
            {
                array_45.value().string(item_46.as_str());
            }
        }
        array_45.finish();
    }
    if let Some(var_47) = &input.name {
        object.key("name").string(var_47.as_str());
    }
    if let Some(var_48) = &input.role_arns {
        let mut array_49 = object.key("roleArns").start_array();
        for item_50 in var_48 {
            {
                array_49.value().string(item_50.as_str());
            }
        }
        array_49.finish();
    }
    if let Some(var_51) = &input.session_policy {
        object.key("sessionPolicy").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trust_anchor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrustAnchorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.name {
        object.key("name").string(var_52.as_str());
    }
    if let Some(var_53) = &input.source {
        let mut object_54 = object.key("source").start_object();
        crate::json_ser::serialize_structure_crate_model_source(&mut object_54, var_53)?;
        object_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.key {
        object.key("key").string(var_55.as_str());
    }
    if let Some(var_56) = &input.value {
        object.key("value").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Source,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.source_type {
        object.key("sourceType").string(var_57.as_str());
    }
    if let Some(var_58) = &input.source_data {
        let mut object_59 = object.key("sourceData").start_object();
        crate::json_ser::serialize_union_crate_model_source_data(&mut object_59, var_58)?;
        object_59.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_source_data(
    object_59: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::SourceData::X509CertificateData(inner) => {
            object_59.key("x509CertificateData").string(inner.as_str());
        }
        crate::model::SourceData::AcmPcaArn(inner) => {
            object_59.key("acmPcaArn").string(inner.as_str());
        }
        crate::model::SourceData::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("SourceData"),
            )
        }
    }
    Ok(())
}
