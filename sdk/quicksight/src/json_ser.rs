// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_account_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccountCustomizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.account_customization {
        let mut object_2 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_account_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccountSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.account_name {
        object.key("AccountName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.active_directory_name {
        object.key("ActiveDirectoryName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.admin_group {
        let mut array_10 = object.key("AdminGroup").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.authentication_method {
        object.key("AuthenticationMethod").string(var_12.as_str());
    }
    if let Some(var_13) = &input.author_group {
        let mut array_14 = object.key("AuthorGroup").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.contact_number {
        object.key("ContactNumber").string(var_16.as_str());
    }
    if let Some(var_17) = &input.directory_id {
        object.key("DirectoryId").string(var_17.as_str());
    }
    if let Some(var_18) = &input.edition {
        object.key("Edition").string(var_18.as_str());
    }
    if let Some(var_19) = &input.email_address {
        object.key("EmailAddress").string(var_19.as_str());
    }
    if let Some(var_20) = &input.first_name {
        object.key("FirstName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.last_name {
        object.key("LastName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.notification_email {
        object.key("NotificationEmail").string(var_22.as_str());
    }
    if let Some(var_23) = &input.reader_group {
        let mut array_24 = object.key("ReaderGroup").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.realm {
        object.key("Realm").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnalysisInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27.as_str());
    }
    if let Some(var_28) = &input.parameters {
        let mut object_29 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.permissions {
        let mut array_31 = object.key("Permissions").start_array();
        for item_32 in var_30 {
            {
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_33,
                    item_32,
                )?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_34) = &input.source_entity {
        let mut object_35 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    if let Some(var_36) = &input.tags {
        let mut array_37 = object.key("Tags").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_39, item_38)?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.theme_arn {
        object.key("ThemeArn").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDashboardInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.dashboard_publish_options {
        let mut object_42 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_42,
            var_41,
        )?;
        object_42.finish();
    }
    if let Some(var_43) = &input.name {
        object.key("Name").string(var_43.as_str());
    }
    if let Some(var_44) = &input.parameters {
        let mut object_45 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_45, var_44)?;
        object_45.finish();
    }
    if let Some(var_46) = &input.permissions {
        let mut array_47 = object.key("Permissions").start_array();
        for item_48 in var_46 {
            {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_49,
                    item_48,
                )?;
                object_49.finish();
            }
        }
        array_47.finish();
    }
    if let Some(var_50) = &input.source_entity {
        let mut object_51 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_51,
            var_50,
        )?;
        object_51.finish();
    }
    if let Some(var_52) = &input.tags {
        let mut array_53 = object.key("Tags").start_array();
        for item_54 in var_52 {
            {
                let mut object_55 = array_53.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_55, item_54)?;
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.theme_arn {
        object.key("ThemeArn").string(var_56.as_str());
    }
    if let Some(var_57) = &input.version_description {
        object.key("VersionDescription").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.column_groups {
        let mut array_59 = object.key("ColumnGroups").start_array();
        for item_60 in var_58 {
            {
                let mut object_61 = array_59.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_61,
                    item_60,
                )?;
                object_61.finish();
            }
        }
        array_59.finish();
    }
    if let Some(var_62) = &input.column_level_permission_rules {
        let mut array_63 = object.key("ColumnLevelPermissionRules").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_65,
                    item_64,
                )?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.data_set_id {
        object.key("DataSetId").string(var_66.as_str());
    }
    if let Some(var_67) = &input.data_set_usage_configuration {
        let mut object_68 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_68,
            var_67,
        )?;
        object_68.finish();
    }
    if let Some(var_69) = &input.field_folders {
        let mut object_70 = object.key("FieldFolders").start_object();
        for (key_71, value_72) in var_69 {
            {
                let mut object_73 = object_70.key(key_71).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_73,
                    value_72,
                )?;
                object_73.finish();
            }
        }
        object_70.finish();
    }
    if let Some(var_74) = &input.import_mode {
        object.key("ImportMode").string(var_74.as_str());
    }
    if let Some(var_75) = &input.logical_table_map {
        let mut object_76 = object.key("LogicalTableMap").start_object();
        for (key_77, value_78) in var_75 {
            {
                let mut object_79 = object_76.key(key_77).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_79,
                    value_78,
                )?;
                object_79.finish();
            }
        }
        object_76.finish();
    }
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80.as_str());
    }
    if let Some(var_81) = &input.permissions {
        let mut array_82 = object.key("Permissions").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_84,
                    item_83,
                )?;
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.physical_table_map {
        let mut object_86 = object.key("PhysicalTableMap").start_object();
        for (key_87, value_88) in var_85 {
            {
                let mut object_89 = object_86.key(key_87).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_89,
                    value_88,
                )?;
                object_89.finish();
            }
        }
        object_86.finish();
    }
    if let Some(var_90) = &input.row_level_permission_data_set {
        let mut object_91 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    if let Some(var_92) = &input.row_level_permission_tag_configuration {
        let mut object_93 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_93,
            var_92,
        )?;
        object_93.finish();
    }
    if let Some(var_94) = &input.tags {
        let mut array_95 = object.key("Tags").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_97, item_96)?;
                object_97.finish();
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.credentials {
        let mut object_99 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_99,
            var_98,
        )?;
        object_99.finish();
    }
    if let Some(var_100) = &input.data_source_id {
        object.key("DataSourceId").string(var_100.as_str());
    }
    if let Some(var_101) = &input.data_source_parameters {
        let mut object_102 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(
            &mut object_102,
            var_101,
        )?;
        object_102.finish();
    }
    if let Some(var_103) = &input.name {
        object.key("Name").string(var_103.as_str());
    }
    if let Some(var_104) = &input.permissions {
        let mut array_105 = object.key("Permissions").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_107,
                    item_106,
                )?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.ssl_properties {
        let mut object_109 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_109, var_108)?;
        object_109.finish();
    }
    if let Some(var_110) = &input.tags {
        let mut array_111 = object.key("Tags").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_113, item_112)?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    if let Some(var_114) = &input.r#type {
        object.key("Type").string(var_114.as_str());
    }
    if let Some(var_115) = &input.vpc_connection_properties {
        let mut object_116 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_116,
            var_115,
        )?;
        object_116.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_folder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFolderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.folder_type {
        object.key("FolderType").string(var_117.as_str());
    }
    if let Some(var_118) = &input.name {
        object.key("Name").string(var_118.as_str());
    }
    if let Some(var_119) = &input.parent_folder_arn {
        object.key("ParentFolderArn").string(var_119.as_str());
    }
    if let Some(var_120) = &input.permissions {
        let mut array_121 = object.key("Permissions").start_array();
        for item_122 in var_120 {
            {
                let mut object_123 = array_121.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_123,
                    item_122,
                )?;
                object_123.finish();
            }
        }
        array_121.finish();
    }
    if let Some(var_124) = &input.tags {
        let mut array_125 = object.key("Tags").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_127, item_126)?;
                object_127.finish();
            }
        }
        array_125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.description {
        object.key("Description").string(var_128.as_str());
    }
    if let Some(var_129) = &input.group_name {
        object.key("GroupName").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_iam_policy_assignment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIamPolicyAssignmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.assignment_name {
        object.key("AssignmentName").string(var_130.as_str());
    }
    if let Some(var_131) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_131.as_str());
    }
    if let Some(var_132) = &input.identities {
        let mut object_133 = object.key("Identities").start_object();
        for (key_134, value_135) in var_132 {
            {
                let mut array_136 = object_133.key(key_134).start_array();
                for item_137 in value_135 {
                    {
                        array_136.value().string(item_137.as_str());
                    }
                }
                array_136.finish();
            }
        }
        object_133.finish();
    }
    if let Some(var_138) = &input.policy_arn {
        object.key("PolicyArn").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ingestion_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIngestionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.ingestion_type {
        object.key("IngestionType").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_namespace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.identity_store {
        object.key("IdentityStore").string(var_140.as_str());
    }
    if let Some(var_141) = &input.namespace {
        object.key("Namespace").string(var_141.as_str());
    }
    if let Some(var_142) = &input.tags {
        let mut array_143 = object.key("Tags").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_145, item_144)?;
                object_145.finish();
            }
        }
        array_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.name {
        object.key("Name").string(var_146.as_str());
    }
    if let Some(var_147) = &input.permissions {
        let mut array_148 = object.key("Permissions").start_array();
        for item_149 in var_147 {
            {
                let mut object_150 = array_148.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_150,
                    item_149,
                )?;
                object_150.finish();
            }
        }
        array_148.finish();
    }
    if let Some(var_151) = &input.source_entity {
        let mut object_152 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    if let Some(var_153) = &input.tags {
        let mut array_154 = object.key("Tags").start_array();
        for item_155 in var_153 {
            {
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_156, item_155)?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.version_description {
        object.key("VersionDescription").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_template_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_158).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_theme_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_159) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_159.as_str());
    }
    if let Some(var_160) = &input.configuration {
        let mut object_161 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_161,
            var_160,
        )?;
        object_161.finish();
    }
    if let Some(var_162) = &input.name {
        object.key("Name").string(var_162.as_str());
    }
    if let Some(var_163) = &input.permissions {
        let mut array_164 = object.key("Permissions").start_array();
        for item_165 in var_163 {
            {
                let mut object_166 = array_164.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_166,
                    item_165,
                )?;
                object_166.finish();
            }
        }
        array_164.finish();
    }
    if let Some(var_167) = &input.tags {
        let mut array_168 = object.key("Tags").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_170, item_169)?;
                object_170.finish();
            }
        }
        array_168.finish();
    }
    if let Some(var_171) = &input.version_description {
        object.key("VersionDescription").string(var_171.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_theme_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_embed_url_for_anonymous_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForAnonymousUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.allowed_domains {
        let mut array_174 = object.key("AllowedDomains").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175.as_str());
            }
        }
        array_174.finish();
    }
    if let Some(var_176) = &input.authorized_resource_arns {
        let mut array_177 = object.key("AuthorizedResourceArns").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178.as_str());
            }
        }
        array_177.finish();
    }
    if let Some(var_179) = &input.experience_configuration {
        let mut object_180 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(&mut object_180, var_179)?;
        object_180.finish();
    }
    if let Some(var_181) = &input.namespace {
        object.key("Namespace").string(var_181.as_str());
    }
    if let Some(var_182) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.session_tags {
        let mut array_184 = object.key("SessionTags").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_tag(
                    &mut object_186,
                    item_185,
                )?;
                object_186.finish();
            }
        }
        array_184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_embed_url_for_registered_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForRegisteredUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.allowed_domains {
        let mut array_188 = object.key("AllowedDomains").start_array();
        for item_189 in var_187 {
            {
                array_188.value().string(item_189.as_str());
            }
        }
        array_188.finish();
    }
    if let Some(var_190) = &input.experience_configuration {
        let mut object_191 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_embedding_experience_configuration(&mut object_191, var_190)?;
        object_191.finish();
    }
    if let Some(var_192) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.user_arn {
        object.key("UserArn").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_iam_policy_assignments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIamPolicyAssignmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.custom_federation_provider_url {
        object
            .key("CustomFederationProviderUrl")
            .string(var_195.as_str());
    }
    if let Some(var_196) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_196.as_str());
    }
    if let Some(var_197) = &input.email {
        object.key("Email").string(var_197.as_str());
    }
    if let Some(var_198) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_198.as_str());
    }
    if let Some(var_199) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.iam_arn {
        object.key("IamArn").string(var_200.as_str());
    }
    if let Some(var_201) = &input.identity_type {
        object.key("IdentityType").string(var_201.as_str());
    }
    if let Some(var_202) = &input.session_name {
        object.key("SessionName").string(var_202.as_str());
    }
    if let Some(var_203) = &input.user_name {
        object.key("UserName").string(var_203.as_str());
    }
    if let Some(var_204) = &input.user_role {
        object.key("UserRole").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_analyses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAnalysesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.filters {
        let mut array_206 = object.key("Filters").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_analysis_search_filter(
                    &mut object_208,
                    item_207,
                )?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_209).into()),
        );
    }
    if let Some(var_210) = &input.next_token {
        object.key("NextToken").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_dashboards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchDashboardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.filters {
        let mut array_212 = object.key("Filters").start_array();
        for item_213 in var_211 {
            {
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dashboard_search_filter(
                    &mut object_214,
                    item_213,
                )?;
                object_214.finish();
            }
        }
        array_212.finish();
    }
    if let Some(var_215) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    if let Some(var_216) = &input.next_token {
        object.key("NextToken").string(var_216.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_folders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFoldersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_217) = &input.filters {
        let mut array_218 = object.key("Filters").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_folder_search_filter(
                    &mut object_220,
                    item_219,
                )?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.next_token {
        object.key("NextToken").string(var_222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.filters {
        let mut array_224 = object.key("Filters").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group_search_filter(
                    &mut object_226,
                    item_225,
                )?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.tags {
        let mut array_228 = object.key("Tags").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_230, item_229)?;
                object_230.finish();
            }
        }
        array_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_account_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountCustomizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.account_customization {
        let mut object_232 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_232,
            var_231,
        )?;
        object_232.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_account_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.default_namespace {
        object.key("DefaultNamespace").string(var_233.as_str());
    }
    if let Some(var_234) = &input.notification_email {
        object.key("NotificationEmail").string(var_234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.name {
        object.key("Name").string(var_235.as_str());
    }
    if let Some(var_236) = &input.parameters {
        let mut object_237 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_237, var_236)?;
        object_237.finish();
    }
    if let Some(var_238) = &input.source_entity {
        let mut object_239 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    if let Some(var_240) = &input.theme_arn {
        object.key("ThemeArn").string(var_240.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_analysis_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.grant_permissions {
        let mut array_242 = object.key("GrantPermissions").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_244,
                    item_243,
                )?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.revoke_permissions {
        let mut array_246 = object.key("RevokePermissions").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_248,
                    item_247,
                )?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.dashboard_publish_options {
        let mut object_250 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    if let Some(var_251) = &input.name {
        object.key("Name").string(var_251.as_str());
    }
    if let Some(var_252) = &input.parameters {
        let mut object_253 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_253, var_252)?;
        object_253.finish();
    }
    if let Some(var_254) = &input.source_entity {
        let mut object_255 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_255,
            var_254,
        )?;
        object_255.finish();
    }
    if let Some(var_256) = &input.theme_arn {
        object.key("ThemeArn").string(var_256.as_str());
    }
    if let Some(var_257) = &input.version_description {
        object.key("VersionDescription").string(var_257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dashboard_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.grant_link_permissions {
        let mut array_259 = object.key("GrantLinkPermissions").start_array();
        for item_260 in var_258 {
            {
                let mut object_261 = array_259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_261,
                    item_260,
                )?;
                object_261.finish();
            }
        }
        array_259.finish();
    }
    if let Some(var_262) = &input.grant_permissions {
        let mut array_263 = object.key("GrantPermissions").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_265,
                    item_264,
                )?;
                object_265.finish();
            }
        }
        array_263.finish();
    }
    if let Some(var_266) = &input.revoke_link_permissions {
        let mut array_267 = object.key("RevokeLinkPermissions").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_269,
                    item_268,
                )?;
                object_269.finish();
            }
        }
        array_267.finish();
    }
    if let Some(var_270) = &input.revoke_permissions {
        let mut array_271 = object.key("RevokePermissions").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_273,
                    item_272,
                )?;
                object_273.finish();
            }
        }
        array_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.column_groups {
        let mut array_275 = object.key("ColumnGroups").start_array();
        for item_276 in var_274 {
            {
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_277,
                    item_276,
                )?;
                object_277.finish();
            }
        }
        array_275.finish();
    }
    if let Some(var_278) = &input.column_level_permission_rules {
        let mut array_279 = object.key("ColumnLevelPermissionRules").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_281,
                    item_280,
                )?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.data_set_usage_configuration {
        let mut object_283 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_283,
            var_282,
        )?;
        object_283.finish();
    }
    if let Some(var_284) = &input.field_folders {
        let mut object_285 = object.key("FieldFolders").start_object();
        for (key_286, value_287) in var_284 {
            {
                let mut object_288 = object_285.key(key_286).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_288,
                    value_287,
                )?;
                object_288.finish();
            }
        }
        object_285.finish();
    }
    if let Some(var_289) = &input.import_mode {
        object.key("ImportMode").string(var_289.as_str());
    }
    if let Some(var_290) = &input.logical_table_map {
        let mut object_291 = object.key("LogicalTableMap").start_object();
        for (key_292, value_293) in var_290 {
            {
                let mut object_294 = object_291.key(key_292).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_294,
                    value_293,
                )?;
                object_294.finish();
            }
        }
        object_291.finish();
    }
    if let Some(var_295) = &input.name {
        object.key("Name").string(var_295.as_str());
    }
    if let Some(var_296) = &input.physical_table_map {
        let mut object_297 = object.key("PhysicalTableMap").start_object();
        for (key_298, value_299) in var_296 {
            {
                let mut object_300 = object_297.key(key_298).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_300,
                    value_299,
                )?;
                object_300.finish();
            }
        }
        object_297.finish();
    }
    if let Some(var_301) = &input.row_level_permission_data_set {
        let mut object_302 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_302,
            var_301,
        )?;
        object_302.finish();
    }
    if let Some(var_303) = &input.row_level_permission_tag_configuration {
        let mut object_304 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_304,
            var_303,
        )?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_set_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.grant_permissions {
        let mut array_306 = object.key("GrantPermissions").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_308,
                    item_307,
                )?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.revoke_permissions {
        let mut array_310 = object.key("RevokePermissions").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_312,
                    item_311,
                )?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.credentials {
        let mut object_314 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_314,
            var_313,
        )?;
        object_314.finish();
    }
    if let Some(var_315) = &input.data_source_parameters {
        let mut object_316 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.name {
        object.key("Name").string(var_317.as_str());
    }
    if let Some(var_318) = &input.ssl_properties {
        let mut object_319 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_319, var_318)?;
        object_319.finish();
    }
    if let Some(var_320) = &input.vpc_connection_properties {
        let mut object_321 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_321,
            var_320,
        )?;
        object_321.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourcePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.grant_permissions {
        let mut array_323 = object.key("GrantPermissions").start_array();
        for item_324 in var_322 {
            {
                let mut object_325 = array_323.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_325,
                    item_324,
                )?;
                object_325.finish();
            }
        }
        array_323.finish();
    }
    if let Some(var_326) = &input.revoke_permissions {
        let mut array_327 = object.key("RevokePermissions").start_array();
        for item_328 in var_326 {
            {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_329,
                    item_328,
                )?;
                object_329.finish();
            }
        }
        array_327.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_folder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.name {
        object.key("Name").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_folder_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.grant_permissions {
        let mut array_332 = object.key("GrantPermissions").start_array();
        for item_333 in var_331 {
            {
                let mut object_334 = array_332.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_334,
                    item_333,
                )?;
                object_334.finish();
            }
        }
        array_332.finish();
    }
    if let Some(var_335) = &input.revoke_permissions {
        let mut array_336 = object.key("RevokePermissions").start_array();
        for item_337 in var_335 {
            {
                let mut object_338 = array_336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_338,
                    item_337,
                )?;
                object_338.finish();
            }
        }
        array_336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.description {
        object.key("Description").string(var_339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_iam_policy_assignment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIamPolicyAssignmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_340.as_str());
    }
    if let Some(var_341) = &input.identities {
        let mut object_342 = object.key("Identities").start_object();
        for (key_343, value_344) in var_341 {
            {
                let mut array_345 = object_342.key(key_343).start_array();
                for item_346 in value_344 {
                    {
                        array_345.value().string(item_346.as_str());
                    }
                }
                array_345.finish();
            }
        }
        object_342.finish();
    }
    if let Some(var_347) = &input.policy_arn {
        object.key("PolicyArn").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ip_restriction_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpRestrictionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.enabled {
        object.key("Enabled").boolean(*var_348);
    }
    if let Some(var_349) = &input.ip_restriction_rule_map {
        let mut object_350 = object.key("IpRestrictionRuleMap").start_object();
        for (key_351, value_352) in var_349 {
            {
                object_350.key(key_351).string(value_352.as_str());
            }
        }
        object_350.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_public_sharing_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePublicSharingSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.public_sharing_enabled {
        object
            .key("PublicSharingEnabled")
            .boolean(input.public_sharing_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.name {
        object.key("Name").string(var_353.as_str());
    }
    if let Some(var_354) = &input.source_entity {
        let mut object_355 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_355,
            var_354,
        )?;
        object_355.finish();
    }
    if let Some(var_356) = &input.version_description {
        object.key("VersionDescription").string(var_356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_template_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_template_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplatePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.grant_permissions {
        let mut array_359 = object.key("GrantPermissions").start_array();
        for item_360 in var_358 {
            {
                let mut object_361 = array_359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_361,
                    item_360,
                )?;
                object_361.finish();
            }
        }
        array_359.finish();
    }
    if let Some(var_362) = &input.revoke_permissions {
        let mut array_363 = object.key("RevokePermissions").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_365,
                    item_364,
                )?;
                object_365.finish();
            }
        }
        array_363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_theme_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_366.as_str());
    }
    if let Some(var_367) = &input.configuration {
        let mut object_368 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_368,
            var_367,
        )?;
        object_368.finish();
    }
    if let Some(var_369) = &input.name {
        object.key("Name").string(var_369.as_str());
    }
    if let Some(var_370) = &input.version_description {
        object.key("VersionDescription").string(var_370.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_theme_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_371).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_theme_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.grant_permissions {
        let mut array_373 = object.key("GrantPermissions").start_array();
        for item_374 in var_372 {
            {
                let mut object_375 = array_373.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_375,
                    item_374,
                )?;
                object_375.finish();
            }
        }
        array_373.finish();
    }
    if let Some(var_376) = &input.revoke_permissions {
        let mut array_377 = object.key("RevokePermissions").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_379,
                    item_378,
                )?;
                object_379.finish();
            }
        }
        array_377.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.custom_federation_provider_url {
        object
            .key("CustomFederationProviderUrl")
            .string(var_380.as_str());
    }
    if let Some(var_381) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_381.as_str());
    }
    if let Some(var_382) = &input.email {
        object.key("Email").string(var_382.as_str());
    }
    if let Some(var_383) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_383.as_str());
    }
    if let Some(var_384) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_384.as_str());
    }
    if let Some(var_385) = &input.role {
        object.key("Role").string(var_385.as_str());
    }
    if input.unapply_custom_permissions {
        object
            .key("UnapplyCustomPermissions")
            .boolean(input.unapply_custom_permissions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_customization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountCustomization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.default_theme {
        object.key("DefaultTheme").string(var_386.as_str());
    }
    if let Some(var_387) = &input.default_email_customization_template {
        object
            .key("DefaultEmailCustomizationTemplate")
            .string(var_387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.key {
        object.key("Key").string(var_388.as_str());
    }
    if let Some(var_389) = &input.value {
        object.key("Value").string(var_389.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.string_parameters {
        let mut array_391 = object.key("StringParameters").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_parameter(
                    &mut object_393,
                    item_392,
                )?;
                object_393.finish();
            }
        }
        array_391.finish();
    }
    if let Some(var_394) = &input.integer_parameters {
        let mut array_395 = object.key("IntegerParameters").start_array();
        for item_396 in var_394 {
            {
                let mut object_397 = array_395.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter(
                    &mut object_397,
                    item_396,
                )?;
                object_397.finish();
            }
        }
        array_395.finish();
    }
    if let Some(var_398) = &input.decimal_parameters {
        let mut array_399 = object.key("DecimalParameters").start_array();
        for item_400 in var_398 {
            {
                let mut object_401 = array_399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_decimal_parameter(
                    &mut object_401,
                    item_400,
                )?;
                object_401.finish();
            }
        }
        array_399.finish();
    }
    if let Some(var_402) = &input.date_time_parameters {
        let mut array_403 = object.key("DateTimeParameters").start_array();
        for item_404 in var_402 {
            {
                let mut object_405 = array_403.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_time_parameter(
                    &mut object_405,
                    item_404,
                )?;
                object_405.finish();
            }
        }
        array_403.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_permission(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourcePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.principal {
        object.key("Principal").string(var_406.as_str());
    }
    if let Some(var_407) = &input.actions {
        let mut array_408 = object.key("Actions").start_array();
        for item_409 in var_407 {
            {
                array_408.value().string(item_409.as_str());
            }
        }
        array_408.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analysis_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceEntity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_410) = &input.source_template {
        let mut object_411 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_template(
            &mut object_411,
            var_410,
        )?;
        object_411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_publish_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardPublishOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.ad_hoc_filtering_option {
        let mut object_413 = object.key("AdHocFilteringOption").start_object();
        crate::json_ser::serialize_structure_crate_model_ad_hoc_filtering_option(
            &mut object_413,
            var_412,
        )?;
        object_413.finish();
    }
    if let Some(var_414) = &input.export_to_csv_option {
        let mut object_415 = object.key("ExportToCSVOption").start_object();
        crate::json_ser::serialize_structure_crate_model_export_to_csv_option(
            &mut object_415,
            var_414,
        )?;
        object_415.finish();
    }
    if let Some(var_416) = &input.sheet_controls_option {
        let mut object_417 = object.key("SheetControlsOption").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_controls_option(
            &mut object_417,
            var_416,
        )?;
        object_417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceEntity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.source_template {
        let mut object_419 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_template(
            &mut object_419,
            var_418,
        )?;
        object_419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.geo_spatial_column_group {
        let mut object_421 = object.key("GeoSpatialColumnGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_spatial_column_group(
            &mut object_421,
            var_420,
        )?;
        object_421.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_level_permission_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnLevelPermissionRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.principals {
        let mut array_423 = object.key("Principals").start_array();
        for item_424 in var_422 {
            {
                array_423.value().string(item_424.as_str());
            }
        }
        array_423.finish();
    }
    if let Some(var_425) = &input.column_names {
        let mut array_426 = object.key("ColumnNames").start_array();
        for item_427 in var_425 {
            {
                array_426.value().string(item_427.as_str());
            }
        }
        array_426.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_set_usage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetUsageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.disable_use_as_direct_query_source {
        object
            .key("DisableUseAsDirectQuerySource")
            .boolean(input.disable_use_as_direct_query_source);
    }
    if input.disable_use_as_imported_source {
        object
            .key("DisableUseAsImportedSource")
            .boolean(input.disable_use_as_imported_source);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field_folder(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldFolder,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.description {
        object.key("description").string(var_428.as_str());
    }
    if let Some(var_429) = &input.columns {
        let mut array_430 = object.key("columns").start_array();
        for item_431 in var_429 {
            {
                array_430.value().string(item_431.as_str());
            }
        }
        array_430.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logical_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.alias {
        object.key("Alias").string(var_432.as_str());
    }
    if let Some(var_433) = &input.data_transforms {
        let mut array_434 = object.key("DataTransforms").start_array();
        for item_435 in var_433 {
            {
                let mut object_436 = array_434.value().start_object();
                crate::json_ser::serialize_union_crate_model_transform_operation(
                    &mut object_436,
                    item_435,
                )?;
                object_436.finish();
            }
        }
        array_434.finish();
    }
    if let Some(var_437) = &input.source {
        let mut object_438 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_logical_table_source(
            &mut object_438,
            var_437,
        )?;
        object_438.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_physical_table(
    object_89: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::PhysicalTable::RelationalTable(inner) => {
            let mut object_439 = object_89.key("RelationalTable").start_object();
            crate::json_ser::serialize_structure_crate_model_relational_table(
                &mut object_439,
                inner,
            )?;
            object_439.finish();
        }
        crate::model::PhysicalTable::CustomSql(inner) => {
            let mut object_440 = object_89.key("CustomSql").start_object();
            crate::json_ser::serialize_structure_crate_model_custom_sql(&mut object_440, inner)?;
            object_440.finish();
        }
        crate::model::PhysicalTable::S3Source(inner) => {
            let mut object_441 = object_89.key("S3Source").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_source(&mut object_441, inner)?;
            object_441.finish();
        }
        crate::model::PhysicalTable::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("PhysicalTable"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_row_level_permission_data_set(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionDataSet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.namespace {
        object.key("Namespace").string(var_442.as_str());
    }
    if let Some(var_443) = &input.arn {
        object.key("Arn").string(var_443.as_str());
    }
    if let Some(var_444) = &input.permission_policy {
        object.key("PermissionPolicy").string(var_444.as_str());
    }
    if let Some(var_445) = &input.format_version {
        object.key("FormatVersion").string(var_445.as_str());
    }
    if let Some(var_446) = &input.status {
        object.key("Status").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_row_level_permission_tag_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.status {
        object.key("Status").string(var_447.as_str());
    }
    if let Some(var_448) = &input.tag_rules {
        let mut array_449 = object.key("TagRules").start_array();
        for item_450 in var_448 {
            {
                let mut object_451 = array_449.value().start_object();
                crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_rule(
                    &mut object_451,
                    item_450,
                )?;
                object_451.finish();
            }
        }
        array_449.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.credential_pair {
        let mut object_453 = object.key("CredentialPair").start_object();
        crate::json_ser::serialize_structure_crate_model_credential_pair(&mut object_453, var_452)?;
        object_453.finish();
    }
    if let Some(var_454) = &input.copy_source_arn {
        object.key("CopySourceArn").string(var_454.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_data_source_parameters(
    object_102: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::DataSourceParameters::AmazonElasticsearchParameters(inner) => {
            let mut object_455 = object_102
                .key("AmazonElasticsearchParameters")
                .start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_elasticsearch_parameters(
                &mut object_455,
                inner,
            )?;
            object_455.finish();
        }
        crate::model::DataSourceParameters::AthenaParameters(inner) => {
            let mut object_456 = object_102.key("AthenaParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_athena_parameters(
                &mut object_456,
                inner,
            )?;
            object_456.finish();
        }
        crate::model::DataSourceParameters::AuroraParameters(inner) => {
            let mut object_457 = object_102.key("AuroraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_parameters(
                &mut object_457,
                inner,
            )?;
            object_457.finish();
        }
        crate::model::DataSourceParameters::AuroraPostgreSqlParameters(inner) => {
            let mut object_458 = object_102.key("AuroraPostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_postgre_sql_parameters(
                &mut object_458,
                inner,
            )?;
            object_458.finish();
        }
        crate::model::DataSourceParameters::AwsIotAnalyticsParameters(inner) => {
            let mut object_459 = object_102.key("AwsIotAnalyticsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aws_iot_analytics_parameters(
                &mut object_459,
                inner,
            )?;
            object_459.finish();
        }
        crate::model::DataSourceParameters::JiraParameters(inner) => {
            let mut object_460 = object_102.key("JiraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_jira_parameters(
                &mut object_460,
                inner,
            )?;
            object_460.finish();
        }
        crate::model::DataSourceParameters::MariaDbParameters(inner) => {
            let mut object_461 = object_102.key("MariaDbParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_maria_db_parameters(
                &mut object_461,
                inner,
            )?;
            object_461.finish();
        }
        crate::model::DataSourceParameters::MySqlParameters(inner) => {
            let mut object_462 = object_102.key("MySqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_my_sql_parameters(
                &mut object_462,
                inner,
            )?;
            object_462.finish();
        }
        crate::model::DataSourceParameters::OracleParameters(inner) => {
            let mut object_463 = object_102.key("OracleParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_oracle_parameters(
                &mut object_463,
                inner,
            )?;
            object_463.finish();
        }
        crate::model::DataSourceParameters::PostgreSqlParameters(inner) => {
            let mut object_464 = object_102.key("PostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_postgre_sql_parameters(
                &mut object_464,
                inner,
            )?;
            object_464.finish();
        }
        crate::model::DataSourceParameters::PrestoParameters(inner) => {
            let mut object_465 = object_102.key("PrestoParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_presto_parameters(
                &mut object_465,
                inner,
            )?;
            object_465.finish();
        }
        crate::model::DataSourceParameters::RdsParameters(inner) => {
            let mut object_466 = object_102.key("RdsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_rds_parameters(
                &mut object_466,
                inner,
            )?;
            object_466.finish();
        }
        crate::model::DataSourceParameters::RedshiftParameters(inner) => {
            let mut object_467 = object_102.key("RedshiftParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_redshift_parameters(
                &mut object_467,
                inner,
            )?;
            object_467.finish();
        }
        crate::model::DataSourceParameters::S3Parameters(inner) => {
            let mut object_468 = object_102.key("S3Parameters").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_parameters(&mut object_468, inner)?;
            object_468.finish();
        }
        crate::model::DataSourceParameters::ServiceNowParameters(inner) => {
            let mut object_469 = object_102.key("ServiceNowParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_service_now_parameters(
                &mut object_469,
                inner,
            )?;
            object_469.finish();
        }
        crate::model::DataSourceParameters::SnowflakeParameters(inner) => {
            let mut object_470 = object_102.key("SnowflakeParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_snowflake_parameters(
                &mut object_470,
                inner,
            )?;
            object_470.finish();
        }
        crate::model::DataSourceParameters::SparkParameters(inner) => {
            let mut object_471 = object_102.key("SparkParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_spark_parameters(
                &mut object_471,
                inner,
            )?;
            object_471.finish();
        }
        crate::model::DataSourceParameters::SqlServerParameters(inner) => {
            let mut object_472 = object_102.key("SqlServerParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_sql_server_parameters(
                &mut object_472,
                inner,
            )?;
            object_472.finish();
        }
        crate::model::DataSourceParameters::TeradataParameters(inner) => {
            let mut object_473 = object_102.key("TeradataParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_teradata_parameters(
                &mut object_473,
                inner,
            )?;
            object_473.finish();
        }
        crate::model::DataSourceParameters::TwitterParameters(inner) => {
            let mut object_474 = object_102.key("TwitterParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_twitter_parameters(
                &mut object_474,
                inner,
            )?;
            object_474.finish();
        }
        crate::model::DataSourceParameters::AmazonOpenSearchParameters(inner) => {
            let mut object_475 = object_102.key("AmazonOpenSearchParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_open_search_parameters(
                &mut object_475,
                inner,
            )?;
            object_475.finish();
        }
        crate::model::DataSourceParameters::ExasolParameters(inner) => {
            let mut object_476 = object_102.key("ExasolParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_exasol_parameters(
                &mut object_476,
                inner,
            )?;
            object_476.finish();
        }
        crate::model::DataSourceParameters::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "DataSourceParameters",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssl_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SslProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.disable_ssl {
        object.key("DisableSsl").boolean(input.disable_ssl);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_connection_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConnectionProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.vpc_connection_arn {
        object.key("VpcConnectionArn").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceEntity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.source_analysis {
        let mut object_479 = object.key("SourceAnalysis").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_analysis(
            &mut object_479,
            var_478,
        )?;
        object_479.finish();
    }
    if let Some(var_480) = &input.source_template {
        let mut object_481 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_template(
            &mut object_481,
            var_480,
        )?;
        object_481.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_theme_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThemeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_482) = &input.data_color_palette {
        let mut object_483 = object.key("DataColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_data_color_palette(
            &mut object_483,
            var_482,
        )?;
        object_483.finish();
    }
    if let Some(var_484) = &input.ui_color_palette {
        let mut object_485 = object.key("UIColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_color_palette(
            &mut object_485,
            var_484,
        )?;
        object_485.finish();
    }
    if let Some(var_486) = &input.sheet {
        let mut object_487 = object.key("Sheet").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_style(&mut object_487, var_486)?;
        object_487.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserEmbeddingExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.dashboard {
        let mut object_489 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(&mut object_489, var_488)?;
        object_489.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_490) = &input.key {
        object.key("Key").string(var_490.as_str());
    }
    if let Some(var_491) = &input.value {
        object.key("Value").string(var_491.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_embedding_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserEmbeddingExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_492) = &input.dashboard {
        let mut object_493 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(&mut object_493, var_492)?;
        object_493.finish();
    }
    if let Some(var_494) = &input.quick_sight_console {
        let mut object_495 = object.key("QuickSightConsole").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(&mut object_495, var_494)?;
        object_495.finish();
    }
    if let Some(var_496) = &input.q_search_bar {
        let mut object_497 = object.key("QSearchBar").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_q_search_bar_embedding_configuration(&mut object_497, var_496)?;
        object_497.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analysis_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_498) = &input.operator {
        object.key("Operator").string(var_498.as_str());
    }
    if let Some(var_499) = &input.name {
        object.key("Name").string(var_499.as_str());
    }
    if let Some(var_500) = &input.value {
        object.key("Value").string(var_500.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.operator {
        object.key("Operator").string(var_501.as_str());
    }
    if let Some(var_502) = &input.name {
        object.key("Name").string(var_502.as_str());
    }
    if let Some(var_503) = &input.value {
        object.key("Value").string(var_503.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_folder_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FolderSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.operator {
        object.key("Operator").string(var_504.as_str());
    }
    if let Some(var_505) = &input.name {
        object.key("Name").string(var_505.as_str());
    }
    if let Some(var_506) = &input.value {
        object.key("Value").string(var_506.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.operator {
        object.key("Operator").string(var_507.as_str());
    }
    if let Some(var_508) = &input.name {
        object.key("Name").string(var_508.as_str());
    }
    if let Some(var_509) = &input.value {
        object.key("Value").string(var_509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.name {
        object.key("Name").string(var_510.as_str());
    }
    if let Some(var_511) = &input.values {
        let mut array_512 = object.key("Values").start_array();
        for item_513 in var_511 {
            {
                array_512.value().string(item_513.as_str());
            }
        }
        array_512.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_514) = &input.name {
        object.key("Name").string(var_514.as_str());
    }
    if let Some(var_515) = &input.values {
        let mut array_516 = object.key("Values").start_array();
        for item_517 in var_515 {
            {
                array_516.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_517).into()),
                );
            }
        }
        array_516.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_518) = &input.name {
        object.key("Name").string(var_518.as_str());
    }
    if let Some(var_519) = &input.values {
        let mut array_520 = object.key("Values").start_array();
        for item_521 in var_519 {
            {
                array_520.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_521).into()),
                );
            }
        }
        array_520.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_time_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateTimeParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.name {
        object.key("Name").string(var_522.as_str());
    }
    if let Some(var_523) = &input.values {
        let mut array_524 = object.key("Values").start_array();
        for item_525 in var_523 {
            {
                array_524
                    .value()
                    .date_time(item_525, aws_smithy_types::date_time::Format::EpochSeconds)?;
            }
        }
        array_524.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analysis_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_526) = &input.data_set_references {
        let mut array_527 = object.key("DataSetReferences").start_array();
        for item_528 in var_526 {
            {
                let mut object_529 = array_527.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_529,
                    item_528,
                )?;
                object_529.finish();
            }
        }
        array_527.finish();
    }
    if let Some(var_530) = &input.arn {
        object.key("Arn").string(var_530.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ad_hoc_filtering_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdHocFilteringOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_531) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_531.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_to_csv_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportToCsvOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_532) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_532.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sheet_controls_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetControlsOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_533) = &input.visibility_state {
        object.key("VisibilityState").string(var_533.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_534) = &input.data_set_references {
        let mut array_535 = object.key("DataSetReferences").start_array();
        for item_536 in var_534 {
            {
                let mut object_537 = array_535.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_537,
                    item_536,
                )?;
                object_537.finish();
            }
        }
        array_535.finish();
    }
    if let Some(var_538) = &input.arn {
        object.key("Arn").string(var_538.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_geo_spatial_column_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoSpatialColumnGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_539) = &input.name {
        object.key("Name").string(var_539.as_str());
    }
    if let Some(var_540) = &input.country_code {
        object.key("CountryCode").string(var_540.as_str());
    }
    if let Some(var_541) = &input.columns {
        let mut array_542 = object.key("Columns").start_array();
        for item_543 in var_541 {
            {
                array_542.value().string(item_543.as_str());
            }
        }
        array_542.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_transform_operation(
    object_436: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::TransformOperation::ProjectOperation(inner) => {
            let mut object_544 = object_436.key("ProjectOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_project_operation(
                &mut object_544,
                inner,
            )?;
            object_544.finish();
        }
        crate::model::TransformOperation::FilterOperation(inner) => {
            let mut object_545 = object_436.key("FilterOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_filter_operation(
                &mut object_545,
                inner,
            )?;
            object_545.finish();
        }
        crate::model::TransformOperation::CreateColumnsOperation(inner) => {
            let mut object_546 = object_436.key("CreateColumnsOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_create_columns_operation(
                &mut object_546,
                inner,
            )?;
            object_546.finish();
        }
        crate::model::TransformOperation::RenameColumnOperation(inner) => {
            let mut object_547 = object_436.key("RenameColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_rename_column_operation(
                &mut object_547,
                inner,
            )?;
            object_547.finish();
        }
        crate::model::TransformOperation::CastColumnTypeOperation(inner) => {
            let mut object_548 = object_436.key("CastColumnTypeOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_cast_column_type_operation(
                &mut object_548,
                inner,
            )?;
            object_548.finish();
        }
        crate::model::TransformOperation::TagColumnOperation(inner) => {
            let mut object_549 = object_436.key("TagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_tag_column_operation(
                &mut object_549,
                inner,
            )?;
            object_549.finish();
        }
        crate::model::TransformOperation::UntagColumnOperation(inner) => {
            let mut object_550 = object_436.key("UntagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_untag_column_operation(
                &mut object_550,
                inner,
            )?;
            object_550.finish();
        }
        crate::model::TransformOperation::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "TransformOperation",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logical_table_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTableSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.join_instruction {
        let mut object_552 = object.key("JoinInstruction").start_object();
        crate::json_ser::serialize_structure_crate_model_join_instruction(
            &mut object_552,
            var_551,
        )?;
        object_552.finish();
    }
    if let Some(var_553) = &input.physical_table_id {
        object.key("PhysicalTableId").string(var_553.as_str());
    }
    if let Some(var_554) = &input.data_set_arn {
        object.key("DataSetArn").string(var_554.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_555) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_555.as_str());
    }
    if let Some(var_556) = &input.catalog {
        object.key("Catalog").string(var_556.as_str());
    }
    if let Some(var_557) = &input.schema {
        object.key("Schema").string(var_557.as_str());
    }
    if let Some(var_558) = &input.name {
        object.key("Name").string(var_558.as_str());
    }
    if let Some(var_559) = &input.input_columns {
        let mut array_560 = object.key("InputColumns").start_array();
        for item_561 in var_559 {
            {
                let mut object_562 = array_560.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_562,
                    item_561,
                )?;
                object_562.finish();
            }
        }
        array_560.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_sql(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomSql,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_563.as_str());
    }
    if let Some(var_564) = &input.name {
        object.key("Name").string(var_564.as_str());
    }
    if let Some(var_565) = &input.sql_query {
        object.key("SqlQuery").string(var_565.as_str());
    }
    if let Some(var_566) = &input.columns {
        let mut array_567 = object.key("Columns").start_array();
        for item_568 in var_566 {
            {
                let mut object_569 = array_567.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_569,
                    item_568,
                )?;
                object_569.finish();
            }
        }
        array_567.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Source,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_570) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_570.as_str());
    }
    if let Some(var_571) = &input.upload_settings {
        let mut object_572 = object.key("UploadSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_upload_settings(&mut object_572, var_571)?;
        object_572.finish();
    }
    if let Some(var_573) = &input.input_columns {
        let mut array_574 = object.key("InputColumns").start_array();
        for item_575 in var_573 {
            {
                let mut object_576 = array_574.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_576,
                    item_575,
                )?;
                object_576.finish();
            }
        }
        array_574.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_row_level_permission_tag_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_577) = &input.tag_key {
        object.key("TagKey").string(var_577.as_str());
    }
    if let Some(var_578) = &input.column_name {
        object.key("ColumnName").string(var_578.as_str());
    }
    if let Some(var_579) = &input.tag_multi_value_delimiter {
        object
            .key("TagMultiValueDelimiter")
            .string(var_579.as_str());
    }
    if let Some(var_580) = &input.match_all_value {
        object.key("MatchAllValue").string(var_580.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_credential_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CredentialPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.username {
        object.key("Username").string(var_581.as_str());
    }
    if let Some(var_582) = &input.password {
        object.key("Password").string(var_582.as_str());
    }
    if let Some(var_583) = &input.alternate_data_source_parameters {
        let mut array_584 = object.key("AlternateDataSourceParameters").start_array();
        for item_585 in var_583 {
            {
                let mut object_586 = array_584.value().start_object();
                crate::json_ser::serialize_union_crate_model_data_source_parameters(
                    &mut object_586,
                    item_585,
                )?;
                object_586.finish();
            }
        }
        array_584.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amazon_elasticsearch_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonElasticsearchParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.domain {
        object.key("Domain").string(var_587.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_588) = &input.work_group {
        object.key("WorkGroup").string(var_588.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aurora_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_589) = &input.host {
        object.key("Host").string(var_589.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_590) = &input.database {
        object.key("Database").string(var_590.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aurora_postgre_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraPostgreSqlParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_591) = &input.host {
        object.key("Host").string(var_591.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_592) = &input.database {
        object.key("Database").string(var_592.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iot_analytics_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIotAnalyticsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_593) = &input.data_set_name {
        object.key("DataSetName").string(var_593.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jira_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_594) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_594.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maria_db_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MariaDbParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.host {
        object.key("Host").string(var_595.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_596) = &input.database {
        object.key("Database").string(var_596.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.host {
        object.key("Host").string(var_597.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_598) = &input.database {
        object.key("Database").string(var_598.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_599) = &input.host {
        object.key("Host").string(var_599.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_600) = &input.database {
        object.key("Database").string(var_600.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_601) = &input.host {
        object.key("Host").string(var_601.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_602) = &input.database {
        object.key("Database").string(var_602.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_presto_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrestoParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_603) = &input.host {
        object.key("Host").string(var_603.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_604) = &input.catalog {
        object.key("Catalog").string(var_604.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_605) = &input.instance_id {
        object.key("InstanceId").string(var_605.as_str());
    }
    if let Some(var_606) = &input.database {
        object.key("Database").string(var_606.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_607) = &input.host {
        object.key("Host").string(var_607.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_608) = &input.database {
        object.key("Database").string(var_608.as_str());
    }
    if let Some(var_609) = &input.cluster_id {
        object.key("ClusterId").string(var_609.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Parameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_610) = &input.manifest_file_location {
        let mut object_611 = object.key("ManifestFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_manifest_file_location(
            &mut object_611,
            var_610,
        )?;
        object_611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_612) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_612.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snowflake_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_613) = &input.host {
        object.key("Host").string(var_613.as_str());
    }
    if let Some(var_614) = &input.database {
        object.key("Database").string(var_614.as_str());
    }
    if let Some(var_615) = &input.warehouse {
        object.key("Warehouse").string(var_615.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_616) = &input.host {
        object.key("Host").string(var_616.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_server_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlServerParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_617) = &input.host {
        object.key("Host").string(var_617.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_618) = &input.database {
        object.key("Database").string(var_618.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_teradata_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TeradataParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_619) = &input.host {
        object.key("Host").string(var_619.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_620) = &input.database {
        object.key("Database").string(var_620.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_twitter_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TwitterParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_621) = &input.query {
        object.key("Query").string(var_621.as_str());
    }
    {
        object.key("MaxRows").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_rows).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amazon_open_search_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonOpenSearchParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_622) = &input.domain {
        object.key("Domain").string(var_622.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_exasol_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExasolParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_623) = &input.host {
        object.key("Host").string(var_623.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template_source_analysis(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceAnalysis,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_624) = &input.arn {
        object.key("Arn").string(var_624.as_str());
    }
    if let Some(var_625) = &input.data_set_references {
        let mut array_626 = object.key("DataSetReferences").start_array();
        for item_627 in var_625 {
            {
                let mut object_628 = array_626.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_628,
                    item_627,
                )?;
                object_628.finish();
            }
        }
        array_626.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_629) = &input.arn {
        object.key("Arn").string(var_629.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_color_palette(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataColorPalette,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_630) = &input.colors {
        let mut array_631 = object.key("Colors").start_array();
        for item_632 in var_630 {
            {
                array_631.value().string(item_632.as_str());
            }
        }
        array_631.finish();
    }
    if let Some(var_633) = &input.min_max_gradient {
        let mut array_634 = object.key("MinMaxGradient").start_array();
        for item_635 in var_633 {
            {
                array_634.value().string(item_635.as_str());
            }
        }
        array_634.finish();
    }
    if let Some(var_636) = &input.empty_fill_color {
        object.key("EmptyFillColor").string(var_636.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_color_palette(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiColorPalette,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_637) = &input.primary_foreground {
        object.key("PrimaryForeground").string(var_637.as_str());
    }
    if let Some(var_638) = &input.primary_background {
        object.key("PrimaryBackground").string(var_638.as_str());
    }
    if let Some(var_639) = &input.secondary_foreground {
        object.key("SecondaryForeground").string(var_639.as_str());
    }
    if let Some(var_640) = &input.secondary_background {
        object.key("SecondaryBackground").string(var_640.as_str());
    }
    if let Some(var_641) = &input.accent {
        object.key("Accent").string(var_641.as_str());
    }
    if let Some(var_642) = &input.accent_foreground {
        object.key("AccentForeground").string(var_642.as_str());
    }
    if let Some(var_643) = &input.danger {
        object.key("Danger").string(var_643.as_str());
    }
    if let Some(var_644) = &input.danger_foreground {
        object.key("DangerForeground").string(var_644.as_str());
    }
    if let Some(var_645) = &input.warning {
        object.key("Warning").string(var_645.as_str());
    }
    if let Some(var_646) = &input.warning_foreground {
        object.key("WarningForeground").string(var_646.as_str());
    }
    if let Some(var_647) = &input.success {
        object.key("Success").string(var_647.as_str());
    }
    if let Some(var_648) = &input.success_foreground {
        object.key("SuccessForeground").string(var_648.as_str());
    }
    if let Some(var_649) = &input.dimension {
        object.key("Dimension").string(var_649.as_str());
    }
    if let Some(var_650) = &input.dimension_foreground {
        object.key("DimensionForeground").string(var_650.as_str());
    }
    if let Some(var_651) = &input.measure {
        object.key("Measure").string(var_651.as_str());
    }
    if let Some(var_652) = &input.measure_foreground {
        object.key("MeasureForeground").string(var_652.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sheet_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_653) = &input.tile {
        let mut object_654 = object.key("Tile").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_style(&mut object_654, var_653)?;
        object_654.finish();
    }
    if let Some(var_655) = &input.tile_layout {
        let mut object_656 = object.key("TileLayout").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_layout_style(
            &mut object_656,
            var_655,
        )?;
        object_656.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserDashboardEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_657.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserDashboardEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_658) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_658.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserQuickSightConsoleEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_659) = &input.initial_path {
        object.key("InitialPath").string(var_659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_q_search_bar_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserQSearchBarEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.initial_topic_id {
        object.key("InitialTopicId").string(var_660.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_set_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_661) = &input.data_set_placeholder {
        object.key("DataSetPlaceholder").string(var_661.as_str());
    }
    if let Some(var_662) = &input.data_set_arn {
        object.key("DataSetArn").string(var_662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_project_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProjectOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_663) = &input.projected_columns {
        let mut array_664 = object.key("ProjectedColumns").start_array();
        for item_665 in var_663 {
            {
                array_664.value().string(item_665.as_str());
            }
        }
        array_664.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_666) = &input.condition_expression {
        object.key("ConditionExpression").string(var_666.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_columns_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateColumnsOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.columns {
        let mut array_668 = object.key("Columns").start_array();
        for item_669 in var_667 {
            {
                let mut object_670 = array_668.value().start_object();
                crate::json_ser::serialize_structure_crate_model_calculated_column(
                    &mut object_670,
                    item_669,
                )?;
                object_670.finish();
            }
        }
        array_668.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rename_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenameColumnOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_671) = &input.column_name {
        object.key("ColumnName").string(var_671.as_str());
    }
    if let Some(var_672) = &input.new_column_name {
        object.key("NewColumnName").string(var_672.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cast_column_type_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CastColumnTypeOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_673) = &input.column_name {
        object.key("ColumnName").string(var_673.as_str());
    }
    if let Some(var_674) = &input.new_column_type {
        object.key("NewColumnType").string(var_674.as_str());
    }
    if let Some(var_675) = &input.format {
        object.key("Format").string(var_675.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagColumnOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_676) = &input.column_name {
        object.key("ColumnName").string(var_676.as_str());
    }
    if let Some(var_677) = &input.tags {
        let mut array_678 = object.key("Tags").start_array();
        for item_679 in var_677 {
            {
                let mut object_680 = array_678.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_tag(
                    &mut object_680,
                    item_679,
                )?;
                object_680.finish();
            }
        }
        array_678.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_untag_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UntagColumnOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_681) = &input.column_name {
        object.key("ColumnName").string(var_681.as_str());
    }
    if let Some(var_682) = &input.tag_names {
        let mut array_683 = object.key("TagNames").start_array();
        for item_684 in var_682 {
            {
                array_683.value().string(item_684.as_str());
            }
        }
        array_683.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_instruction(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinInstruction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_685) = &input.left_operand {
        object.key("LeftOperand").string(var_685.as_str());
    }
    if let Some(var_686) = &input.right_operand {
        object.key("RightOperand").string(var_686.as_str());
    }
    if let Some(var_687) = &input.left_join_key_properties {
        let mut object_688 = object.key("LeftJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_688,
            var_687,
        )?;
        object_688.finish();
    }
    if let Some(var_689) = &input.right_join_key_properties {
        let mut object_690 = object.key("RightJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_690,
            var_689,
        )?;
        object_690.finish();
    }
    if let Some(var_691) = &input.r#type {
        object.key("Type").string(var_691.as_str());
    }
    if let Some(var_692) = &input.on_clause {
        object.key("OnClause").string(var_692.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.name {
        object.key("Name").string(var_693.as_str());
    }
    if let Some(var_694) = &input.r#type {
        object.key("Type").string(var_694.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_upload_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UploadSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_695) = &input.format {
        object.key("Format").string(var_695.as_str());
    }
    if let Some(var_696) = &input.start_from_row {
        object.key("StartFromRow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_696).into()),
        );
    }
    if let Some(var_697) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_697);
    }
    if let Some(var_698) = &input.text_qualifier {
        object.key("TextQualifier").string(var_698.as_str());
    }
    if let Some(var_699) = &input.delimiter {
        object.key("Delimiter").string(var_699.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_manifest_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManifestFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.bucket {
        object.key("Bucket").string(var_700.as_str());
    }
    if let Some(var_701) = &input.key {
        object.key("Key").string(var_701.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tile_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_702) = &input.border {
        let mut object_703 = object.key("Border").start_object();
        crate::json_ser::serialize_structure_crate_model_border_style(&mut object_703, var_702)?;
        object_703.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tile_layout_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileLayoutStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_704) = &input.gutter {
        let mut object_705 = object.key("Gutter").start_object();
        crate::json_ser::serialize_structure_crate_model_gutter_style(&mut object_705, var_704)?;
        object_705.finish();
    }
    if let Some(var_706) = &input.margin {
        let mut object_707 = object.key("Margin").start_object();
        crate::json_ser::serialize_structure_crate_model_margin_style(&mut object_707, var_706)?;
        object_707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_calculated_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CalculatedColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_708) = &input.column_name {
        object.key("ColumnName").string(var_708.as_str());
    }
    if let Some(var_709) = &input.column_id {
        object.key("ColumnId").string(var_709.as_str());
    }
    if let Some(var_710) = &input.expression {
        object.key("Expression").string(var_710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.column_geographic_role {
        object.key("ColumnGeographicRole").string(var_711.as_str());
    }
    if let Some(var_712) = &input.column_description {
        let mut object_713 = object.key("ColumnDescription").start_object();
        crate::json_ser::serialize_structure_crate_model_column_description(
            &mut object_713,
            var_712,
        )?;
        object_713.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_key_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinKeyProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_714) = &input.unique_key {
        object.key("UniqueKey").boolean(*var_714);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_border_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BorderStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.show {
        object.key("Show").boolean(*var_715);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gutter_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GutterStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_716) = &input.show {
        object.key("Show").boolean(*var_716);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_margin_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarginStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_717) = &input.show {
        object.key("Show").boolean(*var_717);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.text {
        object.key("Text").string(var_718.as_str());
    }
    Ok(())
}
