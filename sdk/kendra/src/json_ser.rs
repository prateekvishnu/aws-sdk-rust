// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_entities_to_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateEntitiesToExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.index_id {
        object.key("IndexId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_list {
        let mut array_4 = object.key("EntityList").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_personas_to_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePersonasToEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.id {
        object.key("Id").string(var_7.as_str());
    }
    if let Some(var_8) = &input.index_id {
        object.key("IndexId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.personas {
        let mut array_10 = object.key("Personas").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_persona_configuration(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.index_id {
        object.key("IndexId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.document_id_list {
        let mut array_15 = object.key("DocumentIdList").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.data_source_sync_job_metric_target {
        let mut object_18 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.index_id {
        object.key("IndexId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.document_info_list {
        let mut array_21 = object.key("DocumentInfoList").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.index_id {
        object.key("IndexId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.role_arn {
        object.key("RoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.documents {
        let mut array_27 = object.key("Documents").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.custom_document_enrichment_configuration {
        let mut object_31 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.index_id {
        object.key("IndexId").string(var_33.as_str());
    }
    if let Some(var_34) = &input.name {
        object.key("Name").string(var_34.as_str());
    }
    if let Some(var_35) = &input.description {
        object.key("Description").string(var_35.as_str());
    }
    if let Some(var_36) = &input.access_control_list {
        let mut array_37 = object.key("AccessControlList").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_39,
                    item_38,
                )?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.hierarchical_access_control_list {
        let mut array_41 = object.key("HierarchicalAccessControlList").start_array();
        for item_42 in var_40 {
            {
                let mut object_43 = array_41.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_43,
                    item_42,
                )?;
                object_43.finish();
            }
        }
        array_41.finish();
    }
    if let Some(var_44) = &input.client_token {
        object.key("ClientToken").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.name {
        object.key("Name").string(var_45.as_str());
    }
    if let Some(var_46) = &input.index_id {
        object.key("IndexId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.r#type {
        object.key("Type").string(var_47.as_str());
    }
    if let Some(var_48) = &input.configuration {
        let mut object_49 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_49,
            var_48,
        )?;
        object_49.finish();
    }
    if let Some(var_50) = &input.description {
        object.key("Description").string(var_50.as_str());
    }
    if let Some(var_51) = &input.schedule {
        object.key("Schedule").string(var_51.as_str());
    }
    if let Some(var_52) = &input.role_arn {
        object.key("RoleArn").string(var_52.as_str());
    }
    if let Some(var_53) = &input.tags {
        let mut array_54 = object.key("Tags").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.client_token {
        object.key("ClientToken").string(var_57.as_str());
    }
    if let Some(var_58) = &input.language_code {
        object.key("LanguageCode").string(var_58.as_str());
    }
    if let Some(var_59) = &input.custom_document_enrichment_configuration {
        let mut object_60 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_60,
            var_59,
        )?;
        object_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.name {
        object.key("Name").string(var_61.as_str());
    }
    if let Some(var_62) = &input.index_id {
        object.key("IndexId").string(var_62.as_str());
    }
    if let Some(var_63) = &input.role_arn {
        object.key("RoleArn").string(var_63.as_str());
    }
    if let Some(var_64) = &input.configuration {
        let mut object_65 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_65,
            var_64,
        )?;
        object_65.finish();
    }
    if let Some(var_66) = &input.description {
        object.key("Description").string(var_66.as_str());
    }
    if let Some(var_67) = &input.client_token {
        object.key("ClientToken").string(var_67.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.index_id {
        object.key("IndexId").string(var_68.as_str());
    }
    if let Some(var_69) = &input.name {
        object.key("Name").string(var_69.as_str());
    }
    if let Some(var_70) = &input.description {
        object.key("Description").string(var_70.as_str());
    }
    if let Some(var_71) = &input.s3_path {
        let mut object_72 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_72, var_71)?;
        object_72.finish();
    }
    if let Some(var_73) = &input.role_arn {
        object.key("RoleArn").string(var_73.as_str());
    }
    if let Some(var_74) = &input.tags {
        let mut array_75 = object.key("Tags").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_77, item_76)?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.file_format {
        object.key("FileFormat").string(var_78.as_str());
    }
    if let Some(var_79) = &input.client_token {
        object.key("ClientToken").string(var_79.as_str());
    }
    if let Some(var_80) = &input.language_code {
        object.key("LanguageCode").string(var_80.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.name {
        object.key("Name").string(var_81.as_str());
    }
    if let Some(var_82) = &input.edition {
        object.key("Edition").string(var_82.as_str());
    }
    if let Some(var_83) = &input.role_arn {
        object.key("RoleArn").string(var_83.as_str());
    }
    if let Some(var_84) = &input.server_side_encryption_configuration {
        let mut object_85 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_85,
            var_84,
        )?;
        object_85.finish();
    }
    if let Some(var_86) = &input.description {
        object.key("Description").string(var_86.as_str());
    }
    if let Some(var_87) = &input.client_token {
        object.key("ClientToken").string(var_87.as_str());
    }
    if let Some(var_88) = &input.tags {
        let mut array_89 = object.key("Tags").start_array();
        for item_90 in var_88 {
            {
                let mut object_91 = array_89.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_91, item_90)?;
                object_91.finish();
            }
        }
        array_89.finish();
    }
    if let Some(var_92) = &input.user_token_configurations {
        let mut array_93 = object.key("UserTokenConfigurations").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_95,
                    item_94,
                )?;
                object_95.finish();
            }
        }
        array_93.finish();
    }
    if let Some(var_96) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_96.as_str());
    }
    if let Some(var_97) = &input.user_group_resolution_configuration {
        let mut object_98 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_98,
            var_97,
        )?;
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.index_id {
        object.key("IndexId").string(var_99.as_str());
    }
    if let Some(var_100) = &input.name {
        object.key("Name").string(var_100.as_str());
    }
    if let Some(var_101) = &input.description {
        object.key("Description").string(var_101.as_str());
    }
    if let Some(var_102) = &input.source_s3_path {
        let mut object_103 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.client_token {
        object.key("ClientToken").string(var_104.as_str());
    }
    if let Some(var_105) = &input.role_arn {
        object.key("RoleArn").string(var_105.as_str());
    }
    if let Some(var_106) = &input.tags {
        let mut array_107 = object.key("Tags").start_array();
        for item_108 in var_106 {
            {
                let mut object_109 = array_107.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_109, item_108)?;
                object_109.finish();
            }
        }
        array_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.index_id {
        object.key("IndexId").string(var_110.as_str());
    }
    if let Some(var_111) = &input.name {
        object.key("Name").string(var_111.as_str());
    }
    if let Some(var_112) = &input.description {
        object.key("Description").string(var_112.as_str());
    }
    if let Some(var_113) = &input.role_arn {
        object.key("RoleArn").string(var_113.as_str());
    }
    if let Some(var_114) = &input.tags {
        let mut array_115 = object.key("Tags").start_array();
        for item_116 in var_114 {
            {
                let mut object_117 = array_115.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_117, item_116)?;
                object_117.finish();
            }
        }
        array_115.finish();
    }
    if let Some(var_118) = &input.source_s3_path {
        let mut object_119 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_119, var_118)?;
        object_119.finish();
    }
    if let Some(var_120) = &input.client_token {
        object.key("ClientToken").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.index_id {
        object.key("IndexId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.id {
        object.key("Id").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.id {
        object.key("Id").string(var_123.as_str());
    }
    if let Some(var_124) = &input.index_id {
        object.key("IndexId").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.id {
        object.key("Id").string(var_125.as_str());
    }
    if let Some(var_126) = &input.index_id {
        object.key("IndexId").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.id {
        object.key("Id").string(var_127.as_str());
    }
    if let Some(var_128) = &input.index_id {
        object.key("IndexId").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.id {
        object.key("Id").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.index_id {
        object.key("IndexId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.data_source_id {
        object.key("DataSourceId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.group_id {
        object.key("GroupId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.index_id {
        object.key("IndexId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.id {
        object.key("Id").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.id {
        object.key("Id").string(var_136.as_str());
    }
    if let Some(var_137) = &input.index_id {
        object.key("IndexId").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.index_id {
        object.key("IndexId").string(var_138.as_str());
    }
    if let Some(var_139) = &input.id {
        object.key("Id").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.id {
        object.key("Id").string(var_140.as_str());
    }
    if let Some(var_141) = &input.index_id {
        object.key("IndexId").string(var_141.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.id {
        object.key("Id").string(var_142.as_str());
    }
    if let Some(var_143) = &input.index_id {
        object.key("IndexId").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.id {
        object.key("Id").string(var_144.as_str());
    }
    if let Some(var_145) = &input.index_id {
        object.key("IndexId").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.id {
        object.key("Id").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.index_id {
        object.key("IndexId").string(var_147.as_str());
    }
    if let Some(var_148) = &input.data_source_id {
        object.key("DataSourceId").string(var_148.as_str());
    }
    if let Some(var_149) = &input.group_id {
        object.key("GroupId").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.index_id {
        object.key("IndexId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.id {
        object.key("Id").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.index_id {
        object.key("IndexId").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.id {
        object.key("Id").string(var_153.as_str());
    }
    if let Some(var_154) = &input.index_id {
        object.key("IndexId").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_entities_from_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateEntitiesFromExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.id {
        object.key("Id").string(var_155.as_str());
    }
    if let Some(var_156) = &input.index_id {
        object.key("IndexId").string(var_156.as_str());
    }
    if let Some(var_157) = &input.entity_list {
        let mut array_158 = object.key("EntityList").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_160,
                    item_159,
                )?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_personas_from_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePersonasFromEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.id {
        object.key("Id").string(var_161.as_str());
    }
    if let Some(var_162) = &input.index_id {
        object.key("IndexId").string(var_162.as_str());
    }
    if let Some(var_163) = &input.entity_ids {
        let mut array_164 = object.key("EntityIds").start_array();
        for item_165 in var_163 {
            {
                array_164.value().string(item_165.as_str());
            }
        }
        array_164.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.index_id {
        object.key("IndexId").string(var_166.as_str());
    }
    if let Some(var_167) = &input.query_text {
        object.key("QueryText").string(var_167.as_str());
    }
    if let Some(var_168) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.index_id {
        object.key("IndexId").string(var_169.as_str());
    }
    if let Some(var_170) = &input.interval {
        object.key("Interval").string(var_170.as_str());
    }
    if let Some(var_171) = &input.metric_type {
        object.key("MetricType").string(var_171.as_str());
    }
    if let Some(var_172) = &input.next_token {
        object.key("NextToken").string(var_172.as_str());
    }
    if let Some(var_173) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_access_control_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccessControlConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.index_id {
        object.key("IndexId").string(var_174.as_str());
    }
    if let Some(var_175) = &input.next_token {
        object.key("NextToken").string(var_175.as_str());
    }
    if let Some(var_176) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.index_id {
        object.key("IndexId").string(var_177.as_str());
    }
    if let Some(var_178) = &input.next_token {
        object.key("NextToken").string(var_178.as_str());
    }
    if let Some(var_179) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_179).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.id {
        object.key("Id").string(var_180.as_str());
    }
    if let Some(var_181) = &input.index_id {
        object.key("IndexId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.next_token {
        object.key("NextToken").string(var_182.as_str());
    }
    if let Some(var_183) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.start_time_filter {
        let mut object_185 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_185, var_184)?;
        object_185.finish();
    }
    if let Some(var_186) = &input.status_filter {
        object.key("StatusFilter").string(var_186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entity_personas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityPersonasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.id {
        object.key("Id").string(var_187.as_str());
    }
    if let Some(var_188) = &input.index_id {
        object.key("IndexId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.next_token {
        object.key("NextToken").string(var_189.as_str());
    }
    if let Some(var_190) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experience_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperienceEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.id {
        object.key("Id").string(var_191.as_str());
    }
    if let Some(var_192) = &input.index_id {
        object.key("IndexId").string(var_192.as_str());
    }
    if let Some(var_193) = &input.next_token {
        object.key("NextToken").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiences_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperiencesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.index_id {
        object.key("IndexId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.next_token {
        object.key("NextToken").string(var_195.as_str());
    }
    if let Some(var_196) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_196).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.index_id {
        object.key("IndexId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.next_token {
        object.key("NextToken").string(var_198.as_str());
    }
    if let Some(var_199) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_199).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.index_id {
        object.key("IndexId").string(var_200.as_str());
    }
    if let Some(var_201) = &input.data_source_id {
        object.key("DataSourceId").string(var_201.as_str());
    }
    if let Some(var_202) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_202).into()),
        );
    }
    if let Some(var_203) = &input.next_token {
        object.key("NextToken").string(var_203.as_str());
    }
    if let Some(var_204) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_204).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.next_token {
        object.key("NextToken").string(var_205.as_str());
    }
    if let Some(var_206) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.index_id {
        object.key("IndexId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.next_token {
        object.key("NextToken").string(var_208.as_str());
    }
    if let Some(var_209) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_209).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.resource_arn {
        object.key("ResourceARN").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.index_id {
        object.key("IndexId").string(var_211.as_str());
    }
    if let Some(var_212) = &input.next_token {
        object.key("NextToken").string(var_212.as_str());
    }
    if let Some(var_213) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.index_id {
        object.key("IndexId").string(var_214.as_str());
    }
    if let Some(var_215) = &input.data_source_id {
        object.key("DataSourceId").string(var_215.as_str());
    }
    if let Some(var_216) = &input.group_id {
        object.key("GroupId").string(var_216.as_str());
    }
    if let Some(var_217) = &input.group_members {
        let mut object_218 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_218, var_217)?;
        object_218.finish();
    }
    if let Some(var_219) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.role_arn {
        object.key("RoleArn").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.index_id {
        object.key("IndexId").string(var_221.as_str());
    }
    if let Some(var_222) = &input.query_text {
        object.key("QueryText").string(var_222.as_str());
    }
    if let Some(var_223) = &input.attribute_filter {
        let mut object_224 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_224,
            var_223,
        )?;
        object_224.finish();
    }
    if let Some(var_225) = &input.facets {
        let mut array_226 = object.key("Facets").start_array();
        for item_227 in var_225 {
            {
                let mut object_228 = array_226.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_228, item_227)?;
                object_228.finish();
            }
        }
        array_226.finish();
    }
    if let Some(var_229) = &input.requested_document_attributes {
        let mut array_230 = object.key("RequestedDocumentAttributes").start_array();
        for item_231 in var_229 {
            {
                array_230.value().string(item_231.as_str());
            }
        }
        array_230.finish();
    }
    if let Some(var_232) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_232.as_str());
    }
    if let Some(var_233) = &input.document_relevance_override_configurations {
        let mut array_234 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_236,
                    item_235,
                )?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_237).into()),
        );
    }
    if let Some(var_238) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_238).into()),
        );
    }
    if let Some(var_239) = &input.sorting_configuration {
        let mut object_240 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_240,
            var_239,
        )?;
        object_240.finish();
    }
    if let Some(var_241) = &input.user_context {
        let mut object_242 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_242, var_241)?;
        object_242.finish();
    }
    if let Some(var_243) = &input.visitor_id {
        object.key("VisitorId").string(var_243.as_str());
    }
    if let Some(var_244) = &input.spell_correction_configuration {
        let mut object_245 = object.key("SpellCorrectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_spell_correction_configuration(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.id {
        object.key("Id").string(var_246.as_str());
    }
    if let Some(var_247) = &input.index_id {
        object.key("IndexId").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.id {
        object.key("Id").string(var_248.as_str());
    }
    if let Some(var_249) = &input.index_id {
        object.key("IndexId").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.index_id {
        object.key("IndexId").string(var_250.as_str());
    }
    if let Some(var_251) = &input.query_id {
        object.key("QueryId").string(var_251.as_str());
    }
    if let Some(var_252) = &input.click_feedback_items {
        let mut array_253 = object.key("ClickFeedbackItems").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_255,
                    item_254,
                )?;
                object_255.finish();
            }
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.relevance_feedback_items {
        let mut array_257 = object.key("RelevanceFeedbackItems").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_259,
                    item_258,
                )?;
                object_259.finish();
            }
        }
        array_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.resource_arn {
        object.key("ResourceARN").string(var_260.as_str());
    }
    if let Some(var_261) = &input.tags {
        let mut array_262 = object.key("Tags").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_264, item_263)?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.resource_arn {
        object.key("ResourceARN").string(var_265.as_str());
    }
    if let Some(var_266) = &input.tag_keys {
        let mut array_267 = object.key("TagKeys").start_array();
        for item_268 in var_266 {
            {
                array_267.value().string(item_268.as_str());
            }
        }
        array_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.index_id {
        object.key("IndexId").string(var_269.as_str());
    }
    if let Some(var_270) = &input.id {
        object.key("Id").string(var_270.as_str());
    }
    if let Some(var_271) = &input.name {
        object.key("Name").string(var_271.as_str());
    }
    if let Some(var_272) = &input.description {
        object.key("Description").string(var_272.as_str());
    }
    if let Some(var_273) = &input.access_control_list {
        let mut array_274 = object.key("AccessControlList").start_array();
        for item_275 in var_273 {
            {
                let mut object_276 = array_274.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_276,
                    item_275,
                )?;
                object_276.finish();
            }
        }
        array_274.finish();
    }
    if let Some(var_277) = &input.hierarchical_access_control_list {
        let mut array_278 = object.key("HierarchicalAccessControlList").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_280,
                    item_279,
                )?;
                object_280.finish();
            }
        }
        array_278.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.id {
        object.key("Id").string(var_281.as_str());
    }
    if let Some(var_282) = &input.name {
        object.key("Name").string(var_282.as_str());
    }
    if let Some(var_283) = &input.index_id {
        object.key("IndexId").string(var_283.as_str());
    }
    if let Some(var_284) = &input.configuration {
        let mut object_285 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_285,
            var_284,
        )?;
        object_285.finish();
    }
    if let Some(var_286) = &input.description {
        object.key("Description").string(var_286.as_str());
    }
    if let Some(var_287) = &input.schedule {
        object.key("Schedule").string(var_287.as_str());
    }
    if let Some(var_288) = &input.role_arn {
        object.key("RoleArn").string(var_288.as_str());
    }
    if let Some(var_289) = &input.language_code {
        object.key("LanguageCode").string(var_289.as_str());
    }
    if let Some(var_290) = &input.custom_document_enrichment_configuration {
        let mut object_291 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_291,
            var_290,
        )?;
        object_291.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.id {
        object.key("Id").string(var_292.as_str());
    }
    if let Some(var_293) = &input.name {
        object.key("Name").string(var_293.as_str());
    }
    if let Some(var_294) = &input.index_id {
        object.key("IndexId").string(var_294.as_str());
    }
    if let Some(var_295) = &input.role_arn {
        object.key("RoleArn").string(var_295.as_str());
    }
    if let Some(var_296) = &input.configuration {
        let mut object_297 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_297,
            var_296,
        )?;
        object_297.finish();
    }
    if let Some(var_298) = &input.description {
        object.key("Description").string(var_298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.id {
        object.key("Id").string(var_299.as_str());
    }
    if let Some(var_300) = &input.name {
        object.key("Name").string(var_300.as_str());
    }
    if let Some(var_301) = &input.role_arn {
        object.key("RoleArn").string(var_301.as_str());
    }
    if let Some(var_302) = &input.description {
        object.key("Description").string(var_302.as_str());
    }
    if let Some(var_303) = &input.document_metadata_configuration_updates {
        let mut array_304 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_305 in var_303 {
            {
                let mut object_306 = array_304.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_306,
                    item_305,
                )?;
                object_306.finish();
            }
        }
        array_304.finish();
    }
    if let Some(var_307) = &input.capacity_units {
        let mut object_308 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_308,
            var_307,
        )?;
        object_308.finish();
    }
    if let Some(var_309) = &input.user_token_configurations {
        let mut array_310 = object.key("UserTokenConfigurations").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_312,
                    item_311,
                )?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    if let Some(var_313) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_313.as_str());
    }
    if let Some(var_314) = &input.user_group_resolution_configuration {
        let mut object_315 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_315,
            var_314,
        )?;
        object_315.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.index_id {
        object.key("IndexId").string(var_316.as_str());
    }
    if let Some(var_317) = &input.id {
        object.key("Id").string(var_317.as_str());
    }
    if let Some(var_318) = &input.name {
        object.key("Name").string(var_318.as_str());
    }
    if let Some(var_319) = &input.description {
        object.key("Description").string(var_319.as_str());
    }
    if let Some(var_320) = &input.source_s3_path {
        let mut object_321 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_321, var_320)?;
        object_321.finish();
    }
    if let Some(var_322) = &input.role_arn {
        object.key("RoleArn").string(var_322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.index_id {
        object.key("IndexId").string(var_323.as_str());
    }
    if let Some(var_324) = &input.mode {
        object.key("Mode").string(var_324.as_str());
    }
    if let Some(var_325) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    if let Some(var_326) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_326);
    }
    if let Some(var_327) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    if let Some(var_328) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.id {
        object.key("Id").string(var_329.as_str());
    }
    if let Some(var_330) = &input.name {
        object.key("Name").string(var_330.as_str());
    }
    if let Some(var_331) = &input.index_id {
        object.key("IndexId").string(var_331.as_str());
    }
    if let Some(var_332) = &input.description {
        object.key("Description").string(var_332.as_str());
    }
    if let Some(var_333) = &input.role_arn {
        object.key("RoleArn").string(var_333.as_str());
    }
    if let Some(var_334) = &input.source_s3_path {
        let mut object_335 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_335, var_334)?;
        object_335.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.entity_id {
        object.key("EntityId").string(var_336.as_str());
    }
    if let Some(var_337) = &input.entity_type {
        object.key("EntityType").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_persona_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPersonaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.entity_id {
        object.key("EntityId").string(var_338.as_str());
    }
    if let Some(var_339) = &input.persona {
        object.key("Persona").string(var_339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.data_source_id {
        object.key("DataSourceId").string(var_340.as_str());
    }
    if let Some(var_341) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_341.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.document_id {
        object.key("DocumentId").string(var_342.as_str());
    }
    if let Some(var_343) = &input.attributes {
        let mut array_344 = object.key("Attributes").start_array();
        for item_345 in var_343 {
            {
                let mut object_346 = array_344.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_346,
                    item_345,
                )?;
                object_346.finish();
            }
        }
        array_344.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.id {
        object.key("Id").string(var_347.as_str());
    }
    if let Some(var_348) = &input.title {
        object.key("Title").string(var_348.as_str());
    }
    if let Some(var_349) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_349));
    }
    if let Some(var_350) = &input.s3_path {
        let mut object_351 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_351, var_350)?;
        object_351.finish();
    }
    if let Some(var_352) = &input.attributes {
        let mut array_353 = object.key("Attributes").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_355,
                    item_354,
                )?;
                object_355.finish();
            }
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.access_control_list {
        let mut array_357 = object.key("AccessControlList").start_array();
        for item_358 in var_356 {
            {
                let mut object_359 = array_357.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_359,
                    item_358,
                )?;
                object_359.finish();
            }
        }
        array_357.finish();
    }
    if let Some(var_360) = &input.hierarchical_access_control_list {
        let mut array_361 = object.key("HierarchicalAccessControlList").start_array();
        for item_362 in var_360 {
            {
                let mut object_363 = array_361.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_363,
                    item_362,
                )?;
                object_363.finish();
            }
        }
        array_361.finish();
    }
    if let Some(var_364) = &input.content_type {
        object.key("ContentType").string(var_364.as_str());
    }
    if let Some(var_365) = &input.access_control_configuration_id {
        object
            .key("AccessControlConfigurationId")
            .string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.inline_configurations {
        let mut array_367 = object.key("InlineConfigurations").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inline_custom_document_enrichment_configuration(&mut object_369, item_368)?;
                object_369.finish();
            }
        }
        array_367.finish();
    }
    if let Some(var_370) = &input.pre_extraction_hook_configuration {
        let mut object_371 = object.key("PreExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_371,
            var_370,
        )?;
        object_371.finish();
    }
    if let Some(var_372) = &input.post_extraction_hook_configuration {
        let mut object_373 = object.key("PostExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_373,
            var_372,
        )?;
        object_373.finish();
    }
    if let Some(var_374) = &input.role_arn {
        object.key("RoleArn").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.name {
        object.key("Name").string(var_375.as_str());
    }
    if let Some(var_376) = &input.r#type {
        object.key("Type").string(var_376.as_str());
    }
    if let Some(var_377) = &input.access {
        object.key("Access").string(var_377.as_str());
    }
    if let Some(var_378) = &input.data_source_id {
        object.key("DataSourceId").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.principal_list {
        let mut array_380 = object.key("PrincipalList").start_array();
        for item_381 in var_379 {
            {
                let mut object_382 = array_380.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_382,
                    item_381,
                )?;
                object_382.finish();
            }
        }
        array_380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.s3_configuration {
        let mut object_384 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_384,
            var_383,
        )?;
        object_384.finish();
    }
    if let Some(var_385) = &input.share_point_configuration {
        let mut object_386 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_386,
            var_385,
        )?;
        object_386.finish();
    }
    if let Some(var_387) = &input.database_configuration {
        let mut object_388 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_388,
            var_387,
        )?;
        object_388.finish();
    }
    if let Some(var_389) = &input.salesforce_configuration {
        let mut object_390 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_390,
            var_389,
        )?;
        object_390.finish();
    }
    if let Some(var_391) = &input.one_drive_configuration {
        let mut object_392 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_392,
            var_391,
        )?;
        object_392.finish();
    }
    if let Some(var_393) = &input.service_now_configuration {
        let mut object_394 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_394,
            var_393,
        )?;
        object_394.finish();
    }
    if let Some(var_395) = &input.confluence_configuration {
        let mut object_396 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_396,
            var_395,
        )?;
        object_396.finish();
    }
    if let Some(var_397) = &input.google_drive_configuration {
        let mut object_398 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_398,
            var_397,
        )?;
        object_398.finish();
    }
    if let Some(var_399) = &input.web_crawler_configuration {
        let mut object_400 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    if let Some(var_401) = &input.work_docs_configuration {
        let mut object_402 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_402,
            var_401,
        )?;
        object_402.finish();
    }
    if let Some(var_403) = &input.fsx_configuration {
        let mut object_404 = object.key("FsxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_configuration(
            &mut object_404,
            var_403,
        )?;
        object_404.finish();
    }
    if let Some(var_405) = &input.slack_configuration {
        let mut object_406 = object.key("SlackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_configuration(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    if let Some(var_407) = &input.box_configuration {
        let mut object_408 = object.key("BoxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_box_configuration(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.quip_configuration {
        let mut object_410 = object.key("QuipConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_quip_configuration(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.jira_configuration {
        let mut object_412 = object.key("JiraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jira_configuration(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.git_hub_configuration {
        let mut object_414 = object.key("GitHubConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_git_hub_configuration(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    if let Some(var_415) = &input.alfresco_configuration {
        let mut object_416 = object.key("AlfrescoConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alfresco_configuration(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.key {
        object.key("Key").string(var_417.as_str());
    }
    if let Some(var_418) = &input.value {
        object.key("Value").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.content_source_configuration {
        let mut object_420 = object.key("ContentSourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_content_source_configuration(
            &mut object_420,
            var_419,
        )?;
        object_420.finish();
    }
    if let Some(var_421) = &input.user_identity_configuration {
        let mut object_422 = object.key("UserIdentityConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_configuration(
            &mut object_422,
            var_421,
        )?;
        object_422.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.bucket {
        object.key("Bucket").string(var_423.as_str());
    }
    if let Some(var_424) = &input.key {
        object.key("Key").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.jwt_token_type_configuration {
        let mut object_427 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_427,
            var_426,
        )?;
        object_427.finish();
    }
    if let Some(var_428) = &input.json_token_type_configuration {
        let mut object_429 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_429,
            var_428,
        )?;
        object_429.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_group_resolution_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserGroupResolutionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.user_group_resolution_mode {
        object
            .key("UserGroupResolutionMode")
            .string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_431, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_432) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_432, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.member_groups {
        let mut array_434 = object.key("MemberGroups").start_array();
        for item_435 in var_433 {
            {
                let mut object_436 = array_434.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_436,
                    item_435,
                )?;
                object_436.finish();
            }
        }
        array_434.finish();
    }
    if let Some(var_437) = &input.member_users {
        let mut array_438 = object.key("MemberUsers").start_array();
        for item_439 in var_437 {
            {
                let mut object_440 = array_438.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_440,
                    item_439,
                )?;
                object_440.finish();
            }
        }
        array_438.finish();
    }
    if let Some(var_441) = &input.s3_pathfor_group_members {
        let mut object_442 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_442, var_441)?;
        object_442.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.and_all_filters {
        let mut array_444 = object.key("AndAllFilters").start_array();
        for item_445 in var_443 {
            {
                let mut object_446 = array_444.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_446,
                    item_445,
                )?;
                object_446.finish();
            }
        }
        array_444.finish();
    }
    if let Some(var_447) = &input.or_all_filters {
        let mut array_448 = object.key("OrAllFilters").start_array();
        for item_449 in var_447 {
            {
                let mut object_450 = array_448.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_450,
                    item_449,
                )?;
                object_450.finish();
            }
        }
        array_448.finish();
    }
    if let Some(var_451) = &input.not_filter {
        let mut object_452 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_452,
            var_451,
        )?;
        object_452.finish();
    }
    if let Some(var_453) = &input.equals_to {
        let mut object_454 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_454,
            var_453,
        )?;
        object_454.finish();
    }
    if let Some(var_455) = &input.contains_all {
        let mut object_456 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_456,
            var_455,
        )?;
        object_456.finish();
    }
    if let Some(var_457) = &input.contains_any {
        let mut object_458 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_458,
            var_457,
        )?;
        object_458.finish();
    }
    if let Some(var_459) = &input.greater_than {
        let mut object_460 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_460,
            var_459,
        )?;
        object_460.finish();
    }
    if let Some(var_461) = &input.greater_than_or_equals {
        let mut object_462 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_462,
            var_461,
        )?;
        object_462.finish();
    }
    if let Some(var_463) = &input.less_than {
        let mut object_464 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_464,
            var_463,
        )?;
        object_464.finish();
    }
    if let Some(var_465) = &input.less_than_or_equals {
        let mut object_466 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_466,
            var_465,
        )?;
        object_466.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_facet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_467.as_str());
    }
    if let Some(var_468) = &input.facets {
        let mut array_469 = object.key("Facets").start_array();
        for item_470 in var_468 {
            {
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_471, item_470)?;
                object_471.finish();
            }
        }
        array_469.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.name {
        object.key("Name").string(var_472.as_str());
    }
    if let Some(var_473) = &input.relevance {
        let mut object_474 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_474, var_473)?;
        object_474.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_475) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_475.as_str());
    }
    if let Some(var_476) = &input.sort_order {
        object.key("SortOrder").string(var_476.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.token {
        object.key("Token").string(var_477.as_str());
    }
    if let Some(var_478) = &input.user_id {
        object.key("UserId").string(var_478.as_str());
    }
    if let Some(var_479) = &input.groups {
        let mut array_480 = object.key("Groups").start_array();
        for item_481 in var_479 {
            {
                array_480.value().string(item_481.as_str());
            }
        }
        array_480.finish();
    }
    if let Some(var_482) = &input.data_source_groups {
        let mut array_483 = object.key("DataSourceGroups").start_array();
        for item_484 in var_482 {
            {
                let mut object_485 = array_483.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_485,
                    item_484,
                )?;
                object_485.finish();
            }
        }
        array_483.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spell_correction_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpellCorrectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("IncludeQuerySpellCheckSuggestions")
            .boolean(input.include_query_spell_check_suggestions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.result_id {
        object.key("ResultId").string(var_486.as_str());
    }
    if let Some(var_487) = &input.click_time {
        object
            .key("ClickTime")
            .date_time(var_487, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.result_id {
        object.key("ResultId").string(var_488.as_str());
    }
    if let Some(var_489) = &input.relevance_value {
        object.key("RelevanceValue").string(var_489.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_490) = &input.name {
        object.key("Name").string(var_490.as_str());
    }
    if let Some(var_491) = &input.r#type {
        object.key("Type").string(var_491.as_str());
    }
    if let Some(var_492) = &input.relevance {
        let mut object_493 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_493, var_492)?;
        object_493.finish();
    }
    if let Some(var_494) = &input.search {
        let mut object_495 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_495, var_494)?;
        object_495.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_496) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_496).into()),
        );
    }
    if let Some(var_497) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_497).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_498) = &input.key {
        object.key("Key").string(var_498.as_str());
    }
    if let Some(var_499) = &input.value {
        let mut object_500 = object.key("Value").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_500,
            var_499,
        )?;
        object_500.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inline_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InlineCustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.condition {
        let mut object_502 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_502,
            var_501,
        )?;
        object_502.finish();
    }
    if let Some(var_503) = &input.target {
        let mut object_504 = object.key("Target").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_target(
            &mut object_504,
            var_503,
        )?;
        object_504.finish();
    }
    if input.document_content_deletion {
        object
            .key("DocumentContentDeletion")
            .boolean(input.document_content_deletion);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hook_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HookConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.invocation_condition {
        let mut object_506 = object.key("InvocationCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_506,
            var_505,
        )?;
        object_506.finish();
    }
    if let Some(var_507) = &input.lambda_arn {
        object.key("LambdaArn").string(var_507.as_str());
    }
    if let Some(var_508) = &input.s3_bucket {
        object.key("S3Bucket").string(var_508.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_509) = &input.bucket_name {
        object.key("BucketName").string(var_509.as_str());
    }
    if let Some(var_510) = &input.inclusion_prefixes {
        let mut array_511 = object.key("InclusionPrefixes").start_array();
        for item_512 in var_510 {
            {
                array_511.value().string(item_512.as_str());
            }
        }
        array_511.finish();
    }
    if let Some(var_513) = &input.inclusion_patterns {
        let mut array_514 = object.key("InclusionPatterns").start_array();
        for item_515 in var_513 {
            {
                array_514.value().string(item_515.as_str());
            }
        }
        array_514.finish();
    }
    if let Some(var_516) = &input.exclusion_patterns {
        let mut array_517 = object.key("ExclusionPatterns").start_array();
        for item_518 in var_516 {
            {
                array_517.value().string(item_518.as_str());
            }
        }
        array_517.finish();
    }
    if let Some(var_519) = &input.documents_metadata_configuration {
        let mut object_520 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_520,
            var_519,
        )?;
        object_520.finish();
    }
    if let Some(var_521) = &input.access_control_list_configuration {
        let mut object_522 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_522,
            var_521,
        )?;
        object_522.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_523) = &input.share_point_version {
        object.key("SharePointVersion").string(var_523.as_str());
    }
    if let Some(var_524) = &input.urls {
        let mut array_525 = object.key("Urls").start_array();
        for item_526 in var_524 {
            {
                array_525.value().string(item_526.as_str());
            }
        }
        array_525.finish();
    }
    if let Some(var_527) = &input.secret_arn {
        object.key("SecretArn").string(var_527.as_str());
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_528) = &input.inclusion_patterns {
        let mut array_529 = object.key("InclusionPatterns").start_array();
        for item_530 in var_528 {
            {
                array_529.value().string(item_530.as_str());
            }
        }
        array_529.finish();
    }
    if let Some(var_531) = &input.exclusion_patterns {
        let mut array_532 = object.key("ExclusionPatterns").start_array();
        for item_533 in var_531 {
            {
                array_532.value().string(item_533.as_str());
            }
        }
        array_532.finish();
    }
    if let Some(var_534) = &input.vpc_configuration {
        let mut object_535 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_535,
            var_534,
        )?;
        object_535.finish();
    }
    if let Some(var_536) = &input.field_mappings {
        let mut array_537 = object.key("FieldMappings").start_array();
        for item_538 in var_536 {
            {
                let mut object_539 = array_537.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_539, item_538)?;
                object_539.finish();
            }
        }
        array_537.finish();
    }
    if let Some(var_540) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_540.as_str());
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_541) = &input.ssl_certificate_s3_path {
        let mut object_542 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_542, var_541)?;
        object_542.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_543) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_543.as_str());
    }
    if let Some(var_544) = &input.connection_configuration {
        let mut object_545 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_545,
            var_544,
        )?;
        object_545.finish();
    }
    if let Some(var_546) = &input.vpc_configuration {
        let mut object_547 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_547,
            var_546,
        )?;
        object_547.finish();
    }
    if let Some(var_548) = &input.column_configuration {
        let mut object_549 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_549,
            var_548,
        )?;
        object_549.finish();
    }
    if let Some(var_550) = &input.acl_configuration {
        let mut object_551 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_551,
            var_550,
        )?;
        object_551.finish();
    }
    if let Some(var_552) = &input.sql_configuration {
        let mut object_553 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_553,
            var_552,
        )?;
        object_553.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_554) = &input.server_url {
        object.key("ServerUrl").string(var_554.as_str());
    }
    if let Some(var_555) = &input.secret_arn {
        object.key("SecretArn").string(var_555.as_str());
    }
    if let Some(var_556) = &input.standard_object_configurations {
        let mut array_557 = object.key("StandardObjectConfigurations").start_array();
        for item_558 in var_556 {
            {
                let mut object_559 = array_557.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_559, item_558)?;
                object_559.finish();
            }
        }
        array_557.finish();
    }
    if let Some(var_560) = &input.knowledge_article_configuration {
        let mut object_561 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(&mut object_561, var_560)?;
        object_561.finish();
    }
    if let Some(var_562) = &input.chatter_feed_configuration {
        let mut object_563 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_563,
            var_562,
        )?;
        object_563.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_564) = &input.standard_object_attachment_configuration {
        let mut object_565 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_565, var_564)?;
        object_565.finish();
    }
    if let Some(var_566) = &input.include_attachment_file_patterns {
        let mut array_567 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_568 in var_566 {
            {
                array_567.value().string(item_568.as_str());
            }
        }
        array_567.finish();
    }
    if let Some(var_569) = &input.exclude_attachment_file_patterns {
        let mut array_570 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_571 in var_569 {
            {
                array_570.value().string(item_571.as_str());
            }
        }
        array_570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_572) = &input.tenant_domain {
        object.key("TenantDomain").string(var_572.as_str());
    }
    if let Some(var_573) = &input.secret_arn {
        object.key("SecretArn").string(var_573.as_str());
    }
    if let Some(var_574) = &input.one_drive_users {
        let mut object_575 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_575, var_574)?;
        object_575.finish();
    }
    if let Some(var_576) = &input.inclusion_patterns {
        let mut array_577 = object.key("InclusionPatterns").start_array();
        for item_578 in var_576 {
            {
                array_577.value().string(item_578.as_str());
            }
        }
        array_577.finish();
    }
    if let Some(var_579) = &input.exclusion_patterns {
        let mut array_580 = object.key("ExclusionPatterns").start_array();
        for item_581 in var_579 {
            {
                array_580.value().string(item_581.as_str());
            }
        }
        array_580.finish();
    }
    if let Some(var_582) = &input.field_mappings {
        let mut array_583 = object.key("FieldMappings").start_array();
        for item_584 in var_582 {
            {
                let mut object_585 = array_583.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_585, item_584)?;
                object_585.finish();
            }
        }
        array_583.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.host_url {
        object.key("HostUrl").string(var_586.as_str());
    }
    if let Some(var_587) = &input.secret_arn {
        object.key("SecretArn").string(var_587.as_str());
    }
    if let Some(var_588) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_588.as_str());
    }
    if let Some(var_589) = &input.knowledge_article_configuration {
        let mut object_590 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_590, var_589)?;
        object_590.finish();
    }
    if let Some(var_591) = &input.service_catalog_configuration {
        let mut object_592 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_592,
            var_591,
        )?;
        object_592.finish();
    }
    if let Some(var_593) = &input.authentication_type {
        object.key("AuthenticationType").string(var_593.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_594) = &input.server_url {
        object.key("ServerUrl").string(var_594.as_str());
    }
    if let Some(var_595) = &input.secret_arn {
        object.key("SecretArn").string(var_595.as_str());
    }
    if let Some(var_596) = &input.version {
        object.key("Version").string(var_596.as_str());
    }
    if let Some(var_597) = &input.space_configuration {
        let mut object_598 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_598,
            var_597,
        )?;
        object_598.finish();
    }
    if let Some(var_599) = &input.page_configuration {
        let mut object_600 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_600,
            var_599,
        )?;
        object_600.finish();
    }
    if let Some(var_601) = &input.blog_configuration {
        let mut object_602 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_602,
            var_601,
        )?;
        object_602.finish();
    }
    if let Some(var_603) = &input.attachment_configuration {
        let mut object_604 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_604,
            var_603,
        )?;
        object_604.finish();
    }
    if let Some(var_605) = &input.vpc_configuration {
        let mut object_606 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_606,
            var_605,
        )?;
        object_606.finish();
    }
    if let Some(var_607) = &input.inclusion_patterns {
        let mut array_608 = object.key("InclusionPatterns").start_array();
        for item_609 in var_607 {
            {
                array_608.value().string(item_609.as_str());
            }
        }
        array_608.finish();
    }
    if let Some(var_610) = &input.exclusion_patterns {
        let mut array_611 = object.key("ExclusionPatterns").start_array();
        for item_612 in var_610 {
            {
                array_611.value().string(item_612.as_str());
            }
        }
        array_611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_613) = &input.secret_arn {
        object.key("SecretArn").string(var_613.as_str());
    }
    if let Some(var_614) = &input.inclusion_patterns {
        let mut array_615 = object.key("InclusionPatterns").start_array();
        for item_616 in var_614 {
            {
                array_615.value().string(item_616.as_str());
            }
        }
        array_615.finish();
    }
    if let Some(var_617) = &input.exclusion_patterns {
        let mut array_618 = object.key("ExclusionPatterns").start_array();
        for item_619 in var_617 {
            {
                array_618.value().string(item_619.as_str());
            }
        }
        array_618.finish();
    }
    if let Some(var_620) = &input.field_mappings {
        let mut array_621 = object.key("FieldMappings").start_array();
        for item_622 in var_620 {
            {
                let mut object_623 = array_621.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_623, item_622)?;
                object_623.finish();
            }
        }
        array_621.finish();
    }
    if let Some(var_624) = &input.exclude_mime_types {
        let mut array_625 = object.key("ExcludeMimeTypes").start_array();
        for item_626 in var_624 {
            {
                array_625.value().string(item_626.as_str());
            }
        }
        array_625.finish();
    }
    if let Some(var_627) = &input.exclude_user_accounts {
        let mut array_628 = object.key("ExcludeUserAccounts").start_array();
        for item_629 in var_627 {
            {
                array_628.value().string(item_629.as_str());
            }
        }
        array_628.finish();
    }
    if let Some(var_630) = &input.exclude_shared_drives {
        let mut array_631 = object.key("ExcludeSharedDrives").start_array();
        for item_632 in var_630 {
            {
                array_631.value().string(item_632.as_str());
            }
        }
        array_631.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_633) = &input.urls {
        let mut object_634 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_634, var_633)?;
        object_634.finish();
    }
    if let Some(var_635) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_635).into()),
        );
    }
    if let Some(var_636) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_636).into()),
        );
    }
    if let Some(var_637) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_637).into()),
        );
    }
    if let Some(var_638) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_638).into()),
        );
    }
    if let Some(var_639) = &input.url_inclusion_patterns {
        let mut array_640 = object.key("UrlInclusionPatterns").start_array();
        for item_641 in var_639 {
            {
                array_640.value().string(item_641.as_str());
            }
        }
        array_640.finish();
    }
    if let Some(var_642) = &input.url_exclusion_patterns {
        let mut array_643 = object.key("UrlExclusionPatterns").start_array();
        for item_644 in var_642 {
            {
                array_643.value().string(item_644.as_str());
            }
        }
        array_643.finish();
    }
    if let Some(var_645) = &input.proxy_configuration {
        let mut object_646 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_646,
            var_645,
        )?;
        object_646.finish();
    }
    if let Some(var_647) = &input.authentication_configuration {
        let mut object_648 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_648,
            var_647,
        )?;
        object_648.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_649) = &input.organization_id {
        object.key("OrganizationId").string(var_649.as_str());
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_650) = &input.inclusion_patterns {
        let mut array_651 = object.key("InclusionPatterns").start_array();
        for item_652 in var_650 {
            {
                array_651.value().string(item_652.as_str());
            }
        }
        array_651.finish();
    }
    if let Some(var_653) = &input.exclusion_patterns {
        let mut array_654 = object.key("ExclusionPatterns").start_array();
        for item_655 in var_653 {
            {
                array_654.value().string(item_655.as_str());
            }
        }
        array_654.finish();
    }
    if let Some(var_656) = &input.field_mappings {
        let mut array_657 = object.key("FieldMappings").start_array();
        for item_658 in var_656 {
            {
                let mut object_659 = array_657.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_659, item_658)?;
                object_659.finish();
            }
        }
        array_657.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.file_system_id {
        object.key("FileSystemId").string(var_660.as_str());
    }
    if let Some(var_661) = &input.file_system_type {
        object.key("FileSystemType").string(var_661.as_str());
    }
    if let Some(var_662) = &input.vpc_configuration {
        let mut object_663 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_663,
            var_662,
        )?;
        object_663.finish();
    }
    if let Some(var_664) = &input.secret_arn {
        object.key("SecretArn").string(var_664.as_str());
    }
    if let Some(var_665) = &input.inclusion_patterns {
        let mut array_666 = object.key("InclusionPatterns").start_array();
        for item_667 in var_665 {
            {
                array_666.value().string(item_667.as_str());
            }
        }
        array_666.finish();
    }
    if let Some(var_668) = &input.exclusion_patterns {
        let mut array_669 = object.key("ExclusionPatterns").start_array();
        for item_670 in var_668 {
            {
                array_669.value().string(item_670.as_str());
            }
        }
        array_669.finish();
    }
    if let Some(var_671) = &input.field_mappings {
        let mut array_672 = object.key("FieldMappings").start_array();
        for item_673 in var_671 {
            {
                let mut object_674 = array_672.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_674, item_673)?;
                object_674.finish();
            }
        }
        array_672.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slack_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_675) = &input.team_id {
        object.key("TeamId").string(var_675.as_str());
    }
    if let Some(var_676) = &input.secret_arn {
        object.key("SecretArn").string(var_676.as_str());
    }
    if let Some(var_677) = &input.vpc_configuration {
        let mut object_678 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_678,
            var_677,
        )?;
        object_678.finish();
    }
    if let Some(var_679) = &input.slack_entity_list {
        let mut array_680 = object.key("SlackEntityList").start_array();
        for item_681 in var_679 {
            {
                array_680.value().string(item_681.as_str());
            }
        }
        array_680.finish();
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_bot_message {
        object
            .key("CrawlBotMessage")
            .boolean(input.crawl_bot_message);
    }
    if input.exclude_archived {
        object
            .key("ExcludeArchived")
            .boolean(input.exclude_archived);
    }
    if let Some(var_682) = &input.since_crawl_date {
        object.key("SinceCrawlDate").string(var_682.as_str());
    }
    if let Some(var_683) = &input.look_back_period {
        object.key("LookBackPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_683).into()),
        );
    }
    if let Some(var_684) = &input.private_channel_filter {
        let mut array_685 = object.key("PrivateChannelFilter").start_array();
        for item_686 in var_684 {
            {
                array_685.value().string(item_686.as_str());
            }
        }
        array_685.finish();
    }
    if let Some(var_687) = &input.public_channel_filter {
        let mut array_688 = object.key("PublicChannelFilter").start_array();
        for item_689 in var_687 {
            {
                array_688.value().string(item_689.as_str());
            }
        }
        array_688.finish();
    }
    if let Some(var_690) = &input.inclusion_patterns {
        let mut array_691 = object.key("InclusionPatterns").start_array();
        for item_692 in var_690 {
            {
                array_691.value().string(item_692.as_str());
            }
        }
        array_691.finish();
    }
    if let Some(var_693) = &input.exclusion_patterns {
        let mut array_694 = object.key("ExclusionPatterns").start_array();
        for item_695 in var_693 {
            {
                array_694.value().string(item_695.as_str());
            }
        }
        array_694.finish();
    }
    if let Some(var_696) = &input.field_mappings {
        let mut array_697 = object.key("FieldMappings").start_array();
        for item_698 in var_696 {
            {
                let mut object_699 = array_697.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_699, item_698)?;
                object_699.finish();
            }
        }
        array_697.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_box_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BoxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.enterprise_id {
        object.key("EnterpriseId").string(var_700.as_str());
    }
    if let Some(var_701) = &input.secret_arn {
        object.key("SecretArn").string(var_701.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.crawl_tasks {
        object.key("CrawlTasks").boolean(input.crawl_tasks);
    }
    if input.crawl_web_links {
        object.key("CrawlWebLinks").boolean(input.crawl_web_links);
    }
    if let Some(var_702) = &input.file_field_mappings {
        let mut array_703 = object.key("FileFieldMappings").start_array();
        for item_704 in var_702 {
            {
                let mut object_705 = array_703.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_705, item_704)?;
                object_705.finish();
            }
        }
        array_703.finish();
    }
    if let Some(var_706) = &input.task_field_mappings {
        let mut array_707 = object.key("TaskFieldMappings").start_array();
        for item_708 in var_706 {
            {
                let mut object_709 = array_707.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_709, item_708)?;
                object_709.finish();
            }
        }
        array_707.finish();
    }
    if let Some(var_710) = &input.comment_field_mappings {
        let mut array_711 = object.key("CommentFieldMappings").start_array();
        for item_712 in var_710 {
            {
                let mut object_713 = array_711.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_713, item_712)?;
                object_713.finish();
            }
        }
        array_711.finish();
    }
    if let Some(var_714) = &input.web_link_field_mappings {
        let mut array_715 = object.key("WebLinkFieldMappings").start_array();
        for item_716 in var_714 {
            {
                let mut object_717 = array_715.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_717, item_716)?;
                object_717.finish();
            }
        }
        array_715.finish();
    }
    if let Some(var_718) = &input.inclusion_patterns {
        let mut array_719 = object.key("InclusionPatterns").start_array();
        for item_720 in var_718 {
            {
                array_719.value().string(item_720.as_str());
            }
        }
        array_719.finish();
    }
    if let Some(var_721) = &input.exclusion_patterns {
        let mut array_722 = object.key("ExclusionPatterns").start_array();
        for item_723 in var_721 {
            {
                array_722.value().string(item_723.as_str());
            }
        }
        array_722.finish();
    }
    if let Some(var_724) = &input.vpc_configuration {
        let mut object_725 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_725,
            var_724,
        )?;
        object_725.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quip_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuipConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.domain {
        object.key("Domain").string(var_726.as_str());
    }
    if let Some(var_727) = &input.secret_arn {
        object.key("SecretArn").string(var_727.as_str());
    }
    if input.crawl_file_comments {
        object
            .key("CrawlFileComments")
            .boolean(input.crawl_file_comments);
    }
    if input.crawl_chat_rooms {
        object.key("CrawlChatRooms").boolean(input.crawl_chat_rooms);
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_728) = &input.folder_ids {
        let mut array_729 = object.key("FolderIds").start_array();
        for item_730 in var_728 {
            {
                array_729.value().string(item_730.as_str());
            }
        }
        array_729.finish();
    }
    if let Some(var_731) = &input.thread_field_mappings {
        let mut array_732 = object.key("ThreadFieldMappings").start_array();
        for item_733 in var_731 {
            {
                let mut object_734 = array_732.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_734, item_733)?;
                object_734.finish();
            }
        }
        array_732.finish();
    }
    if let Some(var_735) = &input.message_field_mappings {
        let mut array_736 = object.key("MessageFieldMappings").start_array();
        for item_737 in var_735 {
            {
                let mut object_738 = array_736.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_738, item_737)?;
                object_738.finish();
            }
        }
        array_736.finish();
    }
    if let Some(var_739) = &input.attachment_field_mappings {
        let mut array_740 = object.key("AttachmentFieldMappings").start_array();
        for item_741 in var_739 {
            {
                let mut object_742 = array_740.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_742, item_741)?;
                object_742.finish();
            }
        }
        array_740.finish();
    }
    if let Some(var_743) = &input.inclusion_patterns {
        let mut array_744 = object.key("InclusionPatterns").start_array();
        for item_745 in var_743 {
            {
                array_744.value().string(item_745.as_str());
            }
        }
        array_744.finish();
    }
    if let Some(var_746) = &input.exclusion_patterns {
        let mut array_747 = object.key("ExclusionPatterns").start_array();
        for item_748 in var_746 {
            {
                array_747.value().string(item_748.as_str());
            }
        }
        array_747.finish();
    }
    if let Some(var_749) = &input.vpc_configuration {
        let mut object_750 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_750,
            var_749,
        )?;
        object_750.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jira_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_751) = &input.jira_account_url {
        object.key("JiraAccountUrl").string(var_751.as_str());
    }
    if let Some(var_752) = &input.secret_arn {
        object.key("SecretArn").string(var_752.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_753) = &input.project {
        let mut array_754 = object.key("Project").start_array();
        for item_755 in var_753 {
            {
                array_754.value().string(item_755.as_str());
            }
        }
        array_754.finish();
    }
    if let Some(var_756) = &input.issue_type {
        let mut array_757 = object.key("IssueType").start_array();
        for item_758 in var_756 {
            {
                array_757.value().string(item_758.as_str());
            }
        }
        array_757.finish();
    }
    if let Some(var_759) = &input.status {
        let mut array_760 = object.key("Status").start_array();
        for item_761 in var_759 {
            {
                array_760.value().string(item_761.as_str());
            }
        }
        array_760.finish();
    }
    if let Some(var_762) = &input.issue_sub_entity_filter {
        let mut array_763 = object.key("IssueSubEntityFilter").start_array();
        for item_764 in var_762 {
            {
                array_763.value().string(item_764.as_str());
            }
        }
        array_763.finish();
    }
    if let Some(var_765) = &input.attachment_field_mappings {
        let mut array_766 = object.key("AttachmentFieldMappings").start_array();
        for item_767 in var_765 {
            {
                let mut object_768 = array_766.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_768, item_767)?;
                object_768.finish();
            }
        }
        array_766.finish();
    }
    if let Some(var_769) = &input.comment_field_mappings {
        let mut array_770 = object.key("CommentFieldMappings").start_array();
        for item_771 in var_769 {
            {
                let mut object_772 = array_770.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_772, item_771)?;
                object_772.finish();
            }
        }
        array_770.finish();
    }
    if let Some(var_773) = &input.issue_field_mappings {
        let mut array_774 = object.key("IssueFieldMappings").start_array();
        for item_775 in var_773 {
            {
                let mut object_776 = array_774.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_776, item_775)?;
                object_776.finish();
            }
        }
        array_774.finish();
    }
    if let Some(var_777) = &input.project_field_mappings {
        let mut array_778 = object.key("ProjectFieldMappings").start_array();
        for item_779 in var_777 {
            {
                let mut object_780 = array_778.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_780, item_779)?;
                object_780.finish();
            }
        }
        array_778.finish();
    }
    if let Some(var_781) = &input.work_log_field_mappings {
        let mut array_782 = object.key("WorkLogFieldMappings").start_array();
        for item_783 in var_781 {
            {
                let mut object_784 = array_782.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_784, item_783)?;
                object_784.finish();
            }
        }
        array_782.finish();
    }
    if let Some(var_785) = &input.inclusion_patterns {
        let mut array_786 = object.key("InclusionPatterns").start_array();
        for item_787 in var_785 {
            {
                array_786.value().string(item_787.as_str());
            }
        }
        array_786.finish();
    }
    if let Some(var_788) = &input.exclusion_patterns {
        let mut array_789 = object.key("ExclusionPatterns").start_array();
        for item_790 in var_788 {
            {
                array_789.value().string(item_790.as_str());
            }
        }
        array_789.finish();
    }
    if let Some(var_791) = &input.vpc_configuration {
        let mut object_792 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_792,
            var_791,
        )?;
        object_792.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_hub_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitHubConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_793) = &input.saa_s_configuration {
        let mut object_794 = object.key("SaaSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_saa_s_configuration(
            &mut object_794,
            var_793,
        )?;
        object_794.finish();
    }
    if let Some(var_795) = &input.on_premise_configuration {
        let mut object_796 = object.key("OnPremiseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_on_premise_configuration(
            &mut object_796,
            var_795,
        )?;
        object_796.finish();
    }
    if let Some(var_797) = &input.r#type {
        object.key("Type").string(var_797.as_str());
    }
    if let Some(var_798) = &input.secret_arn {
        object.key("SecretArn").string(var_798.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_799) = &input.git_hub_document_crawl_properties {
        let mut object_800 = object.key("GitHubDocumentCrawlProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_git_hub_document_crawl_properties(
            &mut object_800,
            var_799,
        )?;
        object_800.finish();
    }
    if let Some(var_801) = &input.repository_filter {
        let mut array_802 = object.key("RepositoryFilter").start_array();
        for item_803 in var_801 {
            {
                array_802.value().string(item_803.as_str());
            }
        }
        array_802.finish();
    }
    if let Some(var_804) = &input.inclusion_folder_name_patterns {
        let mut array_805 = object.key("InclusionFolderNamePatterns").start_array();
        for item_806 in var_804 {
            {
                array_805.value().string(item_806.as_str());
            }
        }
        array_805.finish();
    }
    if let Some(var_807) = &input.inclusion_file_type_patterns {
        let mut array_808 = object.key("InclusionFileTypePatterns").start_array();
        for item_809 in var_807 {
            {
                array_808.value().string(item_809.as_str());
            }
        }
        array_808.finish();
    }
    if let Some(var_810) = &input.inclusion_file_name_patterns {
        let mut array_811 = object.key("InclusionFileNamePatterns").start_array();
        for item_812 in var_810 {
            {
                array_811.value().string(item_812.as_str());
            }
        }
        array_811.finish();
    }
    if let Some(var_813) = &input.exclusion_folder_name_patterns {
        let mut array_814 = object.key("ExclusionFolderNamePatterns").start_array();
        for item_815 in var_813 {
            {
                array_814.value().string(item_815.as_str());
            }
        }
        array_814.finish();
    }
    if let Some(var_816) = &input.exclusion_file_type_patterns {
        let mut array_817 = object.key("ExclusionFileTypePatterns").start_array();
        for item_818 in var_816 {
            {
                array_817.value().string(item_818.as_str());
            }
        }
        array_817.finish();
    }
    if let Some(var_819) = &input.exclusion_file_name_patterns {
        let mut array_820 = object.key("ExclusionFileNamePatterns").start_array();
        for item_821 in var_819 {
            {
                array_820.value().string(item_821.as_str());
            }
        }
        array_820.finish();
    }
    if let Some(var_822) = &input.vpc_configuration {
        let mut object_823 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_823,
            var_822,
        )?;
        object_823.finish();
    }
    if let Some(var_824) = &input.git_hub_repository_configuration_field_mappings {
        let mut array_825 = object
            .key("GitHubRepositoryConfigurationFieldMappings")
            .start_array();
        for item_826 in var_824 {
            {
                let mut object_827 = array_825.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_827, item_826)?;
                object_827.finish();
            }
        }
        array_825.finish();
    }
    if let Some(var_828) = &input.git_hub_commit_configuration_field_mappings {
        let mut array_829 = object
            .key("GitHubCommitConfigurationFieldMappings")
            .start_array();
        for item_830 in var_828 {
            {
                let mut object_831 = array_829.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_831, item_830)?;
                object_831.finish();
            }
        }
        array_829.finish();
    }
    if let Some(var_832) = &input.git_hub_issue_document_configuration_field_mappings {
        let mut array_833 = object
            .key("GitHubIssueDocumentConfigurationFieldMappings")
            .start_array();
        for item_834 in var_832 {
            {
                let mut object_835 = array_833.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_835, item_834)?;
                object_835.finish();
            }
        }
        array_833.finish();
    }
    if let Some(var_836) = &input.git_hub_issue_comment_configuration_field_mappings {
        let mut array_837 = object
            .key("GitHubIssueCommentConfigurationFieldMappings")
            .start_array();
        for item_838 in var_836 {
            {
                let mut object_839 = array_837.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_839, item_838)?;
                object_839.finish();
            }
        }
        array_837.finish();
    }
    if let Some(var_840) = &input.git_hub_issue_attachment_configuration_field_mappings {
        let mut array_841 = object
            .key("GitHubIssueAttachmentConfigurationFieldMappings")
            .start_array();
        for item_842 in var_840 {
            {
                let mut object_843 = array_841.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_843, item_842)?;
                object_843.finish();
            }
        }
        array_841.finish();
    }
    if let Some(var_844) = &input.git_hub_pull_request_comment_configuration_field_mappings {
        let mut array_845 = object
            .key("GitHubPullRequestCommentConfigurationFieldMappings")
            .start_array();
        for item_846 in var_844 {
            {
                let mut object_847 = array_845.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_847, item_846)?;
                object_847.finish();
            }
        }
        array_845.finish();
    }
    if let Some(var_848) = &input.git_hub_pull_request_document_configuration_field_mappings {
        let mut array_849 = object
            .key("GitHubPullRequestDocumentConfigurationFieldMappings")
            .start_array();
        for item_850 in var_848 {
            {
                let mut object_851 = array_849.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_851, item_850)?;
                object_851.finish();
            }
        }
        array_849.finish();
    }
    if let Some(var_852) =
        &input.git_hub_pull_request_document_attachment_configuration_field_mappings
    {
        let mut array_853 = object
            .key("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings")
            .start_array();
        for item_854 in var_852 {
            {
                let mut object_855 = array_853.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_855, item_854)?;
                object_855.finish();
            }
        }
        array_853.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alfresco_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlfrescoConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_856) = &input.site_url {
        object.key("SiteUrl").string(var_856.as_str());
    }
    if let Some(var_857) = &input.site_id {
        object.key("SiteId").string(var_857.as_str());
    }
    if let Some(var_858) = &input.secret_arn {
        object.key("SecretArn").string(var_858.as_str());
    }
    if let Some(var_859) = &input.ssl_certificate_s3_path {
        let mut object_860 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_860, var_859)?;
        object_860.finish();
    }
    if input.crawl_system_folders {
        object
            .key("CrawlSystemFolders")
            .boolean(input.crawl_system_folders);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if let Some(var_861) = &input.entity_filter {
        let mut array_862 = object.key("EntityFilter").start_array();
        for item_863 in var_861 {
            {
                array_862.value().string(item_863.as_str());
            }
        }
        array_862.finish();
    }
    if let Some(var_864) = &input.document_library_field_mappings {
        let mut array_865 = object.key("DocumentLibraryFieldMappings").start_array();
        for item_866 in var_864 {
            {
                let mut object_867 = array_865.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_867, item_866)?;
                object_867.finish();
            }
        }
        array_865.finish();
    }
    if let Some(var_868) = &input.blog_field_mappings {
        let mut array_869 = object.key("BlogFieldMappings").start_array();
        for item_870 in var_868 {
            {
                let mut object_871 = array_869.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_871, item_870)?;
                object_871.finish();
            }
        }
        array_869.finish();
    }
    if let Some(var_872) = &input.wiki_field_mappings {
        let mut array_873 = object.key("WikiFieldMappings").start_array();
        for item_874 in var_872 {
            {
                let mut object_875 = array_873.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_875, item_874)?;
                object_875.finish();
            }
        }
        array_873.finish();
    }
    if let Some(var_876) = &input.inclusion_patterns {
        let mut array_877 = object.key("InclusionPatterns").start_array();
        for item_878 in var_876 {
            {
                array_877.value().string(item_878.as_str());
            }
        }
        array_877.finish();
    }
    if let Some(var_879) = &input.exclusion_patterns {
        let mut array_880 = object.key("ExclusionPatterns").start_array();
        for item_881 in var_879 {
            {
                array_880.value().string(item_881.as_str());
            }
        }
        array_880.finish();
    }
    if let Some(var_882) = &input.vpc_configuration {
        let mut object_883 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_883,
            var_882,
        )?;
        object_883.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_884) = &input.data_source_ids {
        let mut array_885 = object.key("DataSourceIds").start_array();
        for item_886 in var_884 {
            {
                array_885.value().string(item_886.as_str());
            }
        }
        array_885.finish();
    }
    if let Some(var_887) = &input.faq_ids {
        let mut array_888 = object.key("FaqIds").start_array();
        for item_889 in var_887 {
            {
                array_888.value().string(item_889.as_str());
            }
        }
        array_888.finish();
    }
    if input.direct_put_content {
        object
            .key("DirectPutContent")
            .boolean(input.direct_put_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_890) = &input.identity_attribute_name {
        object.key("IdentityAttributeName").string(var_890.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_891) = &input.key_location {
        object.key("KeyLocation").string(var_891.as_str());
    }
    if let Some(var_892) = &input.url {
        object.key("URL").string(var_892.as_str());
    }
    if let Some(var_893) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_893.as_str());
    }
    if let Some(var_894) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_894.as_str());
    }
    if let Some(var_895) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_895.as_str());
    }
    if let Some(var_896) = &input.issuer {
        object.key("Issuer").string(var_896.as_str());
    }
    if let Some(var_897) = &input.claim_regex {
        object.key("ClaimRegex").string(var_897.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_898) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_898.as_str());
    }
    if let Some(var_899) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_899.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_900) = &input.group_id {
        object.key("GroupId").string(var_900.as_str());
    }
    if let Some(var_901) = &input.data_source_id {
        object.key("DataSourceId").string(var_901.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_902) = &input.user_id {
        object.key("UserId").string(var_902.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_903) = &input.freshness {
        object.key("Freshness").boolean(*var_903);
    }
    if let Some(var_904) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_904).into()),
        );
    }
    if let Some(var_905) = &input.duration {
        object.key("Duration").string(var_905.as_str());
    }
    if let Some(var_906) = &input.rank_order {
        object.key("RankOrder").string(var_906.as_str());
    }
    if let Some(var_907) = &input.value_importance_map {
        let mut object_908 = object.key("ValueImportanceMap").start_object();
        for (key_909, value_910) in var_907 {
            {
                object_908.key(key_909).number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*value_910).into()),
                );
            }
        }
        object_908.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_911) = &input.group_id {
        object.key("GroupId").string(var_911.as_str());
    }
    if let Some(var_912) = &input.data_source_id {
        object.key("DataSourceId").string(var_912.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_913) = &input.string_value {
        object.key("StringValue").string(var_913.as_str());
    }
    if let Some(var_914) = &input.string_list_value {
        let mut array_915 = object.key("StringListValue").start_array();
        for item_916 in var_914 {
            {
                array_915.value().string(item_916.as_str());
            }
        }
        array_915.finish();
    }
    if let Some(var_917) = &input.long_value {
        object.key("LongValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_917).into()),
        );
    }
    if let Some(var_918) = &input.date_value {
        object
            .key("DateValue")
            .date_time(var_918, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_919) = &input.condition_document_attribute_key {
        object
            .key("ConditionDocumentAttributeKey")
            .string(var_919.as_str());
    }
    if let Some(var_920) = &input.operator {
        object.key("Operator").string(var_920.as_str());
    }
    if let Some(var_921) = &input.condition_on_value {
        let mut object_922 = object.key("ConditionOnValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_922,
            var_921,
        )?;
        object_922.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_923) = &input.target_document_attribute_key {
        object
            .key("TargetDocumentAttributeKey")
            .string(var_923.as_str());
    }
    if input.target_document_attribute_value_deletion {
        object
            .key("TargetDocumentAttributeValueDeletion")
            .boolean(input.target_document_attribute_value_deletion);
    }
    if let Some(var_924) = &input.target_document_attribute_value {
        let mut object_925 = object.key("TargetDocumentAttributeValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_925,
            var_924,
        )?;
        object_925.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_926) = &input.s3_prefix {
        object.key("S3Prefix").string(var_926.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_927) = &input.key_path {
        object.key("KeyPath").string(var_927.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_928) = &input.subnet_ids {
        let mut array_929 = object.key("SubnetIds").start_array();
        for item_930 in var_928 {
            {
                array_929.value().string(item_930.as_str());
            }
        }
        array_929.finish();
    }
    if let Some(var_931) = &input.security_group_ids {
        let mut array_932 = object.key("SecurityGroupIds").start_array();
        for item_933 in var_931 {
            {
                array_932.value().string(item_933.as_str());
            }
        }
        array_932.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_934) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_934.as_str());
    }
    if let Some(var_935) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_935.as_str());
    }
    if let Some(var_936) = &input.index_field_name {
        object.key("IndexFieldName").string(var_936.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_937) = &input.database_host {
        object.key("DatabaseHost").string(var_937.as_str());
    }
    if let Some(var_938) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_938).into()),
        );
    }
    if let Some(var_939) = &input.database_name {
        object.key("DatabaseName").string(var_939.as_str());
    }
    if let Some(var_940) = &input.table_name {
        object.key("TableName").string(var_940.as_str());
    }
    if let Some(var_941) = &input.secret_arn {
        object.key("SecretArn").string(var_941.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_942) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_942.as_str());
    }
    if let Some(var_943) = &input.document_data_column_name {
        object
            .key("DocumentDataColumnName")
            .string(var_943.as_str());
    }
    if let Some(var_944) = &input.document_title_column_name {
        object
            .key("DocumentTitleColumnName")
            .string(var_944.as_str());
    }
    if let Some(var_945) = &input.field_mappings {
        let mut array_946 = object.key("FieldMappings").start_array();
        for item_947 in var_945 {
            {
                let mut object_948 = array_946.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_948, item_947)?;
                object_948.finish();
            }
        }
        array_946.finish();
    }
    if let Some(var_949) = &input.change_detecting_columns {
        let mut array_950 = object.key("ChangeDetectingColumns").start_array();
        for item_951 in var_949 {
            {
                array_950.value().string(item_951.as_str());
            }
        }
        array_950.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_952) = &input.allowed_groups_column_name {
        object
            .key("AllowedGroupsColumnName")
            .string(var_952.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_953) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_953.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_954) = &input.name {
        object.key("Name").string(var_954.as_str());
    }
    if let Some(var_955) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_955.as_str());
    }
    if let Some(var_956) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_956.as_str());
    }
    if let Some(var_957) = &input.field_mappings {
        let mut array_958 = object.key("FieldMappings").start_array();
        for item_959 in var_957 {
            {
                let mut object_960 = array_958.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_960, item_959)?;
                object_960.finish();
            }
        }
        array_958.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_961) = &input.included_states {
        let mut array_962 = object.key("IncludedStates").start_array();
        for item_963 in var_961 {
            {
                array_962.value().string(item_963.as_str());
            }
        }
        array_962.finish();
    }
    if let Some(var_964) = &input.standard_knowledge_article_type_configuration {
        let mut object_965 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_965, var_964)?;
        object_965.finish();
    }
    if let Some(var_966) = &input.custom_knowledge_article_type_configurations {
        let mut array_967 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_968 in var_966 {
            {
                let mut object_969 = array_967.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_969, item_968)?;
                object_969.finish();
            }
        }
        array_967.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_970) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_970.as_str());
    }
    if let Some(var_971) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_971.as_str());
    }
    if let Some(var_972) = &input.field_mappings {
        let mut array_973 = object.key("FieldMappings").start_array();
        for item_974 in var_972 {
            {
                let mut object_975 = array_973.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_975, item_974)?;
                object_975.finish();
            }
        }
        array_973.finish();
    }
    if let Some(var_976) = &input.include_filter_types {
        let mut array_977 = object.key("IncludeFilterTypes").start_array();
        for item_978 in var_976 {
            {
                array_977.value().string(item_978.as_str());
            }
        }
        array_977.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_979) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_979.as_str());
    }
    if let Some(var_980) = &input.field_mappings {
        let mut array_981 = object.key("FieldMappings").start_array();
        for item_982 in var_980 {
            {
                let mut object_983 = array_981.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_983, item_982)?;
                object_983.finish();
            }
        }
        array_981.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_984) = &input.one_drive_user_list {
        let mut array_985 = object.key("OneDriveUserList").start_array();
        for item_986 in var_984 {
            {
                array_985.value().string(item_986.as_str());
            }
        }
        array_985.finish();
    }
    if let Some(var_987) = &input.one_drive_user_s3_path {
        let mut object_988 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_988, var_987)?;
        object_988.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_989) = &input.include_attachment_file_patterns {
        let mut array_990 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_991 in var_989 {
            {
                array_990.value().string(item_991.as_str());
            }
        }
        array_990.finish();
    }
    if let Some(var_992) = &input.exclude_attachment_file_patterns {
        let mut array_993 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_994 in var_992 {
            {
                array_993.value().string(item_994.as_str());
            }
        }
        array_993.finish();
    }
    if let Some(var_995) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_995.as_str());
    }
    if let Some(var_996) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_996.as_str());
    }
    if let Some(var_997) = &input.field_mappings {
        let mut array_998 = object.key("FieldMappings").start_array();
        for item_999 in var_997 {
            {
                let mut object_1000 = array_998.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1000, item_999)?;
                object_1000.finish();
            }
        }
        array_998.finish();
    }
    if let Some(var_1001) = &input.filter_query {
        object.key("FilterQuery").string(var_1001.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_1002) = &input.include_attachment_file_patterns {
        let mut array_1003 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_1004 in var_1002 {
            {
                array_1003.value().string(item_1004.as_str());
            }
        }
        array_1003.finish();
    }
    if let Some(var_1005) = &input.exclude_attachment_file_patterns {
        let mut array_1006 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_1007 in var_1005 {
            {
                array_1006.value().string(item_1007.as_str());
            }
        }
        array_1006.finish();
    }
    if let Some(var_1008) = &input.document_data_field_name {
        object
            .key("DocumentDataFieldName")
            .string(var_1008.as_str());
    }
    if let Some(var_1009) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.field_mappings {
        let mut array_1011 = object.key("FieldMappings").start_array();
        for item_1012 in var_1010 {
            {
                let mut object_1013 = array_1011.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1013, item_1012)?;
                object_1013.finish();
            }
        }
        array_1011.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_1014) = &input.include_spaces {
        let mut array_1015 = object.key("IncludeSpaces").start_array();
        for item_1016 in var_1014 {
            {
                array_1015.value().string(item_1016.as_str());
            }
        }
        array_1015.finish();
    }
    if let Some(var_1017) = &input.exclude_spaces {
        let mut array_1018 = object.key("ExcludeSpaces").start_array();
        for item_1019 in var_1017 {
            {
                array_1018.value().string(item_1019.as_str());
            }
        }
        array_1018.finish();
    }
    if let Some(var_1020) = &input.space_field_mappings {
        let mut array_1021 = object.key("SpaceFieldMappings").start_array();
        for item_1022 in var_1020 {
            {
                let mut object_1023 = array_1021.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_1023, item_1022)?;
                object_1023.finish();
            }
        }
        array_1021.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1024) = &input.page_field_mappings {
        let mut array_1025 = object.key("PageFieldMappings").start_array();
        for item_1026 in var_1024 {
            {
                let mut object_1027 = array_1025.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_1027, item_1026)?;
                object_1027.finish();
            }
        }
        array_1025.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1028) = &input.blog_field_mappings {
        let mut array_1029 = object.key("BlogFieldMappings").start_array();
        for item_1030 in var_1028 {
            {
                let mut object_1031 = array_1029.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_1031, item_1030)?;
                object_1031.finish();
            }
        }
        array_1029.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_1032) = &input.attachment_field_mappings {
        let mut array_1033 = object.key("AttachmentFieldMappings").start_array();
        for item_1034 in var_1032 {
            {
                let mut object_1035 = array_1033.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_1035, item_1034)?;
                object_1035.finish();
            }
        }
        array_1033.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_urls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1036) = &input.seed_url_configuration {
        let mut object_1037 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_1037,
            var_1036,
        )?;
        object_1037.finish();
    }
    if let Some(var_1038) = &input.site_maps_configuration {
        let mut object_1039 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_1039,
            var_1038,
        )?;
        object_1039.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1040) = &input.host {
        object.key("Host").string(var_1040.as_str());
    }
    if let Some(var_1041) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1041).into()),
        );
    }
    if let Some(var_1042) = &input.credentials {
        object.key("Credentials").string(var_1042.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1043) = &input.basic_authentication {
        let mut array_1044 = object.key("BasicAuthentication").start_array();
        for item_1045 in var_1043 {
            {
                let mut object_1046 = array_1044.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(&mut object_1046, item_1045)?;
                object_1046.finish();
            }
        }
        array_1044.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_saa_s_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SaaSConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1047) = &input.organization_name {
        object.key("OrganizationName").string(var_1047.as_str());
    }
    if let Some(var_1048) = &input.host_url {
        object.key("HostUrl").string(var_1048.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_premise_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnPremiseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1049) = &input.host_url {
        object.key("HostUrl").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.organization_name {
        object.key("OrganizationName").string(var_1050.as_str());
    }
    if let Some(var_1051) = &input.ssl_certificate_s3_path {
        let mut object_1052 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_1052, var_1051)?;
        object_1052.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_hub_document_crawl_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitHubDocumentCrawlProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_repository_documents {
        object
            .key("CrawlRepositoryDocuments")
            .boolean(input.crawl_repository_documents);
    }
    if input.crawl_issue {
        object.key("CrawlIssue").boolean(input.crawl_issue);
    }
    if input.crawl_issue_comment {
        object
            .key("CrawlIssueComment")
            .boolean(input.crawl_issue_comment);
    }
    if input.crawl_issue_comment_attachment {
        object
            .key("CrawlIssueCommentAttachment")
            .boolean(input.crawl_issue_comment_attachment);
    }
    if input.crawl_pull_request {
        object
            .key("CrawlPullRequest")
            .boolean(input.crawl_pull_request);
    }
    if input.crawl_pull_request_comment {
        object
            .key("CrawlPullRequestComment")
            .boolean(input.crawl_pull_request_comment);
    }
    if input.crawl_pull_request_comment_attachment {
        object
            .key("CrawlPullRequestCommentAttachment")
            .boolean(input.crawl_pull_request_comment_attachment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1053) = &input.document_data_field_name {
        object
            .key("DocumentDataFieldName")
            .string(var_1053.as_str());
    }
    if let Some(var_1054) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.field_mappings {
        let mut array_1056 = object.key("FieldMappings").start_array();
        for item_1057 in var_1055 {
            {
                let mut object_1058 = array_1056.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1058, item_1057)?;
                object_1058.finish();
            }
        }
        array_1056.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1059) = &input.name {
        object.key("Name").string(var_1059.as_str());
    }
    if let Some(var_1060) = &input.document_data_field_name {
        object
            .key("DocumentDataFieldName")
            .string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.field_mappings {
        let mut array_1063 = object.key("FieldMappings").start_array();
        for item_1064 in var_1062 {
            {
                let mut object_1065 = array_1063.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1065, item_1064)?;
                object_1065.finish();
            }
        }
        array_1063.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1066) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1068.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1069) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1069.as_str());
    }
    if let Some(var_1070) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1070.as_str());
    }
    if let Some(var_1071) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1071.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1072) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1072.as_str());
    }
    if let Some(var_1073) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1074.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1075) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1077.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1078) = &input.seed_urls {
        let mut array_1079 = object.key("SeedUrls").start_array();
        for item_1080 in var_1078 {
            {
                array_1079.value().string(item_1080.as_str());
            }
        }
        array_1079.finish();
    }
    if let Some(var_1081) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_1081.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1082) = &input.site_maps {
        let mut array_1083 = object.key("SiteMaps").start_array();
        for item_1084 in var_1082 {
            {
                array_1083.value().string(item_1084.as_str());
            }
        }
        array_1083.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1085) = &input.host {
        object.key("Host").string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1086).into()),
        );
    }
    if let Some(var_1087) = &input.credentials {
        object.key("Credentials").string(var_1087.as_str());
    }
    Ok(())
}
